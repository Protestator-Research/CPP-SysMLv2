
// Generated from SysMLv2.g4 by ANTLR 4.13.2


#include "SysMLv2Listener.h"

#include "SysMLv2Parser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct SysMLv2ParserStaticData final {
  SysMLv2ParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  SysMLv2ParserStaticData(const SysMLv2ParserStaticData&) = delete;
  SysMLv2ParserStaticData(SysMLv2ParserStaticData&&) = delete;
  SysMLv2ParserStaticData& operator=(const SysMLv2ParserStaticData&) = delete;
  SysMLv2ParserStaticData& operator=(SysMLv2ParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag sysmlv2ParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
std::unique_ptr<SysMLv2ParserStaticData> sysmlv2ParserStaticData = nullptr;

void sysmlv2ParserInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (sysmlv2ParserStaticData != nullptr) {
    return;
  }
#else
  assert(sysmlv2ParserStaticData == nullptr);
#endif
  auto staticData = std::make_unique<SysMLv2ParserStaticData>(
    std::vector<std::string>{
      "start", "start_element", "startRule", "relationship_body", "dependency", 
      "dependency_declaration", "annotation", "owned_annotation", "annotating_member", 
      "annotating_element", "comment", "documentation", "textual_representation", 
      "root_namespace", "package", "package_body", "package_body_element", 
      "package_member", "alias_member", "definition_element", "usage_element", 
      "basic_definition_prefix", "definition_extension_keyword", "definition_prefix", 
      "definition", "definition_declaration", "definition_body", "definition_body_item", 
      "definition_member", "variant_usage_member", "non_occurrence_usage_member", 
      "occurrence_usage_member", "structure_usage_member", "behavior_usage_member", 
      "feature_direction", "ref_prefix", "basic_usage_prefix", "end_usage_prefix", 
      "owned_cross_feature_member", "owned_cross_feature", "usage_extention_keyword", 
      "unextended_usage_prefix", "usage_prefix", "usage", "usage_declaration", 
      "usage_completion", "usage_body", "default_reference_usage", "reference_usage", 
      "variant_reference", "non_occurrence_usage_element", "occurrence_usage_element", 
      "structure_usage_element", "behavior_usage_element", "variant_usage_element", 
      "subsclassification_part", "crosses", "owned_cross_subsetting", "multiplicity_part", 
      "owned_multiplicity", "multiplicity_range", "attribute_definition", 
      "attribute_usage", "enumeration_definition", "enumeration_body", "enumeration_usage_member", 
      "enumerated_value", "enumeration_usage", "occurrence_definition_prefix", 
      "occurrence_definition", "individual_definition", "occurrence_usage_prefix", 
      "occurrence_usage", "individual_usage", "portion_usage", "portion_kind", 
      "event_occurrence_usage", "source_succession_member", "souce_succession", 
      "source_end_member", "source_end", "item_definition", "item_usage", 
      "part_definition", "part_usage", "port_definition", "port_usage", 
      "conjungated_port_typing", "connection_definition", "connection_usage", 
      "connector_part", "binary_connector_part", "nary_connector_part", 
      "connector_end_member", "connecotr_end", "owned_cross_multiplicity_member", 
      "owned_cross_multiplicity", "binding_connector_as_usage", "succession_as_usage", 
      "interface_definition", "interface_body", "interface_body_item", "interface_non_occurrence_usage_member", 
      "interface_non_occurrence_usage_element", "interface_occurrence_usage_member", 
      "interface_occurrence_usage_element", "default_interface_end", "interface_usage", 
      "interface_usage_declaration", "interface_part", "binary_interface_part", 
      "nary_interface_part", "interface_end_member", "interface_end", "allocation_definition", 
      "allocation_usage", "allocation_usage_declaration", "flow_definition", 
      "message", "message_declaration", "message_event_member", "message_event", 
      "flow_usage", "succession_flow_usage", "flow_declaration", "flow_payload_feature_member", 
      "flow_payload_feature", "payload_feature", "payload_feature_specialization_part", 
      "flow_end_member", "flow_end", "flow_end_subsetting", "feature_chain_prefix", 
      "flow_feature_member", "flow_feature", "flow_feature_redefinition", 
      "action_definition", "action_body", "action_body_item", "non_behavior_body_item", 
      "action_behavior_member", "initial_node_member", "action_node_member", 
      "action_target_succession_member", "guarded_succession_member", "action_usage", 
      "action_usage_declaration", "perform_action_usage", "perform_action_usage_declaration", 
      "action_node", "action_node_usage_declaration", "action_node_prefix", 
      "control_node", "control_node_prefix", "merge_node", "decision_node", 
      "join_node", "fork_node", "accept_node", "accept_node_declaration", 
      "accept_parameter_part", "payload_parameter_member", "payload_parameter", 
      "trigger_value_part", "trigger_expression", "send_node", "send_node_declaration", 
      "sender_receiver_part", "node_parameter_member", "node_parameter", 
      "feature_binding", "assignment_node", "assignment_node_declaration", 
      "assignment_target_member", "assignment_target_parameter", "assignment_target_binding", 
      "feature_chain_member", "owned_feature_chain_member", "terminate_node", 
      "if_node", "expression_parameter_member", "action_body_parameter_member", 
      "action_body_parameter", "if_node_parameter_member", "while_loop_node", 
      "for_loop_node", "for_variable_declaration_member", "for_variable_declaration", 
      "action_target_succession", "target_succession", "guarded_target_succession", 
      "default_target_succession", "guarded_succession", "state_definition", 
      "state_def_body", "state_body_item", "entry_action_member", "do_action_member", 
      "exit_action_member", "entry_transition_member", "state_action_usage", 
      "empty_action_usage", "state_perform_action_uage", "state_accept_action_usage", 
      "state_send_action_usage", "state_assignment_action_usage", "transition_usage_member", 
      "target_transition_usage_member", "state_usage", "state_usage_body", 
      "exhibit_state_usage", "transition_usage", "target_transition_usage", 
      "trigger_action_member", "trigger_action", "guard_expression_member", 
      "effect_behavior_member", "effect_behavior_usage", "transition_perform_action_usage", 
      "transition_accept_action_usage", "transition_send_action_usage", 
      "transition_assignment_action_usage", "transition_succession_member", 
      "transition_succession", "calculation_definition", "calculation_usage", 
      "calculation_body", "calculation_body_part", "calculation_body_item", 
      "return_parameter_member", "result_expression_member", "constraint_definition", 
      "constraint_usage", "assert_constriant_usage", "constraint_usage_declaration", 
      "requirement_definition", "requirement_body", "requirement_body_item", 
      "subject_member", "subject_usage", "requirement_constraint_member", 
      "requriement_kind", "requirement_constraint_usage", "framed_concern_member", 
      "framed_concern_usage", "actor_member", "actor_usage", "stakeholder_member", 
      "stakeholder_usage", "requirement_usage", "satisfy_requirement_usage", 
      "satisfaction_subject_member", "satisfaction_parameter", "satisfaction_feature_value", 
      "satisfaction_reference_expression", "concern_definition", "concern_usage", 
      "case_definition", "case_usage", "case_body", "case_body_item", "objective_member", 
      "objective_requirement_usage", "analysis_case_definition", "analysis_case_usage", 
      "verification_case_definition", "verification_case_usage", "requirement_verification_member", 
      "requirement_verification_usage", "use_case_definition", "use_case_usage", 
      "include_use_case_usage", "view_definition", "view_definition_body", 
      "view_definition_body_item", "view_rendering_member", "view_rendering_usage", 
      "view_usage", "view_body", "view_body_item", "expose", "membership_expose", 
      "namespace_expose", "viewpoint_definition", "viewpoint_usage", "rendering_definition", 
      "rendering_usage", "metadata_definition", "prefix_metadata_annotation", 
      "prefix_metadata_member", "prefix_metadata_usage", "metadata_usage", 
      "metadata_usage_declaration", "metadata_body", "metadata_body_usage_member", 
      "metadata_body_usage", "extended_definition", "extended_usage", "elements", 
      "identification", "relationship_onwed_elements", "relationship_owned_element", 
      "owned_related_element", "namespace", "namespace_declaration", "namespace_body", 
      "namespace_body_elements", "namespace_body_element", "member_prefix", 
      "visibility_indicator", "namespace_member", "non_feature_member", 
      "namespace_feature_member", "qualified_name", "namespace_import", 
      "import_declaration", "membership_import", "filter_package", "filter_package_member", 
      "element", "non_feature_element", "feature_element", "additional_options", 
      "type", "type_prefix", "type_declaration", "specialization_part", 
      "conjugation_part", "type_relationship_part", "disjoining_part", "unioning_part", 
      "intersecting_part", "differencing_part", "type_body", "type_body_elements", 
      "type_body_element", "specialization", "owned_specialization", "specific_type", 
      "general_type", "conjunction", "owned_conjugation", "disjoining", 
      "owned_disjoining", "unioning", "intersecting", "differencing", "feature_member", 
      "type_feature_member", "owned_feature_member", "classifier", "classifier_declaration", 
      "superclassing_part", "subclassification", "owned_subclassification", 
      "feature", "feature_prefix", "feature_declaration", "feature_identification", 
      "feature_relationship_part", "chaining_part", "inverting_part", "type_featuring_part", 
      "feature_specialization_part", "feature_specilization", "typings", 
      "typed_by", "subsettings", "subsets", "references", "redefinitions", 
      "redefines", "feature_typing", "owned_feature_typing", "subsetting", 
      "owned_subsetting", "owned_reference_subsetting", "redefinition", 
      "owned_redefinition", "owned_feature_chain", "feature_chain", "owned_feature_chaining", 
      "feature_inverting", "owned_feature_inverting", "type_featuring", 
      "owned_type_featuring", "data_type", "class", "structure", "association", 
      "association_structure", "connector", "connector_declaration", "binary_connector_declaration", 
      "nary_connector_declaration", "connector_end", "binding_connector", 
      "binding_connector_declaration", "succession", "succession_declaration", 
      "behavior", "step", "function", "function_body", "function_body_part", 
      "return_feature_member", "expression", "predicate", "boolean_expression", 
      "invariant", "owned_expression_reference_member", "owned_expression_reference", 
      "owned_expression_member", "owned_expressions", "owned_expression", 
      "eased_owned_expression", "conditional_expression", "conditional_binary_operator_expression", 
      "conditional_binary_operator", "binary_operator_expression", "binary_operator", 
      "unary_operator_expression", "unary_operator", "classification_expression", 
      "classification", "classification_test_operator", "cast_operator", 
      "metaclassification_expression", "argument_member", "argument", "argument_value", 
      "argument_expression_member", "argument_expression", "argument_expression_value", 
      "metadata_argument_member", "metadata_argument", "metadata_value", 
      "metadata_reference", "metadataclassification_test_operator", "meta_cast_operator", 
      "extend_expression", "type_reference_member", "type_result_member", 
      "type_reference", "reference_typing", "primary_expressions", "primary_expression", 
      "primary_argument_value", "primary_argument", "primary_argument_member", 
      "non_feature_chain_primary_expression", "non_feature_chain_primary_argument_value", 
      "non_feature_chain_primary_argument", "non_feature_chain_primary_argument_member", 
      "bracket_expression", "index_expression", "sequence_expression", "sequence_expression_list", 
      "sequence_operator_expression", "sequence_expression_list_member", 
      "feature_chain_expression", "collect_expression", "select_expression", 
      "function_operation_expression", "body_argument_member", "body_argument", 
      "body_argument_value", "body_expression_member", "function_reference_argument_member", 
      "function_reference_argument", "function_reference_arugment_value", 
      "function_reference_expression", "function_reference_member", "function_reference", 
      "base_expression", "null_expression", "feature_reference_expression", 
      "feature_reference_member", "feature_reference", "metadata_access_expression", 
      "invocation_expression", "internal_invocation_expression", "argument_list", 
      "positional_argument_list", "named_argument_list", "named_argument_member", 
      "named_argument", "paramenter_redefinition", "body_expression", "expression_body_member", 
      "expression_body", "literal_expression", "literal_boolean", "boolean_value", 
      "literal_string", "literal_integer", "literal_real", "real_value", 
      "literal_infinity", "interaction", "item_flow", "succession_item_flow", 
      "item_flow_declaration", "item_feature_member", "item_feature", "item_feature_specilization_part", 
      "item_flow_end_member", "item_flow_end", "item_flow_feature_member", 
      "item_flow_feature", "item_flow_redefinition", "value_part", "feature_value", 
      "feature_assignment", "multiplicity", "multiplicity_subset", "owned_multiplicity_range", 
      "multiplicity_bounds", "multiplicity_expression_member", "internal_multiplicity_expression_member", 
      "metaclass", "prefix_metadata_feature", "metadata_feature", "metadata_feature_declaration", 
      "metadata_body_element", "metadata_body_feature_member", "metadata_body_feature", 
      "library_package", "package_declaration", "element_filter_member", 
      "meta_assignment"
    },
    std::vector<std::string>{
      "", "'meta'", "", "", "'accept'", "'action'", "'actor'", "'after'", 
      "'alias'", "'allocate'", "'allocation'", "'analysis'", "'assign'", 
      "'assert'", "'assume'", "'at'", "'attribute'", "'bind'", "'block'", 
      "'calc'", "'case'", "'concern'", "'connect'", "'connection'", "'constraint'", 
      "'crosses'", "'decide'", "'def'", "'defined'", "'derived'", "'do'", 
      "'entry'", "'enum'", "'event'", "'exhibit'", "'exit'", "'expose'", 
      "'fork'", "'frame'", "'guard'", "'include'", "'individual'", "'interface'", 
      "'item'", "'join'", "'loop'", "'merge'", "'message'", "'nonunique'", 
      "'objective'", "'occurrence'", "'parallel'", "'part'", "'perform'", 
      "'port'", "'ref'", "'references'", "'render'", "'rendering'", "'require'", 
      "'requirement'", "'satisfy'", "'send'", "'snapshot'", "'stakeholder'", 
      "'state'", "'subject'", "'terminate'", "'timeslice'", "'transition'", 
      "'trigger'", "'until'", "'use'", "'variant'", "'variation'", "'verification'", 
      "'verify'", "'via'", "'view'", "'viewpoint'", "'when'", "'while'", 
      "'=>'", "", "", "", "", "", "", "'about'", "'abstract'", "'all'", 
      "'and'", "'as'", "'assoc'", "'behavior'", "'binding'", "'bool'", "'by'", 
      "'chains'", "'class'", "'classifier'", "'comment'", "'composite'", 
      "'conjugate'", "'conjugates'", "'conjugation'", "'connector'", "'datatype'", 
      "'default'", "'dependency'", "'differences'", "'disjoining'", "'disjoint'", 
      "'doc'", "'else'", "'end'", "'expr'", "'false'", "'feature'", "'featured'", 
      "'featuring'", "'filter'", "'first'", "'flow'", "'for'", "'from'", 
      "'function'", "'hastype'", "'if'", "'intersects'", "'implies'", "'import'", 
      "'in'", "'inout'", "'interaction'", "'inv'", "'inverse'", "'inverting'", 
      "'istype'", "'language'", "'member'", "'metaclass'", "'metadata'", 
      "'multiplicity'", "'namespace'", "'not'", "'null'", "'of'", "'or'", 
      "'ordered'", "'out'", "'package'", "'potion'", "'predicate'", "'private'", 
      "'protected'", "'public'", "'readonly'", "'redefines'", "'redefinition'", 
      "'rep'", "'return'", "'specialization'", "'specializes'", "'step'", 
      "'struct'", "'subclassifier'", "'subset'", "'subsets'", "'subtype'", 
      "'succession'", "'then'", "'to'", "'true'", "'type'", "'typed'", "'typing'", 
      "'unions'", "'xor'", "'var'", "'locale'", "'standard'", "'library'", 
      "'constant'", "", "", "", "'/*'", "'//*'", "'*/'", "';'", "'*'", "'::'", 
      "':'", "':>'", "'::>'", "':>>'", "'~'", "'('", "')'", "'{'", "'}'", 
      "'['", "']'", "','", "'@'", "'#'", "'%'", "'&'", "'^'", "'|'", "'**'", 
      "'+'", "'-'", "'/'", "'->'", "'.'", "'..'", "'<'", "'<='", "'='", 
      "':='", "'=='", "'==='", "'!='", "'!=='", "'>'", "'>='", "'\\u003F'", 
      "'\\u003F\\u003F'", "'.\\u003F'"
    },
    std::vector<std::string>{
      "", "", "DEFINED_BY", "CROSSES", "KEYWORD_ACCEPT", "KEYWORD_ACTION", 
      "KEYWORD_ACTOR", "KEYWORD_AFTER", "KEYWORD_ALIAS", "KEYWORD_ALLOCATE", 
      "KEYWORD_ALLOCATION", "KEYWORD_ANALYSIS", "KEYWORD_ASSIGN", "KEYWORD_ASSERT", 
      "KEYWORD_ASSUME", "KEYWORD_AT", "KEYWORD_ATTRIBUTE", "KEYWORD_BIND", 
      "KEYWORD_BLOCK", "KEYWORD_CALC", "KEYWORD_CASE", "KEYWORD_CONCERN", 
      "KEYWORD_CONNECT", "KEYWORD_CONNECTION", "KEYWORD_CONSTRAINT", "KEYWORD_CROSSES", 
      "KEYWORD_DECIDE", "KEYWORD_DEF", "KEYWORD_DEFINED", "KEYWORD_DERIVED", 
      "KEYWORD_DO", "KEYWORD_ENTRY", "KEYWORD_ENUM", "KEYWORD_EVENT", "KEYWORD_EXHIBIT", 
      "KEYWORD_EXIT", "KEYWORD_EXPOSE", "KEYWORD_FORK", "KEYWORD_FRAME", 
      "KEYWORD_GUARD", "KEYWORD_INCLUDE", "KEYWORD_INDIVIDIAL", "KEYWORD_INTERFACE", 
      "KEYWORD_ITEM", "KEYWORD_JOIN", "KEYWORD_LOOP", "KEYWORD_MERGE", "KEYWORD_MESSAGE", 
      "KEYWORD_NONUNIQUE", "KEYWORD_OBJECTIVE", "KEYWORD_OCCURRENCE", "KEYWORD_PARALLEL", 
      "KEYWORD_PART", "KEYWORD_PERFORM", "KEYWORD_PORT", "KEYWORD_REF", 
      "KEYWORD_REFERENCES", "KEYWORD_RENDER", "KEYWORD_RENDERING", "KEYWORD_REQUIRE", 
      "KEYWORD_REQUIREMENT", "KEYWORD_SATISFY", "KEYWORD_SEND", "KEYWORD_SNAPSHOT", 
      "KEYWORD_STAKEHOLDER", "KEYWORD_STATE", "KEYWORD_SUBJECT", "KEYWORD_TERMINATE", 
      "KEYWORD_TIMESLICE", "KEYWORD_TRANSISTION", "KEYWORD_TRIGGER", "KEYWORD_UNTIL", 
      "KEYWORD_USE", "KEYWORD_VARIANT", "KEYWORD_VARIATION", "KEYWORD_VERIFICATION", 
      "KEYWORD_VERIFY", "KEYWORD_VIA", "KEYWORD_VIEW", "KEYWORD_VIEWPOINT", 
      "KEYWORD_WHEN", "KEYWORD_WHILE", "SYMBOL_CROSSES", "TYPED_BY", "SPECIALIZES", 
      "SUBSETS", "REFERENCES", "REDEFINES", "CONJUNGATES", "KEYWORD_ABOUT", 
      "KEYWORD_ABSTRACT", "KEYWORD_ALL", "KEYWORD_AND", "KEYWORD_AS", "KEYWORD_ASSOC", 
      "KEYWORD_BEHAVIOR", "KEYWORD_BINDING", "KEYWORD_BOOL", "KEYWORD_BY", 
      "KEYWORD_CHAINS", "KEYWORD_CLASS", "KEYWORD_CLASSIFIER", "KEYWORD_COMMENT", 
      "KEYWORD_COMPOSITE", "KEYWORD_CONJUGATE", "KEYWORD_CONJUGATES", "KEYWORD_CONJUGATION", 
      "KEYWORD_CONNECTOR", "KEYWORD_DATATYPE", "KEYWORD_DEFAULT", "KEYWORD_DEPENDENCY", 
      "KEYWORD_DIFFERENCES", "KEYWORD_DISJOINING", "KEYWORD_DISJOINT", "KEYWORD_DOC", 
      "KEYWORD_ELSE", "KEYWORD_END", "KEYWORD_EXPR", "KEYWORD_FALSE", "KEYWORD_FEATURE", 
      "KEYWORD_FEATURED", "KEYWORD_FEATURING", "KEYWORD_FILTER", "KEYWORD_FIRST", 
      "KEYWORD_FLOW", "KEYWORD_FOR", "KEYWORD_FROM", "KEYWORD_FUNCTION", 
      "KEYWORD_HASTYPE", "KEYWORD_IF", "KEYWORD_INTERSECTS", "KEYWORD_IMPLIES", 
      "KEYWORD_IMPORT", "KEYWORD_IN", "KEYWORD_INOUT", "KEYWORD_INTERACTION", 
      "KEYWORD_INV", "KEYWORD_INVERSE", "KEYWORD_INVERTING", "KEYWORD_ISTYPE", 
      "KEYWORD_LANGUAGE", "KEYWORD_MEMBER", "KEYWORD_METACLASS", "KEYWORD_METADATA", 
      "KEYWORD_MULTIPLICITY", "KEYWORD_NAMESPACE", "KEYWORD_NOT", "KEYWORD_NULL", 
      "KEYWORD_OF", "KEYWORD_OR", "KEYWORD_ORDERED", "KEYWORD_OUT", "KEYWORD_PACKAGE", 
      "KEYWORD_PORTION", "KEYWORD_PREDICATE", "KEYWORD_PRIVATE", "KEYWORD_PROTECTED", 
      "KEYWORD_PUBLIC", "KEYWORD_READONLY", "KEYWORD_REDEFINES", "KEYWORD_REDEFINITION", 
      "KEYWORD_REP", "KEYWORD_RETURN", "KEYWORD_SPECILIZATION", "KEYWORD_SPECIALIZES", 
      "KEYWORD_STEP", "KEYWORD_STRUCT", "KEYWORD_SUBCLASSIFIER", "KEYWORD_SUBSET", 
      "KEYWORD_SUBSETS", "KEYWORD_SUBTYPE", "KEYWORD_SUCCSESSION", "KEYWORD_THEN", 
      "KEYWORD_TO", "KEYWORD_TRUE", "KEYWORD_TYPE", "KEYWORD_TYPED", "KEYWORD_TYPING", 
      "KEYWORD_UNIONS", "KEYWORD_XOR", "KEYWORD_VAR", "KEYWORD_LOCALE", 
      "KEYWORD_STANDARD", "KEYWORD_LIBRARY", "KEYWORD_CONSTANT", "SINGLE_LINE_NOTE", 
      "MULTI_LINE_NOTE", "REGULAR_COMMENT", "SYMBOL_COMMENT_BLOCK_START", 
      "SYMBOL_NOTE_BLOCK_START", "SYMBOL_COMMENT_BLOCK_END", "SYMBOL_STATEMENT_DELIMITER", 
      "SYMBOL_STAR", "SYMBOL_NAMESPACE_SUBSET", "SYMBOL_TYPED_BY", "SYMBOL_SPECIALIZES", 
      "SYMBOL_REFERENCES", "SYMBOL_REDEFINES", "SYMBOL_CONJUNGATES", "SYMBOL_ROUND_BRACKET_OPEN", 
      "SYMBOL_ROUND_BRACKET_CLOSE", "SYMBOL_CURLY_BRACKET_OPEN", "SYMBOL_CURLY_BRACKET_CLOSE", 
      "SYMBOL_SQUARE_BRACKET_OPEN", "SYMBOL_SQUARE_BRACKET_CLOSE", "SYMBOL_COMMA", 
      "SYMBOL_AT", "SYMBOL_HASHTAG", "SYMBOL_MOD", "SYMBOL_AND", "SYMBOL_UPPER", 
      "SYMBOL_VERTICAL_LINE", "SYMBOL_DOUBLE_STAR", "SYMBOL_PLUS", "SYMBOL_MINUS", 
      "SYMBOL_SLASH", "SYMBOL_ARROOW", "SYMBOL_DOT", "SYMBOL_DDOT", "SYMBOL_SMALLER", 
      "SYMBOL_SMALLER_EQUAL", "SYMBOL_ASSIGN", "SYMBOL_DEF_ASSIGN", "SYMBOL_EQUALS", 
      "SYMBOL_IFF_EQUALS", "SYMBOL_NOT_EQUALS", "SYMBOL_IFF_NOT_EQUALS", 
      "SYMBOL_GREATER", "SYMBOL_GREATER_EQUALS", "SYMBOL_QUESTION", "SYMBOL_DQUESTION", 
      "SYMBOL_DOT_QUESTION", "NAME", "BASIC_NAME", "UNRESTRICTED_NAME", 
      "DECIMAL_VALUE", "EXPONENTIAL_VALUE", "STRING_VALUE", "WS"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,238,4532,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
  	2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
  	7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,
  	7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,
  	7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,
  	7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,
  	7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,
  	7,122,2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,
  	7,128,2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,
  	7,134,2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,
  	7,140,2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,
  	7,146,2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,
  	7,152,2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,
  	7,158,2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
  	7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,
  	7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,
  	7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,
  	7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,
  	7,188,2,189,7,189,2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,
  	7,194,2,195,7,195,2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,
  	7,200,2,201,7,201,2,202,7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,
  	7,206,2,207,7,207,2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,
  	7,212,2,213,7,213,2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,
  	7,218,2,219,7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,
  	7,224,2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,
  	7,230,2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,2,236,
  	7,236,2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,241,7,241,2,242,
  	7,242,2,243,7,243,2,244,7,244,2,245,7,245,2,246,7,246,2,247,7,247,2,248,
  	7,248,2,249,7,249,2,250,7,250,2,251,7,251,2,252,7,252,2,253,7,253,2,254,
  	7,254,2,255,7,255,2,256,7,256,2,257,7,257,2,258,7,258,2,259,7,259,2,260,
  	7,260,2,261,7,261,2,262,7,262,2,263,7,263,2,264,7,264,2,265,7,265,2,266,
  	7,266,2,267,7,267,2,268,7,268,2,269,7,269,2,270,7,270,2,271,7,271,2,272,
  	7,272,2,273,7,273,2,274,7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,
  	7,278,2,279,7,279,2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,
  	7,284,2,285,7,285,2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,
  	7,290,2,291,7,291,2,292,7,292,2,293,7,293,2,294,7,294,2,295,7,295,2,296,
  	7,296,2,297,7,297,2,298,7,298,2,299,7,299,2,300,7,300,2,301,7,301,2,302,
  	7,302,2,303,7,303,2,304,7,304,2,305,7,305,2,306,7,306,2,307,7,307,2,308,
  	7,308,2,309,7,309,2,310,7,310,2,311,7,311,2,312,7,312,2,313,7,313,2,314,
  	7,314,2,315,7,315,2,316,7,316,2,317,7,317,2,318,7,318,2,319,7,319,2,320,
  	7,320,2,321,7,321,2,322,7,322,2,323,7,323,2,324,7,324,2,325,7,325,2,326,
  	7,326,2,327,7,327,2,328,7,328,2,329,7,329,2,330,7,330,2,331,7,331,2,332,
  	7,332,2,333,7,333,2,334,7,334,2,335,7,335,2,336,7,336,2,337,7,337,2,338,
  	7,338,2,339,7,339,2,340,7,340,2,341,7,341,2,342,7,342,2,343,7,343,2,344,
  	7,344,2,345,7,345,2,346,7,346,2,347,7,347,2,348,7,348,2,349,7,349,2,350,
  	7,350,2,351,7,351,2,352,7,352,2,353,7,353,2,354,7,354,2,355,7,355,2,356,
  	7,356,2,357,7,357,2,358,7,358,2,359,7,359,2,360,7,360,2,361,7,361,2,362,
  	7,362,2,363,7,363,2,364,7,364,2,365,7,365,2,366,7,366,2,367,7,367,2,368,
  	7,368,2,369,7,369,2,370,7,370,2,371,7,371,2,372,7,372,2,373,7,373,2,374,
  	7,374,2,375,7,375,2,376,7,376,2,377,7,377,2,378,7,378,2,379,7,379,2,380,
  	7,380,2,381,7,381,2,382,7,382,2,383,7,383,2,384,7,384,2,385,7,385,2,386,
  	7,386,2,387,7,387,2,388,7,388,2,389,7,389,2,390,7,390,2,391,7,391,2,392,
  	7,392,2,393,7,393,2,394,7,394,2,395,7,395,2,396,7,396,2,397,7,397,2,398,
  	7,398,2,399,7,399,2,400,7,400,2,401,7,401,2,402,7,402,2,403,7,403,2,404,
  	7,404,2,405,7,405,2,406,7,406,2,407,7,407,2,408,7,408,2,409,7,409,2,410,
  	7,410,2,411,7,411,2,412,7,412,2,413,7,413,2,414,7,414,2,415,7,415,2,416,
  	7,416,2,417,7,417,2,418,7,418,2,419,7,419,2,420,7,420,2,421,7,421,2,422,
  	7,422,2,423,7,423,2,424,7,424,2,425,7,425,2,426,7,426,2,427,7,427,2,428,
  	7,428,2,429,7,429,2,430,7,430,2,431,7,431,2,432,7,432,2,433,7,433,2,434,
  	7,434,2,435,7,435,2,436,7,436,2,437,7,437,2,438,7,438,2,439,7,439,2,440,
  	7,440,2,441,7,441,2,442,7,442,2,443,7,443,2,444,7,444,2,445,7,445,2,446,
  	7,446,2,447,7,447,2,448,7,448,2,449,7,449,2,450,7,450,2,451,7,451,2,452,
  	7,452,2,453,7,453,2,454,7,454,2,455,7,455,2,456,7,456,2,457,7,457,2,458,
  	7,458,2,459,7,459,2,460,7,460,2,461,7,461,2,462,7,462,2,463,7,463,2,464,
  	7,464,2,465,7,465,2,466,7,466,2,467,7,467,2,468,7,468,2,469,7,469,2,470,
  	7,470,2,471,7,471,2,472,7,472,2,473,7,473,2,474,7,474,2,475,7,475,2,476,
  	7,476,2,477,7,477,2,478,7,478,2,479,7,479,2,480,7,480,2,481,7,481,2,482,
  	7,482,2,483,7,483,2,484,7,484,2,485,7,485,2,486,7,486,2,487,7,487,2,488,
  	7,488,2,489,7,489,2,490,7,490,2,491,7,491,2,492,7,492,2,493,7,493,2,494,
  	7,494,2,495,7,495,2,496,7,496,2,497,7,497,2,498,7,498,2,499,7,499,2,500,
  	7,500,2,501,7,501,2,502,7,502,2,503,7,503,2,504,7,504,2,505,7,505,2,506,
  	7,506,2,507,7,507,2,508,7,508,2,509,7,509,2,510,7,510,2,511,7,511,2,512,
  	7,512,2,513,7,513,2,514,7,514,2,515,7,515,2,516,7,516,2,517,7,517,2,518,
  	7,518,2,519,7,519,2,520,7,520,2,521,7,521,2,522,7,522,2,523,7,523,2,524,
  	7,524,2,525,7,525,2,526,7,526,2,527,7,527,2,528,7,528,2,529,7,529,2,530,
  	7,530,1,0,5,0,1064,8,0,10,0,12,0,1067,9,0,1,0,1,0,1,1,1,1,1,1,3,1,1074,
  	8,1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,3,3,1083,8,3,1,4,5,4,1086,8,4,10,4,12,
  	4,1089,9,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,3,5,1098,8,5,1,5,1,5,1,5,5,5,1103,
  	8,5,10,5,12,5,1106,9,5,1,5,1,5,1,5,1,5,5,5,1112,8,5,10,5,12,5,1115,9,
  	5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,9,3,9,1127,8,9,1,10,1,10,1,10,
  	1,10,1,10,1,10,5,10,1135,8,10,10,10,12,10,1138,9,10,3,10,1140,8,10,3,
  	10,1142,8,10,1,10,1,10,3,10,1146,8,10,1,10,1,10,1,11,1,11,1,11,1,11,3,
  	11,1154,8,11,1,11,1,11,1,12,1,12,3,12,1160,8,12,1,12,1,12,1,12,1,12,1,
  	13,5,13,1167,8,13,10,13,12,13,1170,9,13,1,14,5,14,1173,8,14,10,14,12,
  	14,1176,9,14,1,14,1,14,1,14,1,15,1,15,1,15,5,15,1184,8,15,10,15,12,15,
  	1187,9,15,1,15,3,15,1190,8,15,1,16,1,16,1,16,1,16,3,16,1196,8,16,1,17,
  	1,17,3,17,1200,8,17,1,18,1,18,1,18,1,18,1,18,3,18,1207,8,18,1,18,3,18,
  	1210,8,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
  	1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
  	1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,1247,8,19,1,20,1,20,
  	3,20,1251,8,20,1,21,1,21,1,22,1,22,1,23,3,23,1258,8,23,1,23,5,23,1261,
  	8,23,10,23,12,23,1264,9,23,1,24,1,24,1,24,1,25,1,25,3,25,1271,8,25,1,
  	26,1,26,1,26,5,26,1276,8,26,10,26,12,26,1279,9,26,1,26,3,26,1282,8,26,
  	1,27,1,27,1,27,1,27,3,27,1288,8,27,1,27,1,27,1,27,3,27,1293,8,27,1,28,
  	1,28,1,28,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,32,1,32,
  	1,32,1,33,1,33,1,33,1,34,1,34,1,35,3,35,1317,8,35,1,35,3,35,1320,8,35,
  	1,35,1,35,1,35,1,35,3,35,1326,8,35,3,35,1328,8,35,1,36,1,36,3,36,1332,
  	8,36,1,37,3,37,1335,8,37,1,37,3,37,1338,8,37,1,38,1,38,1,39,1,39,1,39,
  	1,40,1,40,1,41,1,41,3,41,1349,8,41,1,42,1,42,5,42,1353,8,42,10,42,12,
  	42,1356,9,42,1,43,1,43,1,43,1,44,1,44,3,44,1363,8,44,1,45,3,45,1366,8,
  	45,1,45,1,45,1,46,1,46,1,47,1,47,1,47,1,48,1,48,3,48,1377,8,48,1,48,1,
  	48,1,48,1,49,1,49,5,49,1384,8,49,10,49,12,49,1387,9,49,1,49,1,49,1,50,
  	1,50,1,50,1,50,1,50,1,50,1,50,3,50,1398,8,50,1,51,1,51,3,51,1402,8,51,
  	1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
  	1,52,3,52,1419,8,52,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,
  	1,53,1,53,1,53,1,53,1,53,1,53,3,53,1437,8,53,1,54,1,54,1,54,1,54,1,54,
  	1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,
  	1,54,1,54,3,54,1460,8,54,1,55,1,55,1,55,1,55,5,55,1466,8,55,10,55,12,
  	55,1469,9,55,1,56,1,56,1,56,1,57,1,57,3,57,1476,8,57,1,58,1,58,3,58,1480,
  	8,58,1,58,3,58,1483,8,58,1,58,1,58,3,58,1487,8,58,3,58,1489,8,58,1,59,
  	1,59,1,60,1,60,1,60,1,60,3,60,1497,8,60,1,60,1,60,1,60,1,61,1,61,1,61,
  	1,61,1,61,1,62,1,62,1,62,1,62,1,63,5,63,1512,8,63,10,63,12,63,1515,9,
  	63,1,63,1,63,1,63,1,63,1,63,1,64,1,64,1,64,1,64,5,64,1526,8,64,10,64,
  	12,64,1529,9,64,1,64,3,64,1532,8,64,1,65,1,65,1,65,1,66,3,66,1538,8,66,
  	1,66,1,66,1,67,1,67,1,67,1,67,1,68,3,68,1547,8,68,1,68,3,68,1550,8,68,
  	1,68,5,68,1553,8,68,10,68,12,68,1556,9,68,1,69,1,69,1,69,1,69,1,69,1,
  	70,3,70,1564,8,70,1,70,1,70,1,70,1,70,1,71,1,71,3,71,1572,8,71,1,71,3,
  	71,1575,8,71,1,71,5,71,1578,8,71,10,71,12,71,1581,9,71,1,72,1,72,1,72,
  	1,72,1,73,1,73,1,73,3,73,1590,8,73,1,73,5,73,1593,8,73,10,73,12,73,1596,
  	9,73,1,73,1,73,1,74,1,74,3,74,1602,8,74,1,74,1,74,5,74,1606,8,74,10,74,
  	12,74,1609,9,74,1,74,1,74,1,75,1,75,1,76,1,76,1,76,1,76,3,76,1619,8,76,
  	1,76,1,76,3,76,1623,8,76,1,76,1,76,1,77,1,77,1,77,1,78,1,78,1,79,1,79,
  	1,80,3,80,1635,8,80,1,81,1,81,1,81,1,81,1,81,1,82,1,82,1,82,1,82,1,83,
  	1,83,1,83,1,83,1,83,1,84,1,84,1,84,1,84,1,85,1,85,1,85,1,85,1,85,1,86,
  	1,86,1,86,1,86,1,87,1,87,1,87,1,88,1,88,1,88,1,88,1,88,1,89,1,89,1,89,
  	1,89,3,89,1676,8,89,1,89,1,89,3,89,1680,8,89,1,89,1,89,3,89,1684,8,89,
  	1,89,1,89,1,90,1,90,3,90,1690,8,90,1,91,1,91,1,91,1,91,1,92,1,92,1,92,
  	1,92,4,92,1700,8,92,11,92,12,92,1701,1,92,1,92,1,93,1,93,1,94,3,94,1709,
  	8,94,1,94,1,94,3,94,1713,8,94,1,94,1,94,1,95,1,95,1,96,1,96,1,97,1,97,
  	1,97,3,97,1724,8,97,1,97,1,97,1,97,1,97,1,97,1,97,1,98,1,98,1,98,3,98,
  	1735,8,98,1,98,1,98,1,98,1,98,1,98,1,98,1,99,1,99,1,99,1,99,1,99,1,99,
  	1,100,1,100,1,100,5,100,1752,8,100,10,100,12,100,1755,9,100,1,100,3,100,
  	1758,8,100,1,101,1,101,1,101,1,101,3,101,1764,8,101,1,101,1,101,1,101,
  	3,101,1769,8,101,1,102,1,102,1,102,1,103,1,103,1,103,1,103,1,103,3,103,
  	1779,8,103,1,104,1,104,1,104,1,105,1,105,1,105,3,105,1787,8,105,1,106,
  	1,106,1,106,1,107,1,107,1,107,1,107,1,107,1,108,1,108,3,108,1799,8,108,
  	1,108,1,108,3,108,1803,8,108,1,108,3,108,1806,8,108,1,109,1,109,3,109,
  	1810,8,109,1,110,1,110,1,110,1,110,1,111,1,111,1,111,1,111,4,111,1820,
  	8,111,11,111,12,111,1821,1,111,1,111,1,112,1,112,1,113,3,113,1829,8,113,
  	1,113,1,113,3,113,1833,8,113,1,113,1,113,1,114,1,114,1,114,1,114,1,114,
  	1,115,1,115,1,115,1,115,1,116,1,116,1,116,1,116,3,116,1850,8,116,1,116,
  	1,116,3,116,1854,8,116,1,117,1,117,1,117,1,117,1,117,1,118,1,118,1,118,
  	1,118,1,118,1,119,1,119,3,119,1868,8,119,1,119,1,119,3,119,1872,8,119,
  	1,119,1,119,1,119,1,119,1,119,3,119,1879,8,119,1,119,1,119,1,119,1,119,
  	3,119,1885,8,119,1,120,1,120,1,121,1,121,1,122,1,122,1,122,1,122,1,122,
  	1,123,1,123,1,123,1,123,1,123,1,123,1,124,1,124,3,124,1904,8,124,1,124,
  	1,124,3,124,1908,8,124,1,124,1,124,1,124,1,124,1,124,3,124,1915,8,124,
  	1,124,1,124,1,124,1,124,3,124,1921,8,124,1,125,1,125,1,126,1,126,1,127,
  	1,127,1,127,1,127,1,127,1,127,1,127,1,127,3,127,1935,8,127,1,128,4,128,
  	1938,8,128,11,128,12,128,1939,1,128,3,128,1943,8,128,1,128,5,128,1946,
  	8,128,10,128,12,128,1949,9,128,1,128,1,128,4,128,1953,8,128,11,128,12,
  	128,1954,3,128,1957,8,128,1,129,1,129,1,130,3,130,1962,8,130,1,130,1,
  	130,1,131,1,131,3,131,1968,8,131,1,132,1,132,1,132,1,132,1,132,4,132,
  	1975,8,132,11,132,12,132,1976,1,133,1,133,1,134,1,134,1,135,1,135,1,136,
  	1,136,1,136,1,136,1,136,1,136,1,137,1,137,1,137,5,137,1994,8,137,10,137,
  	12,137,1997,9,137,1,137,3,137,2000,8,137,1,138,1,138,1,138,5,138,2005,
  	8,138,10,138,12,138,2008,9,138,1,138,3,138,2011,8,138,1,138,1,138,3,138,
  	2015,8,138,1,138,3,138,2018,8,138,1,139,1,139,1,139,1,139,1,139,3,139,
  	2025,8,139,1,139,3,139,2028,8,139,1,140,1,140,3,140,2032,8,140,1,141,
  	1,141,1,141,1,141,1,141,1,142,1,142,1,142,1,143,1,143,1,143,1,144,1,144,
  	1,144,1,145,1,145,1,145,1,145,1,145,1,146,1,146,3,146,2055,8,146,1,147,
  	1,147,1,147,1,147,1,147,1,148,1,148,3,148,2064,8,148,1,148,1,148,1,148,
  	3,148,2069,8,148,3,148,2071,8,148,1,149,1,149,1,149,1,149,1,149,1,149,
  	1,149,1,149,3,149,2081,8,149,1,150,1,150,3,150,2085,8,150,1,151,1,151,
  	3,151,2089,8,151,1,152,1,152,1,152,1,152,3,152,2095,8,152,1,153,1,153,
  	3,153,2099,8,153,1,153,3,153,2102,8,153,1,153,3,153,2105,8,153,1,154,
  	1,154,3,154,2109,8,154,1,154,1,154,1,154,1,155,1,155,3,155,2116,8,155,
  	1,155,1,155,1,155,1,156,1,156,3,156,2123,8,156,1,156,1,156,1,156,1,157,
  	1,157,3,157,2130,8,157,1,157,1,157,1,157,1,158,1,158,1,158,1,158,1,159,
  	3,159,2140,8,159,1,159,1,159,1,159,1,160,1,160,1,160,3,160,2148,8,160,
  	1,161,1,161,1,162,1,162,1,162,3,162,2155,8,162,1,162,1,162,3,162,2159,
  	8,162,1,163,1,163,1,164,1,164,1,164,1,164,3,164,2167,8,164,1,165,1,165,
  	3,165,2171,8,165,1,165,1,165,1,165,3,165,2176,8,165,1,165,3,165,2179,
  	8,165,1,165,1,165,1,166,3,166,2184,8,166,1,166,1,166,1,166,3,166,2189,
  	8,166,1,167,1,167,1,167,1,167,3,167,2195,8,167,1,167,1,167,3,167,2199,
  	8,167,1,168,1,168,1,169,1,169,1,170,1,170,1,171,1,171,1,171,1,171,1,172,
  	3,172,2212,8,172,1,172,1,172,1,172,1,172,1,172,1,172,1,173,1,173,1,174,
  	1,174,1,174,3,174,2225,8,174,1,175,1,175,1,176,1,176,3,176,2231,8,176,
  	1,177,1,177,1,178,1,178,3,178,2237,8,178,1,178,1,178,3,178,2241,8,178,
  	1,178,1,178,1,179,1,179,1,179,1,179,1,179,1,179,1,179,3,179,2252,8,179,
  	1,180,1,180,1,181,1,181,1,182,1,182,3,182,2260,8,182,3,182,2262,8,182,
  	1,182,1,182,5,182,2266,8,182,10,182,12,182,2269,9,182,1,182,1,182,1,183,
  	1,183,1,184,1,184,1,184,1,184,3,184,2279,8,184,1,184,1,184,1,184,1,184,
  	1,184,1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,186,1,186,1,187,1,187,
  	1,188,1,188,1,188,3,188,2300,8,188,1,188,1,188,1,189,1,189,1,189,1,189,
  	1,190,1,190,1,190,1,190,1,191,1,191,1,191,1,192,1,192,3,192,2317,8,192,
  	1,192,1,192,1,192,1,192,1,192,1,192,1,192,1,193,1,193,1,193,1,193,1,193,
  	1,193,1,194,1,194,3,194,2334,8,194,1,194,1,194,1,194,1,194,3,194,2340,
  	8,194,1,195,1,195,3,195,2344,8,195,1,195,1,195,5,195,2348,8,195,10,195,
  	12,195,2351,9,195,1,195,1,195,1,195,5,195,2356,8,195,10,195,12,195,2359,
  	9,195,1,195,1,195,3,195,2363,8,195,1,196,1,196,1,196,1,196,1,197,1,197,
  	1,197,1,197,1,198,1,198,1,198,1,198,1,199,1,199,1,199,1,199,3,199,2381,
  	8,199,1,199,1,199,1,200,1,200,1,200,1,200,1,200,1,200,1,200,3,200,2392,
  	8,200,1,201,1,201,1,202,1,202,1,202,1,203,1,203,1,203,1,204,1,204,1,204,
  	1,205,1,205,1,205,1,206,1,206,1,206,1,207,1,207,1,207,1,208,1,208,1,208,
  	1,208,1,208,1,209,1,209,3,209,2421,8,209,1,209,1,209,5,209,2425,8,209,
  	10,209,12,209,2428,9,209,1,209,3,209,2431,8,209,1,210,1,210,1,210,1,210,
  	3,210,2437,8,210,1,210,1,210,3,210,2441,8,210,1,210,3,210,2444,8,210,
  	1,210,1,210,1,211,1,211,1,211,1,211,3,211,2452,8,211,1,211,1,211,3,211,
  	2456,8,211,1,211,3,211,2459,8,211,1,211,3,211,2462,8,211,1,211,1,211,
  	1,211,1,211,1,212,1,212,3,212,2470,8,212,1,212,3,212,2473,8,212,1,212,
  	3,212,2476,8,212,1,212,1,212,3,212,2480,8,212,1,212,3,212,2483,8,212,
  	1,212,1,212,3,212,2487,8,212,3,212,2489,8,212,1,212,1,212,1,212,1,212,
  	1,213,1,213,1,213,1,213,1,214,1,214,1,215,1,215,1,215,1,215,1,216,1,216,
  	1,216,1,216,1,217,1,217,1,217,1,217,1,217,3,217,2514,8,217,1,218,1,218,
  	1,218,5,218,2519,8,218,10,218,12,218,2522,9,218,1,218,3,218,2525,8,218,
  	1,219,1,219,1,219,5,219,2530,8,219,10,219,12,219,2533,9,219,1,219,3,219,
  	2536,8,219,1,220,1,220,1,220,5,220,2541,8,220,10,220,12,220,2544,9,220,
  	1,220,3,220,2547,8,220,1,221,1,221,1,221,5,221,2552,8,221,10,221,12,221,
  	2555,9,221,1,221,3,221,2558,8,221,1,222,1,222,1,223,1,223,1,224,1,224,
  	1,224,1,224,1,224,1,224,1,225,1,225,1,225,1,225,1,225,1,226,1,226,1,226,
  	1,226,1,226,3,226,2580,8,226,1,227,5,227,2583,8,227,10,227,12,227,2586,
  	9,227,1,227,3,227,2589,8,227,1,228,1,228,3,228,2593,8,228,1,229,3,229,
  	2596,8,229,1,229,1,229,1,229,1,230,3,230,2602,8,230,1,230,1,230,1,231,
  	3,231,2607,8,231,1,231,1,231,1,231,1,232,3,232,2613,8,232,1,232,1,232,
  	1,232,1,232,1,233,1,233,1,233,3,233,2622,8,233,1,233,1,233,3,233,2626,
  	8,233,1,233,1,233,3,233,2630,8,233,1,233,1,233,1,234,1,234,3,234,2636,
  	8,234,1,235,1,235,1,235,1,235,1,235,1,235,1,236,1,236,1,236,5,236,2647,
  	8,236,10,236,12,236,2650,9,236,1,236,3,236,2653,8,236,1,237,1,237,1,237,
  	1,237,1,237,1,237,1,237,3,237,2662,8,237,1,238,1,238,1,238,1,239,1,239,
  	5,239,2669,8,239,10,239,12,239,2672,9,239,1,239,1,239,1,240,3,240,2677,
  	8,240,1,240,1,240,1,240,1,241,1,241,1,241,1,241,3,241,2686,8,241,1,242,
  	1,242,3,242,2690,8,242,1,242,1,242,1,242,5,242,2695,8,242,10,242,12,242,
  	2698,9,242,1,242,1,242,4,242,2702,8,242,11,242,12,242,2703,3,242,2706,
  	8,242,1,242,1,242,1,242,3,242,2711,8,242,1,243,3,243,2714,8,243,1,243,
  	1,243,1,243,1,244,1,244,3,244,2721,8,244,1,244,1,244,1,244,5,244,2726,
  	8,244,10,244,12,244,2729,9,244,1,244,1,244,4,244,2733,8,244,11,244,12,
  	244,2734,3,244,2737,8,244,1,244,1,244,1,244,3,244,2742,8,244,1,245,1,
  	245,1,245,1,246,1,246,5,246,2749,8,246,10,246,12,246,2752,9,246,1,246,
  	1,246,1,247,1,247,1,247,1,248,1,248,1,248,1,249,1,249,1,249,1,249,1,249,
  	1,250,1,250,1,250,3,250,2770,8,250,1,250,1,250,1,250,3,250,2775,8,250,
  	1,250,1,250,3,250,2779,8,250,1,250,3,250,2782,8,250,1,250,1,250,3,250,
  	2786,8,250,1,250,1,250,1,251,1,251,1,252,1,252,1,253,1,253,1,254,1,254,
  	1,255,1,255,1,255,1,255,1,255,1,255,1,256,1,256,1,256,1,256,1,256,1,257,
  	1,257,1,257,1,257,1,257,1,257,1,258,1,258,1,258,1,258,1,258,1,259,1,259,
  	1,259,5,259,2823,8,259,10,259,12,259,2826,9,259,1,259,3,259,2829,8,259,
  	1,259,3,259,2832,8,259,1,260,1,260,1,260,1,260,3,260,2838,8,260,1,261,
  	1,261,1,261,1,261,1,262,5,262,2845,8,262,10,262,12,262,2848,9,262,1,262,
  	1,262,1,262,1,263,1,263,1,263,1,263,1,263,1,263,1,264,1,264,1,264,1,264,
  	1,264,1,265,1,265,1,265,1,265,1,265,1,265,1,266,1,266,1,266,1,266,1,266,
  	1,267,1,267,1,267,1,267,1,267,1,268,1,268,5,268,2882,8,268,10,268,12,
  	268,2885,9,268,1,268,1,268,1,268,5,268,2890,8,268,10,268,12,268,2893,
  	9,268,1,268,1,268,4,268,2897,8,268,11,268,12,268,2898,3,268,2901,8,268,
  	1,268,1,268,1,268,3,268,2906,8,268,1,269,1,269,1,269,1,269,1,269,1,269,
  	1,269,1,270,1,270,1,270,1,270,1,270,1,270,1,271,1,271,1,271,1,271,3,271,
  	2925,8,271,1,271,1,271,1,271,3,271,2930,8,271,1,271,3,271,2933,8,271,
  	1,271,1,271,1,272,1,272,1,272,1,272,1,272,1,272,1,273,1,273,1,273,5,273,
  	2946,8,273,10,273,12,273,2949,9,273,1,273,3,273,2952,8,273,1,274,1,274,
  	1,274,3,274,2957,8,274,1,275,1,275,1,275,1,275,1,276,1,276,3,276,2965,
  	8,276,1,276,1,276,1,276,5,276,2970,8,276,10,276,12,276,2973,9,276,1,276,
  	1,276,4,276,2977,8,276,11,276,12,276,2978,3,276,2981,8,276,1,276,3,276,
  	2984,8,276,1,277,1,277,1,277,3,277,2989,8,277,1,277,3,277,2992,8,277,
  	1,277,1,277,1,278,1,278,1,278,5,278,2999,8,278,10,278,12,278,3002,9,278,
  	1,278,3,278,3005,8,278,1,279,1,279,1,279,1,279,3,279,3011,8,279,1,280,
  	1,280,1,280,3,280,3016,8,280,1,280,1,280,1,281,1,281,1,282,1,282,1,283,
  	1,283,1,283,1,283,1,283,1,283,1,284,1,284,1,284,1,284,1,284,1,285,1,285,
  	1,285,1,285,1,285,1,286,1,286,1,286,1,286,1,287,3,287,3045,8,287,1,287,
  	5,287,3048,8,287,10,287,12,287,3051,9,287,1,287,1,287,1,287,1,287,1,288,
  	1,288,1,288,1,288,1,289,1,289,1,289,1,290,1,290,1,291,5,291,3067,8,291,
  	10,291,12,291,3070,9,291,1,291,1,291,1,291,1,291,1,291,1,291,5,291,3078,
  	8,291,10,291,12,291,3081,9,291,3,291,3083,8,291,1,291,1,291,1,292,1,292,
  	1,292,1,292,3,292,3091,8,292,3,292,3093,8,292,1,292,1,292,1,293,1,293,
  	1,293,1,293,1,293,1,293,3,293,3103,8,293,1,293,1,293,3,293,3107,8,293,
  	1,294,1,294,1,295,3,295,3112,8,295,1,295,3,295,3115,8,295,1,295,1,295,
  	3,295,3119,8,295,1,295,3,295,3122,8,295,1,295,1,295,1,296,3,296,3127,
  	8,296,1,296,4,296,3130,8,296,11,296,12,296,3131,1,296,1,296,1,296,1,297,
  	1,297,4,297,3139,8,297,11,297,12,297,3140,1,297,1,297,1,298,5,298,3146,
  	8,298,10,298,12,298,3149,9,298,1,299,1,299,1,299,3,299,3154,8,299,1,299,
  	3,299,3157,8,299,3,299,3159,8,299,1,300,5,300,3162,8,300,10,300,12,300,
  	3165,9,300,1,301,1,301,3,301,3169,8,301,1,302,1,302,3,302,3173,8,302,
  	1,303,5,303,3176,8,303,10,303,12,303,3179,9,303,1,303,1,303,1,303,1,304,
  	1,304,1,304,1,305,1,305,1,305,1,305,1,305,3,305,3192,8,305,1,306,1,306,
  	1,307,1,307,1,307,3,307,3199,8,307,1,308,3,308,3202,8,308,1,309,1,309,
  	1,310,1,310,3,310,3208,8,310,1,311,1,311,1,311,1,312,1,312,1,312,1,313,
  	1,313,1,313,5,313,3219,8,313,10,313,12,313,3222,9,313,1,314,3,314,3225,
  	8,314,1,314,1,314,3,314,3229,8,314,1,314,1,314,3,314,3233,8,314,1,315,
  	1,315,3,315,3237,8,315,1,316,1,316,3,316,3241,8,316,1,316,3,316,3244,
  	8,316,1,317,1,317,1,317,1,318,1,318,1,318,1,318,1,319,1,319,1,319,1,319,
  	3,319,3257,8,319,1,320,1,320,1,320,1,320,1,320,1,320,1,320,1,320,1,320,
  	1,320,1,320,1,320,1,320,1,320,1,320,1,320,1,320,1,320,1,320,1,320,1,320,
  	1,320,1,320,1,320,1,320,1,320,1,320,3,320,3286,8,320,1,321,1,321,1,321,
  	1,321,1,321,1,321,1,321,1,321,1,321,1,321,3,321,3298,8,321,1,322,1,322,
  	1,323,1,323,1,323,1,323,1,323,1,324,3,324,3308,8,324,1,324,5,324,3311,
  	8,324,10,324,12,324,3314,9,324,1,325,3,325,3317,8,325,1,325,1,325,3,325,
  	3321,8,325,1,325,1,325,4,325,3325,8,325,11,325,12,325,3326,1,325,5,325,
  	3330,8,325,10,325,12,325,3333,9,325,1,326,1,326,1,326,1,326,5,326,3339,
  	8,326,10,326,12,326,3342,9,326,1,327,1,327,1,327,1,328,1,328,1,328,1,
  	328,3,328,3351,8,328,1,329,1,329,1,329,1,329,1,329,5,329,3358,8,329,10,
  	329,12,329,3361,9,329,1,330,1,330,1,330,1,330,5,330,3367,8,330,10,330,
  	12,330,3370,9,330,1,331,1,331,1,331,1,331,5,331,3376,8,331,10,331,12,
  	331,3379,9,331,1,332,1,332,1,332,1,332,5,332,3385,8,332,10,332,12,332,
  	3388,9,332,1,333,1,333,1,333,1,333,1,333,3,333,3395,8,333,1,334,5,334,
  	3398,8,334,10,334,12,334,3401,9,334,1,335,1,335,1,336,1,336,3,336,3407,
  	8,336,1,336,1,336,1,336,1,336,1,336,1,336,1,337,1,337,1,338,1,338,3,338,
  	3419,8,338,1,339,1,339,3,339,3423,8,339,1,340,1,340,3,340,3427,8,340,
  	1,340,1,340,1,340,3,340,3432,8,340,1,340,1,340,1,340,3,340,3437,8,340,
  	1,340,1,340,1,341,1,341,3,341,3443,8,341,1,342,1,342,3,342,3447,8,342,
  	1,342,1,342,1,342,3,342,3452,8,342,1,342,1,342,1,342,3,342,3457,8,342,
  	1,342,1,342,1,343,1,343,3,343,3463,8,343,1,344,1,344,3,344,3467,8,344,
  	1,345,1,345,3,345,3471,8,345,1,346,1,346,3,346,3475,8,346,1,347,1,347,
  	3,347,3479,8,347,1,348,1,348,1,348,1,348,1,349,1,349,1,349,1,350,3,350,
  	3489,8,350,1,350,1,350,1,350,1,350,1,351,3,351,3496,8,351,1,351,1,351,
  	3,351,3500,8,351,1,351,1,351,3,351,3504,8,351,1,351,5,351,3507,8,351,
  	10,351,12,351,3510,9,351,1,352,1,352,1,352,1,352,5,352,3516,8,352,10,
  	352,12,352,3519,9,352,1,353,1,353,3,353,3523,8,353,1,353,1,353,1,353,
  	1,353,1,353,1,353,1,354,1,354,1,355,3,355,3534,8,355,1,355,1,355,1,355,
  	1,355,3,355,3540,8,355,1,355,3,355,3543,8,355,1,355,3,355,3546,8,355,
  	1,355,3,355,3549,8,355,1,355,1,355,1,356,3,356,3554,8,356,1,356,3,356,
  	3557,8,356,1,356,3,356,3560,8,356,1,356,3,356,3563,8,356,1,356,3,356,
  	3566,8,356,1,356,3,356,3569,8,356,1,356,5,356,3572,8,356,10,356,12,356,
  	3575,9,356,1,357,3,357,3578,8,357,1,357,1,357,1,357,3,357,3583,8,357,
  	1,357,1,357,3,357,3587,8,357,1,357,5,357,3590,8,357,10,357,12,357,3593,
  	9,357,1,357,3,357,3596,8,357,1,358,1,358,1,358,1,358,3,358,3602,8,358,
  	1,358,3,358,3605,8,358,1,359,1,359,1,359,1,359,3,359,3611,8,359,1,360,
  	1,360,1,360,3,360,3616,8,360,1,361,1,361,1,361,1,361,1,362,1,362,1,362,
  	1,362,1,362,5,362,3627,8,362,10,362,12,362,3630,9,362,1,363,4,363,3633,
  	8,363,11,363,12,363,3634,1,363,3,363,3638,8,363,1,363,5,363,3641,8,363,
  	10,363,12,363,3644,9,363,1,363,1,363,4,363,3648,8,363,11,363,12,363,3649,
  	3,363,3652,8,363,1,364,1,364,1,364,1,364,3,364,3658,8,364,1,365,1,365,
  	1,365,5,365,3663,8,365,10,365,12,365,3666,9,365,1,366,1,366,1,366,1,367,
  	1,367,3,367,3673,8,367,1,367,1,367,5,367,3677,8,367,10,367,12,367,3680,
  	9,367,1,368,1,368,1,368,1,369,1,369,1,369,1,370,1,370,1,370,3,370,3691,
  	8,370,1,371,3,371,3694,8,371,1,371,1,371,1,371,1,372,1,372,3,372,3701,
  	8,372,1,372,3,372,3704,8,372,1,372,1,372,1,372,1,372,3,372,3710,8,372,
  	1,372,1,372,1,373,1,373,1,374,1,374,3,374,3718,8,374,1,374,3,374,3721,
  	8,374,1,374,1,374,1,374,1,374,3,374,3727,8,374,1,374,1,374,1,375,1,375,
  	1,376,1,376,1,377,3,377,3736,8,377,1,377,1,377,3,377,3740,8,377,1,377,
  	1,377,3,377,3744,8,377,1,377,1,377,1,377,3,377,3749,8,377,1,377,3,377,
  	3752,8,377,1,377,3,377,3755,8,377,1,377,3,377,3758,8,377,1,377,1,377,
  	1,378,1,378,1,379,1,379,1,380,1,380,1,380,5,380,3769,8,380,10,380,12,
  	380,3772,9,380,1,381,1,381,1,382,1,382,3,382,3778,8,382,1,382,1,382,1,
  	382,3,382,3783,8,382,1,382,1,382,1,382,3,382,3788,8,382,1,382,1,382,1,
  	383,1,383,3,383,3794,8,383,1,384,1,384,1,384,1,384,3,384,3800,8,384,1,
  	384,1,384,1,384,1,384,1,384,1,385,1,385,1,386,1,386,1,386,1,386,1,386,
  	1,387,1,387,1,387,1,387,1,387,1,388,3,388,3820,8,388,1,388,1,388,1,388,
  	1,388,1,389,1,389,1,389,1,389,1,389,1,390,1,390,1,390,1,390,1,390,1,390,
  	1,391,3,391,3838,8,391,1,391,1,391,1,391,1,391,1,392,1,392,1,392,3,392,
  	3847,8,392,1,393,3,393,3850,8,393,1,393,1,393,1,393,1,393,1,393,1,394,
  	1,394,1,394,1,394,1,394,1,394,5,394,3863,8,394,10,394,12,394,3866,9,394,
  	1,394,1,394,1,395,1,395,3,395,3872,8,395,1,395,3,395,3875,8,395,1,395,
  	1,395,1,396,1,396,1,396,1,396,1,396,1,397,1,397,1,397,1,397,1,397,1,397,
  	3,397,3890,8,397,1,397,3,397,3893,8,397,1,397,3,397,3896,8,397,1,397,
  	1,397,1,397,1,397,3,397,3902,8,397,3,397,3904,8,397,1,398,1,398,1,398,
  	1,398,1,398,1,399,1,399,1,399,1,399,1,399,1,399,3,399,3917,8,399,1,399,
  	3,399,3920,8,399,1,399,3,399,3923,8,399,1,399,1,399,1,399,1,399,3,399,
  	3929,8,399,3,399,3931,8,399,1,400,1,400,1,400,1,400,1,400,1,401,1,401,
  	1,401,1,401,3,401,3942,8,401,1,401,1,401,1,402,1,402,1,402,1,402,1,402,
  	1,403,1,403,1,403,1,403,1,403,3,403,3956,8,403,1,404,1,404,4,404,3960,
  	8,404,11,404,12,404,3961,1,404,3,404,3965,8,404,1,405,1,405,1,405,1,405,
  	1,406,1,406,1,406,1,406,3,406,3975,8,406,1,406,1,406,1,407,1,407,1,407,
  	1,407,1,407,1,408,1,408,1,408,1,408,3,408,3988,8,408,1,408,1,408,1,409,
  	1,409,1,409,3,409,3995,8,409,1,409,1,409,3,409,3999,8,409,1,409,1,409,
  	1,410,1,410,1,411,1,411,1,412,1,412,1,413,4,413,4010,8,413,11,413,12,
  	413,4011,1,414,1,414,1,414,1,414,1,414,1,414,1,414,1,414,3,414,4022,8,
  	414,1,415,1,415,1,415,1,415,3,415,4028,8,415,1,416,1,416,1,416,1,416,
  	1,416,1,416,1,416,1,417,1,417,1,417,1,417,1,418,1,418,1,419,1,419,1,419,
  	1,419,1,420,1,420,1,421,1,421,1,421,1,422,1,422,1,423,3,423,4055,8,423,
  	1,423,1,423,1,423,1,423,1,423,1,423,3,423,4063,8,423,1,424,3,424,4066,
  	8,424,1,424,1,424,1,424,1,424,1,424,1,424,3,424,4074,8,424,1,425,1,425,
  	1,426,1,426,1,427,1,427,1,427,1,427,1,427,1,427,1,427,3,427,4087,8,427,
  	1,428,1,428,1,429,1,429,1,430,1,430,1,431,1,431,1,432,1,432,1,433,1,433,
  	1,434,1,434,1,435,1,435,1,436,1,436,1,437,1,437,1,438,1,438,1,439,1,439,
  	1,440,1,440,1,440,1,441,1,441,1,442,1,442,1,443,1,443,1,444,1,444,1,445,
  	4,445,4125,8,445,11,445,12,445,4126,1,446,1,446,3,446,4131,8,446,1,447,
  	1,447,1,448,1,448,1,449,1,449,1,450,1,450,1,450,1,450,1,450,1,450,1,450,
  	3,450,4146,8,450,1,451,1,451,1,452,1,452,1,453,1,453,1,454,1,454,1,454,
  	1,454,1,455,1,455,1,455,1,455,1,455,1,456,1,456,1,456,1,456,1,457,1,457,
  	3,457,4169,8,457,1,457,3,457,4172,8,457,1,458,1,458,1,458,1,458,1,459,
  	1,459,1,460,1,460,1,460,1,461,1,461,1,461,1,462,1,462,1,462,1,463,1,463,
  	1,463,1,463,1,463,3,463,4194,8,463,1,464,1,464,1,465,1,465,1,466,1,466,
  	1,467,1,467,1,468,1,468,1,469,1,469,1,470,1,470,1,471,1,471,1,472,1,472,
  	1,473,1,473,1,474,1,474,1,474,1,474,1,474,1,474,3,474,4222,8,474,1,475,
  	1,475,1,475,3,475,4227,8,475,1,476,1,476,1,477,1,477,1,478,1,478,1,479,
  	1,479,1,479,1,479,1,480,1,480,1,481,1,481,3,481,4243,8,481,1,481,1,481,
  	1,482,1,482,1,482,1,482,1,482,3,482,4252,8,482,1,482,1,482,1,483,1,483,
  	1,483,5,483,4259,8,483,10,483,12,483,4262,9,483,1,484,1,484,1,484,5,484,
  	4267,8,484,10,484,12,484,4270,9,484,1,485,1,485,1,486,1,486,1,486,1,486,
  	1,487,1,487,1,488,1,488,1,489,1,489,1,490,1,490,1,490,1,490,1,491,1,491,
  	1,491,1,491,1,491,1,491,3,491,4294,8,491,1,492,1,492,1,493,1,493,1,494,
  	1,494,1,495,1,495,1,496,1,496,1,497,3,497,4307,8,497,1,497,1,497,1,497,
  	3,497,4312,8,497,1,498,1,498,1,499,1,499,1,499,1,499,1,499,1,500,1,500,
  	1,500,1,500,1,500,1,501,1,501,1,501,1,501,1,501,1,501,1,502,1,502,3,502,
  	4334,8,502,1,502,1,502,3,502,4338,8,502,1,502,1,502,1,502,1,502,1,502,
  	3,502,4345,8,502,1,502,3,502,4348,8,502,1,502,1,502,1,502,1,502,3,502,
  	4354,8,502,1,503,1,503,1,504,1,504,1,504,3,504,4361,8,504,1,504,1,504,
  	3,504,4365,8,504,1,504,1,504,3,504,4369,8,504,3,504,4371,8,504,1,505,
  	5,505,4374,8,505,10,505,12,505,4377,9,505,1,505,1,505,3,505,4381,8,505,
  	1,506,1,506,1,507,1,507,1,507,3,507,4388,8,507,1,507,1,507,1,508,1,508,
  	1,509,1,509,1,510,1,510,1,511,1,511,1,512,1,512,1,512,1,512,3,512,4404,
  	8,512,3,512,4406,8,512,1,512,1,512,1,513,1,513,1,513,1,514,1,514,3,514,
  	4415,8,514,1,515,1,515,1,515,1,515,1,515,1,516,1,516,1,517,1,517,1,517,
  	1,517,3,517,4428,8,517,1,517,1,517,1,517,1,518,1,518,1,519,1,519,3,519,
  	4437,8,519,1,520,3,520,4440,8,520,1,520,1,520,1,520,3,520,4445,8,520,
  	1,520,3,520,4448,8,520,1,520,1,520,3,520,4452,8,520,1,520,1,520,1,521,
  	1,521,1,522,5,522,4459,8,522,10,522,12,522,4462,9,522,1,522,1,522,1,522,
  	1,522,1,522,1,522,1,522,1,523,1,523,1,523,1,523,3,523,4475,8,523,3,523,
  	4477,8,523,1,523,1,523,1,524,1,524,1,524,1,524,3,524,4485,8,524,1,525,
  	1,525,1,526,3,526,4490,8,526,1,526,3,526,4493,8,526,1,526,1,526,3,526,
  	4497,8,526,1,526,3,526,4500,8,526,1,526,1,526,1,527,3,527,4505,8,527,
  	1,527,1,527,5,527,4509,8,527,10,527,12,527,4512,9,527,1,527,1,527,1,527,
  	1,528,1,528,1,528,1,529,1,529,1,529,1,529,1,529,1,530,1,530,1,530,1,530,
  	1,530,1,530,1,530,1,530,0,0,531,0,2,4,6,8,10,12,14,16,18,20,22,24,26,
  	28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,
  	74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,
  	116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,
  	152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,
  	188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,222,
  	224,226,228,230,232,234,236,238,240,242,244,246,248,250,252,254,256,258,
  	260,262,264,266,268,270,272,274,276,278,280,282,284,286,288,290,292,294,
  	296,298,300,302,304,306,308,310,312,314,316,318,320,322,324,326,328,330,
  	332,334,336,338,340,342,344,346,348,350,352,354,356,358,360,362,364,366,
  	368,370,372,374,376,378,380,382,384,386,388,390,392,394,396,398,400,402,
  	404,406,408,410,412,414,416,418,420,422,424,426,428,430,432,434,436,438,
  	440,442,444,446,448,450,452,454,456,458,460,462,464,466,468,470,472,474,
  	476,478,480,482,484,486,488,490,492,494,496,498,500,502,504,506,508,510,
  	512,514,516,518,520,522,524,526,528,530,532,534,536,538,540,542,544,546,
  	548,550,552,554,556,558,560,562,564,566,568,570,572,574,576,578,580,582,
  	584,586,588,590,592,594,596,598,600,602,604,606,608,610,612,614,616,618,
  	620,622,624,626,628,630,632,634,636,638,640,642,644,646,648,650,652,654,
  	656,658,660,662,664,666,668,670,672,674,676,678,680,682,684,686,688,690,
  	692,694,696,698,700,702,704,706,708,710,712,714,716,718,720,722,724,726,
  	728,730,732,734,736,738,740,742,744,746,748,750,752,754,756,758,760,762,
  	764,766,768,770,772,774,776,778,780,782,784,786,788,790,792,794,796,798,
  	800,802,804,806,808,810,812,814,816,818,820,822,824,826,828,830,832,834,
  	836,838,840,842,844,846,848,850,852,854,856,858,860,862,864,866,868,870,
  	872,874,876,878,880,882,884,886,888,890,892,894,896,898,900,902,904,906,
  	908,910,912,914,916,918,920,922,924,926,928,930,932,934,936,938,940,942,
  	944,946,948,950,952,954,956,958,960,962,964,966,968,970,972,974,976,978,
  	980,982,984,986,988,990,992,994,996,998,1000,1002,1004,1006,1008,1010,
  	1012,1014,1016,1018,1020,1022,1024,1026,1028,1030,1032,1034,1036,1038,
  	1040,1042,1044,1046,1048,1050,1052,1054,1056,1058,1060,0,16,2,0,74,74,
  	90,90,2,0,133,134,151,151,2,0,63,63,68,68,2,0,7,7,15,15,2,0,143,143,206,
  	206,1,0,155,157,2,0,192,192,212,212,3,0,103,103,153,153,180,180,2,0,118,
  	118,174,174,4,0,92,92,131,131,149,149,230,230,5,0,179,179,192,192,208,
  	215,218,220,223,228,3,0,146,146,198,198,213,214,3,0,128,128,139,139,206,
  	206,1,0,235,236,1,0,222,223,2,0,159,159,197,197,4679,0,1065,1,0,0,0,2,
  	1073,1,0,0,0,4,1075,1,0,0,0,6,1082,1,0,0,0,8,1087,1,0,0,0,10,1097,1,0,
  	0,0,12,1116,1,0,0,0,14,1118,1,0,0,0,16,1120,1,0,0,0,18,1126,1,0,0,0,20,
  	1141,1,0,0,0,22,1149,1,0,0,0,24,1159,1,0,0,0,26,1168,1,0,0,0,28,1174,
  	1,0,0,0,30,1189,1,0,0,0,32,1195,1,0,0,0,34,1199,1,0,0,0,36,1201,1,0,0,
  	0,38,1246,1,0,0,0,40,1250,1,0,0,0,42,1252,1,0,0,0,44,1254,1,0,0,0,46,
  	1257,1,0,0,0,48,1265,1,0,0,0,50,1268,1,0,0,0,52,1281,1,0,0,0,54,1292,
  	1,0,0,0,56,1294,1,0,0,0,58,1297,1,0,0,0,60,1301,1,0,0,0,62,1304,1,0,0,
  	0,64,1307,1,0,0,0,66,1310,1,0,0,0,68,1313,1,0,0,0,70,1316,1,0,0,0,72,
  	1329,1,0,0,0,74,1334,1,0,0,0,76,1339,1,0,0,0,78,1341,1,0,0,0,80,1344,
  	1,0,0,0,82,1348,1,0,0,0,84,1350,1,0,0,0,86,1357,1,0,0,0,88,1360,1,0,0,
  	0,90,1365,1,0,0,0,92,1369,1,0,0,0,94,1371,1,0,0,0,96,1376,1,0,0,0,98,
  	1381,1,0,0,0,100,1397,1,0,0,0,102,1401,1,0,0,0,104,1418,1,0,0,0,106,1436,
  	1,0,0,0,108,1459,1,0,0,0,110,1461,1,0,0,0,112,1470,1,0,0,0,114,1475,1,
  	0,0,0,116,1477,1,0,0,0,118,1490,1,0,0,0,120,1492,1,0,0,0,122,1501,1,0,
  	0,0,124,1506,1,0,0,0,126,1513,1,0,0,0,128,1531,1,0,0,0,130,1533,1,0,0,
  	0,132,1537,1,0,0,0,134,1541,1,0,0,0,136,1546,1,0,0,0,138,1557,1,0,0,0,
  	140,1563,1,0,0,0,142,1569,1,0,0,0,144,1582,1,0,0,0,146,1586,1,0,0,0,148,
  	1599,1,0,0,0,150,1612,1,0,0,0,152,1614,1,0,0,0,154,1626,1,0,0,0,156,1629,
  	1,0,0,0,158,1631,1,0,0,0,160,1634,1,0,0,0,162,1636,1,0,0,0,164,1641,1,
  	0,0,0,166,1645,1,0,0,0,168,1650,1,0,0,0,170,1654,1,0,0,0,172,1659,1,0,
  	0,0,174,1663,1,0,0,0,176,1666,1,0,0,0,178,1671,1,0,0,0,180,1689,1,0,0,
  	0,182,1691,1,0,0,0,184,1695,1,0,0,0,186,1705,1,0,0,0,188,1708,1,0,0,0,
  	190,1716,1,0,0,0,192,1718,1,0,0,0,194,1720,1,0,0,0,196,1731,1,0,0,0,198,
  	1742,1,0,0,0,200,1757,1,0,0,0,202,1768,1,0,0,0,204,1770,1,0,0,0,206,1778,
  	1,0,0,0,208,1780,1,0,0,0,210,1786,1,0,0,0,212,1788,1,0,0,0,214,1791,1,
  	0,0,0,216,1805,1,0,0,0,218,1809,1,0,0,0,220,1811,1,0,0,0,222,1815,1,0,
  	0,0,224,1825,1,0,0,0,226,1828,1,0,0,0,228,1836,1,0,0,0,230,1841,1,0,0,
  	0,232,1853,1,0,0,0,234,1855,1,0,0,0,236,1860,1,0,0,0,238,1884,1,0,0,0,
  	240,1886,1,0,0,0,242,1888,1,0,0,0,244,1890,1,0,0,0,246,1895,1,0,0,0,248,
  	1920,1,0,0,0,250,1922,1,0,0,0,252,1924,1,0,0,0,254,1934,1,0,0,0,256,1956,
  	1,0,0,0,258,1958,1,0,0,0,260,1961,1,0,0,0,262,1967,1,0,0,0,264,1969,1,
  	0,0,0,266,1978,1,0,0,0,268,1980,1,0,0,0,270,1982,1,0,0,0,272,1984,1,0,
  	0,0,274,1999,1,0,0,0,276,2017,1,0,0,0,278,2027,1,0,0,0,280,2031,1,0,0,
  	0,282,2033,1,0,0,0,284,2038,1,0,0,0,286,2041,1,0,0,0,288,2044,1,0,0,0,
  	290,2047,1,0,0,0,292,2052,1,0,0,0,294,2056,1,0,0,0,296,2070,1,0,0,0,298,
  	2080,1,0,0,0,300,2082,1,0,0,0,302,2086,1,0,0,0,304,2094,1,0,0,0,306,2096,
  	1,0,0,0,308,2106,1,0,0,0,310,2113,1,0,0,0,312,2120,1,0,0,0,314,2127,1,
  	0,0,0,316,2134,1,0,0,0,318,2139,1,0,0,0,320,2144,1,0,0,0,322,2149,1,0,
  	0,0,324,2158,1,0,0,0,326,2160,1,0,0,0,328,2166,1,0,0,0,330,2168,1,0,0,
  	0,332,2183,1,0,0,0,334,2198,1,0,0,0,336,2200,1,0,0,0,338,2202,1,0,0,0,
  	340,2204,1,0,0,0,342,2206,1,0,0,0,344,2211,1,0,0,0,346,2219,1,0,0,0,348,
  	2224,1,0,0,0,350,2226,1,0,0,0,352,2230,1,0,0,0,354,2232,1,0,0,0,356,2234,
  	1,0,0,0,358,2244,1,0,0,0,360,2253,1,0,0,0,362,2255,1,0,0,0,364,2261,1,
  	0,0,0,366,2272,1,0,0,0,368,2274,1,0,0,0,370,2285,1,0,0,0,372,2292,1,0,
  	0,0,374,2294,1,0,0,0,376,2299,1,0,0,0,378,2303,1,0,0,0,380,2307,1,0,0,
  	0,382,2311,1,0,0,0,384,2316,1,0,0,0,386,2325,1,0,0,0,388,2339,1,0,0,0,
  	390,2362,1,0,0,0,392,2364,1,0,0,0,394,2368,1,0,0,0,396,2372,1,0,0,0,398,
  	2376,1,0,0,0,400,2391,1,0,0,0,402,2393,1,0,0,0,404,2395,1,0,0,0,406,2398,
  	1,0,0,0,408,2401,1,0,0,0,410,2404,1,0,0,0,412,2407,1,0,0,0,414,2410,1,
  	0,0,0,416,2413,1,0,0,0,418,2430,1,0,0,0,420,2432,1,0,0,0,422,2447,1,0,
  	0,0,424,2488,1,0,0,0,426,2494,1,0,0,0,428,2498,1,0,0,0,430,2500,1,0,0,
  	0,432,2504,1,0,0,0,434,2513,1,0,0,0,436,2515,1,0,0,0,438,2526,1,0,0,0,
  	440,2537,1,0,0,0,442,2548,1,0,0,0,444,2559,1,0,0,0,446,2561,1,0,0,0,448,
  	2563,1,0,0,0,450,2569,1,0,0,0,452,2579,1,0,0,0,454,2584,1,0,0,0,456,2592,
  	1,0,0,0,458,2595,1,0,0,0,460,2601,1,0,0,0,462,2606,1,0,0,0,464,2612,1,
  	0,0,0,466,2618,1,0,0,0,468,2633,1,0,0,0,470,2637,1,0,0,0,472,2652,1,0,
  	0,0,474,2661,1,0,0,0,476,2663,1,0,0,0,478,2666,1,0,0,0,480,2676,1,0,0,
  	0,482,2685,1,0,0,0,484,2710,1,0,0,0,486,2713,1,0,0,0,488,2741,1,0,0,0,
  	490,2743,1,0,0,0,492,2746,1,0,0,0,494,2755,1,0,0,0,496,2758,1,0,0,0,498,
  	2761,1,0,0,0,500,2766,1,0,0,0,502,2789,1,0,0,0,504,2791,1,0,0,0,506,2793,
  	1,0,0,0,508,2795,1,0,0,0,510,2797,1,0,0,0,512,2803,1,0,0,0,514,2808,1,
  	0,0,0,516,2814,1,0,0,0,518,2831,1,0,0,0,520,2837,1,0,0,0,522,2839,1,0,
  	0,0,524,2846,1,0,0,0,526,2852,1,0,0,0,528,2858,1,0,0,0,530,2863,1,0,0,
  	0,532,2869,1,0,0,0,534,2874,1,0,0,0,536,2905,1,0,0,0,538,2907,1,0,0,0,
  	540,2914,1,0,0,0,542,2920,1,0,0,0,544,2936,1,0,0,0,546,2951,1,0,0,0,548,
  	2956,1,0,0,0,550,2958,1,0,0,0,552,2983,1,0,0,0,554,2985,1,0,0,0,556,3004,
  	1,0,0,0,558,3010,1,0,0,0,560,3012,1,0,0,0,562,3019,1,0,0,0,564,3021,1,
  	0,0,0,566,3023,1,0,0,0,568,3029,1,0,0,0,570,3034,1,0,0,0,572,3039,1,0,
  	0,0,574,3044,1,0,0,0,576,3056,1,0,0,0,578,3060,1,0,0,0,580,3063,1,0,0,
  	0,582,3068,1,0,0,0,584,3092,1,0,0,0,586,3106,1,0,0,0,588,3108,1,0,0,0,
  	590,3111,1,0,0,0,592,3126,1,0,0,0,594,3136,1,0,0,0,596,3147,1,0,0,0,598,
  	3158,1,0,0,0,600,3163,1,0,0,0,602,3168,1,0,0,0,604,3172,1,0,0,0,606,3177,
  	1,0,0,0,608,3183,1,0,0,0,610,3191,1,0,0,0,612,3193,1,0,0,0,614,3198,1,
  	0,0,0,616,3201,1,0,0,0,618,3203,1,0,0,0,620,3207,1,0,0,0,622,3209,1,0,
  	0,0,624,3212,1,0,0,0,626,3215,1,0,0,0,628,3224,1,0,0,0,630,3236,1,0,0,
  	0,632,3238,1,0,0,0,634,3245,1,0,0,0,636,3248,1,0,0,0,638,3256,1,0,0,0,
  	640,3285,1,0,0,0,642,3297,1,0,0,0,644,3299,1,0,0,0,646,3301,1,0,0,0,648,
  	3307,1,0,0,0,650,3316,1,0,0,0,652,3334,1,0,0,0,654,3343,1,0,0,0,656,3350,
  	1,0,0,0,658,3352,1,0,0,0,660,3362,1,0,0,0,662,3371,1,0,0,0,664,3380,1,
  	0,0,0,666,3394,1,0,0,0,668,3399,1,0,0,0,670,3402,1,0,0,0,672,3406,1,0,
  	0,0,674,3414,1,0,0,0,676,3418,1,0,0,0,678,3422,1,0,0,0,680,3426,1,0,0,
  	0,682,3442,1,0,0,0,684,3446,1,0,0,0,686,3462,1,0,0,0,688,3466,1,0,0,0,
  	690,3470,1,0,0,0,692,3474,1,0,0,0,694,3478,1,0,0,0,696,3480,1,0,0,0,698,
  	3484,1,0,0,0,700,3488,1,0,0,0,702,3495,1,0,0,0,704,3511,1,0,0,0,706,3522,
  	1,0,0,0,708,3530,1,0,0,0,710,3533,1,0,0,0,712,3553,1,0,0,0,714,3577,1,
  	0,0,0,716,3604,1,0,0,0,718,3610,1,0,0,0,720,3612,1,0,0,0,722,3617,1,0,
  	0,0,724,3621,1,0,0,0,726,3651,1,0,0,0,728,3657,1,0,0,0,730,3659,1,0,0,
  	0,732,3667,1,0,0,0,734,3670,1,0,0,0,736,3681,1,0,0,0,738,3684,1,0,0,0,
  	740,3687,1,0,0,0,742,3693,1,0,0,0,744,3700,1,0,0,0,746,3713,1,0,0,0,748,
  	3717,1,0,0,0,750,3730,1,0,0,0,752,3732,1,0,0,0,754,3735,1,0,0,0,756,3761,
  	1,0,0,0,758,3763,1,0,0,0,760,3765,1,0,0,0,762,3773,1,0,0,0,764,3777,1,
  	0,0,0,766,3793,1,0,0,0,768,3795,1,0,0,0,770,3806,1,0,0,0,772,3808,1,0,
  	0,0,774,3813,1,0,0,0,776,3819,1,0,0,0,778,3825,1,0,0,0,780,3830,1,0,0,
  	0,782,3837,1,0,0,0,784,3843,1,0,0,0,786,3849,1,0,0,0,788,3856,1,0,0,0,
  	790,3871,1,0,0,0,792,3878,1,0,0,0,794,3903,1,0,0,0,796,3905,1,0,0,0,798,
  	3930,1,0,0,0,800,3932,1,0,0,0,802,3937,1,0,0,0,804,3945,1,0,0,0,806,3955,
  	1,0,0,0,808,3959,1,0,0,0,810,3966,1,0,0,0,812,3970,1,0,0,0,814,3978,1,
  	0,0,0,816,3983,1,0,0,0,818,3991,1,0,0,0,820,4002,1,0,0,0,822,4004,1,0,
  	0,0,824,4006,1,0,0,0,826,4009,1,0,0,0,828,4021,1,0,0,0,830,4027,1,0,0,
  	0,832,4029,1,0,0,0,834,4036,1,0,0,0,836,4040,1,0,0,0,838,4042,1,0,0,0,
  	840,4046,1,0,0,0,842,4048,1,0,0,0,844,4051,1,0,0,0,846,4054,1,0,0,0,848,
  	4073,1,0,0,0,850,4075,1,0,0,0,852,4077,1,0,0,0,854,4086,1,0,0,0,856,4088,
  	1,0,0,0,858,4090,1,0,0,0,860,4092,1,0,0,0,862,4094,1,0,0,0,864,4096,1,
  	0,0,0,866,4098,1,0,0,0,868,4100,1,0,0,0,870,4102,1,0,0,0,872,4104,1,0,
  	0,0,874,4106,1,0,0,0,876,4108,1,0,0,0,878,4110,1,0,0,0,880,4112,1,0,0,
  	0,882,4115,1,0,0,0,884,4117,1,0,0,0,886,4119,1,0,0,0,888,4121,1,0,0,0,
  	890,4124,1,0,0,0,892,4130,1,0,0,0,894,4132,1,0,0,0,896,4134,1,0,0,0,898,
  	4136,1,0,0,0,900,4145,1,0,0,0,902,4147,1,0,0,0,904,4149,1,0,0,0,906,4151,
  	1,0,0,0,908,4153,1,0,0,0,910,4157,1,0,0,0,912,4162,1,0,0,0,914,4171,1,
  	0,0,0,916,4173,1,0,0,0,918,4177,1,0,0,0,920,4179,1,0,0,0,922,4182,1,0,
  	0,0,924,4185,1,0,0,0,926,4188,1,0,0,0,928,4195,1,0,0,0,930,4197,1,0,0,
  	0,932,4199,1,0,0,0,934,4201,1,0,0,0,936,4203,1,0,0,0,938,4205,1,0,0,0,
  	940,4207,1,0,0,0,942,4209,1,0,0,0,944,4211,1,0,0,0,946,4213,1,0,0,0,948,
  	4221,1,0,0,0,950,4226,1,0,0,0,952,4228,1,0,0,0,954,4230,1,0,0,0,956,4232,
  	1,0,0,0,958,4234,1,0,0,0,960,4238,1,0,0,0,962,4242,1,0,0,0,964,4246,1,
  	0,0,0,966,4255,1,0,0,0,968,4263,1,0,0,0,970,4271,1,0,0,0,972,4273,1,0,
  	0,0,974,4277,1,0,0,0,976,4279,1,0,0,0,978,4281,1,0,0,0,980,4283,1,0,0,
  	0,982,4293,1,0,0,0,984,4295,1,0,0,0,986,4297,1,0,0,0,988,4299,1,0,0,0,
  	990,4301,1,0,0,0,992,4303,1,0,0,0,994,4311,1,0,0,0,996,4313,1,0,0,0,998,
  	4315,1,0,0,0,1000,4320,1,0,0,0,1002,4325,1,0,0,0,1004,4353,1,0,0,0,1006,
  	4355,1,0,0,0,1008,4370,1,0,0,0,1010,4375,1,0,0,0,1012,4382,1,0,0,0,1014,
  	4387,1,0,0,0,1016,4391,1,0,0,0,1018,4393,1,0,0,0,1020,4395,1,0,0,0,1022,
  	4397,1,0,0,0,1024,4405,1,0,0,0,1026,4409,1,0,0,0,1028,4414,1,0,0,0,1030,
  	4416,1,0,0,0,1032,4421,1,0,0,0,1034,4423,1,0,0,0,1036,4432,1,0,0,0,1038,
  	4436,1,0,0,0,1040,4439,1,0,0,0,1042,4455,1,0,0,0,1044,4460,1,0,0,0,1046,
  	4476,1,0,0,0,1048,4484,1,0,0,0,1050,4486,1,0,0,0,1052,4489,1,0,0,0,1054,
  	4504,1,0,0,0,1056,4516,1,0,0,0,1058,4519,1,0,0,0,1060,4524,1,0,0,0,1062,
  	1064,3,2,1,0,1063,1062,1,0,0,0,1064,1067,1,0,0,0,1065,1063,1,0,0,0,1065,
  	1066,1,0,0,0,1066,1068,1,0,0,0,1067,1065,1,0,0,0,1068,1069,5,0,0,1,1069,
  	1,1,0,0,0,1070,1074,3,638,319,0,1071,1074,3,38,19,0,1072,1074,3,40,20,
  	0,1073,1070,1,0,0,0,1073,1071,1,0,0,0,1073,1072,1,0,0,0,1074,3,1,0,0,
  	0,1075,1076,3,0,0,0,1076,5,1,0,0,0,1077,1083,5,191,0,0,1078,1079,5,201,
  	0,0,1079,1080,3,14,7,0,1080,1081,5,202,0,0,1081,1083,1,0,0,0,1082,1077,
  	1,0,0,0,1082,1078,1,0,0,0,1083,7,1,0,0,0,1084,1086,3,576,288,0,1085,1084,
  	1,0,0,0,1086,1089,1,0,0,0,1087,1085,1,0,0,0,1087,1088,1,0,0,0,1088,1090,
  	1,0,0,0,1089,1087,1,0,0,0,1090,1091,5,110,0,0,1091,1092,3,10,5,0,1092,
  	1093,3,6,3,0,1093,9,1,0,0,0,1094,1095,3,598,299,0,1095,1096,5,126,0,0,
  	1096,1098,1,0,0,0,1097,1094,1,0,0,0,1097,1098,1,0,0,0,1098,1099,1,0,0,
  	0,1099,1104,3,626,313,0,1100,1101,5,205,0,0,1101,1103,3,626,313,0,1102,
  	1100,1,0,0,0,1103,1106,1,0,0,0,1104,1102,1,0,0,0,1104,1105,1,0,0,0,1105,
  	1107,1,0,0,0,1106,1104,1,0,0,0,1107,1108,5,173,0,0,1108,1113,3,626,313,
  	0,1109,1110,5,205,0,0,1110,1112,3,626,313,0,1111,1109,1,0,0,0,1112,1115,
  	1,0,0,0,1113,1111,1,0,0,0,1113,1114,1,0,0,0,1114,11,1,0,0,0,1115,1113,
  	1,0,0,0,1116,1117,3,626,313,0,1117,13,1,0,0,0,1118,1119,3,18,9,0,1119,
  	15,1,0,0,0,1120,1121,3,18,9,0,1121,17,1,0,0,0,1122,1127,3,20,10,0,1123,
  	1127,3,22,11,0,1124,1127,3,24,12,0,1125,1127,3,1044,522,0,1126,1122,1,
  	0,0,0,1126,1123,1,0,0,0,1126,1124,1,0,0,0,1126,1125,1,0,0,0,1127,19,1,
  	0,0,0,1128,1129,5,102,0,0,1129,1139,3,598,299,0,1130,1131,5,89,0,0,1131,
  	1136,3,12,6,0,1132,1133,5,205,0,0,1133,1135,3,12,6,0,1134,1132,1,0,0,
  	0,1135,1138,1,0,0,0,1136,1134,1,0,0,0,1136,1137,1,0,0,0,1137,1140,1,0,
  	0,0,1138,1136,1,0,0,0,1139,1130,1,0,0,0,1139,1140,1,0,0,0,1140,1142,1,
  	0,0,0,1141,1128,1,0,0,0,1141,1142,1,0,0,0,1142,1145,1,0,0,0,1143,1144,
  	5,181,0,0,1144,1146,5,237,0,0,1145,1143,1,0,0,0,1145,1146,1,0,0,0,1146,
  	1147,1,0,0,0,1147,1148,5,187,0,0,1148,21,1,0,0,0,1149,1150,5,114,0,0,
  	1150,1153,3,598,299,0,1151,1152,5,181,0,0,1152,1154,5,237,0,0,1153,1151,
  	1,0,0,0,1153,1154,1,0,0,0,1154,1155,1,0,0,0,1155,1156,5,187,0,0,1156,
  	23,1,0,0,0,1157,1158,5,161,0,0,1158,1160,3,598,299,0,1159,1157,1,0,0,
  	0,1159,1160,1,0,0,0,1160,1161,1,0,0,0,1161,1162,5,140,0,0,1162,1163,5,
  	237,0,0,1163,1164,5,187,0,0,1164,25,1,0,0,0,1165,1167,3,32,16,0,1166,
  	1165,1,0,0,0,1167,1170,1,0,0,0,1168,1166,1,0,0,0,1168,1169,1,0,0,0,1169,
  	27,1,0,0,0,1170,1168,1,0,0,0,1171,1173,3,578,289,0,1172,1171,1,0,0,0,
  	1173,1176,1,0,0,0,1174,1172,1,0,0,0,1174,1175,1,0,0,0,1175,1177,1,0,0,
  	0,1176,1174,1,0,0,0,1177,1178,3,1056,528,0,1178,1179,3,30,15,0,1179,29,
  	1,0,0,0,1180,1190,5,191,0,0,1181,1185,5,201,0,0,1182,1184,3,32,16,0,1183,
  	1182,1,0,0,0,1184,1187,1,0,0,0,1185,1183,1,0,0,0,1185,1186,1,0,0,0,1186,
  	1188,1,0,0,0,1187,1185,1,0,0,0,1188,1190,5,202,0,0,1189,1180,1,0,0,0,
  	1189,1181,1,0,0,0,1190,31,1,0,0,0,1191,1196,3,34,17,0,1192,1196,3,1058,
  	529,0,1193,1196,3,36,18,0,1194,1196,3,628,314,0,1195,1191,1,0,0,0,1195,
  	1192,1,0,0,0,1195,1193,1,0,0,0,1195,1194,1,0,0,0,1196,33,1,0,0,0,1197,
  	1200,3,38,19,0,1198,1200,3,40,20,0,1199,1197,1,0,0,0,1199,1198,1,0,0,
  	0,1200,35,1,0,0,0,1201,1202,3,616,308,0,1202,1206,5,8,0,0,1203,1204,5,
  	219,0,0,1204,1205,5,232,0,0,1205,1207,5,227,0,0,1206,1203,1,0,0,0,1206,
  	1207,1,0,0,0,1207,1209,1,0,0,0,1208,1210,5,232,0,0,1209,1208,1,0,0,0,
  	1209,1210,1,0,0,0,1210,1211,1,0,0,0,1211,1212,5,125,0,0,1212,1213,3,626,
  	313,0,1213,1214,3,6,3,0,1214,37,1,0,0,0,1215,1247,3,28,14,0,1216,1247,
  	3,1054,527,0,1217,1247,3,18,9,0,1218,1247,3,8,4,0,1219,1247,3,122,61,
  	0,1220,1247,3,126,63,0,1221,1247,3,138,69,0,1222,1247,3,140,70,0,1223,
  	1247,3,162,81,0,1224,1247,3,166,83,0,1225,1247,3,176,88,0,1226,1247,3,
  	234,117,0,1227,1247,3,198,99,0,1228,1247,3,170,85,0,1229,1247,3,272,136,
  	0,1230,1247,3,448,224,0,1231,1247,3,386,193,0,1232,1247,3,462,231,0,1233,
  	1247,3,470,235,0,1234,1247,3,448,224,0,1235,1247,3,386,193,0,1236,1247,
  	3,470,235,0,1237,1247,3,510,255,0,1238,1247,3,514,257,0,1239,1247,3,526,
  	263,0,1240,1247,3,530,265,0,1241,1247,3,544,272,0,1242,1247,3,566,283,
  	0,1243,1247,3,570,285,0,1244,1247,3,574,287,0,1245,1247,3,592,296,0,1246,
  	1215,1,0,0,0,1246,1216,1,0,0,0,1246,1217,1,0,0,0,1246,1218,1,0,0,0,1246,
  	1219,1,0,0,0,1246,1220,1,0,0,0,1246,1221,1,0,0,0,1246,1222,1,0,0,0,1246,
  	1223,1,0,0,0,1246,1224,1,0,0,0,1246,1225,1,0,0,0,1246,1226,1,0,0,0,1246,
  	1227,1,0,0,0,1246,1228,1,0,0,0,1246,1229,1,0,0,0,1246,1230,1,0,0,0,1246,
  	1231,1,0,0,0,1246,1232,1,0,0,0,1246,1233,1,0,0,0,1246,1234,1,0,0,0,1246,
  	1235,1,0,0,0,1246,1236,1,0,0,0,1246,1237,1,0,0,0,1246,1238,1,0,0,0,1246,
  	1239,1,0,0,0,1246,1240,1,0,0,0,1246,1241,1,0,0,0,1246,1242,1,0,0,0,1246,
  	1243,1,0,0,0,1246,1244,1,0,0,0,1246,1245,1,0,0,0,1247,39,1,0,0,0,1248,
  	1251,3,100,50,0,1249,1251,3,102,51,0,1250,1248,1,0,0,0,1250,1249,1,0,
  	0,0,1251,41,1,0,0,0,1252,1253,7,0,0,0,1253,43,1,0,0,0,1254,1255,3,578,
  	289,0,1255,45,1,0,0,0,1256,1258,3,42,21,0,1257,1256,1,0,0,0,1257,1258,
  	1,0,0,0,1258,1262,1,0,0,0,1259,1261,3,44,22,0,1260,1259,1,0,0,0,1261,
  	1264,1,0,0,0,1262,1260,1,0,0,0,1262,1263,1,0,0,0,1263,47,1,0,0,0,1264,
  	1262,1,0,0,0,1265,1266,3,50,25,0,1266,1267,3,52,26,0,1267,49,1,0,0,0,
  	1268,1270,3,598,299,0,1269,1271,3,110,55,0,1270,1269,1,0,0,0,1270,1271,
  	1,0,0,0,1271,51,1,0,0,0,1272,1282,5,191,0,0,1273,1277,5,201,0,0,1274,
  	1276,3,54,27,0,1275,1274,1,0,0,0,1276,1279,1,0,0,0,1277,1275,1,0,0,0,
  	1277,1278,1,0,0,0,1278,1280,1,0,0,0,1279,1277,1,0,0,0,1280,1282,5,202,
  	0,0,1281,1272,1,0,0,0,1281,1273,1,0,0,0,1282,53,1,0,0,0,1283,1293,3,56,
  	28,0,1284,1293,3,58,29,0,1285,1293,3,60,30,0,1286,1288,3,154,77,0,1287,
  	1286,1,0,0,0,1287,1288,1,0,0,0,1288,1289,1,0,0,0,1289,1293,3,62,31,0,
  	1290,1293,3,36,18,0,1291,1293,3,628,314,0,1292,1283,1,0,0,0,1292,1284,
  	1,0,0,0,1292,1285,1,0,0,0,1292,1287,1,0,0,0,1292,1290,1,0,0,0,1292,1291,
  	1,0,0,0,1293,55,1,0,0,0,1294,1295,3,616,308,0,1295,1296,3,38,19,0,1296,
  	57,1,0,0,0,1297,1298,3,616,308,0,1298,1299,5,73,0,0,1299,1300,3,108,54,
  	0,1300,59,1,0,0,0,1301,1302,3,616,308,0,1302,1303,3,100,50,0,1303,61,
  	1,0,0,0,1304,1305,3,616,308,0,1305,1306,3,102,51,0,1306,63,1,0,0,0,1307,
  	1308,3,616,308,0,1308,1309,3,104,52,0,1309,65,1,0,0,0,1310,1311,3,616,
  	308,0,1311,1312,3,106,53,0,1312,67,1,0,0,0,1313,1314,7,1,0,0,1314,69,
  	1,0,0,0,1315,1317,3,68,34,0,1316,1315,1,0,0,0,1316,1317,1,0,0,0,1317,
  	1319,1,0,0,0,1318,1320,5,29,0,0,1319,1318,1,0,0,0,1319,1320,1,0,0,0,1320,
  	1327,1,0,0,0,1321,1328,5,74,0,0,1322,1328,5,184,0,0,1323,1325,5,90,0,
  	0,1324,1326,5,184,0,0,1325,1324,1,0,0,0,1325,1326,1,0,0,0,1326,1328,1,
  	0,0,0,1327,1321,1,0,0,0,1327,1322,1,0,0,0,1327,1323,1,0,0,0,1327,1328,
  	1,0,0,0,1328,71,1,0,0,0,1329,1331,3,70,35,0,1330,1332,5,55,0,0,1331,1330,
  	1,0,0,0,1331,1332,1,0,0,0,1332,73,1,0,0,0,1333,1335,5,116,0,0,1334,1333,
  	1,0,0,0,1334,1335,1,0,0,0,1335,1337,1,0,0,0,1336,1338,3,76,38,0,1337,
  	1336,1,0,0,0,1337,1338,1,0,0,0,1338,75,1,0,0,0,1339,1340,3,78,39,0,1340,
  	77,1,0,0,0,1341,1342,3,72,36,0,1342,1343,3,88,44,0,1343,79,1,0,0,0,1344,
  	1345,3,578,289,0,1345,81,1,0,0,0,1346,1349,3,74,37,0,1347,1349,3,72,36,
  	0,1348,1346,1,0,0,0,1348,1347,1,0,0,0,1349,83,1,0,0,0,1350,1354,3,82,
  	41,0,1351,1353,3,80,40,0,1352,1351,1,0,0,0,1353,1356,1,0,0,0,1354,1352,
  	1,0,0,0,1354,1355,1,0,0,0,1355,85,1,0,0,0,1356,1354,1,0,0,0,1357,1358,
  	3,88,44,0,1358,1359,3,90,45,0,1359,87,1,0,0,0,1360,1362,3,598,299,0,1361,
  	1363,3,726,363,0,1362,1361,1,0,0,0,1362,1363,1,0,0,0,1363,89,1,0,0,0,
  	1364,1366,3,1022,511,0,1365,1364,1,0,0,0,1365,1366,1,0,0,0,1366,1367,
  	1,0,0,0,1367,1368,3,92,46,0,1368,91,1,0,0,0,1369,1370,3,52,26,0,1370,
  	93,1,0,0,0,1371,1372,3,70,35,0,1372,1373,3,86,43,0,1373,95,1,0,0,0,1374,
  	1377,3,74,37,0,1375,1377,3,70,35,0,1376,1374,1,0,0,0,1376,1375,1,0,0,
  	0,1377,1378,1,0,0,0,1378,1379,5,55,0,0,1379,1380,3,86,43,0,1380,97,1,
  	0,0,0,1381,1385,3,752,376,0,1382,1384,3,728,364,0,1383,1382,1,0,0,0,1384,
  	1387,1,0,0,0,1385,1383,1,0,0,0,1385,1386,1,0,0,0,1386,1388,1,0,0,0,1387,
  	1385,1,0,0,0,1388,1389,3,92,46,0,1389,99,1,0,0,0,1390,1398,3,94,47,0,
  	1391,1398,3,96,48,0,1392,1398,3,124,62,0,1393,1398,3,134,67,0,1394,1398,
  	3,194,97,0,1395,1398,3,196,98,0,1396,1398,3,594,297,0,1397,1390,1,0,0,
  	0,1397,1391,1,0,0,0,1397,1392,1,0,0,0,1397,1393,1,0,0,0,1397,1394,1,0,
  	0,0,1397,1395,1,0,0,0,1397,1396,1,0,0,0,1398,101,1,0,0,0,1399,1402,3,
  	104,52,0,1400,1402,3,106,53,0,1401,1399,1,0,0,0,1401,1400,1,0,0,0,1402,
  	103,1,0,0,0,1403,1419,3,144,72,0,1404,1419,3,146,73,0,1405,1419,3,148,
  	74,0,1406,1419,3,152,76,0,1407,1419,3,164,82,0,1408,1419,3,168,84,0,1409,
  	1419,3,554,277,0,1410,1419,3,572,286,0,1411,1419,3,172,86,0,1412,1419,
  	3,178,89,0,1413,1419,3,214,107,0,1414,1419,3,230,115,0,1415,1419,3,236,
  	118,0,1416,1419,3,244,122,0,1417,1419,3,246,123,0,1418,1403,1,0,0,0,1418,
  	1404,1,0,0,0,1418,1405,1,0,0,0,1418,1406,1,0,0,0,1418,1407,1,0,0,0,1418,
  	1408,1,0,0,0,1418,1409,1,0,0,0,1418,1410,1,0,0,0,1418,1411,1,0,0,0,1418,
  	1412,1,0,0,0,1418,1413,1,0,0,0,1418,1414,1,0,0,0,1418,1415,1,0,0,0,1418,
  	1416,1,0,0,0,1418,1417,1,0,0,0,1419,105,1,0,0,0,1420,1437,3,290,145,0,
  	1421,1437,3,450,225,0,1422,1437,3,416,208,0,1423,1437,3,464,232,0,1424,
  	1437,3,498,249,0,1425,1437,3,512,256,0,1426,1437,3,516,258,0,1427,1437,
  	3,528,264,0,1428,1437,3,532,266,0,1429,1437,3,540,270,0,1430,1437,3,568,
  	284,0,1431,1437,3,294,147,0,1432,1437,3,420,210,0,1433,1437,3,542,271,
  	0,1434,1437,3,466,233,0,1435,1437,3,500,250,0,1436,1420,1,0,0,0,1436,
  	1421,1,0,0,0,1436,1422,1,0,0,0,1436,1423,1,0,0,0,1436,1424,1,0,0,0,1436,
  	1425,1,0,0,0,1436,1426,1,0,0,0,1436,1427,1,0,0,0,1436,1428,1,0,0,0,1436,
  	1429,1,0,0,0,1436,1430,1,0,0,0,1436,1431,1,0,0,0,1436,1432,1,0,0,0,1436,
  	1433,1,0,0,0,1436,1434,1,0,0,0,1436,1435,1,0,0,0,1437,107,1,0,0,0,1438,
  	1460,3,98,49,0,1439,1460,3,96,48,0,1440,1460,3,124,62,0,1441,1460,3,194,
  	97,0,1442,1460,3,196,98,0,1443,1460,3,144,72,0,1444,1460,3,146,73,0,1445,
  	1460,3,148,74,0,1446,1460,3,152,76,0,1447,1460,3,164,82,0,1448,1460,3,
  	168,84,0,1449,1460,3,554,277,0,1450,1460,3,572,286,0,1451,1460,3,172,
  	86,0,1452,1460,3,178,89,0,1453,1460,3,214,107,0,1454,1460,3,230,115,0,
  	1455,1460,3,236,118,0,1456,1460,3,244,122,0,1457,1460,3,246,123,0,1458,
  	1460,3,106,53,0,1459,1438,1,0,0,0,1459,1439,1,0,0,0,1459,1440,1,0,0,0,
  	1459,1441,1,0,0,0,1459,1442,1,0,0,0,1459,1443,1,0,0,0,1459,1444,1,0,0,
  	0,1459,1445,1,0,0,0,1459,1446,1,0,0,0,1459,1447,1,0,0,0,1459,1448,1,0,
  	0,0,1459,1449,1,0,0,0,1459,1450,1,0,0,0,1459,1451,1,0,0,0,1459,1452,1,
  	0,0,0,1459,1453,1,0,0,0,1459,1454,1,0,0,0,1459,1455,1,0,0,0,1459,1456,
  	1,0,0,0,1459,1457,1,0,0,0,1459,1458,1,0,0,0,1460,109,1,0,0,0,1461,1462,
  	5,84,0,0,1462,1467,3,708,354,0,1463,1464,5,205,0,0,1464,1466,3,708,354,
  	0,1465,1463,1,0,0,0,1466,1469,1,0,0,0,1467,1465,1,0,0,0,1467,1468,1,0,
  	0,0,1468,111,1,0,0,0,1469,1467,1,0,0,0,1470,1471,5,3,0,0,1471,1472,3,
  	114,57,0,1472,113,1,0,0,0,1473,1476,3,626,313,0,1474,1476,3,758,379,0,
  	1475,1473,1,0,0,0,1475,1474,1,0,0,0,1476,115,1,0,0,0,1477,1488,3,118,
  	59,0,1478,1480,5,150,0,0,1479,1478,1,0,0,0,1479,1480,1,0,0,0,1480,1482,
  	1,0,0,0,1481,1483,5,48,0,0,1482,1481,1,0,0,0,1482,1483,1,0,0,0,1483,1489,
  	1,0,0,0,1484,1486,5,48,0,0,1485,1487,5,150,0,0,1486,1485,1,0,0,0,1486,
  	1487,1,0,0,0,1487,1489,1,0,0,0,1488,1479,1,0,0,0,1488,1484,1,0,0,0,1489,
  	117,1,0,0,0,1490,1491,3,120,60,0,1491,119,1,0,0,0,1492,1496,5,203,0,0,
  	1493,1494,3,1036,518,0,1494,1495,5,218,0,0,1495,1497,1,0,0,0,1496,1493,
  	1,0,0,0,1496,1497,1,0,0,0,1497,1498,1,0,0,0,1498,1499,3,1036,518,0,1499,
  	1500,5,204,0,0,1500,121,1,0,0,0,1501,1502,3,46,23,0,1502,1503,5,16,0,
  	0,1503,1504,5,27,0,0,1504,1505,3,48,24,0,1505,123,1,0,0,0,1506,1507,3,
  	84,42,0,1507,1508,5,16,0,0,1508,1509,3,86,43,0,1509,125,1,0,0,0,1510,
  	1512,3,44,22,0,1511,1510,1,0,0,0,1512,1515,1,0,0,0,1513,1511,1,0,0,0,
  	1513,1514,1,0,0,0,1514,1516,1,0,0,0,1515,1513,1,0,0,0,1516,1517,5,32,
  	0,0,1517,1518,5,27,0,0,1518,1519,3,50,25,0,1519,1520,3,128,64,0,1520,
  	127,1,0,0,0,1521,1532,5,191,0,0,1522,1527,5,201,0,0,1523,1526,3,16,8,
  	0,1524,1526,3,130,65,0,1525,1523,1,0,0,0,1525,1524,1,0,0,0,1526,1529,
  	1,0,0,0,1527,1525,1,0,0,0,1527,1528,1,0,0,0,1528,1530,1,0,0,0,1529,1527,
  	1,0,0,0,1530,1532,5,202,0,0,1531,1521,1,0,0,0,1531,1522,1,0,0,0,1532,
  	129,1,0,0,0,1533,1534,3,616,308,0,1534,1535,3,132,66,0,1535,131,1,0,0,
  	0,1536,1538,5,32,0,0,1537,1536,1,0,0,0,1537,1538,1,0,0,0,1538,1539,1,
  	0,0,0,1539,1540,3,86,43,0,1540,133,1,0,0,0,1541,1542,3,84,42,0,1542,1543,
  	5,32,0,0,1543,1544,3,86,43,0,1544,135,1,0,0,0,1545,1547,3,42,21,0,1546,
  	1545,1,0,0,0,1546,1547,1,0,0,0,1547,1549,1,0,0,0,1548,1550,5,41,0,0,1549,
  	1548,1,0,0,0,1549,1550,1,0,0,0,1550,1554,1,0,0,0,1551,1553,3,44,22,0,
  	1552,1551,1,0,0,0,1553,1556,1,0,0,0,1554,1552,1,0,0,0,1554,1555,1,0,0,
  	0,1555,137,1,0,0,0,1556,1554,1,0,0,0,1557,1558,3,136,68,0,1558,1559,5,
  	50,0,0,1559,1560,5,27,0,0,1560,1561,3,48,24,0,1561,139,1,0,0,0,1562,1564,
  	3,42,21,0,1563,1562,1,0,0,0,1563,1564,1,0,0,0,1564,1565,1,0,0,0,1565,
  	1566,5,41,0,0,1566,1567,5,27,0,0,1567,1568,3,48,24,0,1568,141,1,0,0,0,
  	1569,1571,3,72,36,0,1570,1572,5,41,0,0,1571,1570,1,0,0,0,1571,1572,1,
  	0,0,0,1572,1574,1,0,0,0,1573,1575,3,150,75,0,1574,1573,1,0,0,0,1574,1575,
  	1,0,0,0,1575,1579,1,0,0,0,1576,1578,3,80,40,0,1577,1576,1,0,0,0,1578,
  	1581,1,0,0,0,1579,1577,1,0,0,0,1579,1580,1,0,0,0,1580,143,1,0,0,0,1581,
  	1579,1,0,0,0,1582,1583,3,142,71,0,1583,1584,5,50,0,0,1584,1585,3,86,43,
  	0,1585,145,1,0,0,0,1586,1587,3,72,36,0,1587,1589,5,41,0,0,1588,1590,3,
  	150,75,0,1589,1588,1,0,0,0,1589,1590,1,0,0,0,1590,1594,1,0,0,0,1591,1593,
  	3,80,40,0,1592,1591,1,0,0,0,1593,1596,1,0,0,0,1594,1592,1,0,0,0,1594,
  	1595,1,0,0,0,1595,1597,1,0,0,0,1596,1594,1,0,0,0,1597,1598,3,86,43,0,
  	1598,147,1,0,0,0,1599,1601,3,72,36,0,1600,1602,5,41,0,0,1601,1600,1,0,
  	0,0,1601,1602,1,0,0,0,1602,1603,1,0,0,0,1603,1607,3,150,75,0,1604,1606,
  	3,80,40,0,1605,1604,1,0,0,0,1606,1609,1,0,0,0,1607,1605,1,0,0,0,1607,
  	1608,1,0,0,0,1608,1610,1,0,0,0,1609,1607,1,0,0,0,1610,1611,3,86,43,0,
  	1611,149,1,0,0,0,1612,1613,7,2,0,0,1613,151,1,0,0,0,1614,1615,3,142,71,
  	0,1615,1622,5,33,0,0,1616,1618,3,752,376,0,1617,1619,3,726,363,0,1618,
  	1617,1,0,0,0,1618,1619,1,0,0,0,1619,1623,1,0,0,0,1620,1621,5,50,0,0,1621,
  	1623,3,88,44,0,1622,1616,1,0,0,0,1622,1620,1,0,0,0,1623,1624,1,0,0,0,
  	1624,1625,3,90,45,0,1625,153,1,0,0,0,1626,1627,5,172,0,0,1627,1628,3,
  	156,78,0,1628,155,1,0,0,0,1629,1630,3,158,79,0,1630,157,1,0,0,0,1631,
  	1632,3,160,80,0,1632,159,1,0,0,0,1633,1635,3,118,59,0,1634,1633,1,0,0,
  	0,1634,1635,1,0,0,0,1635,161,1,0,0,0,1636,1637,3,136,68,0,1637,1638,5,
  	43,0,0,1638,1639,5,27,0,0,1639,1640,3,48,24,0,1640,163,1,0,0,0,1641,1642,
  	3,142,71,0,1642,1643,5,43,0,0,1643,1644,3,86,43,0,1644,165,1,0,0,0,1645,
  	1646,3,136,68,0,1646,1647,5,52,0,0,1647,1648,5,27,0,0,1648,1649,3,48,
  	24,0,1649,167,1,0,0,0,1650,1651,3,142,71,0,1651,1652,5,52,0,0,1652,1653,
  	3,86,43,0,1653,169,1,0,0,0,1654,1655,3,46,23,0,1655,1656,5,54,0,0,1656,
  	1657,5,27,0,0,1657,1658,3,48,24,0,1658,171,1,0,0,0,1659,1660,3,142,71,
  	0,1660,1661,5,54,0,0,1661,1662,3,86,43,0,1662,173,1,0,0,0,1663,1664,5,
  	198,0,0,1664,1665,3,626,313,0,1665,175,1,0,0,0,1666,1667,3,136,68,0,1667,
  	1668,5,23,0,0,1668,1669,5,27,0,0,1669,1670,3,48,24,0,1670,177,1,0,0,0,
  	1671,1683,3,142,71,0,1672,1673,5,23,0,0,1673,1675,3,88,44,0,1674,1676,
  	3,1022,511,0,1675,1674,1,0,0,0,1675,1676,1,0,0,0,1676,1679,1,0,0,0,1677,
  	1678,5,22,0,0,1678,1680,3,180,90,0,1679,1677,1,0,0,0,1679,1680,1,0,0,
  	0,1680,1684,1,0,0,0,1681,1682,5,22,0,0,1682,1684,3,180,90,0,1683,1672,
  	1,0,0,0,1683,1681,1,0,0,0,1684,1685,1,0,0,0,1685,1686,3,92,46,0,1686,
  	179,1,0,0,0,1687,1690,3,182,91,0,1688,1690,3,184,92,0,1689,1687,1,0,0,
  	0,1689,1688,1,0,0,0,1690,181,1,0,0,0,1691,1692,3,186,93,0,1692,1693,5,
  	173,0,0,1693,1694,3,186,93,0,1694,183,1,0,0,0,1695,1696,5,199,0,0,1696,
  	1699,3,186,93,0,1697,1698,5,205,0,0,1698,1700,3,186,93,0,1699,1697,1,
  	0,0,0,1700,1701,1,0,0,0,1701,1699,1,0,0,0,1701,1702,1,0,0,0,1702,1703,
  	1,0,0,0,1703,1704,5,200,0,0,1704,185,1,0,0,0,1705,1706,3,790,395,0,1706,
  	187,1,0,0,0,1707,1709,3,190,95,0,1708,1707,1,0,0,0,1708,1709,1,0,0,0,
  	1709,1712,1,0,0,0,1710,1711,5,232,0,0,1711,1713,5,86,0,0,1712,1710,1,
  	0,0,0,1712,1713,1,0,0,0,1713,1714,1,0,0,0,1714,1715,3,752,376,0,1715,
  	189,1,0,0,0,1716,1717,3,192,96,0,1717,191,1,0,0,0,1718,1719,3,118,59,
  	0,1719,193,1,0,0,0,1720,1723,3,84,42,0,1721,1722,5,96,0,0,1722,1724,3,
  	88,44,0,1723,1721,1,0,0,0,1723,1724,1,0,0,0,1724,1725,1,0,0,0,1725,1726,
  	5,17,0,0,1726,1727,3,186,93,0,1727,1728,5,221,0,0,1728,1729,3,186,93,
  	0,1729,1730,3,92,46,0,1730,195,1,0,0,0,1731,1734,3,84,42,0,1732,1733,
  	5,171,0,0,1733,1735,3,88,44,0,1734,1732,1,0,0,0,1734,1735,1,0,0,0,1735,
  	1736,1,0,0,0,1736,1737,5,123,0,0,1737,1738,3,186,93,0,1738,1739,5,172,
  	0,0,1739,1740,3,186,93,0,1740,1741,3,92,46,0,1741,197,1,0,0,0,1742,1743,
  	3,136,68,0,1743,1744,5,42,0,0,1744,1745,5,27,0,0,1745,1746,3,50,25,0,
  	1746,1747,3,200,100,0,1747,199,1,0,0,0,1748,1758,5,191,0,0,1749,1753,
  	5,201,0,0,1750,1752,3,202,101,0,1751,1750,1,0,0,0,1752,1755,1,0,0,0,1753,
  	1751,1,0,0,0,1753,1754,1,0,0,0,1754,1756,1,0,0,0,1755,1753,1,0,0,0,1756,
  	1758,5,202,0,0,1757,1748,1,0,0,0,1757,1749,1,0,0,0,1758,201,1,0,0,0,1759,
  	1769,3,56,28,0,1760,1769,3,58,29,0,1761,1763,3,204,102,0,1762,1764,3,
  	154,77,0,1763,1762,1,0,0,0,1763,1764,1,0,0,0,1764,1769,1,0,0,0,1765,1769,
  	3,208,104,0,1766,1769,3,36,18,0,1767,1769,3,628,314,0,1768,1759,1,0,0,
  	0,1768,1760,1,0,0,0,1768,1761,1,0,0,0,1768,1765,1,0,0,0,1768,1766,1,0,
  	0,0,1768,1767,1,0,0,0,1769,203,1,0,0,0,1770,1771,3,616,308,0,1771,1772,
  	3,206,103,0,1772,205,1,0,0,0,1773,1779,3,96,48,0,1774,1779,3,124,62,0,
  	1775,1779,3,134,67,0,1776,1779,3,194,97,0,1777,1779,3,196,98,0,1778,1773,
  	1,0,0,0,1778,1774,1,0,0,0,1778,1775,1,0,0,0,1778,1776,1,0,0,0,1778,1777,
  	1,0,0,0,1779,207,1,0,0,0,1780,1781,3,616,308,0,1781,1782,3,210,105,0,
  	1782,209,1,0,0,0,1783,1787,3,212,106,0,1784,1787,3,104,52,0,1785,1787,
  	3,106,53,0,1786,1783,1,0,0,0,1786,1784,1,0,0,0,1786,1785,1,0,0,0,1787,
  	211,1,0,0,0,1788,1789,5,116,0,0,1789,1790,3,86,43,0,1790,213,1,0,0,0,
  	1791,1792,3,142,71,0,1792,1793,5,42,0,0,1793,1794,3,216,108,0,1794,1795,
  	3,200,100,0,1795,215,1,0,0,0,1796,1798,3,88,44,0,1797,1799,3,1022,511,
  	0,1798,1797,1,0,0,0,1798,1799,1,0,0,0,1799,1802,1,0,0,0,1800,1801,5,22,
  	0,0,1801,1803,3,218,109,0,1802,1800,1,0,0,0,1802,1803,1,0,0,0,1803,1806,
  	1,0,0,0,1804,1806,3,218,109,0,1805,1796,1,0,0,0,1805,1804,1,0,0,0,1806,
  	217,1,0,0,0,1807,1810,3,220,110,0,1808,1810,3,222,111,0,1809,1807,1,0,
  	0,0,1809,1808,1,0,0,0,1810,219,1,0,0,0,1811,1812,3,224,112,0,1812,1813,
  	5,173,0,0,1813,1814,3,224,112,0,1814,221,1,0,0,0,1815,1816,5,199,0,0,
  	1816,1819,3,224,112,0,1817,1818,5,205,0,0,1818,1820,3,224,112,0,1819,
  	1817,1,0,0,0,1820,1821,1,0,0,0,1821,1819,1,0,0,0,1821,1822,1,0,0,0,1822,
  	1823,1,0,0,0,1823,1824,5,200,0,0,1824,223,1,0,0,0,1825,1826,3,226,113,
  	0,1826,225,1,0,0,0,1827,1829,3,190,95,0,1828,1827,1,0,0,0,1828,1829,1,
  	0,0,0,1829,1832,1,0,0,0,1830,1831,5,232,0,0,1831,1833,5,86,0,0,1832,1830,
  	1,0,0,0,1832,1833,1,0,0,0,1833,1834,1,0,0,0,1834,1835,3,752,376,0,1835,
  	227,1,0,0,0,1836,1837,3,136,68,0,1837,1838,5,10,0,0,1838,1839,5,27,0,
  	0,1839,1840,3,48,24,0,1840,229,1,0,0,0,1841,1842,3,142,71,0,1842,1843,
  	3,232,116,0,1843,1844,3,92,46,0,1844,231,1,0,0,0,1845,1846,5,10,0,0,1846,
  	1849,3,88,44,0,1847,1848,5,10,0,0,1848,1850,3,180,90,0,1849,1847,1,0,
  	0,0,1849,1850,1,0,0,0,1850,1854,1,0,0,0,1851,1852,5,9,0,0,1852,1854,3,
  	180,90,0,1853,1845,1,0,0,0,1853,1851,1,0,0,0,1854,233,1,0,0,0,1855,1856,
  	3,136,68,0,1856,1857,5,124,0,0,1857,1858,5,27,0,0,1858,1859,3,48,24,0,
  	1859,235,1,0,0,0,1860,1861,3,142,71,0,1861,1862,5,47,0,0,1862,1863,3,
  	238,119,0,1863,1864,3,52,26,0,1864,237,1,0,0,0,1865,1867,3,88,44,0,1866,
  	1868,3,1022,511,0,1867,1866,1,0,0,0,1867,1868,1,0,0,0,1868,1871,1,0,0,
  	0,1869,1870,5,148,0,0,1870,1872,3,250,125,0,1871,1869,1,0,0,0,1871,1872,
  	1,0,0,0,1872,1878,1,0,0,0,1873,1874,5,126,0,0,1874,1875,3,240,120,0,1875,
  	1876,5,173,0,0,1876,1877,3,240,120,0,1877,1879,1,0,0,0,1878,1873,1,0,
  	0,0,1878,1879,1,0,0,0,1879,1885,1,0,0,0,1880,1881,3,240,120,0,1881,1882,
  	5,173,0,0,1882,1883,3,240,120,0,1883,1885,1,0,0,0,1884,1865,1,0,0,0,1884,
  	1880,1,0,0,0,1885,239,1,0,0,0,1886,1887,3,242,121,0,1887,241,1,0,0,0,
  	1888,1889,3,752,376,0,1889,243,1,0,0,0,1890,1891,3,142,71,0,1891,1892,
  	5,124,0,0,1892,1893,3,248,124,0,1893,1894,3,52,26,0,1894,245,1,0,0,0,
  	1895,1896,3,142,71,0,1896,1897,5,171,0,0,1897,1898,5,124,0,0,1898,1899,
  	3,248,124,0,1899,1900,3,52,26,0,1900,247,1,0,0,0,1901,1903,3,88,44,0,
  	1902,1904,3,1022,511,0,1903,1902,1,0,0,0,1903,1904,1,0,0,0,1904,1907,
  	1,0,0,0,1905,1906,5,148,0,0,1906,1908,3,250,125,0,1907,1905,1,0,0,0,1907,
  	1908,1,0,0,0,1908,1914,1,0,0,0,1909,1910,5,148,0,0,1910,1911,3,258,129,
  	0,1911,1912,5,173,0,0,1912,1913,3,258,129,0,1913,1915,1,0,0,0,1914,1909,
  	1,0,0,0,1914,1915,1,0,0,0,1915,1921,1,0,0,0,1916,1917,3,258,129,0,1917,
  	1918,5,173,0,0,1918,1919,3,258,129,0,1919,1921,1,0,0,0,1920,1901,1,0,
  	0,0,1920,1916,1,0,0,0,1921,249,1,0,0,0,1922,1923,3,252,126,0,1923,251,
  	1,0,0,0,1924,1925,3,254,127,0,1925,253,1,0,0,0,1926,1927,3,598,299,0,
  	1927,1928,3,256,128,0,1928,1929,3,1022,511,0,1929,1935,1,0,0,0,1930,1935,
  	3,746,373,0,1931,1932,3,118,59,0,1932,1933,3,746,373,0,1933,1935,1,0,
  	0,0,1934,1926,1,0,0,0,1934,1930,1,0,0,0,1934,1931,1,0,0,0,1935,255,1,
  	0,0,0,1936,1938,3,728,364,0,1937,1936,1,0,0,0,1938,1939,1,0,0,0,1939,
  	1937,1,0,0,0,1939,1940,1,0,0,0,1940,1942,1,0,0,0,1941,1943,3,116,58,0,
  	1942,1941,1,0,0,0,1942,1943,1,0,0,0,1943,1947,1,0,0,0,1944,1946,3,728,
  	364,0,1945,1944,1,0,0,0,1946,1949,1,0,0,0,1947,1945,1,0,0,0,1947,1948,
  	1,0,0,0,1948,1957,1,0,0,0,1949,1947,1,0,0,0,1950,1952,3,116,58,0,1951,
  	1953,3,728,364,0,1952,1951,1,0,0,0,1953,1954,1,0,0,0,1954,1952,1,0,0,
  	0,1954,1955,1,0,0,0,1955,1957,1,0,0,0,1956,1937,1,0,0,0,1956,1950,1,0,
  	0,0,1957,257,1,0,0,0,1958,1959,3,260,130,0,1959,259,1,0,0,0,1960,1962,
  	3,262,131,0,1961,1960,1,0,0,0,1961,1962,1,0,0,0,1962,1963,1,0,0,0,1963,
  	1964,3,266,133,0,1964,261,1,0,0,0,1965,1968,3,626,313,0,1966,1968,3,264,
  	132,0,1967,1965,1,0,0,0,1967,1966,1,0,0,0,1968,263,1,0,0,0,1969,1970,
  	3,762,381,0,1970,1974,5,217,0,0,1971,1972,3,762,381,0,1972,1973,5,217,
  	0,0,1973,1975,1,0,0,0,1974,1971,1,0,0,0,1975,1976,1,0,0,0,1976,1974,1,
  	0,0,0,1976,1977,1,0,0,0,1977,265,1,0,0,0,1978,1979,3,268,134,0,1979,267,
  	1,0,0,0,1980,1981,3,270,135,0,1981,269,1,0,0,0,1982,1983,3,626,313,0,
  	1983,271,1,0,0,0,1984,1985,3,136,68,0,1985,1986,5,5,0,0,1986,1987,5,27,
  	0,0,1987,1988,3,50,25,0,1988,1989,3,274,137,0,1989,273,1,0,0,0,1990,2000,
  	5,191,0,0,1991,1995,5,201,0,0,1992,1994,3,276,138,0,1993,1992,1,0,0,0,
  	1994,1997,1,0,0,0,1995,1993,1,0,0,0,1995,1996,1,0,0,0,1996,1998,1,0,0,
  	0,1997,1995,1,0,0,0,1998,2000,5,202,0,0,1999,1990,1,0,0,0,1999,1991,1,
  	0,0,0,2000,275,1,0,0,0,2001,2018,3,278,139,0,2002,2006,3,282,141,0,2003,
  	2005,3,286,143,0,2004,2003,1,0,0,0,2005,2008,1,0,0,0,2006,2004,1,0,0,
  	0,2006,2007,1,0,0,0,2007,2018,1,0,0,0,2008,2006,1,0,0,0,2009,2011,3,154,
  	77,0,2010,2009,1,0,0,0,2010,2011,1,0,0,0,2011,2012,1,0,0,0,2012,2014,
  	3,280,140,0,2013,2015,3,286,143,0,2014,2013,1,0,0,0,2014,2015,1,0,0,0,
  	2015,2018,1,0,0,0,2016,2018,3,288,144,0,2017,2001,1,0,0,0,2017,2002,1,
  	0,0,0,2017,2010,1,0,0,0,2017,2016,1,0,0,0,2018,277,1,0,0,0,2019,2028,
  	3,628,314,0,2020,2028,3,36,18,0,2021,2028,3,56,28,0,2022,2028,3,58,29,
  	0,2023,2025,3,154,77,0,2024,2023,1,0,0,0,2024,2025,1,0,0,0,2025,2026,
  	1,0,0,0,2026,2028,3,64,32,0,2027,2019,1,0,0,0,2027,2020,1,0,0,0,2027,
  	2021,1,0,0,0,2027,2022,1,0,0,0,2027,2024,1,0,0,0,2028,279,1,0,0,0,2029,
  	2032,3,66,33,0,2030,2032,3,284,142,0,2031,2029,1,0,0,0,2031,2030,1,0,
  	0,0,2032,281,1,0,0,0,2033,2034,3,616,308,0,2034,2035,5,123,0,0,2035,2036,
  	3,626,313,0,2036,2037,3,6,3,0,2037,283,1,0,0,0,2038,2039,3,616,308,0,
  	2039,2040,3,298,149,0,2040,285,1,0,0,0,2041,2042,3,616,308,0,2042,2043,
  	3,376,188,0,2043,287,1,0,0,0,2044,2045,3,616,308,0,2045,2046,3,384,192,
  	0,2046,289,1,0,0,0,2047,2048,3,142,71,0,2048,2049,5,5,0,0,2049,2050,3,
  	292,146,0,2050,2051,3,274,137,0,2051,291,1,0,0,0,2052,2054,3,88,44,0,
  	2053,2055,3,1022,511,0,2054,2053,1,0,0,0,2054,2055,1,0,0,0,2055,293,1,
  	0,0,0,2056,2057,3,142,71,0,2057,2058,5,53,0,0,2058,2059,3,296,148,0,2059,
  	2060,3,274,137,0,2060,295,1,0,0,0,2061,2063,3,752,376,0,2062,2064,3,726,
  	363,0,2063,2062,1,0,0,0,2063,2064,1,0,0,0,2064,2071,1,0,0,0,2065,2066,
  	5,5,0,0,2066,2068,3,88,44,0,2067,2069,3,1022,511,0,2068,2067,1,0,0,0,
  	2068,2069,1,0,0,0,2069,2071,1,0,0,0,2070,2061,1,0,0,0,2070,2065,1,0,0,
  	0,2071,297,1,0,0,0,2072,2081,3,304,152,0,2073,2081,3,330,165,0,2074,2081,
  	3,316,158,0,2075,2081,3,342,171,0,2076,2081,3,356,178,0,2077,2081,3,358,
  	179,0,2078,2081,3,368,184,0,2079,2081,3,370,185,0,2080,2072,1,0,0,0,2080,
  	2073,1,0,0,0,2080,2074,1,0,0,0,2080,2075,1,0,0,0,2080,2076,1,0,0,0,2080,
  	2077,1,0,0,0,2080,2078,1,0,0,0,2080,2079,1,0,0,0,2081,299,1,0,0,0,2082,
  	2084,5,5,0,0,2083,2085,3,88,44,0,2084,2083,1,0,0,0,2084,2085,1,0,0,0,
  	2085,301,1,0,0,0,2086,2088,3,142,71,0,2087,2089,3,300,150,0,2088,2087,
  	1,0,0,0,2088,2089,1,0,0,0,2089,303,1,0,0,0,2090,2095,3,308,154,0,2091,
  	2095,3,310,155,0,2092,2095,3,312,156,0,2093,2095,3,314,157,0,2094,2090,
  	1,0,0,0,2094,2091,1,0,0,0,2094,2092,1,0,0,0,2094,2093,1,0,0,0,2095,305,
  	1,0,0,0,2096,2098,3,70,35,0,2097,2099,5,41,0,0,2098,2097,1,0,0,0,2098,
  	2099,1,0,0,0,2099,2101,1,0,0,0,2100,2102,3,150,75,0,2101,2100,1,0,0,0,
  	2101,2102,1,0,0,0,2102,2104,1,0,0,0,2103,2105,3,80,40,0,2104,2103,1,0,
  	0,0,2104,2105,1,0,0,0,2105,307,1,0,0,0,2106,2108,3,306,153,0,2107,2109,
  	5,46,0,0,2108,2107,1,0,0,0,2108,2109,1,0,0,0,2109,2110,1,0,0,0,2110,2111,
  	3,88,44,0,2111,2112,3,274,137,0,2112,309,1,0,0,0,2113,2115,3,306,153,
  	0,2114,2116,5,26,0,0,2115,2114,1,0,0,0,2115,2116,1,0,0,0,2116,2117,1,
  	0,0,0,2117,2118,3,88,44,0,2118,2119,3,274,137,0,2119,311,1,0,0,0,2120,
  	2122,3,306,153,0,2121,2123,5,26,0,0,2122,2121,1,0,0,0,2122,2123,1,0,0,
  	0,2123,2124,1,0,0,0,2124,2125,3,88,44,0,2125,2126,3,274,137,0,2126,313,
  	1,0,0,0,2127,2129,3,306,153,0,2128,2130,5,37,0,0,2129,2128,1,0,0,0,2129,
  	2130,1,0,0,0,2130,2131,1,0,0,0,2131,2132,3,88,44,0,2132,2133,3,274,137,
  	0,2133,315,1,0,0,0,2134,2135,3,142,71,0,2135,2136,3,318,159,0,2136,2137,
  	3,274,137,0,2137,317,1,0,0,0,2138,2140,3,300,150,0,2139,2138,1,0,0,0,
  	2139,2140,1,0,0,0,2140,2141,1,0,0,0,2141,2142,5,4,0,0,2142,2143,3,320,
  	160,0,2143,319,1,0,0,0,2144,2147,3,322,161,0,2145,2146,5,77,0,0,2146,
  	2148,3,336,168,0,2147,2145,1,0,0,0,2147,2148,1,0,0,0,2148,321,1,0,0,0,
  	2149,2150,3,324,162,0,2150,323,1,0,0,0,2151,2159,3,254,127,0,2152,2154,
  	3,598,299,0,2153,2155,3,256,128,0,2154,2153,1,0,0,0,2154,2155,1,0,0,0,
  	2155,2156,1,0,0,0,2156,2157,3,326,163,0,2157,2159,1,0,0,0,2158,2151,1,
  	0,0,0,2158,2152,1,0,0,0,2159,325,1,0,0,0,2160,2161,3,328,164,0,2161,327,
  	1,0,0,0,2162,2163,7,3,0,0,2163,2167,3,856,428,0,2164,2165,5,80,0,0,2165,
  	2167,3,862,431,0,2166,2162,1,0,0,0,2166,2164,1,0,0,0,2167,329,1,0,0,0,
  	2168,2170,3,142,71,0,2169,2171,3,292,146,0,2170,2169,1,0,0,0,2170,2171,
  	1,0,0,0,2171,2172,1,0,0,0,2172,2178,5,62,0,0,2173,2175,3,336,168,0,2174,
  	2176,3,334,167,0,2175,2174,1,0,0,0,2175,2176,1,0,0,0,2176,2179,1,0,0,
  	0,2177,2179,3,334,167,0,2178,2173,1,0,0,0,2178,2177,1,0,0,0,2178,2179,
  	1,0,0,0,2179,2180,1,0,0,0,2180,2181,3,274,137,0,2181,331,1,0,0,0,2182,
  	2184,3,300,150,0,2183,2182,1,0,0,0,2183,2184,1,0,0,0,2184,2185,1,0,0,
  	0,2185,2186,5,62,0,0,2186,2188,3,336,168,0,2187,2189,3,334,167,0,2188,
  	2187,1,0,0,0,2188,2189,1,0,0,0,2189,333,1,0,0,0,2190,2191,5,77,0,0,2191,
  	2194,3,336,168,0,2192,2193,5,173,0,0,2193,2195,3,336,168,0,2194,2192,
  	1,0,0,0,2194,2195,1,0,0,0,2195,2199,1,0,0,0,2196,2197,5,173,0,0,2197,
  	2199,3,336,168,0,2198,2190,1,0,0,0,2198,2196,1,0,0,0,2199,335,1,0,0,0,
  	2200,2201,3,338,169,0,2201,337,1,0,0,0,2202,2203,3,340,170,0,2203,339,
  	1,0,0,0,2204,2205,3,828,414,0,2205,341,1,0,0,0,2206,2207,3,142,71,0,2207,
  	2208,3,344,172,0,2208,2209,3,274,137,0,2209,343,1,0,0,0,2210,2212,3,300,
  	150,0,2211,2210,1,0,0,0,2211,2212,1,0,0,0,2212,2213,1,0,0,0,2213,2214,
  	5,12,0,0,2214,2215,3,346,173,0,2215,2216,3,352,176,0,2216,2217,5,222,
  	0,0,2217,2218,3,336,168,0,2218,345,1,0,0,0,2219,2220,3,348,174,0,2220,
  	347,1,0,0,0,2221,2222,3,350,175,0,2222,2223,5,217,0,0,2223,2225,1,0,0,
  	0,2224,2221,1,0,0,0,2224,2225,1,0,0,0,2225,349,1,0,0,0,2226,2227,3,900,
  	450,0,2227,351,1,0,0,0,2228,2231,3,626,313,0,2229,2231,3,758,379,0,2230,
  	2228,1,0,0,0,2230,2229,1,0,0,0,2231,353,1,0,0,0,2232,2233,3,758,379,0,
  	2233,355,1,0,0,0,2234,2236,3,142,71,0,2235,2237,3,300,150,0,2236,2235,
  	1,0,0,0,2236,2237,1,0,0,0,2237,2238,1,0,0,0,2238,2240,5,67,0,0,2239,2241,
  	3,336,168,0,2240,2239,1,0,0,0,2240,2241,1,0,0,0,2241,2242,1,0,0,0,2242,
  	2243,3,274,137,0,2243,357,1,0,0,0,2244,2245,3,302,151,0,2245,2246,5,129,
  	0,0,2246,2247,3,360,180,0,2247,2248,3,362,181,0,2248,2251,5,115,0,0,2249,
  	2252,3,362,181,0,2250,2252,3,366,183,0,2251,2249,1,0,0,0,2251,2250,1,
  	0,0,0,2252,359,1,0,0,0,2253,2254,3,828,414,0,2254,361,1,0,0,0,2255,2256,
  	3,364,182,0,2256,363,1,0,0,0,2257,2259,5,5,0,0,2258,2260,3,88,44,0,2259,
  	2258,1,0,0,0,2259,2260,1,0,0,0,2260,2262,1,0,0,0,2261,2257,1,0,0,0,2261,
  	2262,1,0,0,0,2262,2263,1,0,0,0,2263,2267,5,201,0,0,2264,2266,3,276,138,
  	0,2265,2264,1,0,0,0,2266,2269,1,0,0,0,2267,2265,1,0,0,0,2267,2268,1,0,
  	0,0,2268,2270,1,0,0,0,2269,2267,1,0,0,0,2270,2271,5,202,0,0,2271,365,
  	1,0,0,0,2272,2273,3,358,179,0,2273,367,1,0,0,0,2274,2278,3,302,151,0,
  	2275,2276,5,81,0,0,2276,2279,3,360,180,0,2277,2279,5,45,0,0,2278,2275,
  	1,0,0,0,2278,2277,1,0,0,0,2279,2280,1,0,0,0,2280,2281,3,362,181,0,2281,
  	2282,5,71,0,0,2282,2283,3,360,180,0,2283,2284,5,191,0,0,2284,369,1,0,
  	0,0,2285,2286,3,302,151,0,2286,2287,5,125,0,0,2287,2288,3,372,186,0,2288,
  	2289,5,133,0,0,2289,2290,3,336,168,0,2290,2291,3,362,181,0,2291,371,1,
  	0,0,0,2292,2293,3,88,44,0,2293,373,1,0,0,0,2294,2295,3,88,44,0,2295,375,
  	1,0,0,0,2296,2300,3,378,189,0,2297,2300,3,380,190,0,2298,2300,3,382,191,
  	0,2299,2296,1,0,0,0,2299,2297,1,0,0,0,2299,2298,1,0,0,0,2300,2301,1,0,
  	0,0,2301,2302,3,92,46,0,2302,377,1,0,0,0,2303,2304,3,158,79,0,2304,2305,
  	5,172,0,0,2305,2306,3,186,93,0,2306,379,1,0,0,0,2307,2308,3,430,215,0,
  	2308,2309,5,172,0,0,2309,2310,3,444,222,0,2310,381,1,0,0,0,2311,2312,
  	5,115,0,0,2312,2313,3,444,222,0,2313,383,1,0,0,0,2314,2315,5,171,0,0,
  	2315,2317,3,88,44,0,2316,2314,1,0,0,0,2316,2317,1,0,0,0,2317,2318,1,0,
  	0,0,2318,2319,5,123,0,0,2319,2320,3,352,176,0,2320,2321,3,430,215,0,2321,
  	2322,5,172,0,0,2322,2323,3,444,222,0,2323,2324,3,92,46,0,2324,385,1,0,
  	0,0,2325,2326,3,136,68,0,2326,2327,5,65,0,0,2327,2328,5,27,0,0,2328,2329,
  	3,50,25,0,2329,2330,3,388,194,0,2330,387,1,0,0,0,2331,2340,5,191,0,0,
  	2332,2334,5,51,0,0,2333,2332,1,0,0,0,2333,2334,1,0,0,0,2334,2335,1,0,
  	0,0,2335,2336,5,201,0,0,2336,2337,3,390,195,0,2337,2338,5,202,0,0,2338,
  	2340,1,0,0,0,2339,2331,1,0,0,0,2339,2333,1,0,0,0,2340,389,1,0,0,0,2341,
  	2363,3,278,139,0,2342,2344,3,154,77,0,2343,2342,1,0,0,0,2343,2344,1,0,
  	0,0,2344,2345,1,0,0,0,2345,2349,3,66,33,0,2346,2348,3,414,207,0,2347,
  	2346,1,0,0,0,2348,2351,1,0,0,0,2349,2347,1,0,0,0,2349,2350,1,0,0,0,2350,
  	2363,1,0,0,0,2351,2349,1,0,0,0,2352,2363,3,412,206,0,2353,2357,3,392,
  	196,0,2354,2356,3,398,199,0,2355,2354,1,0,0,0,2356,2359,1,0,0,0,2357,
  	2355,1,0,0,0,2357,2358,1,0,0,0,2358,2363,1,0,0,0,2359,2357,1,0,0,0,2360,
  	2363,3,394,197,0,2361,2363,3,396,198,0,2362,2341,1,0,0,0,2362,2343,1,
  	0,0,0,2362,2352,1,0,0,0,2362,2353,1,0,0,0,2362,2360,1,0,0,0,2362,2361,
  	1,0,0,0,2363,391,1,0,0,0,2364,2365,3,616,308,0,2365,2366,5,31,0,0,2366,
  	2367,3,400,200,0,2367,393,1,0,0,0,2368,2369,3,616,308,0,2369,2370,5,30,
  	0,0,2370,2371,3,400,200,0,2371,395,1,0,0,0,2372,2373,3,616,308,0,2373,
  	2374,5,35,0,0,2374,2375,3,400,200,0,2375,397,1,0,0,0,2376,2380,3,616,
  	308,0,2377,2381,3,380,190,0,2378,2379,5,172,0,0,2379,2381,3,378,189,0,
  	2380,2377,1,0,0,0,2380,2378,1,0,0,0,2381,2382,1,0,0,0,2382,2383,5,191,
  	0,0,2383,399,1,0,0,0,2384,2385,3,402,201,0,2385,2386,5,191,0,0,2386,2392,
  	1,0,0,0,2387,2392,3,404,202,0,2388,2392,3,406,203,0,2389,2392,3,408,204,
  	0,2390,2392,3,410,205,0,2391,2384,1,0,0,0,2391,2387,1,0,0,0,2391,2388,
  	1,0,0,0,2391,2389,1,0,0,0,2391,2390,1,0,0,0,2392,401,1,0,0,0,2393,2394,
  	6,201,-1,0,2394,403,1,0,0,0,2395,2396,3,296,148,0,2396,2397,3,274,137,
  	0,2397,405,1,0,0,0,2398,2399,3,318,159,0,2399,2400,3,274,137,0,2400,407,
  	1,0,0,0,2401,2402,3,332,166,0,2402,2403,3,274,137,0,2403,409,1,0,0,0,
  	2404,2405,3,344,172,0,2405,2406,3,274,137,0,2406,411,1,0,0,0,2407,2408,
  	3,616,308,0,2408,2409,3,422,211,0,2409,413,1,0,0,0,2410,2411,3,616,308,
  	0,2411,2412,3,424,212,0,2412,415,1,0,0,0,2413,2414,3,142,71,0,2414,2415,
  	5,65,0,0,2415,2416,3,292,146,0,2416,2417,3,418,209,0,2417,417,1,0,0,0,
  	2418,2431,5,191,0,0,2419,2421,5,51,0,0,2420,2419,1,0,0,0,2420,2421,1,
  	0,0,0,2421,2422,1,0,0,0,2422,2426,5,201,0,0,2423,2425,3,390,195,0,2424,
  	2423,1,0,0,0,2425,2428,1,0,0,0,2426,2424,1,0,0,0,2426,2427,1,0,0,0,2427,
  	2429,1,0,0,0,2428,2426,1,0,0,0,2429,2431,5,202,0,0,2430,2418,1,0,0,0,
  	2430,2420,1,0,0,0,2431,419,1,0,0,0,2432,2433,3,142,71,0,2433,2440,5,34,
  	0,0,2434,2436,3,752,376,0,2435,2437,3,726,363,0,2436,2435,1,0,0,0,2436,
  	2437,1,0,0,0,2437,2441,1,0,0,0,2438,2439,5,65,0,0,2439,2441,3,88,44,0,
  	2440,2434,1,0,0,0,2440,2438,1,0,0,0,2441,2443,1,0,0,0,2442,2444,3,1022,
  	511,0,2443,2442,1,0,0,0,2443,2444,1,0,0,0,2444,2445,1,0,0,0,2445,2446,
  	3,418,209,0,2446,421,1,0,0,0,2447,2451,5,69,0,0,2448,2449,3,88,44,0,2449,
  	2450,5,126,0,0,2450,2452,1,0,0,0,2451,2448,1,0,0,0,2451,2452,1,0,0,0,
  	2452,2453,1,0,0,0,2453,2455,3,352,176,0,2454,2456,3,426,213,0,2455,2454,
  	1,0,0,0,2455,2456,1,0,0,0,2456,2458,1,0,0,0,2457,2459,3,430,215,0,2458,
  	2457,1,0,0,0,2458,2459,1,0,0,0,2459,2461,1,0,0,0,2460,2462,3,432,216,
  	0,2461,2460,1,0,0,0,2461,2462,1,0,0,0,2462,2463,1,0,0,0,2463,2464,5,172,
  	0,0,2464,2465,3,444,222,0,2465,2466,3,274,137,0,2466,423,1,0,0,0,2467,
  	2469,5,69,0,0,2468,2470,3,426,213,0,2469,2468,1,0,0,0,2469,2470,1,0,0,
  	0,2470,2472,1,0,0,0,2471,2473,3,430,215,0,2472,2471,1,0,0,0,2472,2473,
  	1,0,0,0,2473,2475,1,0,0,0,2474,2476,3,432,216,0,2475,2474,1,0,0,0,2475,
  	2476,1,0,0,0,2476,2489,1,0,0,0,2477,2479,3,426,213,0,2478,2480,3,430,
  	215,0,2479,2478,1,0,0,0,2479,2480,1,0,0,0,2480,2482,1,0,0,0,2481,2483,
  	3,432,216,0,2482,2481,1,0,0,0,2482,2483,1,0,0,0,2483,2489,1,0,0,0,2484,
  	2486,3,430,215,0,2485,2487,3,432,216,0,2486,2485,1,0,0,0,2486,2487,1,
  	0,0,0,2487,2489,1,0,0,0,2488,2467,1,0,0,0,2488,2477,1,0,0,0,2488,2484,
  	1,0,0,0,2488,2489,1,0,0,0,2489,2490,1,0,0,0,2490,2491,5,172,0,0,2491,
  	2492,3,444,222,0,2492,2493,3,274,137,0,2493,425,1,0,0,0,2494,2495,5,4,
  	0,0,2495,2496,6,213,-1,0,2496,2497,3,428,214,0,2497,427,1,0,0,0,2498,
  	2499,3,320,160,0,2499,429,1,0,0,0,2500,2501,5,129,0,0,2501,2502,6,215,
  	-1,0,2502,2503,3,828,414,0,2503,431,1,0,0,0,2504,2505,5,30,0,0,2505,2506,
  	6,216,-1,0,2506,2507,3,434,217,0,2507,433,1,0,0,0,2508,2514,3,402,201,
  	0,2509,2514,3,436,218,0,2510,2514,3,438,219,0,2511,2514,3,440,220,0,2512,
  	2514,3,442,221,0,2513,2508,1,0,0,0,2513,2509,1,0,0,0,2513,2510,1,0,0,
  	0,2513,2511,1,0,0,0,2513,2512,1,0,0,0,2514,435,1,0,0,0,2515,2524,3,296,
  	148,0,2516,2520,5,201,0,0,2517,2519,3,276,138,0,2518,2517,1,0,0,0,2519,
  	2522,1,0,0,0,2520,2518,1,0,0,0,2520,2521,1,0,0,0,2521,2523,1,0,0,0,2522,
  	2520,1,0,0,0,2523,2525,5,202,0,0,2524,2516,1,0,0,0,2524,2525,1,0,0,0,
  	2525,437,1,0,0,0,2526,2535,3,318,159,0,2527,2531,5,201,0,0,2528,2530,
  	3,276,138,0,2529,2528,1,0,0,0,2530,2533,1,0,0,0,2531,2529,1,0,0,0,2531,
  	2532,1,0,0,0,2532,2534,1,0,0,0,2533,2531,1,0,0,0,2534,2536,5,202,0,0,
  	2535,2527,1,0,0,0,2535,2536,1,0,0,0,2536,439,1,0,0,0,2537,2546,3,332,
  	166,0,2538,2542,5,201,0,0,2539,2541,3,276,138,0,2540,2539,1,0,0,0,2541,
  	2544,1,0,0,0,2542,2540,1,0,0,0,2542,2543,1,0,0,0,2543,2545,1,0,0,0,2544,
  	2542,1,0,0,0,2545,2547,5,202,0,0,2546,2538,1,0,0,0,2546,2547,1,0,0,0,
  	2547,441,1,0,0,0,2548,2557,3,344,172,0,2549,2553,5,201,0,0,2550,2552,
  	3,276,138,0,2551,2550,1,0,0,0,2552,2555,1,0,0,0,2553,2551,1,0,0,0,2553,
  	2554,1,0,0,0,2554,2556,1,0,0,0,2555,2553,1,0,0,0,2556,2558,5,202,0,0,
  	2557,2549,1,0,0,0,2557,2558,1,0,0,0,2558,443,1,0,0,0,2559,2560,3,446,
  	223,0,2560,445,1,0,0,0,2561,2562,3,186,93,0,2562,447,1,0,0,0,2563,2564,
  	3,136,68,0,2564,2565,5,19,0,0,2565,2566,5,27,0,0,2566,2567,3,50,25,0,
  	2567,2568,3,452,226,0,2568,449,1,0,0,0,2569,2570,3,142,71,0,2570,2571,
  	5,19,0,0,2571,2572,3,292,146,0,2572,2573,3,452,226,0,2573,451,1,0,0,0,
  	2574,2580,5,191,0,0,2575,2576,5,201,0,0,2576,2577,3,454,227,0,2577,2578,
  	5,202,0,0,2578,2580,1,0,0,0,2579,2574,1,0,0,0,2579,2575,1,0,0,0,2580,
  	453,1,0,0,0,2581,2583,3,456,228,0,2582,2581,1,0,0,0,2583,2586,1,0,0,0,
  	2584,2582,1,0,0,0,2584,2585,1,0,0,0,2585,2588,1,0,0,0,2586,2584,1,0,0,
  	0,2587,2589,3,460,230,0,2588,2587,1,0,0,0,2588,2589,1,0,0,0,2589,455,
  	1,0,0,0,2590,2593,3,276,138,0,2591,2593,3,458,229,0,2592,2590,1,0,0,0,
  	2592,2591,1,0,0,0,2593,457,1,0,0,0,2594,2596,3,616,308,0,2595,2594,1,
  	0,0,0,2595,2596,1,0,0,0,2596,2597,1,0,0,0,2597,2598,5,162,0,0,2598,2599,
  	3,40,20,0,2599,459,1,0,0,0,2600,2602,3,616,308,0,2601,2600,1,0,0,0,2601,
  	2602,1,0,0,0,2602,2603,1,0,0,0,2603,2604,3,828,414,0,2604,461,1,0,0,0,
  	2605,2607,3,136,68,0,2606,2605,1,0,0,0,2606,2607,1,0,0,0,2607,2608,1,
  	0,0,0,2608,2609,3,50,25,0,2609,2610,3,452,226,0,2610,463,1,0,0,0,2611,
  	2613,3,142,71,0,2612,2611,1,0,0,0,2612,2613,1,0,0,0,2613,2614,1,0,0,0,
  	2614,2615,5,24,0,0,2615,2616,3,468,234,0,2616,2617,3,452,226,0,2617,465,
  	1,0,0,0,2618,2619,3,142,71,0,2619,2621,5,13,0,0,2620,2622,5,146,0,0,2621,
  	2620,1,0,0,0,2621,2622,1,0,0,0,2622,2629,1,0,0,0,2623,2625,3,752,376,
  	0,2624,2626,3,726,363,0,2625,2624,1,0,0,0,2625,2626,1,0,0,0,2626,2630,
  	1,0,0,0,2627,2628,5,24,0,0,2628,2630,3,468,234,0,2629,2623,1,0,0,0,2629,
  	2627,1,0,0,0,2630,2631,1,0,0,0,2631,2632,3,452,226,0,2632,467,1,0,0,0,
  	2633,2635,3,88,44,0,2634,2636,3,1022,511,0,2635,2634,1,0,0,0,2635,2636,
  	1,0,0,0,2636,469,1,0,0,0,2637,2638,3,136,68,0,2638,2639,5,60,0,0,2639,
  	2640,5,27,0,0,2640,2641,3,50,25,0,2641,2642,3,472,236,0,2642,471,1,0,
  	0,0,2643,2653,5,191,0,0,2644,2648,5,201,0,0,2645,2647,3,474,237,0,2646,
  	2645,1,0,0,0,2647,2650,1,0,0,0,2648,2646,1,0,0,0,2648,2649,1,0,0,0,2649,
  	2651,1,0,0,0,2650,2648,1,0,0,0,2651,2653,5,202,0,0,2652,2643,1,0,0,0,
  	2652,2644,1,0,0,0,2653,473,1,0,0,0,2654,2662,3,54,27,0,2655,2662,3,476,
  	238,0,2656,2662,3,480,240,0,2657,2662,3,486,243,0,2658,2662,3,534,267,
  	0,2659,2662,3,490,245,0,2660,2662,3,494,247,0,2661,2654,1,0,0,0,2661,
  	2655,1,0,0,0,2661,2656,1,0,0,0,2661,2657,1,0,0,0,2661,2658,1,0,0,0,2661,
  	2659,1,0,0,0,2661,2660,1,0,0,0,2662,475,1,0,0,0,2663,2664,3,616,308,0,
  	2664,2665,3,478,239,0,2665,477,1,0,0,0,2666,2670,5,66,0,0,2667,2669,3,
  	80,40,0,2668,2667,1,0,0,0,2669,2672,1,0,0,0,2670,2668,1,0,0,0,2670,2671,
  	1,0,0,0,2671,2673,1,0,0,0,2672,2670,1,0,0,0,2673,2674,3,86,43,0,2674,
  	479,1,0,0,0,2675,2677,3,616,308,0,2676,2675,1,0,0,0,2676,2677,1,0,0,0,
  	2677,2678,1,0,0,0,2678,2679,3,482,241,0,2679,2680,3,484,242,0,2680,481,
  	1,0,0,0,2681,2682,5,14,0,0,2682,2686,6,241,-1,0,2683,2684,5,59,0,0,2684,
  	2686,6,241,-1,0,2685,2681,1,0,0,0,2685,2683,1,0,0,0,2686,483,1,0,0,0,
  	2687,2689,3,752,376,0,2688,2690,3,726,363,0,2689,2688,1,0,0,0,2689,2690,
  	1,0,0,0,2690,2691,1,0,0,0,2691,2692,3,472,236,0,2692,2711,1,0,0,0,2693,
  	2695,3,80,40,0,2694,2693,1,0,0,0,2695,2698,1,0,0,0,2696,2694,1,0,0,0,
  	2696,2697,1,0,0,0,2697,2699,1,0,0,0,2698,2696,1,0,0,0,2699,2706,5,24,
  	0,0,2700,2702,3,80,40,0,2701,2700,1,0,0,0,2702,2703,1,0,0,0,2703,2701,
  	1,0,0,0,2703,2704,1,0,0,0,2704,2706,1,0,0,0,2705,2696,1,0,0,0,2705,2701,
  	1,0,0,0,2706,2707,1,0,0,0,2707,2708,3,468,234,0,2708,2709,3,452,226,0,
  	2709,2711,1,0,0,0,2710,2687,1,0,0,0,2710,2705,1,0,0,0,2711,485,1,0,0,
  	0,2712,2714,3,616,308,0,2713,2712,1,0,0,0,2713,2714,1,0,0,0,2714,2715,
  	1,0,0,0,2715,2716,5,38,0,0,2716,2717,3,488,244,0,2717,487,1,0,0,0,2718,
  	2720,3,752,376,0,2719,2721,3,726,363,0,2720,2719,1,0,0,0,2720,2721,1,
  	0,0,0,2721,2722,1,0,0,0,2722,2723,3,452,226,0,2723,2742,1,0,0,0,2724,
  	2726,3,80,40,0,2725,2724,1,0,0,0,2726,2729,1,0,0,0,2727,2725,1,0,0,0,
  	2727,2728,1,0,0,0,2728,2730,1,0,0,0,2729,2727,1,0,0,0,2730,2737,5,24,
  	0,0,2731,2733,3,80,40,0,2732,2731,1,0,0,0,2733,2734,1,0,0,0,2734,2732,
  	1,0,0,0,2734,2735,1,0,0,0,2735,2737,1,0,0,0,2736,2727,1,0,0,0,2736,2732,
  	1,0,0,0,2737,2738,1,0,0,0,2738,2739,3,468,234,0,2739,2740,3,452,226,0,
  	2740,2742,1,0,0,0,2741,2718,1,0,0,0,2741,2736,1,0,0,0,2742,489,1,0,0,
  	0,2743,2744,3,616,308,0,2744,2745,3,492,246,0,2745,491,1,0,0,0,2746,2750,
  	5,6,0,0,2747,2749,3,80,40,0,2748,2747,1,0,0,0,2749,2752,1,0,0,0,2750,
  	2748,1,0,0,0,2750,2751,1,0,0,0,2751,2753,1,0,0,0,2752,2750,1,0,0,0,2753,
  	2754,3,86,43,0,2754,493,1,0,0,0,2755,2756,3,616,308,0,2756,2757,3,496,
  	248,0,2757,495,1,0,0,0,2758,2759,5,64,0,0,2759,2760,3,80,40,0,2760,497,
  	1,0,0,0,2761,2762,3,142,71,0,2762,2763,5,60,0,0,2763,2764,3,468,234,0,
  	2764,2765,3,472,236,0,2765,499,1,0,0,0,2766,2767,3,142,71,0,2767,2769,
  	5,13,0,0,2768,2770,5,146,0,0,2769,2768,1,0,0,0,2769,2770,1,0,0,0,2770,
  	2771,1,0,0,0,2771,2778,5,61,0,0,2772,2774,3,752,376,0,2773,2775,3,726,
  	363,0,2774,2773,1,0,0,0,2774,2775,1,0,0,0,2775,2779,1,0,0,0,2776,2777,
  	5,60,0,0,2777,2779,3,88,44,0,2778,2772,1,0,0,0,2778,2776,1,0,0,0,2779,
  	2781,1,0,0,0,2780,2782,3,1022,511,0,2781,2780,1,0,0,0,2781,2782,1,0,0,
  	0,2782,2785,1,0,0,0,2783,2784,5,98,0,0,2784,2786,3,502,251,0,2785,2783,
  	1,0,0,0,2785,2786,1,0,0,0,2786,2787,1,0,0,0,2787,2788,3,472,236,0,2788,
  	501,1,0,0,0,2789,2790,3,504,252,0,2790,503,1,0,0,0,2791,2792,3,506,253,
  	0,2792,505,1,0,0,0,2793,2794,3,508,254,0,2794,507,1,0,0,0,2795,2796,3,
  	352,176,0,2796,509,1,0,0,0,2797,2798,3,136,68,0,2798,2799,5,21,0,0,2799,
  	2800,5,27,0,0,2800,2801,3,50,25,0,2801,2802,3,472,236,0,2802,511,1,0,
  	0,0,2803,2804,3,142,71,0,2804,2805,5,21,0,0,2805,2806,3,468,234,0,2806,
  	2807,3,472,236,0,2807,513,1,0,0,0,2808,2809,3,136,68,0,2809,2810,5,20,
  	0,0,2810,2811,5,27,0,0,2811,2812,3,50,25,0,2812,2813,3,518,259,0,2813,
  	515,1,0,0,0,2814,2815,3,142,71,0,2815,2816,5,20,0,0,2816,2817,3,468,234,
  	0,2817,2818,3,518,259,0,2818,517,1,0,0,0,2819,2832,5,191,0,0,2820,2824,
  	5,201,0,0,2821,2823,3,520,260,0,2822,2821,1,0,0,0,2823,2826,1,0,0,0,2824,
  	2822,1,0,0,0,2824,2825,1,0,0,0,2825,2828,1,0,0,0,2826,2824,1,0,0,0,2827,
  	2829,3,460,230,0,2828,2827,1,0,0,0,2828,2829,1,0,0,0,2829,2830,1,0,0,
  	0,2830,2832,5,202,0,0,2831,2819,1,0,0,0,2831,2820,1,0,0,0,2832,519,1,
  	0,0,0,2833,2838,3,276,138,0,2834,2838,3,476,238,0,2835,2838,3,490,245,
  	0,2836,2838,3,522,261,0,2837,2833,1,0,0,0,2837,2834,1,0,0,0,2837,2835,
  	1,0,0,0,2837,2836,1,0,0,0,2838,521,1,0,0,0,2839,2840,3,616,308,0,2840,
  	2841,5,49,0,0,2841,2842,3,524,262,0,2842,523,1,0,0,0,2843,2845,3,80,40,
  	0,2844,2843,1,0,0,0,2845,2848,1,0,0,0,2846,2844,1,0,0,0,2846,2847,1,0,
  	0,0,2847,2849,1,0,0,0,2848,2846,1,0,0,0,2849,2850,3,468,234,0,2850,2851,
  	3,472,236,0,2851,525,1,0,0,0,2852,2853,3,136,68,0,2853,2854,5,11,0,0,
  	2854,2855,5,27,0,0,2855,2856,3,50,25,0,2856,2857,3,518,259,0,2857,527,
  	1,0,0,0,2858,2859,3,142,71,0,2859,2860,5,11,0,0,2860,2861,3,468,234,0,
  	2861,2862,3,518,259,0,2862,529,1,0,0,0,2863,2864,3,136,68,0,2864,2865,
  	5,75,0,0,2865,2866,5,27,0,0,2866,2867,3,50,25,0,2867,2868,3,518,259,0,
  	2868,531,1,0,0,0,2869,2870,3,142,71,0,2870,2871,5,75,0,0,2871,2872,3,
  	468,234,0,2872,2873,3,518,259,0,2873,533,1,0,0,0,2874,2875,3,616,308,
  	0,2875,2876,5,76,0,0,2876,2877,6,267,-1,0,2877,2878,3,536,268,0,2878,
  	535,1,0,0,0,2879,2883,3,752,376,0,2880,2882,3,728,364,0,2881,2880,1,0,
  	0,0,2882,2885,1,0,0,0,2883,2881,1,0,0,0,2883,2884,1,0,0,0,2884,2886,1,
  	0,0,0,2885,2883,1,0,0,0,2886,2887,3,472,236,0,2887,2906,1,0,0,0,2888,
  	2890,3,80,40,0,2889,2888,1,0,0,0,2890,2893,1,0,0,0,2891,2889,1,0,0,0,
  	2891,2892,1,0,0,0,2892,2894,1,0,0,0,2893,2891,1,0,0,0,2894,2901,5,60,
  	0,0,2895,2897,3,80,40,0,2896,2895,1,0,0,0,2897,2898,1,0,0,0,2898,2896,
  	1,0,0,0,2898,2899,1,0,0,0,2899,2901,1,0,0,0,2900,2891,1,0,0,0,2900,2896,
  	1,0,0,0,2901,2902,1,0,0,0,2902,2903,3,468,234,0,2903,2904,3,472,236,0,
  	2904,2906,1,0,0,0,2905,2879,1,0,0,0,2905,2900,1,0,0,0,2906,537,1,0,0,
  	0,2907,2908,3,136,68,0,2908,2909,5,72,0,0,2909,2910,5,20,0,0,2910,2911,
  	5,27,0,0,2911,2912,3,50,25,0,2912,2913,3,518,259,0,2913,539,1,0,0,0,2914,
  	2915,3,142,71,0,2915,2916,5,72,0,0,2916,2917,5,20,0,0,2917,2918,3,468,
  	234,0,2918,2919,3,518,259,0,2919,541,1,0,0,0,2920,2921,3,142,71,0,2921,
  	2929,5,40,0,0,2922,2924,3,752,376,0,2923,2925,3,726,363,0,2924,2923,1,
  	0,0,0,2924,2925,1,0,0,0,2925,2930,1,0,0,0,2926,2927,5,72,0,0,2927,2928,
  	5,20,0,0,2928,2930,3,88,44,0,2929,2922,1,0,0,0,2929,2926,1,0,0,0,2930,
  	2932,1,0,0,0,2931,2933,3,1022,511,0,2932,2931,1,0,0,0,2932,2933,1,0,0,
  	0,2933,2934,1,0,0,0,2934,2935,3,518,259,0,2935,543,1,0,0,0,2936,2937,
  	3,136,68,0,2937,2938,5,78,0,0,2938,2939,5,27,0,0,2939,2940,3,50,25,0,
  	2940,2941,3,546,273,0,2941,545,1,0,0,0,2942,2952,5,191,0,0,2943,2947,
  	5,201,0,0,2944,2946,3,548,274,0,2945,2944,1,0,0,0,2946,2949,1,0,0,0,2947,
  	2945,1,0,0,0,2947,2948,1,0,0,0,2948,2950,1,0,0,0,2949,2947,1,0,0,0,2950,
  	2952,5,201,0,0,2951,2942,1,0,0,0,2951,2943,1,0,0,0,2952,547,1,0,0,0,2953,
  	2957,3,54,27,0,2954,2957,3,1058,529,0,2955,2957,3,550,275,0,2956,2953,
  	1,0,0,0,2956,2954,1,0,0,0,2956,2955,1,0,0,0,2957,549,1,0,0,0,2958,2959,
  	3,616,308,0,2959,2960,5,57,0,0,2960,2961,3,552,276,0,2961,551,1,0,0,0,
  	2962,2964,3,752,376,0,2963,2965,3,726,363,0,2964,2963,1,0,0,0,2964,2965,
  	1,0,0,0,2965,2966,1,0,0,0,2966,2967,3,92,46,0,2967,2984,1,0,0,0,2968,
  	2970,3,80,40,0,2969,2968,1,0,0,0,2970,2973,1,0,0,0,2971,2969,1,0,0,0,
  	2971,2972,1,0,0,0,2972,2974,1,0,0,0,2973,2971,1,0,0,0,2974,2981,5,58,
  	0,0,2975,2977,3,80,40,0,2976,2975,1,0,0,0,2977,2978,1,0,0,0,2978,2976,
  	1,0,0,0,2978,2979,1,0,0,0,2979,2981,1,0,0,0,2980,2971,1,0,0,0,2980,2976,
  	1,0,0,0,2981,2982,1,0,0,0,2982,2984,3,86,43,0,2983,2962,1,0,0,0,2983,
  	2980,1,0,0,0,2984,553,1,0,0,0,2985,2986,3,142,71,0,2986,2988,5,78,0,0,
  	2987,2989,3,88,44,0,2988,2987,1,0,0,0,2988,2989,1,0,0,0,2989,2991,1,0,
  	0,0,2990,2992,3,1022,511,0,2991,2990,1,0,0,0,2991,2992,1,0,0,0,2992,2993,
  	1,0,0,0,2993,2994,3,556,278,0,2994,555,1,0,0,0,2995,3005,5,191,0,0,2996,
  	3000,5,201,0,0,2997,2999,3,558,279,0,2998,2997,1,0,0,0,2999,3002,1,0,
  	0,0,3000,2998,1,0,0,0,3000,3001,1,0,0,0,3001,3003,1,0,0,0,3002,3000,1,
  	0,0,0,3003,3005,5,202,0,0,3004,2995,1,0,0,0,3004,2996,1,0,0,0,3005,557,
  	1,0,0,0,3006,3011,3,54,27,0,3007,3011,3,1058,529,0,3008,3011,3,550,275,
  	0,3009,3011,3,560,280,0,3010,3006,1,0,0,0,3010,3007,1,0,0,0,3010,3008,
  	1,0,0,0,3010,3009,1,0,0,0,3011,559,1,0,0,0,3012,3015,5,36,0,0,3013,3016,
  	3,562,281,0,3014,3016,3,564,282,0,3015,3013,1,0,0,0,3015,3014,1,0,0,0,
  	3016,3017,1,0,0,0,3017,3018,3,6,3,0,3018,561,1,0,0,0,3019,3020,3,632,
  	316,0,3020,563,1,0,0,0,3021,3022,3,628,314,0,3022,565,1,0,0,0,3023,3024,
  	3,136,68,0,3024,3025,5,79,0,0,3025,3026,5,27,0,0,3026,3027,3,50,25,0,
  	3027,3028,3,472,236,0,3028,567,1,0,0,0,3029,3030,3,142,71,0,3030,3031,
  	5,79,0,0,3031,3032,3,468,234,0,3032,3033,3,472,236,0,3033,569,1,0,0,0,
  	3034,3035,3,136,68,0,3035,3036,5,58,0,0,3036,3037,5,27,0,0,3037,3038,
  	3,48,24,0,3038,571,1,0,0,0,3039,3040,3,142,71,0,3040,3041,5,58,0,0,3041,
  	3042,3,86,43,0,3042,573,1,0,0,0,3043,3045,5,90,0,0,3044,3043,1,0,0,0,
  	3044,3045,1,0,0,0,3045,3049,1,0,0,0,3046,3048,3,44,22,0,3047,3046,1,0,
  	0,0,3048,3051,1,0,0,0,3049,3047,1,0,0,0,3049,3050,1,0,0,0,3050,3052,1,
  	0,0,0,3051,3049,1,0,0,0,3052,3053,5,143,0,0,3053,3054,5,27,0,0,3054,3055,
  	3,48,24,0,3055,575,1,0,0,0,3056,3057,5,207,0,0,3057,3058,3,580,290,0,
  	3058,3059,3,18,9,0,3059,577,1,0,0,0,3060,3061,5,207,0,0,3061,3062,3,580,
  	290,0,3062,579,1,0,0,0,3063,3064,3,746,373,0,3064,581,1,0,0,0,3065,3067,
  	3,80,40,0,3066,3065,1,0,0,0,3067,3070,1,0,0,0,3068,3066,1,0,0,0,3068,
  	3069,1,0,0,0,3069,3071,1,0,0,0,3070,3068,1,0,0,0,3071,3072,7,4,0,0,3072,
  	3082,3,584,292,0,3073,3074,5,89,0,0,3074,3079,3,12,6,0,3075,3076,5,205,
  	0,0,3076,3078,3,12,6,0,3077,3075,1,0,0,0,3078,3081,1,0,0,0,3079,3077,
  	1,0,0,0,3079,3080,1,0,0,0,3080,3083,1,0,0,0,3081,3079,1,0,0,0,3082,3073,
  	1,0,0,0,3082,3083,1,0,0,0,3083,3084,1,0,0,0,3084,3085,3,586,293,0,3085,
  	583,1,0,0,0,3086,3090,3,598,299,0,3087,3091,5,194,0,0,3088,3089,5,176,
  	0,0,3089,3091,5,98,0,0,3090,3087,1,0,0,0,3090,3088,1,0,0,0,3091,3093,
  	1,0,0,0,3092,3086,1,0,0,0,3092,3093,1,0,0,0,3093,3094,1,0,0,0,3094,3095,
  	3,746,373,0,3095,585,1,0,0,0,3096,3107,5,191,0,0,3097,3102,5,201,0,0,
  	3098,3103,3,56,28,0,3099,3103,3,588,294,0,3100,3103,3,36,18,0,3101,3103,
  	3,628,314,0,3102,3098,1,0,0,0,3102,3099,1,0,0,0,3102,3100,1,0,0,0,3102,
  	3101,1,0,0,0,3103,3104,1,0,0,0,3104,3105,5,202,0,0,3105,3107,1,0,0,0,
  	3106,3096,1,0,0,0,3106,3097,1,0,0,0,3107,587,1,0,0,0,3108,3109,3,590,
  	295,0,3109,589,1,0,0,0,3110,3112,5,55,0,0,3111,3110,1,0,0,0,3111,3112,
  	1,0,0,0,3112,3114,1,0,0,0,3113,3115,5,87,0,0,3114,3113,1,0,0,0,3114,3115,
  	1,0,0,0,3115,3116,1,0,0,0,3116,3118,3,756,378,0,3117,3119,3,726,363,0,
  	3118,3117,1,0,0,0,3118,3119,1,0,0,0,3119,3121,1,0,0,0,3120,3122,3,1022,
  	511,0,3121,3120,1,0,0,0,3121,3122,1,0,0,0,3122,3123,1,0,0,0,3123,3124,
  	3,586,293,0,3124,591,1,0,0,0,3125,3127,3,42,21,0,3126,3125,1,0,0,0,3126,
  	3127,1,0,0,0,3127,3129,1,0,0,0,3128,3130,3,44,22,0,3129,3128,1,0,0,0,
  	3130,3131,1,0,0,0,3131,3129,1,0,0,0,3131,3132,1,0,0,0,3132,3133,1,0,0,
  	0,3133,3134,5,27,0,0,3134,3135,3,48,24,0,3135,593,1,0,0,0,3136,3138,3,
  	82,41,0,3137,3139,3,80,40,0,3138,3137,1,0,0,0,3139,3140,1,0,0,0,3140,
  	3138,1,0,0,0,3140,3141,1,0,0,0,3141,3142,1,0,0,0,3142,3143,3,86,43,0,
  	3143,595,1,0,0,0,3144,3146,3,638,319,0,3145,3144,1,0,0,0,3146,3149,1,
  	0,0,0,3147,3145,1,0,0,0,3147,3148,1,0,0,0,3148,597,1,0,0,0,3149,3147,
  	1,0,0,0,3150,3151,5,219,0,0,3151,3152,5,232,0,0,3152,3154,5,227,0,0,3153,
  	3150,1,0,0,0,3153,3154,1,0,0,0,3154,3159,1,0,0,0,3155,3157,5,232,0,0,
  	3156,3155,1,0,0,0,3156,3157,1,0,0,0,3157,3159,1,0,0,0,3158,3153,1,0,0,
  	0,3158,3156,1,0,0,0,3159,599,1,0,0,0,3160,3162,3,602,301,0,3161,3160,
  	1,0,0,0,3162,3165,1,0,0,0,3163,3161,1,0,0,0,3163,3164,1,0,0,0,3164,601,
  	1,0,0,0,3165,3163,1,0,0,0,3166,3169,3,604,302,0,3167,3169,3,14,7,0,3168,
  	3166,1,0,0,0,3168,3167,1,0,0,0,3169,603,1,0,0,0,3170,3173,3,640,320,0,
  	3171,3173,3,642,321,0,3172,3170,1,0,0,0,3172,3171,1,0,0,0,3173,605,1,
  	0,0,0,3174,3176,3,578,289,0,3175,3174,1,0,0,0,3176,3179,1,0,0,0,3177,
  	3175,1,0,0,0,3177,3178,1,0,0,0,3178,3180,1,0,0,0,3179,3177,1,0,0,0,3180,
  	3181,3,608,304,0,3181,3182,3,610,305,0,3182,607,1,0,0,0,3183,3184,5,145,
  	0,0,3184,3185,3,598,299,0,3185,609,1,0,0,0,3186,3192,5,191,0,0,3187,3188,
  	5,201,0,0,3188,3189,3,614,307,0,3189,3190,5,202,0,0,3190,3192,1,0,0,0,
  	3191,3186,1,0,0,0,3191,3187,1,0,0,0,3192,611,1,0,0,0,3193,3194,3,596,
  	298,0,3194,613,1,0,0,0,3195,3199,3,620,310,0,3196,3199,3,36,18,0,3197,
  	3199,3,628,314,0,3198,3195,1,0,0,0,3198,3196,1,0,0,0,3198,3197,1,0,0,
  	0,3199,615,1,0,0,0,3200,3202,3,618,309,0,3201,3200,1,0,0,0,3201,3202,
  	1,0,0,0,3202,617,1,0,0,0,3203,3204,7,5,0,0,3204,619,1,0,0,0,3205,3208,
  	3,622,311,0,3206,3208,3,624,312,0,3207,3205,1,0,0,0,3207,3206,1,0,0,0,
  	3208,621,1,0,0,0,3209,3210,3,616,308,0,3210,3211,3,640,320,0,3211,623,
  	1,0,0,0,3212,3213,3,616,308,0,3213,3214,3,642,321,0,3214,625,1,0,0,0,
  	3215,3220,5,232,0,0,3216,3217,5,193,0,0,3217,3219,5,232,0,0,3218,3216,
  	1,0,0,0,3219,3222,1,0,0,0,3220,3218,1,0,0,0,3220,3221,1,0,0,0,3221,627,
  	1,0,0,0,3222,3220,1,0,0,0,3223,3225,3,618,309,0,3224,3223,1,0,0,0,3224,
  	3225,1,0,0,0,3225,3226,1,0,0,0,3226,3228,5,132,0,0,3227,3229,5,91,0,0,
  	3228,3227,1,0,0,0,3228,3229,1,0,0,0,3229,3230,1,0,0,0,3230,3232,3,630,
  	315,0,3231,3233,3,6,3,0,3232,3231,1,0,0,0,3232,3233,1,0,0,0,3233,629,
  	1,0,0,0,3234,3237,3,632,316,0,3235,3237,3,628,314,0,3236,3234,1,0,0,0,
  	3236,3235,1,0,0,0,3237,631,1,0,0,0,3238,3240,3,626,313,0,3239,3241,5,
  	193,0,0,3240,3239,1,0,0,0,3240,3241,1,0,0,0,3241,3243,1,0,0,0,3242,3244,
  	7,6,0,0,3243,3242,1,0,0,0,3243,3244,1,0,0,0,3244,633,1,0,0,0,3245,3246,
  	3,630,315,0,3246,3247,3,636,318,0,3247,635,1,0,0,0,3248,3249,5,203,0,
  	0,3249,3250,3,828,414,0,3250,3251,5,204,0,0,3251,637,1,0,0,0,3252,3257,
  	3,18,9,0,3253,3257,3,640,320,0,3254,3257,3,642,321,0,3255,3257,3,644,
  	322,0,3256,3252,1,0,0,0,3256,3253,1,0,0,0,3256,3254,1,0,0,0,3256,3255,
  	1,0,0,0,3257,639,1,0,0,0,3258,3286,3,8,4,0,3259,3286,3,646,323,0,3260,
  	3286,3,700,350,0,3261,3286,3,772,386,0,3262,3286,3,606,303,0,3263,3286,
  	3,774,387,0,3264,3286,3,776,388,0,3265,3286,3,1040,520,0,3266,3286,3,
  	778,389,0,3267,3286,3,780,390,0,3268,3286,3,998,499,0,3269,3286,3,800,
  	400,0,3270,3286,3,804,402,0,3271,3286,3,814,407,0,3272,3286,3,1028,514,
  	0,3273,3286,3,28,14,0,3274,3286,3,1054,527,0,3275,3286,3,672,336,0,3276,
  	3286,3,680,340,0,3277,3286,3,706,353,0,3278,3286,3,684,342,0,3279,3286,
  	3,764,382,0,3280,3286,3,744,372,0,3281,3286,3,748,374,0,3282,3286,3,754,
  	377,0,3283,3286,3,768,384,0,3284,3286,3,628,314,0,3285,3258,1,0,0,0,3285,
  	3259,1,0,0,0,3285,3260,1,0,0,0,3285,3261,1,0,0,0,3285,3262,1,0,0,0,3285,
  	3263,1,0,0,0,3285,3264,1,0,0,0,3285,3265,1,0,0,0,3285,3266,1,0,0,0,3285,
  	3267,1,0,0,0,3285,3268,1,0,0,0,3285,3269,1,0,0,0,3285,3270,1,0,0,0,3285,
  	3271,1,0,0,0,3285,3272,1,0,0,0,3285,3273,1,0,0,0,3285,3274,1,0,0,0,3285,
  	3275,1,0,0,0,3285,3276,1,0,0,0,3285,3277,1,0,0,0,3285,3278,1,0,0,0,3285,
  	3279,1,0,0,0,3285,3280,1,0,0,0,3285,3281,1,0,0,0,3285,3282,1,0,0,0,3285,
  	3283,1,0,0,0,3285,3284,1,0,0,0,3286,641,1,0,0,0,3287,3298,3,710,355,0,
  	3288,3298,3,802,401,0,3289,3298,3,812,406,0,3290,3298,3,816,408,0,3291,
  	3298,3,818,409,0,3292,3298,3,782,391,0,3293,3298,3,792,396,0,3294,3298,
  	3,796,398,0,3295,3298,3,1000,500,0,3296,3298,3,1002,501,0,3297,3287,1,
  	0,0,0,3297,3288,1,0,0,0,3297,3289,1,0,0,0,3297,3290,1,0,0,0,3297,3291,
  	1,0,0,0,3297,3292,1,0,0,0,3297,3293,1,0,0,0,3297,3294,1,0,0,0,3297,3295,
  	1,0,0,0,3297,3296,1,0,0,0,3298,643,1,0,0,0,3299,3300,3,1060,530,0,3300,
  	645,1,0,0,0,3301,3302,3,648,324,0,3302,3303,5,175,0,0,3303,3304,3,650,
  	325,0,3304,3305,3,666,333,0,3305,647,1,0,0,0,3306,3308,5,90,0,0,3307,
  	3306,1,0,0,0,3307,3308,1,0,0,0,3308,3312,1,0,0,0,3309,3311,3,578,289,
  	0,3310,3309,1,0,0,0,3311,3314,1,0,0,0,3312,3310,1,0,0,0,3312,3313,1,0,
  	0,0,3313,649,1,0,0,0,3314,3312,1,0,0,0,3315,3317,5,91,0,0,3316,3315,1,
  	0,0,0,3316,3317,1,0,0,0,3317,3318,1,0,0,0,3318,3320,3,598,299,0,3319,
  	3321,3,1034,517,0,3320,3319,1,0,0,0,3320,3321,1,0,0,0,3321,3324,1,0,0,
  	0,3322,3325,3,652,326,0,3323,3325,3,654,327,0,3324,3322,1,0,0,0,3324,
  	3323,1,0,0,0,3325,3326,1,0,0,0,3326,3324,1,0,0,0,3326,3327,1,0,0,0,3327,
  	3331,1,0,0,0,3328,3330,3,656,328,0,3329,3328,1,0,0,0,3330,3333,1,0,0,
  	0,3331,3329,1,0,0,0,3331,3332,1,0,0,0,3332,651,1,0,0,0,3333,3331,1,0,
  	0,0,3334,3335,5,84,0,0,3335,3340,3,674,337,0,3336,3337,5,205,0,0,3337,
  	3339,3,674,337,0,3338,3336,1,0,0,0,3339,3342,1,0,0,0,3340,3338,1,0,0,
  	0,3340,3341,1,0,0,0,3341,653,1,0,0,0,3342,3340,1,0,0,0,3343,3344,5,88,
  	0,0,3344,3345,3,682,341,0,3345,655,1,0,0,0,3346,3351,3,658,329,0,3347,
  	3351,3,660,330,0,3348,3351,3,662,331,0,3349,3351,3,664,332,0,3350,3346,
  	1,0,0,0,3350,3347,1,0,0,0,3350,3348,1,0,0,0,3350,3349,1,0,0,0,3351,657,
  	1,0,0,0,3352,3353,5,113,0,0,3353,3354,5,126,0,0,3354,3359,3,686,343,0,
  	3355,3356,5,205,0,0,3356,3358,3,686,343,0,3357,3355,1,0,0,0,3358,3361,
  	1,0,0,0,3359,3357,1,0,0,0,3359,3360,1,0,0,0,3360,659,1,0,0,0,3361,3359,
  	1,0,0,0,3362,3363,5,178,0,0,3363,3368,3,688,344,0,3364,3365,5,205,0,0,
  	3365,3367,3,688,344,0,3366,3364,1,0,0,0,3367,3370,1,0,0,0,3368,3366,1,
  	0,0,0,3368,3369,1,0,0,0,3369,661,1,0,0,0,3370,3368,1,0,0,0,3371,3372,
  	5,130,0,0,3372,3377,3,690,345,0,3373,3374,5,205,0,0,3374,3376,3,690,345,
  	0,3375,3373,1,0,0,0,3376,3379,1,0,0,0,3377,3375,1,0,0,0,3377,3378,1,0,
  	0,0,3378,663,1,0,0,0,3379,3377,1,0,0,0,3380,3381,5,111,0,0,3381,3386,
  	3,692,346,0,3382,3383,5,205,0,0,3383,3385,3,692,346,0,3384,3382,1,0,0,
  	0,3385,3388,1,0,0,0,3386,3384,1,0,0,0,3386,3387,1,0,0,0,3387,665,1,0,
  	0,0,3388,3386,1,0,0,0,3389,3395,5,191,0,0,3390,3391,5,201,0,0,3391,3392,
  	3,668,334,0,3392,3393,5,202,0,0,3393,3395,1,0,0,0,3394,3389,1,0,0,0,3394,
  	3390,1,0,0,0,3395,667,1,0,0,0,3396,3398,3,638,319,0,3397,3396,1,0,0,0,
  	3398,3401,1,0,0,0,3399,3397,1,0,0,0,3399,3400,1,0,0,0,3400,669,1,0,0,
  	0,3401,3399,1,0,0,0,3402,3403,3,638,319,0,3403,671,1,0,0,0,3404,3405,
  	5,163,0,0,3405,3407,3,598,299,0,3406,3404,1,0,0,0,3406,3407,1,0,0,0,3407,
  	3408,1,0,0,0,3408,3409,5,170,0,0,3409,3410,3,676,338,0,3410,3411,5,84,
  	0,0,3411,3412,3,678,339,0,3412,3413,3,6,3,0,3413,673,1,0,0,0,3414,3415,
  	3,678,339,0,3415,675,1,0,0,0,3416,3419,3,626,313,0,3417,3419,3,758,379,
  	0,3418,3416,1,0,0,0,3418,3417,1,0,0,0,3419,677,1,0,0,0,3420,3423,3,626,
  	313,0,3421,3423,3,758,379,0,3422,3420,1,0,0,0,3422,3421,1,0,0,0,3423,
  	679,1,0,0,0,3424,3425,5,106,0,0,3425,3427,3,598,299,0,3426,3424,1,0,0,
  	0,3426,3427,1,0,0,0,3427,3428,1,0,0,0,3428,3431,5,104,0,0,3429,3432,3,
  	626,313,0,3430,3432,3,760,380,0,3431,3429,1,0,0,0,3431,3430,1,0,0,0,3432,
  	3433,1,0,0,0,3433,3436,5,88,0,0,3434,3437,3,626,313,0,3435,3437,3,760,
  	380,0,3436,3434,1,0,0,0,3436,3435,1,0,0,0,3437,3438,1,0,0,0,3438,3439,
  	3,6,3,0,3439,681,1,0,0,0,3440,3443,3,626,313,0,3441,3443,3,760,380,0,
  	3442,3440,1,0,0,0,3442,3441,1,0,0,0,3443,683,1,0,0,0,3444,3445,5,112,
  	0,0,3445,3447,3,598,299,0,3446,3444,1,0,0,0,3446,3447,1,0,0,0,3447,3448,
  	1,0,0,0,3448,3451,5,113,0,0,3449,3452,3,626,313,0,3450,3452,3,760,380,
  	0,3451,3449,1,0,0,0,3451,3450,1,0,0,0,3452,3453,1,0,0,0,3453,3456,5,126,
  	0,0,3454,3457,3,626,313,0,3455,3457,3,760,380,0,3456,3454,1,0,0,0,3456,
  	3455,1,0,0,0,3457,3458,1,0,0,0,3458,3459,3,6,3,0,3459,685,1,0,0,0,3460,
  	3463,3,626,313,0,3461,3463,3,760,380,0,3462,3460,1,0,0,0,3462,3461,1,
  	0,0,0,3463,687,1,0,0,0,3464,3467,3,626,313,0,3465,3467,3,758,379,0,3466,
  	3464,1,0,0,0,3466,3465,1,0,0,0,3467,689,1,0,0,0,3468,3471,3,626,313,0,
  	3469,3471,3,758,379,0,3470,3468,1,0,0,0,3470,3469,1,0,0,0,3471,691,1,
  	0,0,0,3472,3475,3,626,313,0,3473,3475,3,758,379,0,3474,3472,1,0,0,0,3474,
  	3473,1,0,0,0,3475,693,1,0,0,0,3476,3479,3,696,348,0,3477,3479,3,698,349,
  	0,3478,3476,1,0,0,0,3478,3477,1,0,0,0,3479,695,1,0,0,0,3480,3481,3,616,
  	308,0,3481,3482,5,141,0,0,3482,3483,3,642,321,0,3483,697,1,0,0,0,3484,
  	3485,3,616,308,0,3485,3486,3,642,321,0,3486,699,1,0,0,0,3487,3489,3,648,
  	324,0,3488,3487,1,0,0,0,3488,3489,1,0,0,0,3489,3490,1,0,0,0,3490,3491,
  	5,101,0,0,3491,3492,3,702,351,0,3492,3493,3,666,333,0,3493,701,1,0,0,
  	0,3494,3496,5,91,0,0,3495,3494,1,0,0,0,3495,3496,1,0,0,0,3496,3497,1,
  	0,0,0,3497,3499,3,598,299,0,3498,3500,3,1034,517,0,3499,3498,1,0,0,0,
  	3499,3500,1,0,0,0,3500,3503,1,0,0,0,3501,3504,3,704,352,0,3502,3504,3,
  	654,327,0,3503,3501,1,0,0,0,3503,3502,1,0,0,0,3503,3504,1,0,0,0,3504,
  	3508,1,0,0,0,3505,3507,3,656,328,0,3506,3505,1,0,0,0,3507,3510,1,0,0,
  	0,3508,3506,1,0,0,0,3508,3509,1,0,0,0,3509,703,1,0,0,0,3510,3508,1,0,
  	0,0,3511,3512,5,84,0,0,3512,3517,3,708,354,0,3513,3514,5,205,0,0,3514,
  	3516,3,708,354,0,3515,3513,1,0,0,0,3516,3519,1,0,0,0,3517,3515,1,0,0,
  	0,3517,3518,1,0,0,0,3518,705,1,0,0,0,3519,3517,1,0,0,0,3520,3521,5,163,
  	0,0,3521,3523,3,598,299,0,3522,3520,1,0,0,0,3522,3523,1,0,0,0,3523,3524,
  	1,0,0,0,3524,3525,5,167,0,0,3525,3526,3,626,313,0,3526,3527,5,84,0,0,
  	3527,3528,3,626,313,0,3528,3529,3,6,3,0,3529,707,1,0,0,0,3530,3531,3,
  	626,313,0,3531,709,1,0,0,0,3532,3534,3,712,356,0,3533,3532,1,0,0,0,3533,
  	3534,1,0,0,0,3534,3539,1,0,0,0,3535,3536,5,119,0,0,3536,3540,3,714,357,
  	0,3537,3540,5,119,0,0,3538,3540,3,578,289,0,3539,3535,1,0,0,0,3539,3537,
  	1,0,0,0,3539,3538,1,0,0,0,3540,3542,1,0,0,0,3541,3543,3,734,367,0,3542,
  	3541,1,0,0,0,3542,3543,1,0,0,0,3543,3545,1,0,0,0,3544,3546,3,1026,513,
  	0,3545,3544,1,0,0,0,3545,3546,1,0,0,0,3546,3548,1,0,0,0,3547,3549,3,1024,
  	512,0,3548,3547,1,0,0,0,3548,3549,1,0,0,0,3549,3550,1,0,0,0,3550,3551,
  	3,666,333,0,3551,711,1,0,0,0,3552,3554,3,68,34,0,3553,3552,1,0,0,0,3553,
  	3554,1,0,0,0,3554,3556,1,0,0,0,3555,3557,5,90,0,0,3556,3555,1,0,0,0,3556,
  	3557,1,0,0,0,3557,3559,1,0,0,0,3558,3560,7,7,0,0,3559,3558,1,0,0,0,3559,
  	3560,1,0,0,0,3560,3562,1,0,0,0,3561,3563,5,158,0,0,3562,3561,1,0,0,0,
  	3562,3563,1,0,0,0,3563,3565,1,0,0,0,3564,3566,5,29,0,0,3565,3564,1,0,
  	0,0,3565,3566,1,0,0,0,3566,3568,1,0,0,0,3567,3569,5,116,0,0,3568,3567,
  	1,0,0,0,3568,3569,1,0,0,0,3569,3573,1,0,0,0,3570,3572,3,578,289,0,3571,
  	3570,1,0,0,0,3572,3575,1,0,0,0,3573,3571,1,0,0,0,3573,3574,1,0,0,0,3574,
  	713,1,0,0,0,3575,3573,1,0,0,0,3576,3578,5,91,0,0,3577,3576,1,0,0,0,3577,
  	3578,1,0,0,0,3578,3586,1,0,0,0,3579,3582,3,716,358,0,3580,3583,3,726,
  	363,0,3581,3583,3,654,327,0,3582,3580,1,0,0,0,3582,3581,1,0,0,0,3582,
  	3583,1,0,0,0,3583,3587,1,0,0,0,3584,3587,3,726,363,0,3585,3587,3,654,
  	327,0,3586,3579,1,0,0,0,3586,3584,1,0,0,0,3586,3585,1,0,0,0,3587,3591,
  	1,0,0,0,3588,3590,3,718,359,0,3589,3588,1,0,0,0,3590,3593,1,0,0,0,3591,
  	3589,1,0,0,0,3591,3592,1,0,0,0,3592,3595,1,0,0,0,3593,3591,1,0,0,0,3594,
  	3596,3,666,333,0,3595,3594,1,0,0,0,3595,3596,1,0,0,0,3596,715,1,0,0,0,
  	3597,3598,5,219,0,0,3598,3599,5,232,0,0,3599,3601,5,227,0,0,3600,3602,
  	5,232,0,0,3601,3600,1,0,0,0,3601,3602,1,0,0,0,3602,3605,1,0,0,0,3603,
  	3605,5,232,0,0,3604,3597,1,0,0,0,3604,3603,1,0,0,0,3605,717,1,0,0,0,3606,
  	3611,3,656,328,0,3607,3611,3,720,360,0,3608,3611,3,722,361,0,3609,3611,
  	3,724,362,0,3610,3606,1,0,0,0,3610,3607,1,0,0,0,3610,3608,1,0,0,0,3610,
  	3609,1,0,0,0,3611,719,1,0,0,0,3612,3615,5,99,0,0,3613,3616,3,762,381,
  	0,3614,3616,3,760,380,0,3615,3613,1,0,0,0,3615,3614,1,0,0,0,3616,721,
  	1,0,0,0,3617,3618,5,137,0,0,3618,3619,5,148,0,0,3619,3620,3,766,383,0,
  	3620,723,1,0,0,0,3621,3622,5,120,0,0,3622,3623,5,98,0,0,3623,3628,3,770,
  	385,0,3624,3625,5,205,0,0,3625,3627,3,770,385,0,3626,3624,1,0,0,0,3627,
  	3630,1,0,0,0,3628,3626,1,0,0,0,3628,3629,1,0,0,0,3629,725,1,0,0,0,3630,
  	3628,1,0,0,0,3631,3633,3,728,364,0,3632,3631,1,0,0,0,3633,3634,1,0,0,
  	0,3634,3632,1,0,0,0,3634,3635,1,0,0,0,3635,3637,1,0,0,0,3636,3638,3,116,
  	58,0,3637,3636,1,0,0,0,3637,3638,1,0,0,0,3638,3642,1,0,0,0,3639,3641,
  	3,728,364,0,3640,3639,1,0,0,0,3641,3644,1,0,0,0,3642,3640,1,0,0,0,3642,
  	3643,1,0,0,0,3643,3652,1,0,0,0,3644,3642,1,0,0,0,3645,3647,3,116,58,0,
  	3646,3648,3,728,364,0,3647,3646,1,0,0,0,3648,3649,1,0,0,0,3649,3647,1,
  	0,0,0,3649,3650,1,0,0,0,3650,3652,1,0,0,0,3651,3632,1,0,0,0,3651,3645,
  	1,0,0,0,3652,727,1,0,0,0,3653,3658,3,730,365,0,3654,3658,3,734,367,0,
  	3655,3658,3,738,369,0,3656,3658,3,740,370,0,3657,3653,1,0,0,0,3657,3654,
  	1,0,0,0,3657,3655,1,0,0,0,3657,3656,1,0,0,0,3658,729,1,0,0,0,3659,3664,
  	3,732,366,0,3660,3661,5,205,0,0,3661,3663,3,746,373,0,3662,3660,1,0,0,
  	0,3663,3666,1,0,0,0,3664,3662,1,0,0,0,3664,3665,1,0,0,0,3665,731,1,0,
  	0,0,3666,3664,1,0,0,0,3667,3668,5,83,0,0,3668,3669,3,746,373,0,3669,733,
  	1,0,0,0,3670,3672,3,736,368,0,3671,3673,3,750,375,0,3672,3671,1,0,0,0,
  	3672,3673,1,0,0,0,3673,3678,1,0,0,0,3674,3675,5,205,0,0,3675,3677,3,750,
  	375,0,3676,3674,1,0,0,0,3677,3680,1,0,0,0,3678,3676,1,0,0,0,3678,3679,
  	1,0,0,0,3679,735,1,0,0,0,3680,3678,1,0,0,0,3681,3682,5,85,0,0,3682,3683,
  	3,750,375,0,3683,737,1,0,0,0,3684,3685,5,86,0,0,3685,3686,3,752,376,0,
  	3686,739,1,0,0,0,3687,3690,3,742,371,0,3688,3689,5,205,0,0,3689,3691,
  	3,756,378,0,3690,3688,1,0,0,0,3690,3691,1,0,0,0,3691,741,1,0,0,0,3692,
  	3694,3,68,34,0,3693,3692,1,0,0,0,3693,3694,1,0,0,0,3694,3695,1,0,0,0,
  	3695,3696,5,87,0,0,3696,3697,3,756,378,0,3697,743,1,0,0,0,3698,3699,5,
  	163,0,0,3699,3701,3,598,299,0,3700,3698,1,0,0,0,3700,3701,1,0,0,0,3701,
  	3703,1,0,0,0,3702,3704,5,177,0,0,3703,3702,1,0,0,0,3703,3704,1,0,0,0,
  	3704,3705,1,0,0,0,3705,3706,3,626,313,0,3706,3707,5,83,0,0,3707,3709,
  	3,678,339,0,3708,3710,3,116,58,0,3709,3708,1,0,0,0,3709,3710,1,0,0,0,
  	3710,3711,1,0,0,0,3711,3712,3,6,3,0,3712,745,1,0,0,0,3713,3714,3,678,
  	339,0,3714,747,1,0,0,0,3715,3716,5,163,0,0,3716,3718,3,598,299,0,3717,
  	3715,1,0,0,0,3717,3718,1,0,0,0,3718,3720,1,0,0,0,3719,3721,5,168,0,0,
  	3720,3719,1,0,0,0,3720,3721,1,0,0,0,3721,3722,1,0,0,0,3722,3723,3,676,
  	338,0,3723,3724,5,85,0,0,3724,3726,3,678,339,0,3725,3727,3,116,58,0,3726,
  	3725,1,0,0,0,3726,3727,1,0,0,0,3727,3728,1,0,0,0,3728,3729,3,6,3,0,3729,
  	749,1,0,0,0,3730,3731,3,678,339,0,3731,751,1,0,0,0,3732,3733,3,678,339,
  	0,3733,753,1,0,0,0,3734,3736,3,68,34,0,3735,3734,1,0,0,0,3735,3736,1,
  	0,0,0,3736,3739,1,0,0,0,3737,3738,5,163,0,0,3738,3740,3,598,299,0,3739,
  	3737,1,0,0,0,3739,3740,1,0,0,0,3740,3743,1,0,0,0,3741,3742,5,160,0,0,
  	3742,3744,3,676,338,0,3743,3741,1,0,0,0,3743,3744,1,0,0,0,3744,3745,1,
  	0,0,0,3745,3746,5,87,0,0,3746,3748,3,626,313,0,3747,3749,3,732,366,0,
  	3748,3747,1,0,0,0,3748,3749,1,0,0,0,3749,3751,1,0,0,0,3750,3752,3,116,
  	58,0,3751,3750,1,0,0,0,3751,3752,1,0,0,0,3752,3754,1,0,0,0,3753,3755,
  	3,736,368,0,3754,3753,1,0,0,0,3754,3755,1,0,0,0,3755,3757,1,0,0,0,3756,
  	3758,3,1026,513,0,3757,3756,1,0,0,0,3757,3758,1,0,0,0,3758,3759,1,0,0,
  	0,3759,3760,3,6,3,0,3760,755,1,0,0,0,3761,3762,3,678,339,0,3762,757,1,
  	0,0,0,3763,3764,3,760,380,0,3764,759,1,0,0,0,3765,3770,3,762,381,0,3766,
  	3767,5,217,0,0,3767,3769,3,762,381,0,3768,3766,1,0,0,0,3769,3772,1,0,
  	0,0,3770,3768,1,0,0,0,3770,3771,1,0,0,0,3771,761,1,0,0,0,3772,3770,1,
  	0,0,0,3773,3774,3,626,313,0,3774,763,1,0,0,0,3775,3776,5,138,0,0,3776,
  	3778,3,598,299,0,3777,3775,1,0,0,0,3777,3778,1,0,0,0,3778,3779,1,0,0,
  	0,3779,3782,5,137,0,0,3780,3783,3,626,313,0,3781,3783,3,758,379,0,3782,
  	3780,1,0,0,0,3782,3781,1,0,0,0,3783,3784,1,0,0,0,3784,3787,5,148,0,0,
  	3785,3788,3,626,313,0,3786,3788,3,758,379,0,3787,3785,1,0,0,0,3787,3786,
  	1,0,0,0,3788,3789,1,0,0,0,3789,3790,3,6,3,0,3790,765,1,0,0,0,3791,3794,
  	3,626,313,0,3792,3794,3,758,379,0,3793,3791,1,0,0,0,3793,3792,1,0,0,0,
  	3794,767,1,0,0,0,3795,3799,5,121,0,0,3796,3797,3,598,299,0,3797,3798,
  	5,148,0,0,3798,3800,1,0,0,0,3799,3796,1,0,0,0,3799,3800,1,0,0,0,3800,
  	3801,1,0,0,0,3801,3802,3,626,313,0,3802,3803,5,98,0,0,3803,3804,3,626,
  	313,0,3804,3805,3,6,3,0,3805,769,1,0,0,0,3806,3807,3,626,313,0,3807,771,
  	1,0,0,0,3808,3809,3,648,324,0,3809,3810,5,108,0,0,3810,3811,3,702,351,
  	0,3811,3812,3,666,333,0,3812,773,1,0,0,0,3813,3814,3,648,324,0,3814,3815,
  	5,100,0,0,3815,3816,3,702,351,0,3816,3817,3,666,333,0,3817,775,1,0,0,
  	0,3818,3820,3,648,324,0,3819,3818,1,0,0,0,3819,3820,1,0,0,0,3820,3821,
  	1,0,0,0,3821,3822,5,166,0,0,3822,3823,3,702,351,0,3823,3824,3,666,333,
  	0,3824,777,1,0,0,0,3825,3826,3,648,324,0,3826,3827,5,94,0,0,3827,3828,
  	3,702,351,0,3828,3829,3,666,333,0,3829,779,1,0,0,0,3830,3831,3,648,324,
  	0,3831,3832,5,94,0,0,3832,3833,5,166,0,0,3833,3834,3,702,351,0,3834,3835,
  	3,666,333,0,3835,781,1,0,0,0,3836,3838,3,648,324,0,3837,3836,1,0,0,0,
  	3837,3838,1,0,0,0,3838,3839,1,0,0,0,3839,3840,5,107,0,0,3840,3841,3,784,
  	392,0,3841,3842,3,666,333,0,3842,783,1,0,0,0,3843,3846,3,714,357,0,3844,
  	3847,3,786,393,0,3845,3847,3,788,394,0,3846,3844,1,0,0,0,3846,3845,1,
  	0,0,0,3847,785,1,0,0,0,3848,3850,5,91,0,0,3849,3848,1,0,0,0,3849,3850,
  	1,0,0,0,3850,3851,1,0,0,0,3851,3852,5,126,0,0,3852,3853,3,186,93,0,3853,
  	3854,5,173,0,0,3854,3855,3,186,93,0,3855,787,1,0,0,0,3856,3857,5,199,
  	0,0,3857,3858,3,186,93,0,3858,3859,5,205,0,0,3859,3864,3,186,93,0,3860,
  	3861,5,205,0,0,3861,3863,3,186,93,0,3862,3860,1,0,0,0,3863,3866,1,0,0,
  	0,3864,3862,1,0,0,0,3864,3865,1,0,0,0,3865,3867,1,0,0,0,3866,3864,1,0,
  	0,0,3867,3868,5,200,0,0,3868,789,1,0,0,0,3869,3870,5,232,0,0,3870,3872,
  	5,86,0,0,3871,3869,1,0,0,0,3871,3872,1,0,0,0,3872,3874,1,0,0,0,3873,3875,
  	3,1034,517,0,3874,3873,1,0,0,0,3874,3875,1,0,0,0,3875,3876,1,0,0,0,3876,
  	3877,3,752,376,0,3877,791,1,0,0,0,3878,3879,3,712,356,0,3879,3880,5,96,
  	0,0,3880,3881,3,794,397,0,3881,3882,3,666,333,0,3882,793,1,0,0,0,3883,
  	3889,3,714,357,0,3884,3885,5,148,0,0,3885,3886,3,186,93,0,3886,3887,5,
  	223,0,0,3887,3888,3,186,93,0,3888,3890,1,0,0,0,3889,3884,1,0,0,0,3889,
  	3890,1,0,0,0,3890,3904,1,0,0,0,3891,3893,5,91,0,0,3892,3891,1,0,0,0,3892,
  	3893,1,0,0,0,3893,3901,1,0,0,0,3894,3896,5,148,0,0,3895,3894,1,0,0,0,
  	3895,3896,1,0,0,0,3896,3897,1,0,0,0,3897,3898,3,186,93,0,3898,3899,5,
  	223,0,0,3899,3900,3,186,93,0,3900,3902,1,0,0,0,3901,3895,1,0,0,0,3901,
  	3902,1,0,0,0,3902,3904,1,0,0,0,3903,3883,1,0,0,0,3903,3892,1,0,0,0,3904,
  	795,1,0,0,0,3905,3906,3,712,356,0,3906,3907,5,171,0,0,3907,3908,3,798,
  	399,0,3908,3909,3,666,333,0,3909,797,1,0,0,0,3910,3916,3,714,357,0,3911,
  	3912,5,123,0,0,3912,3913,3,186,93,0,3913,3914,5,172,0,0,3914,3915,3,186,
  	93,0,3915,3917,1,0,0,0,3916,3911,1,0,0,0,3916,3917,1,0,0,0,3917,3931,
  	1,0,0,0,3918,3920,5,91,0,0,3919,3918,1,0,0,0,3919,3920,1,0,0,0,3920,3928,
  	1,0,0,0,3921,3923,5,123,0,0,3922,3921,1,0,0,0,3922,3923,1,0,0,0,3923,
  	3924,1,0,0,0,3924,3925,3,186,93,0,3925,3926,5,172,0,0,3926,3927,3,186,
  	93,0,3927,3929,1,0,0,0,3928,3922,1,0,0,0,3928,3929,1,0,0,0,3929,3931,
  	1,0,0,0,3930,3910,1,0,0,0,3930,3919,1,0,0,0,3931,799,1,0,0,0,3932,3933,
  	3,648,324,0,3933,3934,5,95,0,0,3934,3935,3,702,351,0,3935,3936,3,666,
  	333,0,3936,801,1,0,0,0,3937,3938,3,712,356,0,3938,3939,5,165,0,0,3939,
  	3941,3,714,357,0,3940,3942,3,1022,511,0,3941,3940,1,0,0,0,3941,3942,1,
  	0,0,0,3942,3943,1,0,0,0,3943,3944,3,666,333,0,3944,803,1,0,0,0,3945,3946,
  	3,648,324,0,3946,3947,5,127,0,0,3947,3948,3,702,351,0,3948,3949,3,806,
  	403,0,3949,805,1,0,0,0,3950,3956,5,191,0,0,3951,3952,5,201,0,0,3952,3953,
  	3,808,404,0,3953,3954,5,202,0,0,3954,3956,1,0,0,0,3955,3950,1,0,0,0,3955,
  	3951,1,0,0,0,3956,807,1,0,0,0,3957,3960,3,670,335,0,3958,3960,3,810,405,
  	0,3959,3957,1,0,0,0,3959,3958,1,0,0,0,3960,3961,1,0,0,0,3961,3959,1,0,
  	0,0,3961,3962,1,0,0,0,3962,3964,1,0,0,0,3963,3965,3,460,230,0,3964,3963,
  	1,0,0,0,3964,3965,1,0,0,0,3965,809,1,0,0,0,3966,3967,3,616,308,0,3967,
  	3968,5,162,0,0,3968,3969,3,642,321,0,3969,811,1,0,0,0,3970,3971,3,712,
  	356,0,3971,3972,5,117,0,0,3972,3974,3,714,357,0,3973,3975,3,1022,511,
  	0,3974,3973,1,0,0,0,3974,3975,1,0,0,0,3975,3976,1,0,0,0,3976,3977,3,806,
  	403,0,3977,813,1,0,0,0,3978,3979,3,648,324,0,3979,3980,5,154,0,0,3980,
  	3981,3,702,351,0,3981,3982,3,806,403,0,3982,815,1,0,0,0,3983,3984,3,712,
  	356,0,3984,3985,5,97,0,0,3985,3987,3,714,357,0,3986,3988,3,1022,511,0,
  	3987,3986,1,0,0,0,3987,3988,1,0,0,0,3988,3989,1,0,0,0,3989,3990,3,806,
  	403,0,3990,817,1,0,0,0,3991,3992,3,712,356,0,3992,3994,5,136,0,0,3993,
  	3995,7,8,0,0,3994,3993,1,0,0,0,3994,3995,1,0,0,0,3995,3996,1,0,0,0,3996,
  	3998,3,714,357,0,3997,3999,3,1022,511,0,3998,3997,1,0,0,0,3998,3999,1,
  	0,0,0,3999,4000,1,0,0,0,4000,4001,3,806,403,0,4001,819,1,0,0,0,4002,4003,
  	3,822,411,0,4003,821,1,0,0,0,4004,4005,3,824,412,0,4005,823,1,0,0,0,4006,
  	4007,3,826,413,0,4007,825,1,0,0,0,4008,4010,3,828,414,0,4009,4008,1,0,
  	0,0,4010,4011,1,0,0,0,4011,4009,1,0,0,0,4011,4012,1,0,0,0,4012,827,1,
  	0,0,0,4013,4022,3,832,416,0,4014,4022,3,834,417,0,4015,4022,3,838,419,
  	0,4016,4022,3,842,421,0,4017,4022,3,846,423,0,4018,4022,3,854,427,0,4019,
  	4022,3,880,440,0,4020,4022,3,892,446,0,4021,4013,1,0,0,0,4021,4014,1,
  	0,0,0,4021,4015,1,0,0,0,4021,4016,1,0,0,0,4021,4017,1,0,0,0,4021,4018,
  	1,0,0,0,4021,4019,1,0,0,0,4021,4020,1,0,0,0,4022,829,1,0,0,0,4023,4028,
  	3,892,446,0,4024,4028,3,880,440,0,4025,4028,3,854,427,0,4026,4028,3,842,
  	421,0,4027,4023,1,0,0,0,4027,4024,1,0,0,0,4027,4025,1,0,0,0,4027,4026,
  	1,0,0,0,4028,831,1,0,0,0,4029,4030,5,129,0,0,4030,4031,3,856,428,0,4031,
  	4032,5,229,0,0,4032,4033,3,862,431,0,4033,4034,5,115,0,0,4034,4035,3,
  	862,431,0,4035,833,1,0,0,0,4036,4037,3,856,428,0,4037,4038,3,836,418,
  	0,4038,4039,3,862,431,0,4039,835,1,0,0,0,4040,4041,7,9,0,0,4041,837,1,
  	0,0,0,4042,4043,3,856,428,0,4043,4044,3,840,420,0,4044,4045,3,826,413,
  	0,4045,839,1,0,0,0,4046,4047,7,10,0,0,4047,841,1,0,0,0,4048,4049,3,844,
  	422,0,4049,4050,3,826,413,0,4050,843,1,0,0,0,4051,4052,7,11,0,0,4052,
  	845,1,0,0,0,4053,4055,3,856,428,0,4054,4053,1,0,0,0,4054,4055,1,0,0,0,
  	4055,4062,1,0,0,0,4056,4057,3,850,425,0,4057,4058,3,882,441,0,4058,4063,
  	1,0,0,0,4059,4060,3,852,426,0,4060,4061,3,884,442,0,4061,4063,1,0,0,0,
  	4062,4056,1,0,0,0,4062,4059,1,0,0,0,4063,847,1,0,0,0,4064,4066,3,856,
  	428,0,4065,4064,1,0,0,0,4065,4066,1,0,0,0,4066,4067,1,0,0,0,4067,4068,
  	3,850,425,0,4068,4069,3,882,441,0,4069,4074,1,0,0,0,4070,4071,3,852,426,
  	0,4071,4072,3,884,442,0,4072,4074,1,0,0,0,4073,4065,1,0,0,0,4073,4070,
  	1,0,0,0,4074,849,1,0,0,0,4075,4076,7,12,0,0,4076,851,1,0,0,0,4077,4078,
  	5,93,0,0,4078,853,1,0,0,0,4079,4080,3,868,434,0,4080,4081,3,876,438,0,
  	4081,4082,3,882,441,0,4082,4087,1,0,0,0,4083,4084,3,878,439,0,4084,4085,
  	3,884,442,0,4085,4087,1,0,0,0,4086,4079,1,0,0,0,4086,4083,1,0,0,0,4087,
  	855,1,0,0,0,4088,4089,3,858,429,0,4089,857,1,0,0,0,4090,4091,3,860,430,
  	0,4091,859,1,0,0,0,4092,4093,3,830,415,0,4093,861,1,0,0,0,4094,4095,3,
  	864,432,0,4095,863,1,0,0,0,4096,4097,3,866,433,0,4097,865,1,0,0,0,4098,
  	4099,3,822,411,0,4099,867,1,0,0,0,4100,4101,3,870,435,0,4101,869,1,0,
  	0,0,4102,4103,3,872,436,0,4103,871,1,0,0,0,4104,4105,3,874,437,0,4105,
  	873,1,0,0,0,4106,4107,3,626,313,0,4107,875,1,0,0,0,4108,4109,5,217,0,
  	0,4109,877,1,0,0,0,4110,4111,5,1,0,0,4111,879,1,0,0,0,4112,4113,5,91,
  	0,0,4113,4114,3,882,441,0,4114,881,1,0,0,0,4115,4116,3,886,443,0,4116,
  	883,1,0,0,0,4117,4118,3,886,443,0,4118,885,1,0,0,0,4119,4120,3,888,444,
  	0,4120,887,1,0,0,0,4121,4122,3,626,313,0,4122,889,1,0,0,0,4123,4125,3,
  	892,446,0,4124,4123,1,0,0,0,4125,4126,1,0,0,0,4126,4124,1,0,0,0,4126,
  	4127,1,0,0,0,4127,891,1,0,0,0,4128,4131,3,920,460,0,4129,4131,3,900,450,
  	0,4130,4128,1,0,0,0,4130,4129,1,0,0,0,4131,893,1,0,0,0,4132,4133,3,892,
  	446,0,4133,895,1,0,0,0,4134,4135,3,894,447,0,4135,897,1,0,0,0,4136,4137,
  	3,896,448,0,4137,899,1,0,0,0,4138,4146,3,908,454,0,4139,4146,3,910,455,
  	0,4140,4146,3,912,456,0,4141,4146,3,924,462,0,4142,4146,3,922,461,0,4143,
  	4146,3,926,463,0,4144,4146,3,948,474,0,4145,4138,1,0,0,0,4145,4139,1,
  	0,0,0,4145,4140,1,0,0,0,4145,4141,1,0,0,0,4145,4142,1,0,0,0,4145,4143,
  	1,0,0,0,4145,4144,1,0,0,0,4146,901,1,0,0,0,4147,4148,3,900,450,0,4148,
  	903,1,0,0,0,4149,4150,3,896,448,0,4150,905,1,0,0,0,4151,4152,3,896,448,
  	0,4152,907,1,0,0,0,4153,4154,5,203,0,0,4154,4155,3,918,459,0,4155,4156,
  	5,204,0,0,4156,909,1,0,0,0,4157,4158,5,207,0,0,4158,4159,5,199,0,0,4159,
  	4160,3,918,459,0,4160,4161,5,200,0,0,4161,911,1,0,0,0,4162,4163,5,199,
  	0,0,4163,4164,3,914,457,0,4164,4165,5,200,0,0,4165,913,1,0,0,0,4166,4168,
  	3,826,413,0,4167,4169,5,205,0,0,4168,4167,1,0,0,0,4168,4169,1,0,0,0,4169,
  	4172,1,0,0,0,4170,4172,3,916,458,0,4171,4166,1,0,0,0,4171,4170,1,0,0,
  	0,4172,915,1,0,0,0,4173,4174,3,824,412,0,4174,4175,5,205,0,0,4175,4176,
  	3,918,459,0,4176,917,1,0,0,0,4177,4178,3,914,457,0,4178,919,1,0,0,0,4179,
  	4180,5,217,0,0,4180,4181,3,352,176,0,4181,921,1,0,0,0,4182,4183,5,217,
  	0,0,4183,4184,3,934,467,0,4184,923,1,0,0,0,4185,4186,5,231,0,0,4186,4187,
  	3,934,467,0,4187,925,1,0,0,0,4188,4189,5,216,0,0,4189,4193,3,888,444,
  	0,4190,4194,3,928,464,0,4191,4194,3,936,468,0,4192,4194,3,864,432,0,4193,
  	4190,1,0,0,0,4193,4191,1,0,0,0,4193,4192,1,0,0,0,4194,927,1,0,0,0,4195,
  	4196,3,930,465,0,4196,929,1,0,0,0,4197,4198,3,932,466,0,4198,931,1,0,
  	0,0,4199,4200,3,976,488,0,4200,933,1,0,0,0,4201,4202,3,976,488,0,4202,
  	935,1,0,0,0,4203,4204,3,938,469,0,4204,937,1,0,0,0,4205,4206,3,944,472,
  	0,4206,939,1,0,0,0,4207,4208,3,942,471,0,4208,941,1,0,0,0,4209,4210,3,
  	888,444,0,4210,943,1,0,0,0,4211,4212,3,946,473,0,4212,945,1,0,0,0,4213,
  	4214,3,888,444,0,4214,947,1,0,0,0,4215,4222,3,950,475,0,4216,4222,3,982,
  	491,0,4217,4222,3,952,476,0,4218,4222,3,958,479,0,4219,4222,3,960,480,
  	0,4220,4222,3,976,488,0,4221,4215,1,0,0,0,4221,4216,1,0,0,0,4221,4217,
  	1,0,0,0,4221,4218,1,0,0,0,4221,4219,1,0,0,0,4221,4220,1,0,0,0,4222,949,
  	1,0,0,0,4223,4227,5,147,0,0,4224,4225,5,199,0,0,4225,4227,5,200,0,0,4226,
  	4223,1,0,0,0,4226,4224,1,0,0,0,4227,951,1,0,0,0,4228,4229,3,954,477,0,
  	4229,953,1,0,0,0,4230,4231,3,956,478,0,4231,955,1,0,0,0,4232,4233,3,626,
  	313,0,4233,957,1,0,0,0,4234,4235,3,626,313,0,4235,4236,5,217,0,0,4236,
  	4237,5,143,0,0,4237,959,1,0,0,0,4238,4239,3,962,481,0,4239,961,1,0,0,
  	0,4240,4243,3,746,373,0,4241,4243,3,968,484,0,4242,4240,1,0,0,0,4242,
  	4241,1,0,0,0,4243,4244,1,0,0,0,4244,4245,3,964,482,0,4245,963,1,0,0,0,
  	4246,4251,5,199,0,0,4247,4248,3,826,413,0,4248,4249,3,966,483,0,4249,
  	4252,1,0,0,0,4250,4252,3,968,484,0,4251,4247,1,0,0,0,4251,4250,1,0,0,
  	0,4251,4252,1,0,0,0,4252,4253,1,0,0,0,4253,4254,5,200,0,0,4254,965,1,
  	0,0,0,4255,4260,3,856,428,0,4256,4257,5,205,0,0,4257,4259,3,826,413,0,
  	4258,4256,1,0,0,0,4259,4262,1,0,0,0,4260,4258,1,0,0,0,4260,4261,1,0,0,
  	0,4261,967,1,0,0,0,4262,4260,1,0,0,0,4263,4268,3,970,485,0,4264,4265,
  	5,205,0,0,4265,4267,3,970,485,0,4266,4264,1,0,0,0,4267,4270,1,0,0,0,4268,
  	4266,1,0,0,0,4268,4269,1,0,0,0,4269,969,1,0,0,0,4270,4268,1,0,0,0,4271,
  	4272,3,972,486,0,4272,971,1,0,0,0,4273,4274,3,974,487,0,4274,4275,5,223,
  	0,0,4275,4276,3,826,413,0,4276,973,1,0,0,0,4277,4278,3,626,313,0,4278,
  	975,1,0,0,0,4279,4280,3,978,489,0,4280,977,1,0,0,0,4281,4282,3,980,490,
  	0,4282,979,1,0,0,0,4283,4284,5,199,0,0,4284,4285,3,808,404,0,4285,4286,
  	5,200,0,0,4286,981,1,0,0,0,4287,4294,7,8,0,0,4288,4294,3,988,494,0,4289,
  	4294,3,990,495,0,4290,4294,3,992,496,0,4291,4294,3,990,495,0,4292,4294,
  	3,996,498,0,4293,4287,1,0,0,0,4293,4288,1,0,0,0,4293,4289,1,0,0,0,4293,
  	4290,1,0,0,0,4293,4291,1,0,0,0,4293,4292,1,0,0,0,4294,983,1,0,0,0,4295,
  	4296,3,986,493,0,4296,985,1,0,0,0,4297,4298,7,8,0,0,4298,987,1,0,0,0,
  	4299,4300,5,237,0,0,4300,989,1,0,0,0,4301,4302,5,235,0,0,4302,991,1,0,
  	0,0,4303,4304,3,994,497,0,4304,993,1,0,0,0,4305,4307,5,235,0,0,4306,4305,
  	1,0,0,0,4306,4307,1,0,0,0,4307,4308,1,0,0,0,4308,4309,5,217,0,0,4309,
  	4312,7,13,0,0,4310,4312,5,236,0,0,4311,4306,1,0,0,0,4311,4310,1,0,0,0,
  	4312,995,1,0,0,0,4313,4314,5,192,0,0,4314,997,1,0,0,0,4315,4316,3,648,
  	324,0,4316,4317,5,135,0,0,4317,4318,3,702,351,0,4318,4319,3,666,333,0,
  	4319,999,1,0,0,0,4320,4321,3,712,356,0,4321,4322,5,124,0,0,4322,4323,
  	3,1004,502,0,4323,4324,3,666,333,0,4324,1001,1,0,0,0,4325,4326,3,712,
  	356,0,4326,4327,5,171,0,0,4327,4328,5,124,0,0,4328,4329,3,1004,502,0,
  	4329,4330,3,666,333,0,4330,1003,1,0,0,0,4331,4333,3,714,357,0,4332,4334,
  	3,1022,511,0,4333,4332,1,0,0,0,4333,4334,1,0,0,0,4334,4337,1,0,0,0,4335,
  	4336,5,148,0,0,4336,4338,3,1006,503,0,4337,4335,1,0,0,0,4337,4338,1,0,
  	0,0,4338,4344,1,0,0,0,4339,4340,5,126,0,0,4340,4341,3,1012,506,0,4341,
  	4342,5,173,0,0,4342,4343,3,1012,506,0,4343,4345,1,0,0,0,4344,4339,1,0,
  	0,0,4344,4345,1,0,0,0,4345,4354,1,0,0,0,4346,4348,5,91,0,0,4347,4346,
  	1,0,0,0,4347,4348,1,0,0,0,4348,4349,1,0,0,0,4349,4350,3,1012,506,0,4350,
  	4351,5,173,0,0,4351,4352,3,1012,506,0,4352,4354,1,0,0,0,4353,4331,1,0,
  	0,0,4353,4347,1,0,0,0,4354,1005,1,0,0,0,4355,4356,3,1008,504,0,4356,1007,
  	1,0,0,0,4357,4358,3,598,299,0,4358,4360,3,1010,505,0,4359,4361,3,1022,
  	511,0,4360,4359,1,0,0,0,4360,4361,1,0,0,0,4361,4371,1,0,0,0,4362,4364,
  	3,746,373,0,4363,4365,3,1034,517,0,4364,4363,1,0,0,0,4364,4365,1,0,0,
  	0,4365,4371,1,0,0,0,4366,4368,3,1034,517,0,4367,4369,3,746,373,0,4368,
  	4367,1,0,0,0,4368,4369,1,0,0,0,4369,4371,1,0,0,0,4370,4357,1,0,0,0,4370,
  	4362,1,0,0,0,4370,4366,1,0,0,0,4371,1009,1,0,0,0,4372,4374,3,728,364,
  	0,4373,4372,1,0,0,0,4374,4377,1,0,0,0,4375,4373,1,0,0,0,4375,4376,1,0,
  	0,0,4376,4378,1,0,0,0,4377,4375,1,0,0,0,4378,4380,3,116,58,0,4379,4381,
  	3,728,364,0,4380,4379,1,0,0,0,4380,4381,1,0,0,0,4381,1011,1,0,0,0,4382,
  	4383,3,1014,507,0,4383,1013,1,0,0,0,4384,4385,3,752,376,0,4385,4386,5,
  	217,0,0,4386,4388,1,0,0,0,4387,4384,1,0,0,0,4387,4388,1,0,0,0,4388,4389,
  	1,0,0,0,4389,4390,3,1016,508,0,4390,1015,1,0,0,0,4391,4392,3,1018,509,
  	0,4392,1017,1,0,0,0,4393,4394,3,1020,510,0,4394,1019,1,0,0,0,4395,4396,
  	3,626,313,0,4396,1021,1,0,0,0,4397,4398,3,1024,512,0,4398,1023,1,0,0,
  	0,4399,4406,5,223,0,0,4400,4406,5,222,0,0,4401,4403,5,109,0,0,4402,4404,
  	7,14,0,0,4403,4402,1,0,0,0,4403,4404,1,0,0,0,4404,4406,1,0,0,0,4405,4399,
  	1,0,0,0,4405,4400,1,0,0,0,4405,4401,1,0,0,0,4406,4407,1,0,0,0,4407,4408,
  	3,828,414,0,4408,1025,1,0,0,0,4409,4410,5,221,0,0,4410,4411,3,828,414,
  	0,4411,1027,1,0,0,0,4412,4415,3,1030,515,0,4413,4415,3,120,60,0,4414,
  	4412,1,0,0,0,4414,4413,1,0,0,0,4415,1029,1,0,0,0,4416,4417,5,144,0,0,
  	4417,4418,3,598,299,0,4418,4419,3,736,368,0,4419,4420,3,666,333,0,4420,
  	1031,1,0,0,0,4421,4422,3,1034,517,0,4422,1033,1,0,0,0,4423,4427,5,203,
  	0,0,4424,4425,3,1036,518,0,4425,4426,5,218,0,0,4426,4428,1,0,0,0,4427,
  	4424,1,0,0,0,4427,4428,1,0,0,0,4428,4429,1,0,0,0,4429,4430,3,1036,518,
  	0,4430,4431,5,204,0,0,4431,1035,1,0,0,0,4432,4433,3,1038,519,0,4433,1037,
  	1,0,0,0,4434,4437,3,982,491,0,4435,4437,3,952,476,0,4436,4434,1,0,0,0,
  	4436,4435,1,0,0,0,4437,1039,1,0,0,0,4438,4440,3,648,324,0,4439,4438,1,
  	0,0,0,4439,4440,1,0,0,0,4440,4441,1,0,0,0,4441,4444,5,142,0,0,4442,4445,
  	3,598,299,0,4443,4445,3,702,351,0,4444,4442,1,0,0,0,4444,4443,1,0,0,0,
  	4445,4447,1,0,0,0,4446,4448,5,232,0,0,4447,4446,1,0,0,0,4447,4448,1,0,
  	0,0,4448,4451,1,0,0,0,4449,4450,5,84,0,0,4450,4452,5,232,0,0,4451,4449,
  	1,0,0,0,4451,4452,1,0,0,0,4452,4453,1,0,0,0,4453,4454,3,666,333,0,4454,
  	1041,1,0,0,0,4455,4456,3,746,373,0,4456,1043,1,0,0,0,4457,4459,3,578,
  	289,0,4458,4457,1,0,0,0,4459,4462,1,0,0,0,4460,4458,1,0,0,0,4460,4461,
  	1,0,0,0,4461,4463,1,0,0,0,4462,4460,1,0,0,0,4463,4464,7,4,0,0,4464,4465,
  	3,1046,523,0,4465,4466,5,89,0,0,4466,4467,3,12,6,0,4467,4468,5,205,0,
  	0,4468,4469,3,12,6,0,4469,1045,1,0,0,0,4470,4474,3,598,299,0,4471,4475,
  	5,194,0,0,4472,4473,5,176,0,0,4473,4475,5,98,0,0,4474,4471,1,0,0,0,4474,
  	4472,1,0,0,0,4475,4477,1,0,0,0,4476,4470,1,0,0,0,4476,4477,1,0,0,0,4477,
  	4478,1,0,0,0,4478,4479,3,746,373,0,4479,1047,1,0,0,0,4480,4485,3,622,
  	311,0,4481,4485,3,1050,525,0,4482,4485,3,36,18,0,4483,4485,3,630,315,
  	0,4484,4480,1,0,0,0,4484,4481,1,0,0,0,4484,4482,1,0,0,0,4484,4483,1,0,
  	0,0,4485,1049,1,0,0,0,4486,4487,3,1052,526,0,4487,1051,1,0,0,0,4488,4490,
  	5,119,0,0,4489,4488,1,0,0,0,4489,4490,1,0,0,0,4490,4492,1,0,0,0,4491,
  	4493,7,15,0,0,4492,4491,1,0,0,0,4492,4493,1,0,0,0,4493,4494,1,0,0,0,4494,
  	4496,3,756,378,0,4495,4497,3,726,363,0,4496,4495,1,0,0,0,4496,4497,1,
  	0,0,0,4497,4499,1,0,0,0,4498,4500,3,1022,511,0,4499,4498,1,0,0,0,4499,
  	4500,1,0,0,0,4500,4501,1,0,0,0,4501,4502,3,586,293,0,4502,1053,1,0,0,
  	0,4503,4505,5,182,0,0,4504,4503,1,0,0,0,4504,4505,1,0,0,0,4505,4506,1,
  	0,0,0,4506,4510,5,183,0,0,4507,4509,3,578,289,0,4508,4507,1,0,0,0,4509,
  	4512,1,0,0,0,4510,4508,1,0,0,0,4510,4511,1,0,0,0,4511,4513,1,0,0,0,4512,
  	4510,1,0,0,0,4513,4514,3,1056,528,0,4514,4515,3,30,15,0,4515,1055,1,0,
  	0,0,4516,4517,5,152,0,0,4517,4518,3,598,299,0,4518,1057,1,0,0,0,4519,
  	4520,3,616,308,0,4520,4521,5,122,0,0,4521,4522,3,828,414,0,4522,4523,
  	5,191,0,0,4523,1059,1,0,0,0,4524,4525,3,626,313,0,4525,4526,5,221,0,0,
  	4526,4527,3,598,299,0,4527,4528,5,1,0,0,4528,4529,3,626,313,0,4529,4530,
  	5,191,0,0,4530,1061,1,0,0,0,467,1065,1073,1082,1087,1097,1104,1113,1126,
  	1136,1139,1141,1145,1153,1159,1168,1174,1185,1189,1195,1199,1206,1209,
  	1246,1250,1257,1262,1270,1277,1281,1287,1292,1316,1319,1325,1327,1331,
  	1334,1337,1348,1354,1362,1365,1376,1385,1397,1401,1418,1436,1459,1467,
  	1475,1479,1482,1486,1488,1496,1513,1525,1527,1531,1537,1546,1549,1554,
  	1563,1571,1574,1579,1589,1594,1601,1607,1618,1622,1634,1675,1679,1683,
  	1689,1701,1708,1712,1723,1734,1753,1757,1763,1768,1778,1786,1798,1802,
  	1805,1809,1821,1828,1832,1849,1853,1867,1871,1878,1884,1903,1907,1914,
  	1920,1934,1939,1942,1947,1954,1956,1961,1967,1976,1995,1999,2006,2010,
  	2014,2017,2024,2027,2031,2054,2063,2068,2070,2080,2084,2088,2094,2098,
  	2101,2104,2108,2115,2122,2129,2139,2147,2154,2158,2166,2170,2175,2178,
  	2183,2188,2194,2198,2211,2224,2230,2236,2240,2251,2259,2261,2267,2278,
  	2299,2316,2333,2339,2343,2349,2357,2362,2380,2391,2420,2426,2430,2436,
  	2440,2443,2451,2455,2458,2461,2469,2472,2475,2479,2482,2486,2488,2513,
  	2520,2524,2531,2535,2542,2546,2553,2557,2579,2584,2588,2592,2595,2601,
  	2606,2612,2621,2625,2629,2635,2648,2652,2661,2670,2676,2685,2689,2696,
  	2703,2705,2710,2713,2720,2727,2734,2736,2741,2750,2769,2774,2778,2781,
  	2785,2824,2828,2831,2837,2846,2883,2891,2898,2900,2905,2924,2929,2932,
  	2947,2951,2956,2964,2971,2978,2980,2983,2988,2991,3000,3004,3010,3015,
  	3044,3049,3068,3079,3082,3090,3092,3102,3106,3111,3114,3118,3121,3126,
  	3131,3140,3147,3153,3156,3158,3163,3168,3172,3177,3191,3198,3201,3207,
  	3220,3224,3228,3232,3236,3240,3243,3256,3285,3297,3307,3312,3316,3320,
  	3324,3326,3331,3340,3350,3359,3368,3377,3386,3394,3399,3406,3418,3422,
  	3426,3431,3436,3442,3446,3451,3456,3462,3466,3470,3474,3478,3488,3495,
  	3499,3503,3508,3517,3522,3533,3539,3542,3545,3548,3553,3556,3559,3562,
  	3565,3568,3573,3577,3582,3586,3591,3595,3601,3604,3610,3615,3628,3634,
  	3637,3642,3649,3651,3657,3664,3672,3678,3690,3693,3700,3703,3709,3717,
  	3720,3726,3735,3739,3743,3748,3751,3754,3757,3770,3777,3782,3787,3793,
  	3799,3819,3837,3846,3849,3864,3871,3874,3889,3892,3895,3901,3903,3916,
  	3919,3922,3928,3930,3941,3955,3959,3961,3964,3974,3987,3994,3998,4011,
  	4021,4027,4054,4062,4065,4073,4086,4126,4130,4145,4168,4171,4193,4221,
  	4226,4242,4251,4260,4268,4293,4306,4311,4333,4337,4344,4347,4353,4360,
  	4364,4368,4370,4375,4380,4387,4403,4405,4414,4427,4436,4439,4444,4447,
  	4451,4460,4474,4476,4484,4489,4492,4496,4499,4504,4510
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  sysmlv2ParserStaticData = std::move(staticData);
}

}

SysMLv2Parser::SysMLv2Parser(TokenStream *input) : SysMLv2Parser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

SysMLv2Parser::SysMLv2Parser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  SysMLv2Parser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *sysmlv2ParserStaticData->atn, sysmlv2ParserStaticData->decisionToDFA, sysmlv2ParserStaticData->sharedContextCache, options);
}

SysMLv2Parser::~SysMLv2Parser() {
  delete _interpreter;
}

const atn::ATN& SysMLv2Parser::getATN() const {
  return *sysmlv2ParserStaticData->atn;
}

std::string SysMLv2Parser::getGrammarFileName() const {
  return "SysMLv2.g4";
}

const std::vector<std::string>& SysMLv2Parser::getRuleNames() const {
  return sysmlv2ParserStaticData->ruleNames;
}

const dfa::Vocabulary& SysMLv2Parser::getVocabulary() const {
  return sysmlv2ParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView SysMLv2Parser::getSerializedATN() const {
  return sysmlv2ParserStaticData->serializedATN;
}


//----------------- StartContext ------------------------------------------------------------------

SysMLv2Parser::StartContext::StartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::StartContext::EOF() {
  return getToken(SysMLv2Parser::EOF, 0);
}

std::vector<SysMLv2Parser::Start_elementContext *> SysMLv2Parser::StartContext::start_element() {
  return getRuleContexts<SysMLv2Parser::Start_elementContext>();
}

SysMLv2Parser::Start_elementContext* SysMLv2Parser::StartContext::start_element(size_t i) {
  return getRuleContext<SysMLv2Parser::Start_elementContext>(i);
}


size_t SysMLv2Parser::StartContext::getRuleIndex() const {
  return SysMLv2Parser::RuleStart;
}

void SysMLv2Parser::StartContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStart(this);
}

void SysMLv2Parser::StartContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStart(this);
}

SysMLv2Parser::StartContext* SysMLv2Parser::start() {
  StartContext *_localctx = _tracker.createInstance<StartContext>(_ctx, getState());
  enterRule(_localctx, 0, SysMLv2Parser::RuleStart);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1065);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -7713383000981164512) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & 5574258944257058441) != 0) || ((((_la - 132) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 132)) & 621260210634767743) != 0) || ((((_la - 201) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 201)) & 2154037349) != 0)) {
      setState(1062);
      start_element();
      setState(1067);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1068);
    match(SysMLv2Parser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Start_elementContext ------------------------------------------------------------------

SysMLv2Parser::Start_elementContext::Start_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::ElementContext* SysMLv2Parser::Start_elementContext::element() {
  return getRuleContext<SysMLv2Parser::ElementContext>(0);
}

SysMLv2Parser::Definition_elementContext* SysMLv2Parser::Start_elementContext::definition_element() {
  return getRuleContext<SysMLv2Parser::Definition_elementContext>(0);
}

SysMLv2Parser::Usage_elementContext* SysMLv2Parser::Start_elementContext::usage_element() {
  return getRuleContext<SysMLv2Parser::Usage_elementContext>(0);
}


size_t SysMLv2Parser::Start_elementContext::getRuleIndex() const {
  return SysMLv2Parser::RuleStart_element;
}

void SysMLv2Parser::Start_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStart_element(this);
}

void SysMLv2Parser::Start_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStart_element(this);
}

SysMLv2Parser::Start_elementContext* SysMLv2Parser::start_element() {
  Start_elementContext *_localctx = _tracker.createInstance<Start_elementContext>(_ctx, getState());
  enterRule(_localctx, 2, SysMLv2Parser::RuleStart_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1073);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 1, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1070);
      element();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1071);
      definition_element();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1072);
      usage_element();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StartRuleContext ------------------------------------------------------------------

SysMLv2Parser::StartRuleContext::StartRuleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::StartContext* SysMLv2Parser::StartRuleContext::start() {
  return getRuleContext<SysMLv2Parser::StartContext>(0);
}


size_t SysMLv2Parser::StartRuleContext::getRuleIndex() const {
  return SysMLv2Parser::RuleStartRule;
}

void SysMLv2Parser::StartRuleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStartRule(this);
}

void SysMLv2Parser::StartRuleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStartRule(this);
}

SysMLv2Parser::StartRuleContext* SysMLv2Parser::startRule() {
  StartRuleContext *_localctx = _tracker.createInstance<StartRuleContext>(_ctx, getState());
  enterRule(_localctx, 4, SysMLv2Parser::RuleStartRule);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1075);
    start();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Relationship_bodyContext ------------------------------------------------------------------

SysMLv2Parser::Relationship_bodyContext::Relationship_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Relationship_bodyContext::SYMBOL_STATEMENT_DELIMITER() {
  return getToken(SysMLv2Parser::SYMBOL_STATEMENT_DELIMITER, 0);
}

tree::TerminalNode* SysMLv2Parser::Relationship_bodyContext::SYMBOL_CURLY_BRACKET_OPEN() {
  return getToken(SysMLv2Parser::SYMBOL_CURLY_BRACKET_OPEN, 0);
}

SysMLv2Parser::Owned_annotationContext* SysMLv2Parser::Relationship_bodyContext::owned_annotation() {
  return getRuleContext<SysMLv2Parser::Owned_annotationContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Relationship_bodyContext::SYMBOL_CURLY_BRACKET_CLOSE() {
  return getToken(SysMLv2Parser::SYMBOL_CURLY_BRACKET_CLOSE, 0);
}


size_t SysMLv2Parser::Relationship_bodyContext::getRuleIndex() const {
  return SysMLv2Parser::RuleRelationship_body;
}

void SysMLv2Parser::Relationship_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRelationship_body(this);
}

void SysMLv2Parser::Relationship_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRelationship_body(this);
}

SysMLv2Parser::Relationship_bodyContext* SysMLv2Parser::relationship_body() {
  Relationship_bodyContext *_localctx = _tracker.createInstance<Relationship_bodyContext>(_ctx, getState());
  enterRule(_localctx, 6, SysMLv2Parser::RuleRelationship_body);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1082);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SysMLv2Parser::SYMBOL_STATEMENT_DELIMITER: {
        enterOuterAlt(_localctx, 1);
        setState(1077);
        match(SysMLv2Parser::SYMBOL_STATEMENT_DELIMITER);
        break;
      }

      case SysMLv2Parser::SYMBOL_CURLY_BRACKET_OPEN: {
        enterOuterAlt(_localctx, 2);
        setState(1078);
        match(SysMLv2Parser::SYMBOL_CURLY_BRACKET_OPEN);
        setState(1079);
        owned_annotation();
        setState(1080);
        match(SysMLv2Parser::SYMBOL_CURLY_BRACKET_CLOSE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DependencyContext ------------------------------------------------------------------

SysMLv2Parser::DependencyContext::DependencyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::DependencyContext::KEYWORD_DEPENDENCY() {
  return getToken(SysMLv2Parser::KEYWORD_DEPENDENCY, 0);
}

SysMLv2Parser::Dependency_declarationContext* SysMLv2Parser::DependencyContext::dependency_declaration() {
  return getRuleContext<SysMLv2Parser::Dependency_declarationContext>(0);
}

SysMLv2Parser::Relationship_bodyContext* SysMLv2Parser::DependencyContext::relationship_body() {
  return getRuleContext<SysMLv2Parser::Relationship_bodyContext>(0);
}

std::vector<SysMLv2Parser::Prefix_metadata_annotationContext *> SysMLv2Parser::DependencyContext::prefix_metadata_annotation() {
  return getRuleContexts<SysMLv2Parser::Prefix_metadata_annotationContext>();
}

SysMLv2Parser::Prefix_metadata_annotationContext* SysMLv2Parser::DependencyContext::prefix_metadata_annotation(size_t i) {
  return getRuleContext<SysMLv2Parser::Prefix_metadata_annotationContext>(i);
}


size_t SysMLv2Parser::DependencyContext::getRuleIndex() const {
  return SysMLv2Parser::RuleDependency;
}

void SysMLv2Parser::DependencyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDependency(this);
}

void SysMLv2Parser::DependencyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDependency(this);
}

SysMLv2Parser::DependencyContext* SysMLv2Parser::dependency() {
  DependencyContext *_localctx = _tracker.createInstance<DependencyContext>(_ctx, getState());
  enterRule(_localctx, 8, SysMLv2Parser::RuleDependency);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1087);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SysMLv2Parser::SYMBOL_HASHTAG) {
      setState(1084);
      prefix_metadata_annotation();
      setState(1089);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1090);
    match(SysMLv2Parser::KEYWORD_DEPENDENCY);
    setState(1091);
    dependency_declaration();
    setState(1092);
    relationship_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Dependency_declarationContext ------------------------------------------------------------------

SysMLv2Parser::Dependency_declarationContext::Dependency_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<SysMLv2Parser::Qualified_nameContext *> SysMLv2Parser::Dependency_declarationContext::qualified_name() {
  return getRuleContexts<SysMLv2Parser::Qualified_nameContext>();
}

SysMLv2Parser::Qualified_nameContext* SysMLv2Parser::Dependency_declarationContext::qualified_name(size_t i) {
  return getRuleContext<SysMLv2Parser::Qualified_nameContext>(i);
}

tree::TerminalNode* SysMLv2Parser::Dependency_declarationContext::KEYWORD_TO() {
  return getToken(SysMLv2Parser::KEYWORD_TO, 0);
}

SysMLv2Parser::IdentificationContext* SysMLv2Parser::Dependency_declarationContext::identification() {
  return getRuleContext<SysMLv2Parser::IdentificationContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Dependency_declarationContext::KEYWORD_FROM() {
  return getToken(SysMLv2Parser::KEYWORD_FROM, 0);
}

std::vector<tree::TerminalNode *> SysMLv2Parser::Dependency_declarationContext::SYMBOL_COMMA() {
  return getTokens(SysMLv2Parser::SYMBOL_COMMA);
}

tree::TerminalNode* SysMLv2Parser::Dependency_declarationContext::SYMBOL_COMMA(size_t i) {
  return getToken(SysMLv2Parser::SYMBOL_COMMA, i);
}


size_t SysMLv2Parser::Dependency_declarationContext::getRuleIndex() const {
  return SysMLv2Parser::RuleDependency_declaration;
}

void SysMLv2Parser::Dependency_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDependency_declaration(this);
}

void SysMLv2Parser::Dependency_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDependency_declaration(this);
}

SysMLv2Parser::Dependency_declarationContext* SysMLv2Parser::dependency_declaration() {
  Dependency_declarationContext *_localctx = _tracker.createInstance<Dependency_declarationContext>(_ctx, getState());
  enterRule(_localctx, 10, SysMLv2Parser::RuleDependency_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1097);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 4, _ctx)) {
    case 1: {
      setState(1094);
      identification();
      setState(1095);
      match(SysMLv2Parser::KEYWORD_FROM);
      break;
    }

    default:
      break;
    }
    setState(1099);
    qualified_name();
    setState(1104);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SysMLv2Parser::SYMBOL_COMMA) {
      setState(1100);
      match(SysMLv2Parser::SYMBOL_COMMA);
      setState(1101);
      qualified_name();
      setState(1106);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1107);
    match(SysMLv2Parser::KEYWORD_TO);
    setState(1108);
    qualified_name();
    setState(1113);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SysMLv2Parser::SYMBOL_COMMA) {
      setState(1109);
      match(SysMLv2Parser::SYMBOL_COMMA);
      setState(1110);
      qualified_name();
      setState(1115);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnnotationContext ------------------------------------------------------------------

SysMLv2Parser::AnnotationContext::AnnotationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Qualified_nameContext* SysMLv2Parser::AnnotationContext::qualified_name() {
  return getRuleContext<SysMLv2Parser::Qualified_nameContext>(0);
}


size_t SysMLv2Parser::AnnotationContext::getRuleIndex() const {
  return SysMLv2Parser::RuleAnnotation;
}

void SysMLv2Parser::AnnotationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotation(this);
}

void SysMLv2Parser::AnnotationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotation(this);
}

SysMLv2Parser::AnnotationContext* SysMLv2Parser::annotation() {
  AnnotationContext *_localctx = _tracker.createInstance<AnnotationContext>(_ctx, getState());
  enterRule(_localctx, 12, SysMLv2Parser::RuleAnnotation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1116);
    qualified_name();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Owned_annotationContext ------------------------------------------------------------------

SysMLv2Parser::Owned_annotationContext::Owned_annotationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Annotating_elementContext* SysMLv2Parser::Owned_annotationContext::annotating_element() {
  return getRuleContext<SysMLv2Parser::Annotating_elementContext>(0);
}


size_t SysMLv2Parser::Owned_annotationContext::getRuleIndex() const {
  return SysMLv2Parser::RuleOwned_annotation;
}

void SysMLv2Parser::Owned_annotationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOwned_annotation(this);
}

void SysMLv2Parser::Owned_annotationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOwned_annotation(this);
}

SysMLv2Parser::Owned_annotationContext* SysMLv2Parser::owned_annotation() {
  Owned_annotationContext *_localctx = _tracker.createInstance<Owned_annotationContext>(_ctx, getState());
  enterRule(_localctx, 14, SysMLv2Parser::RuleOwned_annotation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1118);
    annotating_element();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Annotating_memberContext ------------------------------------------------------------------

SysMLv2Parser::Annotating_memberContext::Annotating_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Annotating_elementContext* SysMLv2Parser::Annotating_memberContext::annotating_element() {
  return getRuleContext<SysMLv2Parser::Annotating_elementContext>(0);
}


size_t SysMLv2Parser::Annotating_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleAnnotating_member;
}

void SysMLv2Parser::Annotating_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotating_member(this);
}

void SysMLv2Parser::Annotating_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotating_member(this);
}

SysMLv2Parser::Annotating_memberContext* SysMLv2Parser::annotating_member() {
  Annotating_memberContext *_localctx = _tracker.createInstance<Annotating_memberContext>(_ctx, getState());
  enterRule(_localctx, 16, SysMLv2Parser::RuleAnnotating_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1120);
    annotating_element();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Annotating_elementContext ------------------------------------------------------------------

SysMLv2Parser::Annotating_elementContext::Annotating_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::CommentContext* SysMLv2Parser::Annotating_elementContext::comment() {
  return getRuleContext<SysMLv2Parser::CommentContext>(0);
}

SysMLv2Parser::DocumentationContext* SysMLv2Parser::Annotating_elementContext::documentation() {
  return getRuleContext<SysMLv2Parser::DocumentationContext>(0);
}

SysMLv2Parser::Textual_representationContext* SysMLv2Parser::Annotating_elementContext::textual_representation() {
  return getRuleContext<SysMLv2Parser::Textual_representationContext>(0);
}

SysMLv2Parser::Metadata_featureContext* SysMLv2Parser::Annotating_elementContext::metadata_feature() {
  return getRuleContext<SysMLv2Parser::Metadata_featureContext>(0);
}


size_t SysMLv2Parser::Annotating_elementContext::getRuleIndex() const {
  return SysMLv2Parser::RuleAnnotating_element;
}

void SysMLv2Parser::Annotating_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotating_element(this);
}

void SysMLv2Parser::Annotating_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotating_element(this);
}

SysMLv2Parser::Annotating_elementContext* SysMLv2Parser::annotating_element() {
  Annotating_elementContext *_localctx = _tracker.createInstance<Annotating_elementContext>(_ctx, getState());
  enterRule(_localctx, 18, SysMLv2Parser::RuleAnnotating_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1126);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SysMLv2Parser::KEYWORD_COMMENT:
      case SysMLv2Parser::KEYWORD_LOCALE:
      case SysMLv2Parser::REGULAR_COMMENT: {
        enterOuterAlt(_localctx, 1);
        setState(1122);
        comment();
        break;
      }

      case SysMLv2Parser::KEYWORD_DOC: {
        enterOuterAlt(_localctx, 2);
        setState(1123);
        documentation();
        break;
      }

      case SysMLv2Parser::KEYWORD_LANGUAGE:
      case SysMLv2Parser::KEYWORD_REP: {
        enterOuterAlt(_localctx, 3);
        setState(1124);
        textual_representation();
        break;
      }

      case SysMLv2Parser::KEYWORD_METADATA:
      case SysMLv2Parser::SYMBOL_AT:
      case SysMLv2Parser::SYMBOL_HASHTAG: {
        enterOuterAlt(_localctx, 4);
        setState(1125);
        metadata_feature();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CommentContext ------------------------------------------------------------------

SysMLv2Parser::CommentContext::CommentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::CommentContext::REGULAR_COMMENT() {
  return getToken(SysMLv2Parser::REGULAR_COMMENT, 0);
}

tree::TerminalNode* SysMLv2Parser::CommentContext::KEYWORD_COMMENT() {
  return getToken(SysMLv2Parser::KEYWORD_COMMENT, 0);
}

SysMLv2Parser::IdentificationContext* SysMLv2Parser::CommentContext::identification() {
  return getRuleContext<SysMLv2Parser::IdentificationContext>(0);
}

tree::TerminalNode* SysMLv2Parser::CommentContext::KEYWORD_LOCALE() {
  return getToken(SysMLv2Parser::KEYWORD_LOCALE, 0);
}

tree::TerminalNode* SysMLv2Parser::CommentContext::STRING_VALUE() {
  return getToken(SysMLv2Parser::STRING_VALUE, 0);
}

tree::TerminalNode* SysMLv2Parser::CommentContext::KEYWORD_ABOUT() {
  return getToken(SysMLv2Parser::KEYWORD_ABOUT, 0);
}

std::vector<SysMLv2Parser::AnnotationContext *> SysMLv2Parser::CommentContext::annotation() {
  return getRuleContexts<SysMLv2Parser::AnnotationContext>();
}

SysMLv2Parser::AnnotationContext* SysMLv2Parser::CommentContext::annotation(size_t i) {
  return getRuleContext<SysMLv2Parser::AnnotationContext>(i);
}

std::vector<tree::TerminalNode *> SysMLv2Parser::CommentContext::SYMBOL_COMMA() {
  return getTokens(SysMLv2Parser::SYMBOL_COMMA);
}

tree::TerminalNode* SysMLv2Parser::CommentContext::SYMBOL_COMMA(size_t i) {
  return getToken(SysMLv2Parser::SYMBOL_COMMA, i);
}


size_t SysMLv2Parser::CommentContext::getRuleIndex() const {
  return SysMLv2Parser::RuleComment;
}

void SysMLv2Parser::CommentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComment(this);
}

void SysMLv2Parser::CommentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComment(this);
}

SysMLv2Parser::CommentContext* SysMLv2Parser::comment() {
  CommentContext *_localctx = _tracker.createInstance<CommentContext>(_ctx, getState());
  enterRule(_localctx, 20, SysMLv2Parser::RuleComment);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1141);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_COMMENT) {
      setState(1128);
      match(SysMLv2Parser::KEYWORD_COMMENT);
      setState(1129);
      identification();
      setState(1139);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == SysMLv2Parser::KEYWORD_ABOUT) {
        setState(1130);
        match(SysMLv2Parser::KEYWORD_ABOUT);
        setState(1131);
        annotation();
        setState(1136);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == SysMLv2Parser::SYMBOL_COMMA) {
          setState(1132);
          match(SysMLv2Parser::SYMBOL_COMMA);
          setState(1133);
          annotation();
          setState(1138);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
      }
    }
    setState(1145);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_LOCALE) {
      setState(1143);
      match(SysMLv2Parser::KEYWORD_LOCALE);
      setState(1144);
      match(SysMLv2Parser::STRING_VALUE);
    }
    setState(1147);
    match(SysMLv2Parser::REGULAR_COMMENT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DocumentationContext ------------------------------------------------------------------

SysMLv2Parser::DocumentationContext::DocumentationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::DocumentationContext::KEYWORD_DOC() {
  return getToken(SysMLv2Parser::KEYWORD_DOC, 0);
}

SysMLv2Parser::IdentificationContext* SysMLv2Parser::DocumentationContext::identification() {
  return getRuleContext<SysMLv2Parser::IdentificationContext>(0);
}

tree::TerminalNode* SysMLv2Parser::DocumentationContext::REGULAR_COMMENT() {
  return getToken(SysMLv2Parser::REGULAR_COMMENT, 0);
}

tree::TerminalNode* SysMLv2Parser::DocumentationContext::KEYWORD_LOCALE() {
  return getToken(SysMLv2Parser::KEYWORD_LOCALE, 0);
}

tree::TerminalNode* SysMLv2Parser::DocumentationContext::STRING_VALUE() {
  return getToken(SysMLv2Parser::STRING_VALUE, 0);
}


size_t SysMLv2Parser::DocumentationContext::getRuleIndex() const {
  return SysMLv2Parser::RuleDocumentation;
}

void SysMLv2Parser::DocumentationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDocumentation(this);
}

void SysMLv2Parser::DocumentationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDocumentation(this);
}

SysMLv2Parser::DocumentationContext* SysMLv2Parser::documentation() {
  DocumentationContext *_localctx = _tracker.createInstance<DocumentationContext>(_ctx, getState());
  enterRule(_localctx, 22, SysMLv2Parser::RuleDocumentation);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1149);
    match(SysMLv2Parser::KEYWORD_DOC);
    setState(1150);
    identification();
    setState(1153);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_LOCALE) {
      setState(1151);
      match(SysMLv2Parser::KEYWORD_LOCALE);
      setState(1152);
      match(SysMLv2Parser::STRING_VALUE);
    }
    setState(1155);
    match(SysMLv2Parser::REGULAR_COMMENT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Textual_representationContext ------------------------------------------------------------------

SysMLv2Parser::Textual_representationContext::Textual_representationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Textual_representationContext::KEYWORD_LANGUAGE() {
  return getToken(SysMLv2Parser::KEYWORD_LANGUAGE, 0);
}

tree::TerminalNode* SysMLv2Parser::Textual_representationContext::STRING_VALUE() {
  return getToken(SysMLv2Parser::STRING_VALUE, 0);
}

tree::TerminalNode* SysMLv2Parser::Textual_representationContext::REGULAR_COMMENT() {
  return getToken(SysMLv2Parser::REGULAR_COMMENT, 0);
}

tree::TerminalNode* SysMLv2Parser::Textual_representationContext::KEYWORD_REP() {
  return getToken(SysMLv2Parser::KEYWORD_REP, 0);
}

SysMLv2Parser::IdentificationContext* SysMLv2Parser::Textual_representationContext::identification() {
  return getRuleContext<SysMLv2Parser::IdentificationContext>(0);
}


size_t SysMLv2Parser::Textual_representationContext::getRuleIndex() const {
  return SysMLv2Parser::RuleTextual_representation;
}

void SysMLv2Parser::Textual_representationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTextual_representation(this);
}

void SysMLv2Parser::Textual_representationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTextual_representation(this);
}

SysMLv2Parser::Textual_representationContext* SysMLv2Parser::textual_representation() {
  Textual_representationContext *_localctx = _tracker.createInstance<Textual_representationContext>(_ctx, getState());
  enterRule(_localctx, 24, SysMLv2Parser::RuleTextual_representation);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1159);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_REP) {
      setState(1157);
      match(SysMLv2Parser::KEYWORD_REP);
      setState(1158);
      identification();
    }
    setState(1161);
    match(SysMLv2Parser::KEYWORD_LANGUAGE);
    setState(1162);
    match(SysMLv2Parser::STRING_VALUE);
    setState(1163);
    match(SysMLv2Parser::REGULAR_COMMENT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Root_namespaceContext ------------------------------------------------------------------

SysMLv2Parser::Root_namespaceContext::Root_namespaceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<SysMLv2Parser::Package_body_elementContext *> SysMLv2Parser::Root_namespaceContext::package_body_element() {
  return getRuleContexts<SysMLv2Parser::Package_body_elementContext>();
}

SysMLv2Parser::Package_body_elementContext* SysMLv2Parser::Root_namespaceContext::package_body_element(size_t i) {
  return getRuleContext<SysMLv2Parser::Package_body_elementContext>(i);
}


size_t SysMLv2Parser::Root_namespaceContext::getRuleIndex() const {
  return SysMLv2Parser::RuleRoot_namespace;
}

void SysMLv2Parser::Root_namespaceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRoot_namespace(this);
}

void SysMLv2Parser::Root_namespaceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRoot_namespace(this);
}

SysMLv2Parser::Root_namespaceContext* SysMLv2Parser::root_namespace() {
  Root_namespaceContext *_localctx = _tracker.createInstance<Root_namespaceContext>(_ctx, getState());
  enterRule(_localctx, 26, SysMLv2Parser::RuleRoot_namespace);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1168);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -7713383000981164256) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & 1011673982484375177) != 0) || ((((_la - 132) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 132)) & 620934348976687367) != 0) || ((((_la - 201) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 201)) & 2154037349) != 0)) {
      setState(1165);
      package_body_element();
      setState(1170);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PackageContext ------------------------------------------------------------------

SysMLv2Parser::PackageContext::PackageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Package_declarationContext* SysMLv2Parser::PackageContext::package_declaration() {
  return getRuleContext<SysMLv2Parser::Package_declarationContext>(0);
}

SysMLv2Parser::Package_bodyContext* SysMLv2Parser::PackageContext::package_body() {
  return getRuleContext<SysMLv2Parser::Package_bodyContext>(0);
}

std::vector<SysMLv2Parser::Prefix_metadata_memberContext *> SysMLv2Parser::PackageContext::prefix_metadata_member() {
  return getRuleContexts<SysMLv2Parser::Prefix_metadata_memberContext>();
}

SysMLv2Parser::Prefix_metadata_memberContext* SysMLv2Parser::PackageContext::prefix_metadata_member(size_t i) {
  return getRuleContext<SysMLv2Parser::Prefix_metadata_memberContext>(i);
}


size_t SysMLv2Parser::PackageContext::getRuleIndex() const {
  return SysMLv2Parser::RulePackage;
}

void SysMLv2Parser::PackageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPackage(this);
}

void SysMLv2Parser::PackageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPackage(this);
}

SysMLv2Parser::PackageContext* SysMLv2Parser::package() {
  PackageContext *_localctx = _tracker.createInstance<PackageContext>(_ctx, getState());
  enterRule(_localctx, 28, SysMLv2Parser::RulePackage);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1174);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SysMLv2Parser::SYMBOL_HASHTAG) {
      setState(1171);
      prefix_metadata_member();
      setState(1176);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1177);
    package_declaration();
    setState(1178);
    package_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Package_bodyContext ------------------------------------------------------------------

SysMLv2Parser::Package_bodyContext::Package_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Package_bodyContext::SYMBOL_STATEMENT_DELIMITER() {
  return getToken(SysMLv2Parser::SYMBOL_STATEMENT_DELIMITER, 0);
}

tree::TerminalNode* SysMLv2Parser::Package_bodyContext::SYMBOL_CURLY_BRACKET_OPEN() {
  return getToken(SysMLv2Parser::SYMBOL_CURLY_BRACKET_OPEN, 0);
}

tree::TerminalNode* SysMLv2Parser::Package_bodyContext::SYMBOL_CURLY_BRACKET_CLOSE() {
  return getToken(SysMLv2Parser::SYMBOL_CURLY_BRACKET_CLOSE, 0);
}

std::vector<SysMLv2Parser::Package_body_elementContext *> SysMLv2Parser::Package_bodyContext::package_body_element() {
  return getRuleContexts<SysMLv2Parser::Package_body_elementContext>();
}

SysMLv2Parser::Package_body_elementContext* SysMLv2Parser::Package_bodyContext::package_body_element(size_t i) {
  return getRuleContext<SysMLv2Parser::Package_body_elementContext>(i);
}


size_t SysMLv2Parser::Package_bodyContext::getRuleIndex() const {
  return SysMLv2Parser::RulePackage_body;
}

void SysMLv2Parser::Package_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPackage_body(this);
}

void SysMLv2Parser::Package_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPackage_body(this);
}

SysMLv2Parser::Package_bodyContext* SysMLv2Parser::package_body() {
  Package_bodyContext *_localctx = _tracker.createInstance<Package_bodyContext>(_ctx, getState());
  enterRule(_localctx, 30, SysMLv2Parser::RulePackage_body);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1189);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SysMLv2Parser::SYMBOL_STATEMENT_DELIMITER: {
        enterOuterAlt(_localctx, 1);
        setState(1180);
        match(SysMLv2Parser::SYMBOL_STATEMENT_DELIMITER);
        break;
      }

      case SysMLv2Parser::SYMBOL_CURLY_BRACKET_OPEN: {
        enterOuterAlt(_localctx, 2);
        setState(1181);
        match(SysMLv2Parser::SYMBOL_CURLY_BRACKET_OPEN);
        setState(1185);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & -7713383000981164256) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 65)) & 1011673982484375177) != 0) || ((((_la - 132) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 132)) & 620934348976687367) != 0) || ((((_la - 201) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 201)) & 2154037349) != 0)) {
          setState(1182);
          package_body_element();
          setState(1187);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(1188);
        match(SysMLv2Parser::SYMBOL_CURLY_BRACKET_CLOSE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Package_body_elementContext ------------------------------------------------------------------

SysMLv2Parser::Package_body_elementContext::Package_body_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Package_memberContext* SysMLv2Parser::Package_body_elementContext::package_member() {
  return getRuleContext<SysMLv2Parser::Package_memberContext>(0);
}

SysMLv2Parser::Element_filter_memberContext* SysMLv2Parser::Package_body_elementContext::element_filter_member() {
  return getRuleContext<SysMLv2Parser::Element_filter_memberContext>(0);
}

SysMLv2Parser::Alias_memberContext* SysMLv2Parser::Package_body_elementContext::alias_member() {
  return getRuleContext<SysMLv2Parser::Alias_memberContext>(0);
}

SysMLv2Parser::Namespace_importContext* SysMLv2Parser::Package_body_elementContext::namespace_import() {
  return getRuleContext<SysMLv2Parser::Namespace_importContext>(0);
}


size_t SysMLv2Parser::Package_body_elementContext::getRuleIndex() const {
  return SysMLv2Parser::RulePackage_body_element;
}

void SysMLv2Parser::Package_body_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPackage_body_element(this);
}

void SysMLv2Parser::Package_body_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPackage_body_element(this);
}

SysMLv2Parser::Package_body_elementContext* SysMLv2Parser::package_body_element() {
  Package_body_elementContext *_localctx = _tracker.createInstance<Package_body_elementContext>(_ctx, getState());
  enterRule(_localctx, 32, SysMLv2Parser::RulePackage_body_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1195);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 18, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1191);
      package_member();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1192);
      element_filter_member();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1193);
      alias_member();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1194);
      namespace_import();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Package_memberContext ------------------------------------------------------------------

SysMLv2Parser::Package_memberContext::Package_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Definition_elementContext* SysMLv2Parser::Package_memberContext::definition_element() {
  return getRuleContext<SysMLv2Parser::Definition_elementContext>(0);
}

SysMLv2Parser::Usage_elementContext* SysMLv2Parser::Package_memberContext::usage_element() {
  return getRuleContext<SysMLv2Parser::Usage_elementContext>(0);
}


size_t SysMLv2Parser::Package_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RulePackage_member;
}

void SysMLv2Parser::Package_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPackage_member(this);
}

void SysMLv2Parser::Package_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPackage_member(this);
}

SysMLv2Parser::Package_memberContext* SysMLv2Parser::package_member() {
  Package_memberContext *_localctx = _tracker.createInstance<Package_memberContext>(_ctx, getState());
  enterRule(_localctx, 34, SysMLv2Parser::RulePackage_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1199);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 19, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1197);
      definition_element();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1198);
      usage_element();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alias_memberContext ------------------------------------------------------------------

SysMLv2Parser::Alias_memberContext::Alias_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Member_prefixContext* SysMLv2Parser::Alias_memberContext::member_prefix() {
  return getRuleContext<SysMLv2Parser::Member_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Alias_memberContext::KEYWORD_ALIAS() {
  return getToken(SysMLv2Parser::KEYWORD_ALIAS, 0);
}

tree::TerminalNode* SysMLv2Parser::Alias_memberContext::KEYWORD_FOR() {
  return getToken(SysMLv2Parser::KEYWORD_FOR, 0);
}

SysMLv2Parser::Qualified_nameContext* SysMLv2Parser::Alias_memberContext::qualified_name() {
  return getRuleContext<SysMLv2Parser::Qualified_nameContext>(0);
}

SysMLv2Parser::Relationship_bodyContext* SysMLv2Parser::Alias_memberContext::relationship_body() {
  return getRuleContext<SysMLv2Parser::Relationship_bodyContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Alias_memberContext::SYMBOL_SMALLER() {
  return getToken(SysMLv2Parser::SYMBOL_SMALLER, 0);
}

std::vector<tree::TerminalNode *> SysMLv2Parser::Alias_memberContext::NAME() {
  return getTokens(SysMLv2Parser::NAME);
}

tree::TerminalNode* SysMLv2Parser::Alias_memberContext::NAME(size_t i) {
  return getToken(SysMLv2Parser::NAME, i);
}

tree::TerminalNode* SysMLv2Parser::Alias_memberContext::SYMBOL_GREATER() {
  return getToken(SysMLv2Parser::SYMBOL_GREATER, 0);
}


size_t SysMLv2Parser::Alias_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleAlias_member;
}

void SysMLv2Parser::Alias_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlias_member(this);
}

void SysMLv2Parser::Alias_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlias_member(this);
}

SysMLv2Parser::Alias_memberContext* SysMLv2Parser::alias_member() {
  Alias_memberContext *_localctx = _tracker.createInstance<Alias_memberContext>(_ctx, getState());
  enterRule(_localctx, 36, SysMLv2Parser::RuleAlias_member);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1201);
    member_prefix();
    setState(1202);
    match(SysMLv2Parser::KEYWORD_ALIAS);
    setState(1206);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::SYMBOL_SMALLER) {
      setState(1203);
      match(SysMLv2Parser::SYMBOL_SMALLER);
      setState(1204);
      match(SysMLv2Parser::NAME);
      setState(1205);
      match(SysMLv2Parser::SYMBOL_GREATER);
    }
    setState(1209);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::NAME) {
      setState(1208);
      match(SysMLv2Parser::NAME);
    }
    setState(1211);
    match(SysMLv2Parser::KEYWORD_FOR);
    setState(1212);
    qualified_name();
    setState(1213);
    relationship_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Definition_elementContext ------------------------------------------------------------------

SysMLv2Parser::Definition_elementContext::Definition_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::PackageContext* SysMLv2Parser::Definition_elementContext::package() {
  return getRuleContext<SysMLv2Parser::PackageContext>(0);
}

SysMLv2Parser::Library_packageContext* SysMLv2Parser::Definition_elementContext::library_package() {
  return getRuleContext<SysMLv2Parser::Library_packageContext>(0);
}

SysMLv2Parser::Annotating_elementContext* SysMLv2Parser::Definition_elementContext::annotating_element() {
  return getRuleContext<SysMLv2Parser::Annotating_elementContext>(0);
}

SysMLv2Parser::DependencyContext* SysMLv2Parser::Definition_elementContext::dependency() {
  return getRuleContext<SysMLv2Parser::DependencyContext>(0);
}

SysMLv2Parser::Attribute_definitionContext* SysMLv2Parser::Definition_elementContext::attribute_definition() {
  return getRuleContext<SysMLv2Parser::Attribute_definitionContext>(0);
}

SysMLv2Parser::Enumeration_definitionContext* SysMLv2Parser::Definition_elementContext::enumeration_definition() {
  return getRuleContext<SysMLv2Parser::Enumeration_definitionContext>(0);
}

SysMLv2Parser::Occurrence_definitionContext* SysMLv2Parser::Definition_elementContext::occurrence_definition() {
  return getRuleContext<SysMLv2Parser::Occurrence_definitionContext>(0);
}

SysMLv2Parser::Individual_definitionContext* SysMLv2Parser::Definition_elementContext::individual_definition() {
  return getRuleContext<SysMLv2Parser::Individual_definitionContext>(0);
}

SysMLv2Parser::Item_definitionContext* SysMLv2Parser::Definition_elementContext::item_definition() {
  return getRuleContext<SysMLv2Parser::Item_definitionContext>(0);
}

SysMLv2Parser::Part_definitionContext* SysMLv2Parser::Definition_elementContext::part_definition() {
  return getRuleContext<SysMLv2Parser::Part_definitionContext>(0);
}

SysMLv2Parser::Connection_definitionContext* SysMLv2Parser::Definition_elementContext::connection_definition() {
  return getRuleContext<SysMLv2Parser::Connection_definitionContext>(0);
}

SysMLv2Parser::Flow_definitionContext* SysMLv2Parser::Definition_elementContext::flow_definition() {
  return getRuleContext<SysMLv2Parser::Flow_definitionContext>(0);
}

SysMLv2Parser::Interface_definitionContext* SysMLv2Parser::Definition_elementContext::interface_definition() {
  return getRuleContext<SysMLv2Parser::Interface_definitionContext>(0);
}

SysMLv2Parser::Port_definitionContext* SysMLv2Parser::Definition_elementContext::port_definition() {
  return getRuleContext<SysMLv2Parser::Port_definitionContext>(0);
}

SysMLv2Parser::Action_definitionContext* SysMLv2Parser::Definition_elementContext::action_definition() {
  return getRuleContext<SysMLv2Parser::Action_definitionContext>(0);
}

SysMLv2Parser::Calculation_definitionContext* SysMLv2Parser::Definition_elementContext::calculation_definition() {
  return getRuleContext<SysMLv2Parser::Calculation_definitionContext>(0);
}

SysMLv2Parser::State_definitionContext* SysMLv2Parser::Definition_elementContext::state_definition() {
  return getRuleContext<SysMLv2Parser::State_definitionContext>(0);
}

SysMLv2Parser::Constraint_definitionContext* SysMLv2Parser::Definition_elementContext::constraint_definition() {
  return getRuleContext<SysMLv2Parser::Constraint_definitionContext>(0);
}

SysMLv2Parser::Requirement_definitionContext* SysMLv2Parser::Definition_elementContext::requirement_definition() {
  return getRuleContext<SysMLv2Parser::Requirement_definitionContext>(0);
}

SysMLv2Parser::Concern_definitionContext* SysMLv2Parser::Definition_elementContext::concern_definition() {
  return getRuleContext<SysMLv2Parser::Concern_definitionContext>(0);
}

SysMLv2Parser::Case_definitionContext* SysMLv2Parser::Definition_elementContext::case_definition() {
  return getRuleContext<SysMLv2Parser::Case_definitionContext>(0);
}

SysMLv2Parser::Analysis_case_definitionContext* SysMLv2Parser::Definition_elementContext::analysis_case_definition() {
  return getRuleContext<SysMLv2Parser::Analysis_case_definitionContext>(0);
}

SysMLv2Parser::Verification_case_definitionContext* SysMLv2Parser::Definition_elementContext::verification_case_definition() {
  return getRuleContext<SysMLv2Parser::Verification_case_definitionContext>(0);
}

SysMLv2Parser::View_definitionContext* SysMLv2Parser::Definition_elementContext::view_definition() {
  return getRuleContext<SysMLv2Parser::View_definitionContext>(0);
}

SysMLv2Parser::Viewpoint_definitionContext* SysMLv2Parser::Definition_elementContext::viewpoint_definition() {
  return getRuleContext<SysMLv2Parser::Viewpoint_definitionContext>(0);
}

SysMLv2Parser::Rendering_definitionContext* SysMLv2Parser::Definition_elementContext::rendering_definition() {
  return getRuleContext<SysMLv2Parser::Rendering_definitionContext>(0);
}

SysMLv2Parser::Metadata_definitionContext* SysMLv2Parser::Definition_elementContext::metadata_definition() {
  return getRuleContext<SysMLv2Parser::Metadata_definitionContext>(0);
}

SysMLv2Parser::Extended_definitionContext* SysMLv2Parser::Definition_elementContext::extended_definition() {
  return getRuleContext<SysMLv2Parser::Extended_definitionContext>(0);
}


size_t SysMLv2Parser::Definition_elementContext::getRuleIndex() const {
  return SysMLv2Parser::RuleDefinition_element;
}

void SysMLv2Parser::Definition_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDefinition_element(this);
}

void SysMLv2Parser::Definition_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDefinition_element(this);
}

SysMLv2Parser::Definition_elementContext* SysMLv2Parser::definition_element() {
  Definition_elementContext *_localctx = _tracker.createInstance<Definition_elementContext>(_ctx, getState());
  enterRule(_localctx, 38, SysMLv2Parser::RuleDefinition_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1246);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 22, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1215);
      package();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1216);
      library_package();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1217);
      annotating_element();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1218);
      dependency();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1219);
      attribute_definition();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1220);
      enumeration_definition();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1221);
      occurrence_definition();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1222);
      individual_definition();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(1223);
      item_definition();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(1224);
      part_definition();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(1225);
      connection_definition();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(1226);
      flow_definition();
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(1227);
      interface_definition();
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(1228);
      port_definition();
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(1229);
      action_definition();
      break;
    }

    case 16: {
      enterOuterAlt(_localctx, 16);
      setState(1230);
      calculation_definition();
      break;
    }

    case 17: {
      enterOuterAlt(_localctx, 17);
      setState(1231);
      state_definition();
      break;
    }

    case 18: {
      enterOuterAlt(_localctx, 18);
      setState(1232);
      constraint_definition();
      break;
    }

    case 19: {
      enterOuterAlt(_localctx, 19);
      setState(1233);
      requirement_definition();
      break;
    }

    case 20: {
      enterOuterAlt(_localctx, 20);
      setState(1234);
      calculation_definition();
      break;
    }

    case 21: {
      enterOuterAlt(_localctx, 21);
      setState(1235);
      state_definition();
      break;
    }

    case 22: {
      enterOuterAlt(_localctx, 22);
      setState(1236);
      requirement_definition();
      break;
    }

    case 23: {
      enterOuterAlt(_localctx, 23);
      setState(1237);
      concern_definition();
      break;
    }

    case 24: {
      enterOuterAlt(_localctx, 24);
      setState(1238);
      case_definition();
      break;
    }

    case 25: {
      enterOuterAlt(_localctx, 25);
      setState(1239);
      analysis_case_definition();
      break;
    }

    case 26: {
      enterOuterAlt(_localctx, 26);
      setState(1240);
      verification_case_definition();
      break;
    }

    case 27: {
      enterOuterAlt(_localctx, 27);
      setState(1241);
      view_definition();
      break;
    }

    case 28: {
      enterOuterAlt(_localctx, 28);
      setState(1242);
      viewpoint_definition();
      break;
    }

    case 29: {
      enterOuterAlt(_localctx, 29);
      setState(1243);
      rendering_definition();
      break;
    }

    case 30: {
      enterOuterAlt(_localctx, 30);
      setState(1244);
      metadata_definition();
      break;
    }

    case 31: {
      enterOuterAlt(_localctx, 31);
      setState(1245);
      extended_definition();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Usage_elementContext ------------------------------------------------------------------

SysMLv2Parser::Usage_elementContext::Usage_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Non_occurrence_usage_elementContext* SysMLv2Parser::Usage_elementContext::non_occurrence_usage_element() {
  return getRuleContext<SysMLv2Parser::Non_occurrence_usage_elementContext>(0);
}

SysMLv2Parser::Occurrence_usage_elementContext* SysMLv2Parser::Usage_elementContext::occurrence_usage_element() {
  return getRuleContext<SysMLv2Parser::Occurrence_usage_elementContext>(0);
}


size_t SysMLv2Parser::Usage_elementContext::getRuleIndex() const {
  return SysMLv2Parser::RuleUsage_element;
}

void SysMLv2Parser::Usage_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUsage_element(this);
}

void SysMLv2Parser::Usage_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUsage_element(this);
}

SysMLv2Parser::Usage_elementContext* SysMLv2Parser::usage_element() {
  Usage_elementContext *_localctx = _tracker.createInstance<Usage_elementContext>(_ctx, getState());
  enterRule(_localctx, 40, SysMLv2Parser::RuleUsage_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1250);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 23, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1248);
      non_occurrence_usage_element();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1249);
      occurrence_usage_element();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Basic_definition_prefixContext ------------------------------------------------------------------

SysMLv2Parser::Basic_definition_prefixContext::Basic_definition_prefixContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Basic_definition_prefixContext::KEYWORD_ABSTRACT() {
  return getToken(SysMLv2Parser::KEYWORD_ABSTRACT, 0);
}

tree::TerminalNode* SysMLv2Parser::Basic_definition_prefixContext::KEYWORD_VARIATION() {
  return getToken(SysMLv2Parser::KEYWORD_VARIATION, 0);
}


size_t SysMLv2Parser::Basic_definition_prefixContext::getRuleIndex() const {
  return SysMLv2Parser::RuleBasic_definition_prefix;
}

void SysMLv2Parser::Basic_definition_prefixContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBasic_definition_prefix(this);
}

void SysMLv2Parser::Basic_definition_prefixContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBasic_definition_prefix(this);
}

SysMLv2Parser::Basic_definition_prefixContext* SysMLv2Parser::basic_definition_prefix() {
  Basic_definition_prefixContext *_localctx = _tracker.createInstance<Basic_definition_prefixContext>(_ctx, getState());
  enterRule(_localctx, 42, SysMLv2Parser::RuleBasic_definition_prefix);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1252);
    _la = _input->LA(1);
    if (!(_la == SysMLv2Parser::KEYWORD_VARIATION

    || _la == SysMLv2Parser::KEYWORD_ABSTRACT)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Definition_extension_keywordContext ------------------------------------------------------------------

SysMLv2Parser::Definition_extension_keywordContext::Definition_extension_keywordContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Prefix_metadata_memberContext* SysMLv2Parser::Definition_extension_keywordContext::prefix_metadata_member() {
  return getRuleContext<SysMLv2Parser::Prefix_metadata_memberContext>(0);
}


size_t SysMLv2Parser::Definition_extension_keywordContext::getRuleIndex() const {
  return SysMLv2Parser::RuleDefinition_extension_keyword;
}

void SysMLv2Parser::Definition_extension_keywordContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDefinition_extension_keyword(this);
}

void SysMLv2Parser::Definition_extension_keywordContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDefinition_extension_keyword(this);
}

SysMLv2Parser::Definition_extension_keywordContext* SysMLv2Parser::definition_extension_keyword() {
  Definition_extension_keywordContext *_localctx = _tracker.createInstance<Definition_extension_keywordContext>(_ctx, getState());
  enterRule(_localctx, 44, SysMLv2Parser::RuleDefinition_extension_keyword);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1254);
    prefix_metadata_member();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Definition_prefixContext ------------------------------------------------------------------

SysMLv2Parser::Definition_prefixContext::Definition_prefixContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Basic_definition_prefixContext* SysMLv2Parser::Definition_prefixContext::basic_definition_prefix() {
  return getRuleContext<SysMLv2Parser::Basic_definition_prefixContext>(0);
}

std::vector<SysMLv2Parser::Definition_extension_keywordContext *> SysMLv2Parser::Definition_prefixContext::definition_extension_keyword() {
  return getRuleContexts<SysMLv2Parser::Definition_extension_keywordContext>();
}

SysMLv2Parser::Definition_extension_keywordContext* SysMLv2Parser::Definition_prefixContext::definition_extension_keyword(size_t i) {
  return getRuleContext<SysMLv2Parser::Definition_extension_keywordContext>(i);
}


size_t SysMLv2Parser::Definition_prefixContext::getRuleIndex() const {
  return SysMLv2Parser::RuleDefinition_prefix;
}

void SysMLv2Parser::Definition_prefixContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDefinition_prefix(this);
}

void SysMLv2Parser::Definition_prefixContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDefinition_prefix(this);
}

SysMLv2Parser::Definition_prefixContext* SysMLv2Parser::definition_prefix() {
  Definition_prefixContext *_localctx = _tracker.createInstance<Definition_prefixContext>(_ctx, getState());
  enterRule(_localctx, 46, SysMLv2Parser::RuleDefinition_prefix);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1257);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_VARIATION

    || _la == SysMLv2Parser::KEYWORD_ABSTRACT) {
      setState(1256);
      basic_definition_prefix();
    }
    setState(1262);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SysMLv2Parser::SYMBOL_HASHTAG) {
      setState(1259);
      definition_extension_keyword();
      setState(1264);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DefinitionContext ------------------------------------------------------------------

SysMLv2Parser::DefinitionContext::DefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Definition_declarationContext* SysMLv2Parser::DefinitionContext::definition_declaration() {
  return getRuleContext<SysMLv2Parser::Definition_declarationContext>(0);
}

SysMLv2Parser::Definition_bodyContext* SysMLv2Parser::DefinitionContext::definition_body() {
  return getRuleContext<SysMLv2Parser::Definition_bodyContext>(0);
}


size_t SysMLv2Parser::DefinitionContext::getRuleIndex() const {
  return SysMLv2Parser::RuleDefinition;
}

void SysMLv2Parser::DefinitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDefinition(this);
}

void SysMLv2Parser::DefinitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDefinition(this);
}

SysMLv2Parser::DefinitionContext* SysMLv2Parser::definition() {
  DefinitionContext *_localctx = _tracker.createInstance<DefinitionContext>(_ctx, getState());
  enterRule(_localctx, 48, SysMLv2Parser::RuleDefinition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1265);
    definition_declaration();
    setState(1266);
    definition_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Definition_declarationContext ------------------------------------------------------------------

SysMLv2Parser::Definition_declarationContext::Definition_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::IdentificationContext* SysMLv2Parser::Definition_declarationContext::identification() {
  return getRuleContext<SysMLv2Parser::IdentificationContext>(0);
}

SysMLv2Parser::Subsclassification_partContext* SysMLv2Parser::Definition_declarationContext::subsclassification_part() {
  return getRuleContext<SysMLv2Parser::Subsclassification_partContext>(0);
}


size_t SysMLv2Parser::Definition_declarationContext::getRuleIndex() const {
  return SysMLv2Parser::RuleDefinition_declaration;
}

void SysMLv2Parser::Definition_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDefinition_declaration(this);
}

void SysMLv2Parser::Definition_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDefinition_declaration(this);
}

SysMLv2Parser::Definition_declarationContext* SysMLv2Parser::definition_declaration() {
  Definition_declarationContext *_localctx = _tracker.createInstance<Definition_declarationContext>(_ctx, getState());
  enterRule(_localctx, 50, SysMLv2Parser::RuleDefinition_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1268);
    identification();
    setState(1270);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::SPECIALIZES) {
      setState(1269);
      subsclassification_part();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Definition_bodyContext ------------------------------------------------------------------

SysMLv2Parser::Definition_bodyContext::Definition_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Definition_bodyContext::SYMBOL_STATEMENT_DELIMITER() {
  return getToken(SysMLv2Parser::SYMBOL_STATEMENT_DELIMITER, 0);
}

tree::TerminalNode* SysMLv2Parser::Definition_bodyContext::SYMBOL_CURLY_BRACKET_OPEN() {
  return getToken(SysMLv2Parser::SYMBOL_CURLY_BRACKET_OPEN, 0);
}

tree::TerminalNode* SysMLv2Parser::Definition_bodyContext::SYMBOL_CURLY_BRACKET_CLOSE() {
  return getToken(SysMLv2Parser::SYMBOL_CURLY_BRACKET_CLOSE, 0);
}

std::vector<SysMLv2Parser::Definition_body_itemContext *> SysMLv2Parser::Definition_bodyContext::definition_body_item() {
  return getRuleContexts<SysMLv2Parser::Definition_body_itemContext>();
}

SysMLv2Parser::Definition_body_itemContext* SysMLv2Parser::Definition_bodyContext::definition_body_item(size_t i) {
  return getRuleContext<SysMLv2Parser::Definition_body_itemContext>(i);
}


size_t SysMLv2Parser::Definition_bodyContext::getRuleIndex() const {
  return SysMLv2Parser::RuleDefinition_body;
}

void SysMLv2Parser::Definition_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDefinition_body(this);
}

void SysMLv2Parser::Definition_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDefinition_body(this);
}

SysMLv2Parser::Definition_bodyContext* SysMLv2Parser::definition_body() {
  Definition_bodyContext *_localctx = _tracker.createInstance<Definition_bodyContext>(_ctx, getState());
  enterRule(_localctx, 52, SysMLv2Parser::RuleDefinition_body);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1281);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SysMLv2Parser::SYMBOL_STATEMENT_DELIMITER: {
        enterOuterAlt(_localctx, 1);
        setState(1272);
        match(SysMLv2Parser::SYMBOL_STATEMENT_DELIMITER);
        break;
      }

      case SysMLv2Parser::SYMBOL_CURLY_BRACKET_OPEN: {
        enterOuterAlt(_localctx, 2);
        setState(1273);
        match(SysMLv2Parser::SYMBOL_CURLY_BRACKET_OPEN);
        setState(1277);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & -7713383000981164256) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 65)) & 867558794408519561) != 0) || ((((_la - 132) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 132)) & 620935448488315143) != 0) || ((((_la - 201) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 201)) & 2154037349) != 0)) {
          setState(1274);
          definition_body_item();
          setState(1279);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(1280);
        match(SysMLv2Parser::SYMBOL_CURLY_BRACKET_CLOSE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Definition_body_itemContext ------------------------------------------------------------------

SysMLv2Parser::Definition_body_itemContext::Definition_body_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Definition_memberContext* SysMLv2Parser::Definition_body_itemContext::definition_member() {
  return getRuleContext<SysMLv2Parser::Definition_memberContext>(0);
}

SysMLv2Parser::Variant_usage_memberContext* SysMLv2Parser::Definition_body_itemContext::variant_usage_member() {
  return getRuleContext<SysMLv2Parser::Variant_usage_memberContext>(0);
}

SysMLv2Parser::Non_occurrence_usage_memberContext* SysMLv2Parser::Definition_body_itemContext::non_occurrence_usage_member() {
  return getRuleContext<SysMLv2Parser::Non_occurrence_usage_memberContext>(0);
}

SysMLv2Parser::Occurrence_usage_memberContext* SysMLv2Parser::Definition_body_itemContext::occurrence_usage_member() {
  return getRuleContext<SysMLv2Parser::Occurrence_usage_memberContext>(0);
}

SysMLv2Parser::Source_succession_memberContext* SysMLv2Parser::Definition_body_itemContext::source_succession_member() {
  return getRuleContext<SysMLv2Parser::Source_succession_memberContext>(0);
}

SysMLv2Parser::Alias_memberContext* SysMLv2Parser::Definition_body_itemContext::alias_member() {
  return getRuleContext<SysMLv2Parser::Alias_memberContext>(0);
}

SysMLv2Parser::Namespace_importContext* SysMLv2Parser::Definition_body_itemContext::namespace_import() {
  return getRuleContext<SysMLv2Parser::Namespace_importContext>(0);
}


size_t SysMLv2Parser::Definition_body_itemContext::getRuleIndex() const {
  return SysMLv2Parser::RuleDefinition_body_item;
}

void SysMLv2Parser::Definition_body_itemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDefinition_body_item(this);
}

void SysMLv2Parser::Definition_body_itemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDefinition_body_item(this);
}

SysMLv2Parser::Definition_body_itemContext* SysMLv2Parser::definition_body_item() {
  Definition_body_itemContext *_localctx = _tracker.createInstance<Definition_body_itemContext>(_ctx, getState());
  enterRule(_localctx, 54, SysMLv2Parser::RuleDefinition_body_item);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1292);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 30, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1283);
      definition_member();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1284);
      variant_usage_member();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1285);
      non_occurrence_usage_member();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1287);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == SysMLv2Parser::KEYWORD_THEN) {
        setState(1286);
        source_succession_member();
      }
      setState(1289);
      occurrence_usage_member();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1290);
      alias_member();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1291);
      namespace_import();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Definition_memberContext ------------------------------------------------------------------

SysMLv2Parser::Definition_memberContext::Definition_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Member_prefixContext* SysMLv2Parser::Definition_memberContext::member_prefix() {
  return getRuleContext<SysMLv2Parser::Member_prefixContext>(0);
}

SysMLv2Parser::Definition_elementContext* SysMLv2Parser::Definition_memberContext::definition_element() {
  return getRuleContext<SysMLv2Parser::Definition_elementContext>(0);
}


size_t SysMLv2Parser::Definition_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleDefinition_member;
}

void SysMLv2Parser::Definition_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDefinition_member(this);
}

void SysMLv2Parser::Definition_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDefinition_member(this);
}

SysMLv2Parser::Definition_memberContext* SysMLv2Parser::definition_member() {
  Definition_memberContext *_localctx = _tracker.createInstance<Definition_memberContext>(_ctx, getState());
  enterRule(_localctx, 56, SysMLv2Parser::RuleDefinition_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1294);
    member_prefix();
    setState(1295);
    definition_element();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Variant_usage_memberContext ------------------------------------------------------------------

SysMLv2Parser::Variant_usage_memberContext::Variant_usage_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Member_prefixContext* SysMLv2Parser::Variant_usage_memberContext::member_prefix() {
  return getRuleContext<SysMLv2Parser::Member_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Variant_usage_memberContext::KEYWORD_VARIANT() {
  return getToken(SysMLv2Parser::KEYWORD_VARIANT, 0);
}

SysMLv2Parser::Variant_usage_elementContext* SysMLv2Parser::Variant_usage_memberContext::variant_usage_element() {
  return getRuleContext<SysMLv2Parser::Variant_usage_elementContext>(0);
}


size_t SysMLv2Parser::Variant_usage_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleVariant_usage_member;
}

void SysMLv2Parser::Variant_usage_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVariant_usage_member(this);
}

void SysMLv2Parser::Variant_usage_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVariant_usage_member(this);
}

SysMLv2Parser::Variant_usage_memberContext* SysMLv2Parser::variant_usage_member() {
  Variant_usage_memberContext *_localctx = _tracker.createInstance<Variant_usage_memberContext>(_ctx, getState());
  enterRule(_localctx, 58, SysMLv2Parser::RuleVariant_usage_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1297);
    member_prefix();
    setState(1298);
    match(SysMLv2Parser::KEYWORD_VARIANT);
    setState(1299);
    variant_usage_element();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Non_occurrence_usage_memberContext ------------------------------------------------------------------

SysMLv2Parser::Non_occurrence_usage_memberContext::Non_occurrence_usage_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Member_prefixContext* SysMLv2Parser::Non_occurrence_usage_memberContext::member_prefix() {
  return getRuleContext<SysMLv2Parser::Member_prefixContext>(0);
}

SysMLv2Parser::Non_occurrence_usage_elementContext* SysMLv2Parser::Non_occurrence_usage_memberContext::non_occurrence_usage_element() {
  return getRuleContext<SysMLv2Parser::Non_occurrence_usage_elementContext>(0);
}


size_t SysMLv2Parser::Non_occurrence_usage_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleNon_occurrence_usage_member;
}

void SysMLv2Parser::Non_occurrence_usage_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNon_occurrence_usage_member(this);
}

void SysMLv2Parser::Non_occurrence_usage_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNon_occurrence_usage_member(this);
}

SysMLv2Parser::Non_occurrence_usage_memberContext* SysMLv2Parser::non_occurrence_usage_member() {
  Non_occurrence_usage_memberContext *_localctx = _tracker.createInstance<Non_occurrence_usage_memberContext>(_ctx, getState());
  enterRule(_localctx, 60, SysMLv2Parser::RuleNon_occurrence_usage_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1301);
    member_prefix();
    setState(1302);
    non_occurrence_usage_element();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Occurrence_usage_memberContext ------------------------------------------------------------------

SysMLv2Parser::Occurrence_usage_memberContext::Occurrence_usage_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Member_prefixContext* SysMLv2Parser::Occurrence_usage_memberContext::member_prefix() {
  return getRuleContext<SysMLv2Parser::Member_prefixContext>(0);
}

SysMLv2Parser::Occurrence_usage_elementContext* SysMLv2Parser::Occurrence_usage_memberContext::occurrence_usage_element() {
  return getRuleContext<SysMLv2Parser::Occurrence_usage_elementContext>(0);
}


size_t SysMLv2Parser::Occurrence_usage_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleOccurrence_usage_member;
}

void SysMLv2Parser::Occurrence_usage_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOccurrence_usage_member(this);
}

void SysMLv2Parser::Occurrence_usage_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOccurrence_usage_member(this);
}

SysMLv2Parser::Occurrence_usage_memberContext* SysMLv2Parser::occurrence_usage_member() {
  Occurrence_usage_memberContext *_localctx = _tracker.createInstance<Occurrence_usage_memberContext>(_ctx, getState());
  enterRule(_localctx, 62, SysMLv2Parser::RuleOccurrence_usage_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1304);
    member_prefix();
    setState(1305);
    occurrence_usage_element();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Structure_usage_memberContext ------------------------------------------------------------------

SysMLv2Parser::Structure_usage_memberContext::Structure_usage_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Member_prefixContext* SysMLv2Parser::Structure_usage_memberContext::member_prefix() {
  return getRuleContext<SysMLv2Parser::Member_prefixContext>(0);
}

SysMLv2Parser::Structure_usage_elementContext* SysMLv2Parser::Structure_usage_memberContext::structure_usage_element() {
  return getRuleContext<SysMLv2Parser::Structure_usage_elementContext>(0);
}


size_t SysMLv2Parser::Structure_usage_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleStructure_usage_member;
}

void SysMLv2Parser::Structure_usage_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStructure_usage_member(this);
}

void SysMLv2Parser::Structure_usage_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStructure_usage_member(this);
}

SysMLv2Parser::Structure_usage_memberContext* SysMLv2Parser::structure_usage_member() {
  Structure_usage_memberContext *_localctx = _tracker.createInstance<Structure_usage_memberContext>(_ctx, getState());
  enterRule(_localctx, 64, SysMLv2Parser::RuleStructure_usage_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1307);
    member_prefix();
    setState(1308);
    structure_usage_element();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Behavior_usage_memberContext ------------------------------------------------------------------

SysMLv2Parser::Behavior_usage_memberContext::Behavior_usage_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Member_prefixContext* SysMLv2Parser::Behavior_usage_memberContext::member_prefix() {
  return getRuleContext<SysMLv2Parser::Member_prefixContext>(0);
}

SysMLv2Parser::Behavior_usage_elementContext* SysMLv2Parser::Behavior_usage_memberContext::behavior_usage_element() {
  return getRuleContext<SysMLv2Parser::Behavior_usage_elementContext>(0);
}


size_t SysMLv2Parser::Behavior_usage_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleBehavior_usage_member;
}

void SysMLv2Parser::Behavior_usage_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBehavior_usage_member(this);
}

void SysMLv2Parser::Behavior_usage_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBehavior_usage_member(this);
}

SysMLv2Parser::Behavior_usage_memberContext* SysMLv2Parser::behavior_usage_member() {
  Behavior_usage_memberContext *_localctx = _tracker.createInstance<Behavior_usage_memberContext>(_ctx, getState());
  enterRule(_localctx, 66, SysMLv2Parser::RuleBehavior_usage_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1310);
    member_prefix();
    setState(1311);
    behavior_usage_element();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Feature_directionContext ------------------------------------------------------------------

SysMLv2Parser::Feature_directionContext::Feature_directionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Feature_directionContext::KEYWORD_IN() {
  return getToken(SysMLv2Parser::KEYWORD_IN, 0);
}

tree::TerminalNode* SysMLv2Parser::Feature_directionContext::KEYWORD_OUT() {
  return getToken(SysMLv2Parser::KEYWORD_OUT, 0);
}

tree::TerminalNode* SysMLv2Parser::Feature_directionContext::KEYWORD_INOUT() {
  return getToken(SysMLv2Parser::KEYWORD_INOUT, 0);
}


size_t SysMLv2Parser::Feature_directionContext::getRuleIndex() const {
  return SysMLv2Parser::RuleFeature_direction;
}

void SysMLv2Parser::Feature_directionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFeature_direction(this);
}

void SysMLv2Parser::Feature_directionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFeature_direction(this);
}

SysMLv2Parser::Feature_directionContext* SysMLv2Parser::feature_direction() {
  Feature_directionContext *_localctx = _tracker.createInstance<Feature_directionContext>(_ctx, getState());
  enterRule(_localctx, 68, SysMLv2Parser::RuleFeature_direction);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1313);
    _la = _input->LA(1);
    if (!(((((_la - 133) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 133)) & 262147) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Ref_prefixContext ------------------------------------------------------------------

SysMLv2Parser::Ref_prefixContext::Ref_prefixContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Feature_directionContext* SysMLv2Parser::Ref_prefixContext::feature_direction() {
  return getRuleContext<SysMLv2Parser::Feature_directionContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Ref_prefixContext::KEYWORD_DERIVED() {
  return getToken(SysMLv2Parser::KEYWORD_DERIVED, 0);
}

tree::TerminalNode* SysMLv2Parser::Ref_prefixContext::KEYWORD_VARIATION() {
  return getToken(SysMLv2Parser::KEYWORD_VARIATION, 0);
}

tree::TerminalNode* SysMLv2Parser::Ref_prefixContext::KEYWORD_CONSTANT() {
  return getToken(SysMLv2Parser::KEYWORD_CONSTANT, 0);
}

tree::TerminalNode* SysMLv2Parser::Ref_prefixContext::KEYWORD_ABSTRACT() {
  return getToken(SysMLv2Parser::KEYWORD_ABSTRACT, 0);
}


size_t SysMLv2Parser::Ref_prefixContext::getRuleIndex() const {
  return SysMLv2Parser::RuleRef_prefix;
}

void SysMLv2Parser::Ref_prefixContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRef_prefix(this);
}

void SysMLv2Parser::Ref_prefixContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRef_prefix(this);
}

SysMLv2Parser::Ref_prefixContext* SysMLv2Parser::ref_prefix() {
  Ref_prefixContext *_localctx = _tracker.createInstance<Ref_prefixContext>(_ctx, getState());
  enterRule(_localctx, 70, SysMLv2Parser::RuleRef_prefix);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1316);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 31, _ctx)) {
    case 1: {
      setState(1315);
      feature_direction();
      break;
    }

    default:
      break;
    }
    setState(1319);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_DERIVED) {
      setState(1318);
      match(SysMLv2Parser::KEYWORD_DERIVED);
    }
    setState(1327);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SysMLv2Parser::KEYWORD_VARIATION: {
        setState(1321);
        match(SysMLv2Parser::KEYWORD_VARIATION);
        break;
      }

      case SysMLv2Parser::KEYWORD_CONSTANT: {
        setState(1322);
        match(SysMLv2Parser::KEYWORD_CONSTANT);
        break;
      }

      case SysMLv2Parser::KEYWORD_ABSTRACT: {
        setState(1323);
        match(SysMLv2Parser::KEYWORD_ABSTRACT);
        setState(1325);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == SysMLv2Parser::KEYWORD_CONSTANT) {
          setState(1324);
          match(SysMLv2Parser::KEYWORD_CONSTANT);
        }
        break;
      }

      case SysMLv2Parser::KEYWORD_ACCEPT:
      case SysMLv2Parser::KEYWORD_ACTION:
      case SysMLv2Parser::KEYWORD_ALLOCATE:
      case SysMLv2Parser::KEYWORD_ALLOCATION:
      case SysMLv2Parser::KEYWORD_ANALYSIS:
      case SysMLv2Parser::KEYWORD_ASSIGN:
      case SysMLv2Parser::KEYWORD_ASSERT:
      case SysMLv2Parser::KEYWORD_ATTRIBUTE:
      case SysMLv2Parser::KEYWORD_BIND:
      case SysMLv2Parser::KEYWORD_CALC:
      case SysMLv2Parser::KEYWORD_CASE:
      case SysMLv2Parser::KEYWORD_CONCERN:
      case SysMLv2Parser::KEYWORD_CONNECT:
      case SysMLv2Parser::KEYWORD_CONNECTION:
      case SysMLv2Parser::KEYWORD_CONSTRAINT:
      case SysMLv2Parser::KEYWORD_DECIDE:
      case SysMLv2Parser::KEYWORD_ENUM:
      case SysMLv2Parser::KEYWORD_EVENT:
      case SysMLv2Parser::KEYWORD_EXHIBIT:
      case SysMLv2Parser::KEYWORD_FORK:
      case SysMLv2Parser::KEYWORD_INCLUDE:
      case SysMLv2Parser::KEYWORD_INDIVIDIAL:
      case SysMLv2Parser::KEYWORD_INTERFACE:
      case SysMLv2Parser::KEYWORD_ITEM:
      case SysMLv2Parser::KEYWORD_LOOP:
      case SysMLv2Parser::KEYWORD_MERGE:
      case SysMLv2Parser::KEYWORD_MESSAGE:
      case SysMLv2Parser::KEYWORD_OCCURRENCE:
      case SysMLv2Parser::KEYWORD_PART:
      case SysMLv2Parser::KEYWORD_PERFORM:
      case SysMLv2Parser::KEYWORD_PORT:
      case SysMLv2Parser::KEYWORD_REF:
      case SysMLv2Parser::KEYWORD_RENDERING:
      case SysMLv2Parser::KEYWORD_REQUIREMENT:
      case SysMLv2Parser::KEYWORD_SEND:
      case SysMLv2Parser::KEYWORD_SNAPSHOT:
      case SysMLv2Parser::KEYWORD_STATE:
      case SysMLv2Parser::KEYWORD_TERMINATE:
      case SysMLv2Parser::KEYWORD_TIMESLICE:
      case SysMLv2Parser::KEYWORD_USE:
      case SysMLv2Parser::KEYWORD_VERIFICATION:
      case SysMLv2Parser::KEYWORD_VIEW:
      case SysMLv2Parser::KEYWORD_VIEWPOINT:
      case SysMLv2Parser::KEYWORD_WHILE:
      case SysMLv2Parser::TYPED_BY:
      case SysMLv2Parser::SUBSETS:
      case SysMLv2Parser::REFERENCES:
      case SysMLv2Parser::REDEFINES:
      case SysMLv2Parser::KEYWORD_BINDING:
      case SysMLv2Parser::KEYWORD_DEFAULT:
      case SysMLv2Parser::KEYWORD_FIRST:
      case SysMLv2Parser::KEYWORD_FLOW:
      case SysMLv2Parser::KEYWORD_FOR:
      case SysMLv2Parser::KEYWORD_IF:
      case SysMLv2Parser::KEYWORD_IN:
      case SysMLv2Parser::KEYWORD_INOUT:
      case SysMLv2Parser::KEYWORD_OUT:
      case SysMLv2Parser::KEYWORD_SUCCSESSION:
      case SysMLv2Parser::SYMBOL_STATEMENT_DELIMITER:
      case SysMLv2Parser::SYMBOL_CURLY_BRACKET_OPEN:
      case SysMLv2Parser::SYMBOL_SQUARE_BRACKET_OPEN:
      case SysMLv2Parser::SYMBOL_HASHTAG:
      case SysMLv2Parser::SYMBOL_SMALLER:
      case SysMLv2Parser::SYMBOL_DEF_ASSIGN:
      case SysMLv2Parser::SYMBOL_EQUALS:
      case SysMLv2Parser::NAME: {
        break;
      }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Basic_usage_prefixContext ------------------------------------------------------------------

SysMLv2Parser::Basic_usage_prefixContext::Basic_usage_prefixContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Ref_prefixContext* SysMLv2Parser::Basic_usage_prefixContext::ref_prefix() {
  return getRuleContext<SysMLv2Parser::Ref_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Basic_usage_prefixContext::KEYWORD_REF() {
  return getToken(SysMLv2Parser::KEYWORD_REF, 0);
}


size_t SysMLv2Parser::Basic_usage_prefixContext::getRuleIndex() const {
  return SysMLv2Parser::RuleBasic_usage_prefix;
}

void SysMLv2Parser::Basic_usage_prefixContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBasic_usage_prefix(this);
}

void SysMLv2Parser::Basic_usage_prefixContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBasic_usage_prefix(this);
}

SysMLv2Parser::Basic_usage_prefixContext* SysMLv2Parser::basic_usage_prefix() {
  Basic_usage_prefixContext *_localctx = _tracker.createInstance<Basic_usage_prefixContext>(_ctx, getState());
  enterRule(_localctx, 72, SysMLv2Parser::RuleBasic_usage_prefix);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1329);
    ref_prefix();
    setState(1331);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 35, _ctx)) {
    case 1: {
      setState(1330);
      match(SysMLv2Parser::KEYWORD_REF);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- End_usage_prefixContext ------------------------------------------------------------------

SysMLv2Parser::End_usage_prefixContext::End_usage_prefixContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::End_usage_prefixContext::KEYWORD_END() {
  return getToken(SysMLv2Parser::KEYWORD_END, 0);
}

SysMLv2Parser::Owned_cross_feature_memberContext* SysMLv2Parser::End_usage_prefixContext::owned_cross_feature_member() {
  return getRuleContext<SysMLv2Parser::Owned_cross_feature_memberContext>(0);
}


size_t SysMLv2Parser::End_usage_prefixContext::getRuleIndex() const {
  return SysMLv2Parser::RuleEnd_usage_prefix;
}

void SysMLv2Parser::End_usage_prefixContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnd_usage_prefix(this);
}

void SysMLv2Parser::End_usage_prefixContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnd_usage_prefix(this);
}

SysMLv2Parser::End_usage_prefixContext* SysMLv2Parser::end_usage_prefix() {
  End_usage_prefixContext *_localctx = _tracker.createInstance<End_usage_prefixContext>(_ctx, getState());
  enterRule(_localctx, 74, SysMLv2Parser::RuleEnd_usage_prefix);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1334);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_END) {
      setState(1333);
      match(SysMLv2Parser::KEYWORD_END);
    }
    setState(1337);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 37, _ctx)) {
    case 1: {
      setState(1336);
      owned_cross_feature_member();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Owned_cross_feature_memberContext ------------------------------------------------------------------

SysMLv2Parser::Owned_cross_feature_memberContext::Owned_cross_feature_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Owned_cross_featureContext* SysMLv2Parser::Owned_cross_feature_memberContext::owned_cross_feature() {
  return getRuleContext<SysMLv2Parser::Owned_cross_featureContext>(0);
}


size_t SysMLv2Parser::Owned_cross_feature_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleOwned_cross_feature_member;
}

void SysMLv2Parser::Owned_cross_feature_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOwned_cross_feature_member(this);
}

void SysMLv2Parser::Owned_cross_feature_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOwned_cross_feature_member(this);
}

SysMLv2Parser::Owned_cross_feature_memberContext* SysMLv2Parser::owned_cross_feature_member() {
  Owned_cross_feature_memberContext *_localctx = _tracker.createInstance<Owned_cross_feature_memberContext>(_ctx, getState());
  enterRule(_localctx, 76, SysMLv2Parser::RuleOwned_cross_feature_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1339);
    owned_cross_feature();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Owned_cross_featureContext ------------------------------------------------------------------

SysMLv2Parser::Owned_cross_featureContext::Owned_cross_featureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Basic_usage_prefixContext* SysMLv2Parser::Owned_cross_featureContext::basic_usage_prefix() {
  return getRuleContext<SysMLv2Parser::Basic_usage_prefixContext>(0);
}

SysMLv2Parser::Usage_declarationContext* SysMLv2Parser::Owned_cross_featureContext::usage_declaration() {
  return getRuleContext<SysMLv2Parser::Usage_declarationContext>(0);
}


size_t SysMLv2Parser::Owned_cross_featureContext::getRuleIndex() const {
  return SysMLv2Parser::RuleOwned_cross_feature;
}

void SysMLv2Parser::Owned_cross_featureContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOwned_cross_feature(this);
}

void SysMLv2Parser::Owned_cross_featureContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOwned_cross_feature(this);
}

SysMLv2Parser::Owned_cross_featureContext* SysMLv2Parser::owned_cross_feature() {
  Owned_cross_featureContext *_localctx = _tracker.createInstance<Owned_cross_featureContext>(_ctx, getState());
  enterRule(_localctx, 78, SysMLv2Parser::RuleOwned_cross_feature);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1341);
    basic_usage_prefix();
    setState(1342);
    usage_declaration();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Usage_extention_keywordContext ------------------------------------------------------------------

SysMLv2Parser::Usage_extention_keywordContext::Usage_extention_keywordContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Prefix_metadata_memberContext* SysMLv2Parser::Usage_extention_keywordContext::prefix_metadata_member() {
  return getRuleContext<SysMLv2Parser::Prefix_metadata_memberContext>(0);
}


size_t SysMLv2Parser::Usage_extention_keywordContext::getRuleIndex() const {
  return SysMLv2Parser::RuleUsage_extention_keyword;
}

void SysMLv2Parser::Usage_extention_keywordContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUsage_extention_keyword(this);
}

void SysMLv2Parser::Usage_extention_keywordContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUsage_extention_keyword(this);
}

SysMLv2Parser::Usage_extention_keywordContext* SysMLv2Parser::usage_extention_keyword() {
  Usage_extention_keywordContext *_localctx = _tracker.createInstance<Usage_extention_keywordContext>(_ctx, getState());
  enterRule(_localctx, 80, SysMLv2Parser::RuleUsage_extention_keyword);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1344);
    prefix_metadata_member();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Unextended_usage_prefixContext ------------------------------------------------------------------

SysMLv2Parser::Unextended_usage_prefixContext::Unextended_usage_prefixContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::End_usage_prefixContext* SysMLv2Parser::Unextended_usage_prefixContext::end_usage_prefix() {
  return getRuleContext<SysMLv2Parser::End_usage_prefixContext>(0);
}

SysMLv2Parser::Basic_usage_prefixContext* SysMLv2Parser::Unextended_usage_prefixContext::basic_usage_prefix() {
  return getRuleContext<SysMLv2Parser::Basic_usage_prefixContext>(0);
}


size_t SysMLv2Parser::Unextended_usage_prefixContext::getRuleIndex() const {
  return SysMLv2Parser::RuleUnextended_usage_prefix;
}

void SysMLv2Parser::Unextended_usage_prefixContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnextended_usage_prefix(this);
}

void SysMLv2Parser::Unextended_usage_prefixContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnextended_usage_prefix(this);
}

SysMLv2Parser::Unextended_usage_prefixContext* SysMLv2Parser::unextended_usage_prefix() {
  Unextended_usage_prefixContext *_localctx = _tracker.createInstance<Unextended_usage_prefixContext>(_ctx, getState());
  enterRule(_localctx, 82, SysMLv2Parser::RuleUnextended_usage_prefix);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1348);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 38, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1346);
      end_usage_prefix();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1347);
      basic_usage_prefix();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Usage_prefixContext ------------------------------------------------------------------

SysMLv2Parser::Usage_prefixContext::Usage_prefixContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Unextended_usage_prefixContext* SysMLv2Parser::Usage_prefixContext::unextended_usage_prefix() {
  return getRuleContext<SysMLv2Parser::Unextended_usage_prefixContext>(0);
}

std::vector<SysMLv2Parser::Usage_extention_keywordContext *> SysMLv2Parser::Usage_prefixContext::usage_extention_keyword() {
  return getRuleContexts<SysMLv2Parser::Usage_extention_keywordContext>();
}

SysMLv2Parser::Usage_extention_keywordContext* SysMLv2Parser::Usage_prefixContext::usage_extention_keyword(size_t i) {
  return getRuleContext<SysMLv2Parser::Usage_extention_keywordContext>(i);
}


size_t SysMLv2Parser::Usage_prefixContext::getRuleIndex() const {
  return SysMLv2Parser::RuleUsage_prefix;
}

void SysMLv2Parser::Usage_prefixContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUsage_prefix(this);
}

void SysMLv2Parser::Usage_prefixContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUsage_prefix(this);
}

SysMLv2Parser::Usage_prefixContext* SysMLv2Parser::usage_prefix() {
  Usage_prefixContext *_localctx = _tracker.createInstance<Usage_prefixContext>(_ctx, getState());
  enterRule(_localctx, 84, SysMLv2Parser::RuleUsage_prefix);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1350);
    unextended_usage_prefix();
    setState(1354);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SysMLv2Parser::SYMBOL_HASHTAG) {
      setState(1351);
      usage_extention_keyword();
      setState(1356);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UsageContext ------------------------------------------------------------------

SysMLv2Parser::UsageContext::UsageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Usage_declarationContext* SysMLv2Parser::UsageContext::usage_declaration() {
  return getRuleContext<SysMLv2Parser::Usage_declarationContext>(0);
}

SysMLv2Parser::Usage_completionContext* SysMLv2Parser::UsageContext::usage_completion() {
  return getRuleContext<SysMLv2Parser::Usage_completionContext>(0);
}


size_t SysMLv2Parser::UsageContext::getRuleIndex() const {
  return SysMLv2Parser::RuleUsage;
}

void SysMLv2Parser::UsageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUsage(this);
}

void SysMLv2Parser::UsageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUsage(this);
}

SysMLv2Parser::UsageContext* SysMLv2Parser::usage() {
  UsageContext *_localctx = _tracker.createInstance<UsageContext>(_ctx, getState());
  enterRule(_localctx, 86, SysMLv2Parser::RuleUsage);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1357);
    usage_declaration();
    setState(1358);
    usage_completion();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Usage_declarationContext ------------------------------------------------------------------

SysMLv2Parser::Usage_declarationContext::Usage_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::IdentificationContext* SysMLv2Parser::Usage_declarationContext::identification() {
  return getRuleContext<SysMLv2Parser::IdentificationContext>(0);
}

SysMLv2Parser::Feature_specialization_partContext* SysMLv2Parser::Usage_declarationContext::feature_specialization_part() {
  return getRuleContext<SysMLv2Parser::Feature_specialization_partContext>(0);
}


size_t SysMLv2Parser::Usage_declarationContext::getRuleIndex() const {
  return SysMLv2Parser::RuleUsage_declaration;
}

void SysMLv2Parser::Usage_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUsage_declaration(this);
}

void SysMLv2Parser::Usage_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUsage_declaration(this);
}

SysMLv2Parser::Usage_declarationContext* SysMLv2Parser::usage_declaration() {
  Usage_declarationContext *_localctx = _tracker.createInstance<Usage_declarationContext>(_ctx, getState());
  enterRule(_localctx, 88, SysMLv2Parser::RuleUsage_declaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1360);
    identification();
    setState(1362);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 40, _ctx)) {
    case 1: {
      setState(1361);
      feature_specialization_part();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Usage_completionContext ------------------------------------------------------------------

SysMLv2Parser::Usage_completionContext::Usage_completionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Usage_bodyContext* SysMLv2Parser::Usage_completionContext::usage_body() {
  return getRuleContext<SysMLv2Parser::Usage_bodyContext>(0);
}

SysMLv2Parser::Value_partContext* SysMLv2Parser::Usage_completionContext::value_part() {
  return getRuleContext<SysMLv2Parser::Value_partContext>(0);
}


size_t SysMLv2Parser::Usage_completionContext::getRuleIndex() const {
  return SysMLv2Parser::RuleUsage_completion;
}

void SysMLv2Parser::Usage_completionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUsage_completion(this);
}

void SysMLv2Parser::Usage_completionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUsage_completion(this);
}

SysMLv2Parser::Usage_completionContext* SysMLv2Parser::usage_completion() {
  Usage_completionContext *_localctx = _tracker.createInstance<Usage_completionContext>(_ctx, getState());
  enterRule(_localctx, 90, SysMLv2Parser::RuleUsage_completion);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1365);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_DEFAULT || _la == SysMLv2Parser::SYMBOL_DEF_ASSIGN

    || _la == SysMLv2Parser::SYMBOL_EQUALS) {
      setState(1364);
      value_part();
    }
    setState(1367);
    usage_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Usage_bodyContext ------------------------------------------------------------------

SysMLv2Parser::Usage_bodyContext::Usage_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Definition_bodyContext* SysMLv2Parser::Usage_bodyContext::definition_body() {
  return getRuleContext<SysMLv2Parser::Definition_bodyContext>(0);
}


size_t SysMLv2Parser::Usage_bodyContext::getRuleIndex() const {
  return SysMLv2Parser::RuleUsage_body;
}

void SysMLv2Parser::Usage_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUsage_body(this);
}

void SysMLv2Parser::Usage_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUsage_body(this);
}

SysMLv2Parser::Usage_bodyContext* SysMLv2Parser::usage_body() {
  Usage_bodyContext *_localctx = _tracker.createInstance<Usage_bodyContext>(_ctx, getState());
  enterRule(_localctx, 92, SysMLv2Parser::RuleUsage_body);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1369);
    definition_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Default_reference_usageContext ------------------------------------------------------------------

SysMLv2Parser::Default_reference_usageContext::Default_reference_usageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Ref_prefixContext* SysMLv2Parser::Default_reference_usageContext::ref_prefix() {
  return getRuleContext<SysMLv2Parser::Ref_prefixContext>(0);
}

SysMLv2Parser::UsageContext* SysMLv2Parser::Default_reference_usageContext::usage() {
  return getRuleContext<SysMLv2Parser::UsageContext>(0);
}


size_t SysMLv2Parser::Default_reference_usageContext::getRuleIndex() const {
  return SysMLv2Parser::RuleDefault_reference_usage;
}

void SysMLv2Parser::Default_reference_usageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDefault_reference_usage(this);
}

void SysMLv2Parser::Default_reference_usageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDefault_reference_usage(this);
}

SysMLv2Parser::Default_reference_usageContext* SysMLv2Parser::default_reference_usage() {
  Default_reference_usageContext *_localctx = _tracker.createInstance<Default_reference_usageContext>(_ctx, getState());
  enterRule(_localctx, 94, SysMLv2Parser::RuleDefault_reference_usage);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1371);
    ref_prefix();
    setState(1372);
    usage();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Reference_usageContext ------------------------------------------------------------------

SysMLv2Parser::Reference_usageContext::Reference_usageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Reference_usageContext::KEYWORD_REF() {
  return getToken(SysMLv2Parser::KEYWORD_REF, 0);
}

SysMLv2Parser::UsageContext* SysMLv2Parser::Reference_usageContext::usage() {
  return getRuleContext<SysMLv2Parser::UsageContext>(0);
}

SysMLv2Parser::End_usage_prefixContext* SysMLv2Parser::Reference_usageContext::end_usage_prefix() {
  return getRuleContext<SysMLv2Parser::End_usage_prefixContext>(0);
}

SysMLv2Parser::Ref_prefixContext* SysMLv2Parser::Reference_usageContext::ref_prefix() {
  return getRuleContext<SysMLv2Parser::Ref_prefixContext>(0);
}


size_t SysMLv2Parser::Reference_usageContext::getRuleIndex() const {
  return SysMLv2Parser::RuleReference_usage;
}

void SysMLv2Parser::Reference_usageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReference_usage(this);
}

void SysMLv2Parser::Reference_usageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReference_usage(this);
}

SysMLv2Parser::Reference_usageContext* SysMLv2Parser::reference_usage() {
  Reference_usageContext *_localctx = _tracker.createInstance<Reference_usageContext>(_ctx, getState());
  enterRule(_localctx, 96, SysMLv2Parser::RuleReference_usage);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1376);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 42, _ctx)) {
    case 1: {
      setState(1374);
      end_usage_prefix();
      break;
    }

    case 2: {
      setState(1375);
      ref_prefix();
      break;
    }

    default:
      break;
    }
    setState(1378);
    match(SysMLv2Parser::KEYWORD_REF);
    setState(1379);
    usage();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Variant_referenceContext ------------------------------------------------------------------

SysMLv2Parser::Variant_referenceContext::Variant_referenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Owned_reference_subsettingContext* SysMLv2Parser::Variant_referenceContext::owned_reference_subsetting() {
  return getRuleContext<SysMLv2Parser::Owned_reference_subsettingContext>(0);
}

SysMLv2Parser::Usage_bodyContext* SysMLv2Parser::Variant_referenceContext::usage_body() {
  return getRuleContext<SysMLv2Parser::Usage_bodyContext>(0);
}

std::vector<SysMLv2Parser::Feature_specilizationContext *> SysMLv2Parser::Variant_referenceContext::feature_specilization() {
  return getRuleContexts<SysMLv2Parser::Feature_specilizationContext>();
}

SysMLv2Parser::Feature_specilizationContext* SysMLv2Parser::Variant_referenceContext::feature_specilization(size_t i) {
  return getRuleContext<SysMLv2Parser::Feature_specilizationContext>(i);
}


size_t SysMLv2Parser::Variant_referenceContext::getRuleIndex() const {
  return SysMLv2Parser::RuleVariant_reference;
}

void SysMLv2Parser::Variant_referenceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVariant_reference(this);
}

void SysMLv2Parser::Variant_referenceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVariant_reference(this);
}

SysMLv2Parser::Variant_referenceContext* SysMLv2Parser::variant_reference() {
  Variant_referenceContext *_localctx = _tracker.createInstance<Variant_referenceContext>(_ctx, getState());
  enterRule(_localctx, 98, SysMLv2Parser::RuleVariant_reference);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1381);
    owned_reference_subsetting();
    setState(1385);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 83) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 83)) & 3377699720527901) != 0) || _la == SysMLv2Parser::KEYWORD_OUT) {
      setState(1382);
      feature_specilization();
      setState(1387);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1388);
    usage_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Non_occurrence_usage_elementContext ------------------------------------------------------------------

SysMLv2Parser::Non_occurrence_usage_elementContext::Non_occurrence_usage_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Default_reference_usageContext* SysMLv2Parser::Non_occurrence_usage_elementContext::default_reference_usage() {
  return getRuleContext<SysMLv2Parser::Default_reference_usageContext>(0);
}

SysMLv2Parser::Reference_usageContext* SysMLv2Parser::Non_occurrence_usage_elementContext::reference_usage() {
  return getRuleContext<SysMLv2Parser::Reference_usageContext>(0);
}

SysMLv2Parser::Attribute_usageContext* SysMLv2Parser::Non_occurrence_usage_elementContext::attribute_usage() {
  return getRuleContext<SysMLv2Parser::Attribute_usageContext>(0);
}

SysMLv2Parser::Enumeration_usageContext* SysMLv2Parser::Non_occurrence_usage_elementContext::enumeration_usage() {
  return getRuleContext<SysMLv2Parser::Enumeration_usageContext>(0);
}

SysMLv2Parser::Binding_connector_as_usageContext* SysMLv2Parser::Non_occurrence_usage_elementContext::binding_connector_as_usage() {
  return getRuleContext<SysMLv2Parser::Binding_connector_as_usageContext>(0);
}

SysMLv2Parser::Succession_as_usageContext* SysMLv2Parser::Non_occurrence_usage_elementContext::succession_as_usage() {
  return getRuleContext<SysMLv2Parser::Succession_as_usageContext>(0);
}

SysMLv2Parser::Extended_usageContext* SysMLv2Parser::Non_occurrence_usage_elementContext::extended_usage() {
  return getRuleContext<SysMLv2Parser::Extended_usageContext>(0);
}


size_t SysMLv2Parser::Non_occurrence_usage_elementContext::getRuleIndex() const {
  return SysMLv2Parser::RuleNon_occurrence_usage_element;
}

void SysMLv2Parser::Non_occurrence_usage_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNon_occurrence_usage_element(this);
}

void SysMLv2Parser::Non_occurrence_usage_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNon_occurrence_usage_element(this);
}

SysMLv2Parser::Non_occurrence_usage_elementContext* SysMLv2Parser::non_occurrence_usage_element() {
  Non_occurrence_usage_elementContext *_localctx = _tracker.createInstance<Non_occurrence_usage_elementContext>(_ctx, getState());
  enterRule(_localctx, 100, SysMLv2Parser::RuleNon_occurrence_usage_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1397);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 44, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1390);
      default_reference_usage();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1391);
      reference_usage();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1392);
      attribute_usage();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1393);
      enumeration_usage();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1394);
      binding_connector_as_usage();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1395);
      succession_as_usage();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1396);
      extended_usage();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Occurrence_usage_elementContext ------------------------------------------------------------------

SysMLv2Parser::Occurrence_usage_elementContext::Occurrence_usage_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Structure_usage_elementContext* SysMLv2Parser::Occurrence_usage_elementContext::structure_usage_element() {
  return getRuleContext<SysMLv2Parser::Structure_usage_elementContext>(0);
}

SysMLv2Parser::Behavior_usage_elementContext* SysMLv2Parser::Occurrence_usage_elementContext::behavior_usage_element() {
  return getRuleContext<SysMLv2Parser::Behavior_usage_elementContext>(0);
}


size_t SysMLv2Parser::Occurrence_usage_elementContext::getRuleIndex() const {
  return SysMLv2Parser::RuleOccurrence_usage_element;
}

void SysMLv2Parser::Occurrence_usage_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOccurrence_usage_element(this);
}

void SysMLv2Parser::Occurrence_usage_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOccurrence_usage_element(this);
}

SysMLv2Parser::Occurrence_usage_elementContext* SysMLv2Parser::occurrence_usage_element() {
  Occurrence_usage_elementContext *_localctx = _tracker.createInstance<Occurrence_usage_elementContext>(_ctx, getState());
  enterRule(_localctx, 102, SysMLv2Parser::RuleOccurrence_usage_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1401);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 45, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1399);
      structure_usage_element();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1400);
      behavior_usage_element();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Structure_usage_elementContext ------------------------------------------------------------------

SysMLv2Parser::Structure_usage_elementContext::Structure_usage_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Occurrence_usageContext* SysMLv2Parser::Structure_usage_elementContext::occurrence_usage() {
  return getRuleContext<SysMLv2Parser::Occurrence_usageContext>(0);
}

SysMLv2Parser::Individual_usageContext* SysMLv2Parser::Structure_usage_elementContext::individual_usage() {
  return getRuleContext<SysMLv2Parser::Individual_usageContext>(0);
}

SysMLv2Parser::Portion_usageContext* SysMLv2Parser::Structure_usage_elementContext::portion_usage() {
  return getRuleContext<SysMLv2Parser::Portion_usageContext>(0);
}

SysMLv2Parser::Event_occurrence_usageContext* SysMLv2Parser::Structure_usage_elementContext::event_occurrence_usage() {
  return getRuleContext<SysMLv2Parser::Event_occurrence_usageContext>(0);
}

SysMLv2Parser::Item_usageContext* SysMLv2Parser::Structure_usage_elementContext::item_usage() {
  return getRuleContext<SysMLv2Parser::Item_usageContext>(0);
}

SysMLv2Parser::Part_usageContext* SysMLv2Parser::Structure_usage_elementContext::part_usage() {
  return getRuleContext<SysMLv2Parser::Part_usageContext>(0);
}

SysMLv2Parser::View_usageContext* SysMLv2Parser::Structure_usage_elementContext::view_usage() {
  return getRuleContext<SysMLv2Parser::View_usageContext>(0);
}

SysMLv2Parser::Rendering_usageContext* SysMLv2Parser::Structure_usage_elementContext::rendering_usage() {
  return getRuleContext<SysMLv2Parser::Rendering_usageContext>(0);
}

SysMLv2Parser::Port_usageContext* SysMLv2Parser::Structure_usage_elementContext::port_usage() {
  return getRuleContext<SysMLv2Parser::Port_usageContext>(0);
}

SysMLv2Parser::Connection_usageContext* SysMLv2Parser::Structure_usage_elementContext::connection_usage() {
  return getRuleContext<SysMLv2Parser::Connection_usageContext>(0);
}

SysMLv2Parser::Interface_usageContext* SysMLv2Parser::Structure_usage_elementContext::interface_usage() {
  return getRuleContext<SysMLv2Parser::Interface_usageContext>(0);
}

SysMLv2Parser::Allocation_usageContext* SysMLv2Parser::Structure_usage_elementContext::allocation_usage() {
  return getRuleContext<SysMLv2Parser::Allocation_usageContext>(0);
}

SysMLv2Parser::MessageContext* SysMLv2Parser::Structure_usage_elementContext::message() {
  return getRuleContext<SysMLv2Parser::MessageContext>(0);
}

SysMLv2Parser::Flow_usageContext* SysMLv2Parser::Structure_usage_elementContext::flow_usage() {
  return getRuleContext<SysMLv2Parser::Flow_usageContext>(0);
}

SysMLv2Parser::Succession_flow_usageContext* SysMLv2Parser::Structure_usage_elementContext::succession_flow_usage() {
  return getRuleContext<SysMLv2Parser::Succession_flow_usageContext>(0);
}


size_t SysMLv2Parser::Structure_usage_elementContext::getRuleIndex() const {
  return SysMLv2Parser::RuleStructure_usage_element;
}

void SysMLv2Parser::Structure_usage_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStructure_usage_element(this);
}

void SysMLv2Parser::Structure_usage_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStructure_usage_element(this);
}

SysMLv2Parser::Structure_usage_elementContext* SysMLv2Parser::structure_usage_element() {
  Structure_usage_elementContext *_localctx = _tracker.createInstance<Structure_usage_elementContext>(_ctx, getState());
  enterRule(_localctx, 104, SysMLv2Parser::RuleStructure_usage_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1418);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 46, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1403);
      occurrence_usage();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1404);
      individual_usage();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1405);
      portion_usage();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1406);
      event_occurrence_usage();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1407);
      item_usage();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1408);
      part_usage();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1409);
      view_usage();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1410);
      rendering_usage();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(1411);
      port_usage();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(1412);
      connection_usage();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(1413);
      interface_usage();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(1414);
      allocation_usage();
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(1415);
      message();
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(1416);
      flow_usage();
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(1417);
      succession_flow_usage();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Behavior_usage_elementContext ------------------------------------------------------------------

SysMLv2Parser::Behavior_usage_elementContext::Behavior_usage_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Action_usageContext* SysMLv2Parser::Behavior_usage_elementContext::action_usage() {
  return getRuleContext<SysMLv2Parser::Action_usageContext>(0);
}

SysMLv2Parser::Calculation_usageContext* SysMLv2Parser::Behavior_usage_elementContext::calculation_usage() {
  return getRuleContext<SysMLv2Parser::Calculation_usageContext>(0);
}

SysMLv2Parser::State_usageContext* SysMLv2Parser::Behavior_usage_elementContext::state_usage() {
  return getRuleContext<SysMLv2Parser::State_usageContext>(0);
}

SysMLv2Parser::Constraint_usageContext* SysMLv2Parser::Behavior_usage_elementContext::constraint_usage() {
  return getRuleContext<SysMLv2Parser::Constraint_usageContext>(0);
}

SysMLv2Parser::Requirement_usageContext* SysMLv2Parser::Behavior_usage_elementContext::requirement_usage() {
  return getRuleContext<SysMLv2Parser::Requirement_usageContext>(0);
}

SysMLv2Parser::Concern_usageContext* SysMLv2Parser::Behavior_usage_elementContext::concern_usage() {
  return getRuleContext<SysMLv2Parser::Concern_usageContext>(0);
}

SysMLv2Parser::Case_usageContext* SysMLv2Parser::Behavior_usage_elementContext::case_usage() {
  return getRuleContext<SysMLv2Parser::Case_usageContext>(0);
}

SysMLv2Parser::Analysis_case_usageContext* SysMLv2Parser::Behavior_usage_elementContext::analysis_case_usage() {
  return getRuleContext<SysMLv2Parser::Analysis_case_usageContext>(0);
}

SysMLv2Parser::Verification_case_usageContext* SysMLv2Parser::Behavior_usage_elementContext::verification_case_usage() {
  return getRuleContext<SysMLv2Parser::Verification_case_usageContext>(0);
}

SysMLv2Parser::Use_case_usageContext* SysMLv2Parser::Behavior_usage_elementContext::use_case_usage() {
  return getRuleContext<SysMLv2Parser::Use_case_usageContext>(0);
}

SysMLv2Parser::Viewpoint_usageContext* SysMLv2Parser::Behavior_usage_elementContext::viewpoint_usage() {
  return getRuleContext<SysMLv2Parser::Viewpoint_usageContext>(0);
}

SysMLv2Parser::Perform_action_usageContext* SysMLv2Parser::Behavior_usage_elementContext::perform_action_usage() {
  return getRuleContext<SysMLv2Parser::Perform_action_usageContext>(0);
}

SysMLv2Parser::Exhibit_state_usageContext* SysMLv2Parser::Behavior_usage_elementContext::exhibit_state_usage() {
  return getRuleContext<SysMLv2Parser::Exhibit_state_usageContext>(0);
}

SysMLv2Parser::Include_use_case_usageContext* SysMLv2Parser::Behavior_usage_elementContext::include_use_case_usage() {
  return getRuleContext<SysMLv2Parser::Include_use_case_usageContext>(0);
}

SysMLv2Parser::Assert_constriant_usageContext* SysMLv2Parser::Behavior_usage_elementContext::assert_constriant_usage() {
  return getRuleContext<SysMLv2Parser::Assert_constriant_usageContext>(0);
}

SysMLv2Parser::Satisfy_requirement_usageContext* SysMLv2Parser::Behavior_usage_elementContext::satisfy_requirement_usage() {
  return getRuleContext<SysMLv2Parser::Satisfy_requirement_usageContext>(0);
}


size_t SysMLv2Parser::Behavior_usage_elementContext::getRuleIndex() const {
  return SysMLv2Parser::RuleBehavior_usage_element;
}

void SysMLv2Parser::Behavior_usage_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBehavior_usage_element(this);
}

void SysMLv2Parser::Behavior_usage_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBehavior_usage_element(this);
}

SysMLv2Parser::Behavior_usage_elementContext* SysMLv2Parser::behavior_usage_element() {
  Behavior_usage_elementContext *_localctx = _tracker.createInstance<Behavior_usage_elementContext>(_ctx, getState());
  enterRule(_localctx, 106, SysMLv2Parser::RuleBehavior_usage_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1436);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 47, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1420);
      action_usage();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1421);
      calculation_usage();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1422);
      state_usage();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1423);
      constraint_usage();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1424);
      requirement_usage();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1425);
      concern_usage();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1426);
      case_usage();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1427);
      analysis_case_usage();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(1428);
      verification_case_usage();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(1429);
      use_case_usage();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(1430);
      viewpoint_usage();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(1431);
      perform_action_usage();
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(1432);
      exhibit_state_usage();
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(1433);
      include_use_case_usage();
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(1434);
      assert_constriant_usage();
      break;
    }

    case 16: {
      enterOuterAlt(_localctx, 16);
      setState(1435);
      satisfy_requirement_usage();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Variant_usage_elementContext ------------------------------------------------------------------

SysMLv2Parser::Variant_usage_elementContext::Variant_usage_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Variant_referenceContext* SysMLv2Parser::Variant_usage_elementContext::variant_reference() {
  return getRuleContext<SysMLv2Parser::Variant_referenceContext>(0);
}

SysMLv2Parser::Reference_usageContext* SysMLv2Parser::Variant_usage_elementContext::reference_usage() {
  return getRuleContext<SysMLv2Parser::Reference_usageContext>(0);
}

SysMLv2Parser::Attribute_usageContext* SysMLv2Parser::Variant_usage_elementContext::attribute_usage() {
  return getRuleContext<SysMLv2Parser::Attribute_usageContext>(0);
}

SysMLv2Parser::Binding_connector_as_usageContext* SysMLv2Parser::Variant_usage_elementContext::binding_connector_as_usage() {
  return getRuleContext<SysMLv2Parser::Binding_connector_as_usageContext>(0);
}

SysMLv2Parser::Succession_as_usageContext* SysMLv2Parser::Variant_usage_elementContext::succession_as_usage() {
  return getRuleContext<SysMLv2Parser::Succession_as_usageContext>(0);
}

SysMLv2Parser::Occurrence_usageContext* SysMLv2Parser::Variant_usage_elementContext::occurrence_usage() {
  return getRuleContext<SysMLv2Parser::Occurrence_usageContext>(0);
}

SysMLv2Parser::Individual_usageContext* SysMLv2Parser::Variant_usage_elementContext::individual_usage() {
  return getRuleContext<SysMLv2Parser::Individual_usageContext>(0);
}

SysMLv2Parser::Portion_usageContext* SysMLv2Parser::Variant_usage_elementContext::portion_usage() {
  return getRuleContext<SysMLv2Parser::Portion_usageContext>(0);
}

SysMLv2Parser::Event_occurrence_usageContext* SysMLv2Parser::Variant_usage_elementContext::event_occurrence_usage() {
  return getRuleContext<SysMLv2Parser::Event_occurrence_usageContext>(0);
}

SysMLv2Parser::Item_usageContext* SysMLv2Parser::Variant_usage_elementContext::item_usage() {
  return getRuleContext<SysMLv2Parser::Item_usageContext>(0);
}

SysMLv2Parser::Part_usageContext* SysMLv2Parser::Variant_usage_elementContext::part_usage() {
  return getRuleContext<SysMLv2Parser::Part_usageContext>(0);
}

SysMLv2Parser::View_usageContext* SysMLv2Parser::Variant_usage_elementContext::view_usage() {
  return getRuleContext<SysMLv2Parser::View_usageContext>(0);
}

SysMLv2Parser::Rendering_usageContext* SysMLv2Parser::Variant_usage_elementContext::rendering_usage() {
  return getRuleContext<SysMLv2Parser::Rendering_usageContext>(0);
}

SysMLv2Parser::Port_usageContext* SysMLv2Parser::Variant_usage_elementContext::port_usage() {
  return getRuleContext<SysMLv2Parser::Port_usageContext>(0);
}

SysMLv2Parser::Connection_usageContext* SysMLv2Parser::Variant_usage_elementContext::connection_usage() {
  return getRuleContext<SysMLv2Parser::Connection_usageContext>(0);
}

SysMLv2Parser::Interface_usageContext* SysMLv2Parser::Variant_usage_elementContext::interface_usage() {
  return getRuleContext<SysMLv2Parser::Interface_usageContext>(0);
}

SysMLv2Parser::Allocation_usageContext* SysMLv2Parser::Variant_usage_elementContext::allocation_usage() {
  return getRuleContext<SysMLv2Parser::Allocation_usageContext>(0);
}

SysMLv2Parser::MessageContext* SysMLv2Parser::Variant_usage_elementContext::message() {
  return getRuleContext<SysMLv2Parser::MessageContext>(0);
}

SysMLv2Parser::Flow_usageContext* SysMLv2Parser::Variant_usage_elementContext::flow_usage() {
  return getRuleContext<SysMLv2Parser::Flow_usageContext>(0);
}

SysMLv2Parser::Succession_flow_usageContext* SysMLv2Parser::Variant_usage_elementContext::succession_flow_usage() {
  return getRuleContext<SysMLv2Parser::Succession_flow_usageContext>(0);
}

SysMLv2Parser::Behavior_usage_elementContext* SysMLv2Parser::Variant_usage_elementContext::behavior_usage_element() {
  return getRuleContext<SysMLv2Parser::Behavior_usage_elementContext>(0);
}


size_t SysMLv2Parser::Variant_usage_elementContext::getRuleIndex() const {
  return SysMLv2Parser::RuleVariant_usage_element;
}

void SysMLv2Parser::Variant_usage_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVariant_usage_element(this);
}

void SysMLv2Parser::Variant_usage_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVariant_usage_element(this);
}

SysMLv2Parser::Variant_usage_elementContext* SysMLv2Parser::variant_usage_element() {
  Variant_usage_elementContext *_localctx = _tracker.createInstance<Variant_usage_elementContext>(_ctx, getState());
  enterRule(_localctx, 108, SysMLv2Parser::RuleVariant_usage_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1459);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 48, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1438);
      variant_reference();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1439);
      reference_usage();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1440);
      attribute_usage();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1441);
      binding_connector_as_usage();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1442);
      succession_as_usage();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1443);
      occurrence_usage();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1444);
      individual_usage();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1445);
      portion_usage();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(1446);
      event_occurrence_usage();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(1447);
      item_usage();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(1448);
      part_usage();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(1449);
      view_usage();
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(1450);
      rendering_usage();
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(1451);
      port_usage();
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(1452);
      connection_usage();
      break;
    }

    case 16: {
      enterOuterAlt(_localctx, 16);
      setState(1453);
      interface_usage();
      break;
    }

    case 17: {
      enterOuterAlt(_localctx, 17);
      setState(1454);
      allocation_usage();
      break;
    }

    case 18: {
      enterOuterAlt(_localctx, 18);
      setState(1455);
      message();
      break;
    }

    case 19: {
      enterOuterAlt(_localctx, 19);
      setState(1456);
      flow_usage();
      break;
    }

    case 20: {
      enterOuterAlt(_localctx, 20);
      setState(1457);
      succession_flow_usage();
      break;
    }

    case 21: {
      enterOuterAlt(_localctx, 21);
      setState(1458);
      behavior_usage_element();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Subsclassification_partContext ------------------------------------------------------------------

SysMLv2Parser::Subsclassification_partContext::Subsclassification_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Subsclassification_partContext::SPECIALIZES() {
  return getToken(SysMLv2Parser::SPECIALIZES, 0);
}

std::vector<SysMLv2Parser::Owned_subclassificationContext *> SysMLv2Parser::Subsclassification_partContext::owned_subclassification() {
  return getRuleContexts<SysMLv2Parser::Owned_subclassificationContext>();
}

SysMLv2Parser::Owned_subclassificationContext* SysMLv2Parser::Subsclassification_partContext::owned_subclassification(size_t i) {
  return getRuleContext<SysMLv2Parser::Owned_subclassificationContext>(i);
}

std::vector<tree::TerminalNode *> SysMLv2Parser::Subsclassification_partContext::SYMBOL_COMMA() {
  return getTokens(SysMLv2Parser::SYMBOL_COMMA);
}

tree::TerminalNode* SysMLv2Parser::Subsclassification_partContext::SYMBOL_COMMA(size_t i) {
  return getToken(SysMLv2Parser::SYMBOL_COMMA, i);
}


size_t SysMLv2Parser::Subsclassification_partContext::getRuleIndex() const {
  return SysMLv2Parser::RuleSubsclassification_part;
}

void SysMLv2Parser::Subsclassification_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubsclassification_part(this);
}

void SysMLv2Parser::Subsclassification_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubsclassification_part(this);
}

SysMLv2Parser::Subsclassification_partContext* SysMLv2Parser::subsclassification_part() {
  Subsclassification_partContext *_localctx = _tracker.createInstance<Subsclassification_partContext>(_ctx, getState());
  enterRule(_localctx, 110, SysMLv2Parser::RuleSubsclassification_part);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1461);
    match(SysMLv2Parser::SPECIALIZES);
    setState(1462);
    owned_subclassification();
    setState(1467);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SysMLv2Parser::SYMBOL_COMMA) {
      setState(1463);
      match(SysMLv2Parser::SYMBOL_COMMA);
      setState(1464);
      owned_subclassification();
      setState(1469);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CrossesContext ------------------------------------------------------------------

SysMLv2Parser::CrossesContext::CrossesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::CrossesContext::CROSSES() {
  return getToken(SysMLv2Parser::CROSSES, 0);
}

SysMLv2Parser::Owned_cross_subsettingContext* SysMLv2Parser::CrossesContext::owned_cross_subsetting() {
  return getRuleContext<SysMLv2Parser::Owned_cross_subsettingContext>(0);
}


size_t SysMLv2Parser::CrossesContext::getRuleIndex() const {
  return SysMLv2Parser::RuleCrosses;
}

void SysMLv2Parser::CrossesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCrosses(this);
}

void SysMLv2Parser::CrossesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCrosses(this);
}

SysMLv2Parser::CrossesContext* SysMLv2Parser::crosses() {
  CrossesContext *_localctx = _tracker.createInstance<CrossesContext>(_ctx, getState());
  enterRule(_localctx, 112, SysMLv2Parser::RuleCrosses);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1470);
    match(SysMLv2Parser::CROSSES);
    setState(1471);
    owned_cross_subsetting();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Owned_cross_subsettingContext ------------------------------------------------------------------

SysMLv2Parser::Owned_cross_subsettingContext::Owned_cross_subsettingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Qualified_nameContext* SysMLv2Parser::Owned_cross_subsettingContext::qualified_name() {
  return getRuleContext<SysMLv2Parser::Qualified_nameContext>(0);
}

SysMLv2Parser::Owned_feature_chainContext* SysMLv2Parser::Owned_cross_subsettingContext::owned_feature_chain() {
  return getRuleContext<SysMLv2Parser::Owned_feature_chainContext>(0);
}


size_t SysMLv2Parser::Owned_cross_subsettingContext::getRuleIndex() const {
  return SysMLv2Parser::RuleOwned_cross_subsetting;
}

void SysMLv2Parser::Owned_cross_subsettingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOwned_cross_subsetting(this);
}

void SysMLv2Parser::Owned_cross_subsettingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOwned_cross_subsetting(this);
}

SysMLv2Parser::Owned_cross_subsettingContext* SysMLv2Parser::owned_cross_subsetting() {
  Owned_cross_subsettingContext *_localctx = _tracker.createInstance<Owned_cross_subsettingContext>(_ctx, getState());
  enterRule(_localctx, 114, SysMLv2Parser::RuleOwned_cross_subsetting);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1475);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 50, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1473);
      qualified_name();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1474);
      owned_feature_chain();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Multiplicity_partContext ------------------------------------------------------------------

SysMLv2Parser::Multiplicity_partContext::Multiplicity_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Owned_multiplicityContext* SysMLv2Parser::Multiplicity_partContext::owned_multiplicity() {
  return getRuleContext<SysMLv2Parser::Owned_multiplicityContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Multiplicity_partContext::KEYWORD_NONUNIQUE() {
  return getToken(SysMLv2Parser::KEYWORD_NONUNIQUE, 0);
}

tree::TerminalNode* SysMLv2Parser::Multiplicity_partContext::KEYWORD_ORDERED() {
  return getToken(SysMLv2Parser::KEYWORD_ORDERED, 0);
}


size_t SysMLv2Parser::Multiplicity_partContext::getRuleIndex() const {
  return SysMLv2Parser::RuleMultiplicity_part;
}

void SysMLv2Parser::Multiplicity_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMultiplicity_part(this);
}

void SysMLv2Parser::Multiplicity_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMultiplicity_part(this);
}

SysMLv2Parser::Multiplicity_partContext* SysMLv2Parser::multiplicity_part() {
  Multiplicity_partContext *_localctx = _tracker.createInstance<Multiplicity_partContext>(_ctx, getState());
  enterRule(_localctx, 116, SysMLv2Parser::RuleMultiplicity_part);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1477);
    owned_multiplicity();
    setState(1488);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 54, _ctx)) {
    case 1: {
      setState(1479);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == SysMLv2Parser::KEYWORD_ORDERED) {
        setState(1478);
        match(SysMLv2Parser::KEYWORD_ORDERED);
      }
      setState(1482);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == SysMLv2Parser::KEYWORD_NONUNIQUE) {
        setState(1481);
        match(SysMLv2Parser::KEYWORD_NONUNIQUE);
      }
      break;
    }

    case 2: {
      setState(1484);
      match(SysMLv2Parser::KEYWORD_NONUNIQUE);
      setState(1486);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == SysMLv2Parser::KEYWORD_ORDERED) {
        setState(1485);
        match(SysMLv2Parser::KEYWORD_ORDERED);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Owned_multiplicityContext ------------------------------------------------------------------

SysMLv2Parser::Owned_multiplicityContext::Owned_multiplicityContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Multiplicity_rangeContext* SysMLv2Parser::Owned_multiplicityContext::multiplicity_range() {
  return getRuleContext<SysMLv2Parser::Multiplicity_rangeContext>(0);
}


size_t SysMLv2Parser::Owned_multiplicityContext::getRuleIndex() const {
  return SysMLv2Parser::RuleOwned_multiplicity;
}

void SysMLv2Parser::Owned_multiplicityContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOwned_multiplicity(this);
}

void SysMLv2Parser::Owned_multiplicityContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOwned_multiplicity(this);
}

SysMLv2Parser::Owned_multiplicityContext* SysMLv2Parser::owned_multiplicity() {
  Owned_multiplicityContext *_localctx = _tracker.createInstance<Owned_multiplicityContext>(_ctx, getState());
  enterRule(_localctx, 118, SysMLv2Parser::RuleOwned_multiplicity);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1490);
    multiplicity_range();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Multiplicity_rangeContext ------------------------------------------------------------------

SysMLv2Parser::Multiplicity_rangeContext::Multiplicity_rangeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Multiplicity_rangeContext::SYMBOL_SQUARE_BRACKET_OPEN() {
  return getToken(SysMLv2Parser::SYMBOL_SQUARE_BRACKET_OPEN, 0);
}

std::vector<SysMLv2Parser::Multiplicity_expression_memberContext *> SysMLv2Parser::Multiplicity_rangeContext::multiplicity_expression_member() {
  return getRuleContexts<SysMLv2Parser::Multiplicity_expression_memberContext>();
}

SysMLv2Parser::Multiplicity_expression_memberContext* SysMLv2Parser::Multiplicity_rangeContext::multiplicity_expression_member(size_t i) {
  return getRuleContext<SysMLv2Parser::Multiplicity_expression_memberContext>(i);
}

tree::TerminalNode* SysMLv2Parser::Multiplicity_rangeContext::SYMBOL_SQUARE_BRACKET_CLOSE() {
  return getToken(SysMLv2Parser::SYMBOL_SQUARE_BRACKET_CLOSE, 0);
}

tree::TerminalNode* SysMLv2Parser::Multiplicity_rangeContext::SYMBOL_DDOT() {
  return getToken(SysMLv2Parser::SYMBOL_DDOT, 0);
}


size_t SysMLv2Parser::Multiplicity_rangeContext::getRuleIndex() const {
  return SysMLv2Parser::RuleMultiplicity_range;
}

void SysMLv2Parser::Multiplicity_rangeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMultiplicity_range(this);
}

void SysMLv2Parser::Multiplicity_rangeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMultiplicity_range(this);
}

SysMLv2Parser::Multiplicity_rangeContext* SysMLv2Parser::multiplicity_range() {
  Multiplicity_rangeContext *_localctx = _tracker.createInstance<Multiplicity_rangeContext>(_ctx, getState());
  enterRule(_localctx, 120, SysMLv2Parser::RuleMultiplicity_range);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1492);
    match(SysMLv2Parser::SYMBOL_SQUARE_BRACKET_OPEN);
    setState(1496);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 55, _ctx)) {
    case 1: {
      setState(1493);
      multiplicity_expression_member();
      setState(1494);
      match(SysMLv2Parser::SYMBOL_DDOT);
      break;
    }

    default:
      break;
    }
    setState(1498);
    multiplicity_expression_member();
    setState(1499);
    match(SysMLv2Parser::SYMBOL_SQUARE_BRACKET_CLOSE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Attribute_definitionContext ------------------------------------------------------------------

SysMLv2Parser::Attribute_definitionContext::Attribute_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Definition_prefixContext* SysMLv2Parser::Attribute_definitionContext::definition_prefix() {
  return getRuleContext<SysMLv2Parser::Definition_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Attribute_definitionContext::KEYWORD_ATTRIBUTE() {
  return getToken(SysMLv2Parser::KEYWORD_ATTRIBUTE, 0);
}

tree::TerminalNode* SysMLv2Parser::Attribute_definitionContext::KEYWORD_DEF() {
  return getToken(SysMLv2Parser::KEYWORD_DEF, 0);
}

SysMLv2Parser::DefinitionContext* SysMLv2Parser::Attribute_definitionContext::definition() {
  return getRuleContext<SysMLv2Parser::DefinitionContext>(0);
}


size_t SysMLv2Parser::Attribute_definitionContext::getRuleIndex() const {
  return SysMLv2Parser::RuleAttribute_definition;
}

void SysMLv2Parser::Attribute_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAttribute_definition(this);
}

void SysMLv2Parser::Attribute_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAttribute_definition(this);
}

SysMLv2Parser::Attribute_definitionContext* SysMLv2Parser::attribute_definition() {
  Attribute_definitionContext *_localctx = _tracker.createInstance<Attribute_definitionContext>(_ctx, getState());
  enterRule(_localctx, 122, SysMLv2Parser::RuleAttribute_definition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1501);
    definition_prefix();
    setState(1502);
    match(SysMLv2Parser::KEYWORD_ATTRIBUTE);
    setState(1503);
    match(SysMLv2Parser::KEYWORD_DEF);
    setState(1504);
    definition();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Attribute_usageContext ------------------------------------------------------------------

SysMLv2Parser::Attribute_usageContext::Attribute_usageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Usage_prefixContext* SysMLv2Parser::Attribute_usageContext::usage_prefix() {
  return getRuleContext<SysMLv2Parser::Usage_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Attribute_usageContext::KEYWORD_ATTRIBUTE() {
  return getToken(SysMLv2Parser::KEYWORD_ATTRIBUTE, 0);
}

SysMLv2Parser::UsageContext* SysMLv2Parser::Attribute_usageContext::usage() {
  return getRuleContext<SysMLv2Parser::UsageContext>(0);
}


size_t SysMLv2Parser::Attribute_usageContext::getRuleIndex() const {
  return SysMLv2Parser::RuleAttribute_usage;
}

void SysMLv2Parser::Attribute_usageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAttribute_usage(this);
}

void SysMLv2Parser::Attribute_usageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAttribute_usage(this);
}

SysMLv2Parser::Attribute_usageContext* SysMLv2Parser::attribute_usage() {
  Attribute_usageContext *_localctx = _tracker.createInstance<Attribute_usageContext>(_ctx, getState());
  enterRule(_localctx, 124, SysMLv2Parser::RuleAttribute_usage);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1506);
    usage_prefix();
    setState(1507);
    match(SysMLv2Parser::KEYWORD_ATTRIBUTE);
    setState(1508);
    usage();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Enumeration_definitionContext ------------------------------------------------------------------

SysMLv2Parser::Enumeration_definitionContext::Enumeration_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Enumeration_definitionContext::KEYWORD_ENUM() {
  return getToken(SysMLv2Parser::KEYWORD_ENUM, 0);
}

tree::TerminalNode* SysMLv2Parser::Enumeration_definitionContext::KEYWORD_DEF() {
  return getToken(SysMLv2Parser::KEYWORD_DEF, 0);
}

SysMLv2Parser::Definition_declarationContext* SysMLv2Parser::Enumeration_definitionContext::definition_declaration() {
  return getRuleContext<SysMLv2Parser::Definition_declarationContext>(0);
}

SysMLv2Parser::Enumeration_bodyContext* SysMLv2Parser::Enumeration_definitionContext::enumeration_body() {
  return getRuleContext<SysMLv2Parser::Enumeration_bodyContext>(0);
}

std::vector<SysMLv2Parser::Definition_extension_keywordContext *> SysMLv2Parser::Enumeration_definitionContext::definition_extension_keyword() {
  return getRuleContexts<SysMLv2Parser::Definition_extension_keywordContext>();
}

SysMLv2Parser::Definition_extension_keywordContext* SysMLv2Parser::Enumeration_definitionContext::definition_extension_keyword(size_t i) {
  return getRuleContext<SysMLv2Parser::Definition_extension_keywordContext>(i);
}


size_t SysMLv2Parser::Enumeration_definitionContext::getRuleIndex() const {
  return SysMLv2Parser::RuleEnumeration_definition;
}

void SysMLv2Parser::Enumeration_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnumeration_definition(this);
}

void SysMLv2Parser::Enumeration_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnumeration_definition(this);
}

SysMLv2Parser::Enumeration_definitionContext* SysMLv2Parser::enumeration_definition() {
  Enumeration_definitionContext *_localctx = _tracker.createInstance<Enumeration_definitionContext>(_ctx, getState());
  enterRule(_localctx, 126, SysMLv2Parser::RuleEnumeration_definition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1513);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SysMLv2Parser::SYMBOL_HASHTAG) {
      setState(1510);
      definition_extension_keyword();
      setState(1515);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1516);
    match(SysMLv2Parser::KEYWORD_ENUM);
    setState(1517);
    match(SysMLv2Parser::KEYWORD_DEF);
    setState(1518);
    definition_declaration();
    setState(1519);
    enumeration_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Enumeration_bodyContext ------------------------------------------------------------------

SysMLv2Parser::Enumeration_bodyContext::Enumeration_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Enumeration_bodyContext::SYMBOL_STATEMENT_DELIMITER() {
  return getToken(SysMLv2Parser::SYMBOL_STATEMENT_DELIMITER, 0);
}

tree::TerminalNode* SysMLv2Parser::Enumeration_bodyContext::SYMBOL_CURLY_BRACKET_OPEN() {
  return getToken(SysMLv2Parser::SYMBOL_CURLY_BRACKET_OPEN, 0);
}

tree::TerminalNode* SysMLv2Parser::Enumeration_bodyContext::SYMBOL_CURLY_BRACKET_CLOSE() {
  return getToken(SysMLv2Parser::SYMBOL_CURLY_BRACKET_CLOSE, 0);
}

std::vector<SysMLv2Parser::Annotating_memberContext *> SysMLv2Parser::Enumeration_bodyContext::annotating_member() {
  return getRuleContexts<SysMLv2Parser::Annotating_memberContext>();
}

SysMLv2Parser::Annotating_memberContext* SysMLv2Parser::Enumeration_bodyContext::annotating_member(size_t i) {
  return getRuleContext<SysMLv2Parser::Annotating_memberContext>(i);
}

std::vector<SysMLv2Parser::Enumeration_usage_memberContext *> SysMLv2Parser::Enumeration_bodyContext::enumeration_usage_member() {
  return getRuleContexts<SysMLv2Parser::Enumeration_usage_memberContext>();
}

SysMLv2Parser::Enumeration_usage_memberContext* SysMLv2Parser::Enumeration_bodyContext::enumeration_usage_member(size_t i) {
  return getRuleContext<SysMLv2Parser::Enumeration_usage_memberContext>(i);
}


size_t SysMLv2Parser::Enumeration_bodyContext::getRuleIndex() const {
  return SysMLv2Parser::RuleEnumeration_body;
}

void SysMLv2Parser::Enumeration_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnumeration_body(this);
}

void SysMLv2Parser::Enumeration_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnumeration_body(this);
}

SysMLv2Parser::Enumeration_bodyContext* SysMLv2Parser::enumeration_body() {
  Enumeration_bodyContext *_localctx = _tracker.createInstance<Enumeration_bodyContext>(_ctx, getState());
  enterRule(_localctx, 128, SysMLv2Parser::RuleEnumeration_body);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1531);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SysMLv2Parser::SYMBOL_STATEMENT_DELIMITER: {
        enterOuterAlt(_localctx, 1);
        setState(1521);
        match(SysMLv2Parser::SYMBOL_STATEMENT_DELIMITER);
        break;
      }

      case SysMLv2Parser::SYMBOL_CURLY_BRACKET_OPEN: {
        enterOuterAlt(_localctx, 2);
        setState(1522);
        match(SysMLv2Parser::SYMBOL_CURLY_BRACKET_OPEN);
        setState(1527);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (((((_la - 32) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 32)) & 65302194596872193) != 0) || ((((_la - 102) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 102)) & 640076577383649409) != 0) || ((((_la - 181) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 181)) & 2258671867266113) != 0)) {
          setState(1525);
          _errHandler->sync(this);
          switch (_input->LA(1)) {
            case SysMLv2Parser::KEYWORD_COMMENT:
            case SysMLv2Parser::KEYWORD_DOC:
            case SysMLv2Parser::KEYWORD_LANGUAGE:
            case SysMLv2Parser::KEYWORD_METADATA:
            case SysMLv2Parser::KEYWORD_REP:
            case SysMLv2Parser::KEYWORD_LOCALE:
            case SysMLv2Parser::REGULAR_COMMENT:
            case SysMLv2Parser::SYMBOL_AT:
            case SysMLv2Parser::SYMBOL_HASHTAG: {
              setState(1523);
              annotating_member();
              break;
            }

            case SysMLv2Parser::KEYWORD_ENUM:
            case SysMLv2Parser::TYPED_BY:
            case SysMLv2Parser::SUBSETS:
            case SysMLv2Parser::REFERENCES:
            case SysMLv2Parser::REDEFINES:
            case SysMLv2Parser::KEYWORD_DEFAULT:
            case SysMLv2Parser::KEYWORD_IN:
            case SysMLv2Parser::KEYWORD_INOUT:
            case SysMLv2Parser::KEYWORD_OUT:
            case SysMLv2Parser::KEYWORD_PRIVATE:
            case SysMLv2Parser::KEYWORD_PROTECTED:
            case SysMLv2Parser::KEYWORD_PUBLIC:
            case SysMLv2Parser::SYMBOL_STATEMENT_DELIMITER:
            case SysMLv2Parser::SYMBOL_CURLY_BRACKET_OPEN:
            case SysMLv2Parser::SYMBOL_SQUARE_BRACKET_OPEN:
            case SysMLv2Parser::SYMBOL_SMALLER:
            case SysMLv2Parser::SYMBOL_DEF_ASSIGN:
            case SysMLv2Parser::SYMBOL_EQUALS:
            case SysMLv2Parser::NAME: {
              setState(1524);
              enumeration_usage_member();
              break;
            }

          default:
            throw NoViableAltException(this);
          }
          setState(1529);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(1530);
        match(SysMLv2Parser::SYMBOL_CURLY_BRACKET_CLOSE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Enumeration_usage_memberContext ------------------------------------------------------------------

SysMLv2Parser::Enumeration_usage_memberContext::Enumeration_usage_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Member_prefixContext* SysMLv2Parser::Enumeration_usage_memberContext::member_prefix() {
  return getRuleContext<SysMLv2Parser::Member_prefixContext>(0);
}

SysMLv2Parser::Enumerated_valueContext* SysMLv2Parser::Enumeration_usage_memberContext::enumerated_value() {
  return getRuleContext<SysMLv2Parser::Enumerated_valueContext>(0);
}


size_t SysMLv2Parser::Enumeration_usage_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleEnumeration_usage_member;
}

void SysMLv2Parser::Enumeration_usage_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnumeration_usage_member(this);
}

void SysMLv2Parser::Enumeration_usage_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnumeration_usage_member(this);
}

SysMLv2Parser::Enumeration_usage_memberContext* SysMLv2Parser::enumeration_usage_member() {
  Enumeration_usage_memberContext *_localctx = _tracker.createInstance<Enumeration_usage_memberContext>(_ctx, getState());
  enterRule(_localctx, 130, SysMLv2Parser::RuleEnumeration_usage_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1533);
    member_prefix();
    setState(1534);
    enumerated_value();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Enumerated_valueContext ------------------------------------------------------------------

SysMLv2Parser::Enumerated_valueContext::Enumerated_valueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::UsageContext* SysMLv2Parser::Enumerated_valueContext::usage() {
  return getRuleContext<SysMLv2Parser::UsageContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Enumerated_valueContext::KEYWORD_ENUM() {
  return getToken(SysMLv2Parser::KEYWORD_ENUM, 0);
}


size_t SysMLv2Parser::Enumerated_valueContext::getRuleIndex() const {
  return SysMLv2Parser::RuleEnumerated_value;
}

void SysMLv2Parser::Enumerated_valueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnumerated_value(this);
}

void SysMLv2Parser::Enumerated_valueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnumerated_value(this);
}

SysMLv2Parser::Enumerated_valueContext* SysMLv2Parser::enumerated_value() {
  Enumerated_valueContext *_localctx = _tracker.createInstance<Enumerated_valueContext>(_ctx, getState());
  enterRule(_localctx, 132, SysMLv2Parser::RuleEnumerated_value);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1537);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_ENUM) {
      setState(1536);
      match(SysMLv2Parser::KEYWORD_ENUM);
    }
    setState(1539);
    usage();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Enumeration_usageContext ------------------------------------------------------------------

SysMLv2Parser::Enumeration_usageContext::Enumeration_usageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Usage_prefixContext* SysMLv2Parser::Enumeration_usageContext::usage_prefix() {
  return getRuleContext<SysMLv2Parser::Usage_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Enumeration_usageContext::KEYWORD_ENUM() {
  return getToken(SysMLv2Parser::KEYWORD_ENUM, 0);
}

SysMLv2Parser::UsageContext* SysMLv2Parser::Enumeration_usageContext::usage() {
  return getRuleContext<SysMLv2Parser::UsageContext>(0);
}


size_t SysMLv2Parser::Enumeration_usageContext::getRuleIndex() const {
  return SysMLv2Parser::RuleEnumeration_usage;
}

void SysMLv2Parser::Enumeration_usageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnumeration_usage(this);
}

void SysMLv2Parser::Enumeration_usageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnumeration_usage(this);
}

SysMLv2Parser::Enumeration_usageContext* SysMLv2Parser::enumeration_usage() {
  Enumeration_usageContext *_localctx = _tracker.createInstance<Enumeration_usageContext>(_ctx, getState());
  enterRule(_localctx, 134, SysMLv2Parser::RuleEnumeration_usage);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1541);
    usage_prefix();
    setState(1542);
    match(SysMLv2Parser::KEYWORD_ENUM);
    setState(1543);
    usage();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Occurrence_definition_prefixContext ------------------------------------------------------------------

SysMLv2Parser::Occurrence_definition_prefixContext::Occurrence_definition_prefixContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Basic_definition_prefixContext* SysMLv2Parser::Occurrence_definition_prefixContext::basic_definition_prefix() {
  return getRuleContext<SysMLv2Parser::Basic_definition_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Occurrence_definition_prefixContext::KEYWORD_INDIVIDIAL() {
  return getToken(SysMLv2Parser::KEYWORD_INDIVIDIAL, 0);
}

std::vector<SysMLv2Parser::Definition_extension_keywordContext *> SysMLv2Parser::Occurrence_definition_prefixContext::definition_extension_keyword() {
  return getRuleContexts<SysMLv2Parser::Definition_extension_keywordContext>();
}

SysMLv2Parser::Definition_extension_keywordContext* SysMLv2Parser::Occurrence_definition_prefixContext::definition_extension_keyword(size_t i) {
  return getRuleContext<SysMLv2Parser::Definition_extension_keywordContext>(i);
}


size_t SysMLv2Parser::Occurrence_definition_prefixContext::getRuleIndex() const {
  return SysMLv2Parser::RuleOccurrence_definition_prefix;
}

void SysMLv2Parser::Occurrence_definition_prefixContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOccurrence_definition_prefix(this);
}

void SysMLv2Parser::Occurrence_definition_prefixContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOccurrence_definition_prefix(this);
}

SysMLv2Parser::Occurrence_definition_prefixContext* SysMLv2Parser::occurrence_definition_prefix() {
  Occurrence_definition_prefixContext *_localctx = _tracker.createInstance<Occurrence_definition_prefixContext>(_ctx, getState());
  enterRule(_localctx, 136, SysMLv2Parser::RuleOccurrence_definition_prefix);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1546);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_VARIATION

    || _la == SysMLv2Parser::KEYWORD_ABSTRACT) {
      setState(1545);
      basic_definition_prefix();
    }
    setState(1549);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_INDIVIDIAL) {
      setState(1548);
      match(SysMLv2Parser::KEYWORD_INDIVIDIAL);
    }
    setState(1554);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SysMLv2Parser::SYMBOL_HASHTAG) {
      setState(1551);
      definition_extension_keyword();
      setState(1556);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Occurrence_definitionContext ------------------------------------------------------------------

SysMLv2Parser::Occurrence_definitionContext::Occurrence_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Occurrence_definition_prefixContext* SysMLv2Parser::Occurrence_definitionContext::occurrence_definition_prefix() {
  return getRuleContext<SysMLv2Parser::Occurrence_definition_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Occurrence_definitionContext::KEYWORD_OCCURRENCE() {
  return getToken(SysMLv2Parser::KEYWORD_OCCURRENCE, 0);
}

tree::TerminalNode* SysMLv2Parser::Occurrence_definitionContext::KEYWORD_DEF() {
  return getToken(SysMLv2Parser::KEYWORD_DEF, 0);
}

SysMLv2Parser::DefinitionContext* SysMLv2Parser::Occurrence_definitionContext::definition() {
  return getRuleContext<SysMLv2Parser::DefinitionContext>(0);
}


size_t SysMLv2Parser::Occurrence_definitionContext::getRuleIndex() const {
  return SysMLv2Parser::RuleOccurrence_definition;
}

void SysMLv2Parser::Occurrence_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOccurrence_definition(this);
}

void SysMLv2Parser::Occurrence_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOccurrence_definition(this);
}

SysMLv2Parser::Occurrence_definitionContext* SysMLv2Parser::occurrence_definition() {
  Occurrence_definitionContext *_localctx = _tracker.createInstance<Occurrence_definitionContext>(_ctx, getState());
  enterRule(_localctx, 138, SysMLv2Parser::RuleOccurrence_definition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1557);
    occurrence_definition_prefix();
    setState(1558);
    match(SysMLv2Parser::KEYWORD_OCCURRENCE);
    setState(1559);
    match(SysMLv2Parser::KEYWORD_DEF);
    setState(1560);
    definition();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Individual_definitionContext ------------------------------------------------------------------

SysMLv2Parser::Individual_definitionContext::Individual_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Individual_definitionContext::KEYWORD_INDIVIDIAL() {
  return getToken(SysMLv2Parser::KEYWORD_INDIVIDIAL, 0);
}

tree::TerminalNode* SysMLv2Parser::Individual_definitionContext::KEYWORD_DEF() {
  return getToken(SysMLv2Parser::KEYWORD_DEF, 0);
}

SysMLv2Parser::DefinitionContext* SysMLv2Parser::Individual_definitionContext::definition() {
  return getRuleContext<SysMLv2Parser::DefinitionContext>(0);
}

SysMLv2Parser::Basic_definition_prefixContext* SysMLv2Parser::Individual_definitionContext::basic_definition_prefix() {
  return getRuleContext<SysMLv2Parser::Basic_definition_prefixContext>(0);
}


size_t SysMLv2Parser::Individual_definitionContext::getRuleIndex() const {
  return SysMLv2Parser::RuleIndividual_definition;
}

void SysMLv2Parser::Individual_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIndividual_definition(this);
}

void SysMLv2Parser::Individual_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIndividual_definition(this);
}

SysMLv2Parser::Individual_definitionContext* SysMLv2Parser::individual_definition() {
  Individual_definitionContext *_localctx = _tracker.createInstance<Individual_definitionContext>(_ctx, getState());
  enterRule(_localctx, 140, SysMLv2Parser::RuleIndividual_definition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1563);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_VARIATION

    || _la == SysMLv2Parser::KEYWORD_ABSTRACT) {
      setState(1562);
      basic_definition_prefix();
    }
    setState(1565);
    match(SysMLv2Parser::KEYWORD_INDIVIDIAL);
    setState(1566);
    match(SysMLv2Parser::KEYWORD_DEF);
    setState(1567);
    definition();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Occurrence_usage_prefixContext ------------------------------------------------------------------

SysMLv2Parser::Occurrence_usage_prefixContext::Occurrence_usage_prefixContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Basic_usage_prefixContext* SysMLv2Parser::Occurrence_usage_prefixContext::basic_usage_prefix() {
  return getRuleContext<SysMLv2Parser::Basic_usage_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Occurrence_usage_prefixContext::KEYWORD_INDIVIDIAL() {
  return getToken(SysMLv2Parser::KEYWORD_INDIVIDIAL, 0);
}

SysMLv2Parser::Portion_kindContext* SysMLv2Parser::Occurrence_usage_prefixContext::portion_kind() {
  return getRuleContext<SysMLv2Parser::Portion_kindContext>(0);
}

std::vector<SysMLv2Parser::Usage_extention_keywordContext *> SysMLv2Parser::Occurrence_usage_prefixContext::usage_extention_keyword() {
  return getRuleContexts<SysMLv2Parser::Usage_extention_keywordContext>();
}

SysMLv2Parser::Usage_extention_keywordContext* SysMLv2Parser::Occurrence_usage_prefixContext::usage_extention_keyword(size_t i) {
  return getRuleContext<SysMLv2Parser::Usage_extention_keywordContext>(i);
}


size_t SysMLv2Parser::Occurrence_usage_prefixContext::getRuleIndex() const {
  return SysMLv2Parser::RuleOccurrence_usage_prefix;
}

void SysMLv2Parser::Occurrence_usage_prefixContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOccurrence_usage_prefix(this);
}

void SysMLv2Parser::Occurrence_usage_prefixContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOccurrence_usage_prefix(this);
}

SysMLv2Parser::Occurrence_usage_prefixContext* SysMLv2Parser::occurrence_usage_prefix() {
  Occurrence_usage_prefixContext *_localctx = _tracker.createInstance<Occurrence_usage_prefixContext>(_ctx, getState());
  enterRule(_localctx, 142, SysMLv2Parser::RuleOccurrence_usage_prefix);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1569);
    basic_usage_prefix();
    setState(1571);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_INDIVIDIAL) {
      setState(1570);
      match(SysMLv2Parser::KEYWORD_INDIVIDIAL);
    }
    setState(1574);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_SNAPSHOT

    || _la == SysMLv2Parser::KEYWORD_TIMESLICE) {
      setState(1573);
      portion_kind();
    }
    setState(1579);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SysMLv2Parser::SYMBOL_HASHTAG) {
      setState(1576);
      usage_extention_keyword();
      setState(1581);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Occurrence_usageContext ------------------------------------------------------------------

SysMLv2Parser::Occurrence_usageContext::Occurrence_usageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Occurrence_usage_prefixContext* SysMLv2Parser::Occurrence_usageContext::occurrence_usage_prefix() {
  return getRuleContext<SysMLv2Parser::Occurrence_usage_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Occurrence_usageContext::KEYWORD_OCCURRENCE() {
  return getToken(SysMLv2Parser::KEYWORD_OCCURRENCE, 0);
}

SysMLv2Parser::UsageContext* SysMLv2Parser::Occurrence_usageContext::usage() {
  return getRuleContext<SysMLv2Parser::UsageContext>(0);
}


size_t SysMLv2Parser::Occurrence_usageContext::getRuleIndex() const {
  return SysMLv2Parser::RuleOccurrence_usage;
}

void SysMLv2Parser::Occurrence_usageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOccurrence_usage(this);
}

void SysMLv2Parser::Occurrence_usageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOccurrence_usage(this);
}

SysMLv2Parser::Occurrence_usageContext* SysMLv2Parser::occurrence_usage() {
  Occurrence_usageContext *_localctx = _tracker.createInstance<Occurrence_usageContext>(_ctx, getState());
  enterRule(_localctx, 144, SysMLv2Parser::RuleOccurrence_usage);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1582);
    occurrence_usage_prefix();
    setState(1583);
    match(SysMLv2Parser::KEYWORD_OCCURRENCE);
    setState(1584);
    usage();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Individual_usageContext ------------------------------------------------------------------

SysMLv2Parser::Individual_usageContext::Individual_usageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Basic_usage_prefixContext* SysMLv2Parser::Individual_usageContext::basic_usage_prefix() {
  return getRuleContext<SysMLv2Parser::Basic_usage_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Individual_usageContext::KEYWORD_INDIVIDIAL() {
  return getToken(SysMLv2Parser::KEYWORD_INDIVIDIAL, 0);
}

SysMLv2Parser::UsageContext* SysMLv2Parser::Individual_usageContext::usage() {
  return getRuleContext<SysMLv2Parser::UsageContext>(0);
}

SysMLv2Parser::Portion_kindContext* SysMLv2Parser::Individual_usageContext::portion_kind() {
  return getRuleContext<SysMLv2Parser::Portion_kindContext>(0);
}

std::vector<SysMLv2Parser::Usage_extention_keywordContext *> SysMLv2Parser::Individual_usageContext::usage_extention_keyword() {
  return getRuleContexts<SysMLv2Parser::Usage_extention_keywordContext>();
}

SysMLv2Parser::Usage_extention_keywordContext* SysMLv2Parser::Individual_usageContext::usage_extention_keyword(size_t i) {
  return getRuleContext<SysMLv2Parser::Usage_extention_keywordContext>(i);
}


size_t SysMLv2Parser::Individual_usageContext::getRuleIndex() const {
  return SysMLv2Parser::RuleIndividual_usage;
}

void SysMLv2Parser::Individual_usageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIndividual_usage(this);
}

void SysMLv2Parser::Individual_usageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIndividual_usage(this);
}

SysMLv2Parser::Individual_usageContext* SysMLv2Parser::individual_usage() {
  Individual_usageContext *_localctx = _tracker.createInstance<Individual_usageContext>(_ctx, getState());
  enterRule(_localctx, 146, SysMLv2Parser::RuleIndividual_usage);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1586);
    basic_usage_prefix();
    setState(1587);
    match(SysMLv2Parser::KEYWORD_INDIVIDIAL);
    setState(1589);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_SNAPSHOT

    || _la == SysMLv2Parser::KEYWORD_TIMESLICE) {
      setState(1588);
      portion_kind();
    }
    setState(1594);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SysMLv2Parser::SYMBOL_HASHTAG) {
      setState(1591);
      usage_extention_keyword();
      setState(1596);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1597);
    usage();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Portion_usageContext ------------------------------------------------------------------

SysMLv2Parser::Portion_usageContext::Portion_usageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Basic_usage_prefixContext* SysMLv2Parser::Portion_usageContext::basic_usage_prefix() {
  return getRuleContext<SysMLv2Parser::Basic_usage_prefixContext>(0);
}

SysMLv2Parser::Portion_kindContext* SysMLv2Parser::Portion_usageContext::portion_kind() {
  return getRuleContext<SysMLv2Parser::Portion_kindContext>(0);
}

SysMLv2Parser::UsageContext* SysMLv2Parser::Portion_usageContext::usage() {
  return getRuleContext<SysMLv2Parser::UsageContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Portion_usageContext::KEYWORD_INDIVIDIAL() {
  return getToken(SysMLv2Parser::KEYWORD_INDIVIDIAL, 0);
}

std::vector<SysMLv2Parser::Usage_extention_keywordContext *> SysMLv2Parser::Portion_usageContext::usage_extention_keyword() {
  return getRuleContexts<SysMLv2Parser::Usage_extention_keywordContext>();
}

SysMLv2Parser::Usage_extention_keywordContext* SysMLv2Parser::Portion_usageContext::usage_extention_keyword(size_t i) {
  return getRuleContext<SysMLv2Parser::Usage_extention_keywordContext>(i);
}


size_t SysMLv2Parser::Portion_usageContext::getRuleIndex() const {
  return SysMLv2Parser::RulePortion_usage;
}

void SysMLv2Parser::Portion_usageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPortion_usage(this);
}

void SysMLv2Parser::Portion_usageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPortion_usage(this);
}

SysMLv2Parser::Portion_usageContext* SysMLv2Parser::portion_usage() {
  Portion_usageContext *_localctx = _tracker.createInstance<Portion_usageContext>(_ctx, getState());
  enterRule(_localctx, 148, SysMLv2Parser::RulePortion_usage);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1599);
    basic_usage_prefix();
    setState(1601);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_INDIVIDIAL) {
      setState(1600);
      match(SysMLv2Parser::KEYWORD_INDIVIDIAL);
    }
    setState(1603);
    portion_kind();
    setState(1607);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SysMLv2Parser::SYMBOL_HASHTAG) {
      setState(1604);
      usage_extention_keyword();
      setState(1609);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1610);
    usage();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Portion_kindContext ------------------------------------------------------------------

SysMLv2Parser::Portion_kindContext::Portion_kindContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Portion_kindContext::KEYWORD_SNAPSHOT() {
  return getToken(SysMLv2Parser::KEYWORD_SNAPSHOT, 0);
}

tree::TerminalNode* SysMLv2Parser::Portion_kindContext::KEYWORD_TIMESLICE() {
  return getToken(SysMLv2Parser::KEYWORD_TIMESLICE, 0);
}


size_t SysMLv2Parser::Portion_kindContext::getRuleIndex() const {
  return SysMLv2Parser::RulePortion_kind;
}

void SysMLv2Parser::Portion_kindContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPortion_kind(this);
}

void SysMLv2Parser::Portion_kindContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPortion_kind(this);
}

SysMLv2Parser::Portion_kindContext* SysMLv2Parser::portion_kind() {
  Portion_kindContext *_localctx = _tracker.createInstance<Portion_kindContext>(_ctx, getState());
  enterRule(_localctx, 150, SysMLv2Parser::RulePortion_kind);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1612);
    _la = _input->LA(1);
    if (!(_la == SysMLv2Parser::KEYWORD_SNAPSHOT

    || _la == SysMLv2Parser::KEYWORD_TIMESLICE)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Event_occurrence_usageContext ------------------------------------------------------------------

SysMLv2Parser::Event_occurrence_usageContext::Event_occurrence_usageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Occurrence_usage_prefixContext* SysMLv2Parser::Event_occurrence_usageContext::occurrence_usage_prefix() {
  return getRuleContext<SysMLv2Parser::Occurrence_usage_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Event_occurrence_usageContext::KEYWORD_EVENT() {
  return getToken(SysMLv2Parser::KEYWORD_EVENT, 0);
}

SysMLv2Parser::Usage_completionContext* SysMLv2Parser::Event_occurrence_usageContext::usage_completion() {
  return getRuleContext<SysMLv2Parser::Usage_completionContext>(0);
}

SysMLv2Parser::Owned_reference_subsettingContext* SysMLv2Parser::Event_occurrence_usageContext::owned_reference_subsetting() {
  return getRuleContext<SysMLv2Parser::Owned_reference_subsettingContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Event_occurrence_usageContext::KEYWORD_OCCURRENCE() {
  return getToken(SysMLv2Parser::KEYWORD_OCCURRENCE, 0);
}

SysMLv2Parser::Usage_declarationContext* SysMLv2Parser::Event_occurrence_usageContext::usage_declaration() {
  return getRuleContext<SysMLv2Parser::Usage_declarationContext>(0);
}

SysMLv2Parser::Feature_specialization_partContext* SysMLv2Parser::Event_occurrence_usageContext::feature_specialization_part() {
  return getRuleContext<SysMLv2Parser::Feature_specialization_partContext>(0);
}


size_t SysMLv2Parser::Event_occurrence_usageContext::getRuleIndex() const {
  return SysMLv2Parser::RuleEvent_occurrence_usage;
}

void SysMLv2Parser::Event_occurrence_usageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEvent_occurrence_usage(this);
}

void SysMLv2Parser::Event_occurrence_usageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEvent_occurrence_usage(this);
}

SysMLv2Parser::Event_occurrence_usageContext* SysMLv2Parser::event_occurrence_usage() {
  Event_occurrence_usageContext *_localctx = _tracker.createInstance<Event_occurrence_usageContext>(_ctx, getState());
  enterRule(_localctx, 152, SysMLv2Parser::RuleEvent_occurrence_usage);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1614);
    occurrence_usage_prefix();
    setState(1615);
    match(SysMLv2Parser::KEYWORD_EVENT);
    setState(1622);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SysMLv2Parser::NAME: {
        setState(1616);
        owned_reference_subsetting();
        setState(1618);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (((((_la - 83) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 83)) & 3377699720527901) != 0) || _la == SysMLv2Parser::KEYWORD_OUT

        || _la == SysMLv2Parser::SYMBOL_SQUARE_BRACKET_OPEN) {
          setState(1617);
          feature_specialization_part();
        }
        break;
      }

      case SysMLv2Parser::KEYWORD_OCCURRENCE: {
        setState(1620);
        match(SysMLv2Parser::KEYWORD_OCCURRENCE);
        setState(1621);
        usage_declaration();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(1624);
    usage_completion();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Source_succession_memberContext ------------------------------------------------------------------

SysMLv2Parser::Source_succession_memberContext::Source_succession_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Source_succession_memberContext::KEYWORD_THEN() {
  return getToken(SysMLv2Parser::KEYWORD_THEN, 0);
}

SysMLv2Parser::Souce_successionContext* SysMLv2Parser::Source_succession_memberContext::souce_succession() {
  return getRuleContext<SysMLv2Parser::Souce_successionContext>(0);
}


size_t SysMLv2Parser::Source_succession_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleSource_succession_member;
}

void SysMLv2Parser::Source_succession_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSource_succession_member(this);
}

void SysMLv2Parser::Source_succession_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSource_succession_member(this);
}

SysMLv2Parser::Source_succession_memberContext* SysMLv2Parser::source_succession_member() {
  Source_succession_memberContext *_localctx = _tracker.createInstance<Source_succession_memberContext>(_ctx, getState());
  enterRule(_localctx, 154, SysMLv2Parser::RuleSource_succession_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1626);
    match(SysMLv2Parser::KEYWORD_THEN);
    setState(1627);
    souce_succession();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Souce_successionContext ------------------------------------------------------------------

SysMLv2Parser::Souce_successionContext::Souce_successionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Source_end_memberContext* SysMLv2Parser::Souce_successionContext::source_end_member() {
  return getRuleContext<SysMLv2Parser::Source_end_memberContext>(0);
}


size_t SysMLv2Parser::Souce_successionContext::getRuleIndex() const {
  return SysMLv2Parser::RuleSouce_succession;
}

void SysMLv2Parser::Souce_successionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSouce_succession(this);
}

void SysMLv2Parser::Souce_successionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSouce_succession(this);
}

SysMLv2Parser::Souce_successionContext* SysMLv2Parser::souce_succession() {
  Souce_successionContext *_localctx = _tracker.createInstance<Souce_successionContext>(_ctx, getState());
  enterRule(_localctx, 156, SysMLv2Parser::RuleSouce_succession);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1629);
    source_end_member();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Source_end_memberContext ------------------------------------------------------------------

SysMLv2Parser::Source_end_memberContext::Source_end_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Source_endContext* SysMLv2Parser::Source_end_memberContext::source_end() {
  return getRuleContext<SysMLv2Parser::Source_endContext>(0);
}


size_t SysMLv2Parser::Source_end_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleSource_end_member;
}

void SysMLv2Parser::Source_end_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSource_end_member(this);
}

void SysMLv2Parser::Source_end_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSource_end_member(this);
}

SysMLv2Parser::Source_end_memberContext* SysMLv2Parser::source_end_member() {
  Source_end_memberContext *_localctx = _tracker.createInstance<Source_end_memberContext>(_ctx, getState());
  enterRule(_localctx, 158, SysMLv2Parser::RuleSource_end_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1631);
    source_end();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Source_endContext ------------------------------------------------------------------

SysMLv2Parser::Source_endContext::Source_endContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Owned_multiplicityContext* SysMLv2Parser::Source_endContext::owned_multiplicity() {
  return getRuleContext<SysMLv2Parser::Owned_multiplicityContext>(0);
}


size_t SysMLv2Parser::Source_endContext::getRuleIndex() const {
  return SysMLv2Parser::RuleSource_end;
}

void SysMLv2Parser::Source_endContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSource_end(this);
}

void SysMLv2Parser::Source_endContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSource_end(this);
}

SysMLv2Parser::Source_endContext* SysMLv2Parser::source_end() {
  Source_endContext *_localctx = _tracker.createInstance<Source_endContext>(_ctx, getState());
  enterRule(_localctx, 160, SysMLv2Parser::RuleSource_end);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1634);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 74, _ctx)) {
    case 1: {
      setState(1633);
      owned_multiplicity();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Item_definitionContext ------------------------------------------------------------------

SysMLv2Parser::Item_definitionContext::Item_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Occurrence_definition_prefixContext* SysMLv2Parser::Item_definitionContext::occurrence_definition_prefix() {
  return getRuleContext<SysMLv2Parser::Occurrence_definition_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Item_definitionContext::KEYWORD_ITEM() {
  return getToken(SysMLv2Parser::KEYWORD_ITEM, 0);
}

tree::TerminalNode* SysMLv2Parser::Item_definitionContext::KEYWORD_DEF() {
  return getToken(SysMLv2Parser::KEYWORD_DEF, 0);
}

SysMLv2Parser::DefinitionContext* SysMLv2Parser::Item_definitionContext::definition() {
  return getRuleContext<SysMLv2Parser::DefinitionContext>(0);
}


size_t SysMLv2Parser::Item_definitionContext::getRuleIndex() const {
  return SysMLv2Parser::RuleItem_definition;
}

void SysMLv2Parser::Item_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterItem_definition(this);
}

void SysMLv2Parser::Item_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitItem_definition(this);
}

SysMLv2Parser::Item_definitionContext* SysMLv2Parser::item_definition() {
  Item_definitionContext *_localctx = _tracker.createInstance<Item_definitionContext>(_ctx, getState());
  enterRule(_localctx, 162, SysMLv2Parser::RuleItem_definition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1636);
    occurrence_definition_prefix();
    setState(1637);
    match(SysMLv2Parser::KEYWORD_ITEM);
    setState(1638);
    match(SysMLv2Parser::KEYWORD_DEF);
    setState(1639);
    definition();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Item_usageContext ------------------------------------------------------------------

SysMLv2Parser::Item_usageContext::Item_usageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Occurrence_usage_prefixContext* SysMLv2Parser::Item_usageContext::occurrence_usage_prefix() {
  return getRuleContext<SysMLv2Parser::Occurrence_usage_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Item_usageContext::KEYWORD_ITEM() {
  return getToken(SysMLv2Parser::KEYWORD_ITEM, 0);
}

SysMLv2Parser::UsageContext* SysMLv2Parser::Item_usageContext::usage() {
  return getRuleContext<SysMLv2Parser::UsageContext>(0);
}


size_t SysMLv2Parser::Item_usageContext::getRuleIndex() const {
  return SysMLv2Parser::RuleItem_usage;
}

void SysMLv2Parser::Item_usageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterItem_usage(this);
}

void SysMLv2Parser::Item_usageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitItem_usage(this);
}

SysMLv2Parser::Item_usageContext* SysMLv2Parser::item_usage() {
  Item_usageContext *_localctx = _tracker.createInstance<Item_usageContext>(_ctx, getState());
  enterRule(_localctx, 164, SysMLv2Parser::RuleItem_usage);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1641);
    occurrence_usage_prefix();
    setState(1642);
    match(SysMLv2Parser::KEYWORD_ITEM);
    setState(1643);
    usage();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Part_definitionContext ------------------------------------------------------------------

SysMLv2Parser::Part_definitionContext::Part_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Occurrence_definition_prefixContext* SysMLv2Parser::Part_definitionContext::occurrence_definition_prefix() {
  return getRuleContext<SysMLv2Parser::Occurrence_definition_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Part_definitionContext::KEYWORD_PART() {
  return getToken(SysMLv2Parser::KEYWORD_PART, 0);
}

tree::TerminalNode* SysMLv2Parser::Part_definitionContext::KEYWORD_DEF() {
  return getToken(SysMLv2Parser::KEYWORD_DEF, 0);
}

SysMLv2Parser::DefinitionContext* SysMLv2Parser::Part_definitionContext::definition() {
  return getRuleContext<SysMLv2Parser::DefinitionContext>(0);
}


size_t SysMLv2Parser::Part_definitionContext::getRuleIndex() const {
  return SysMLv2Parser::RulePart_definition;
}

void SysMLv2Parser::Part_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPart_definition(this);
}

void SysMLv2Parser::Part_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPart_definition(this);
}

SysMLv2Parser::Part_definitionContext* SysMLv2Parser::part_definition() {
  Part_definitionContext *_localctx = _tracker.createInstance<Part_definitionContext>(_ctx, getState());
  enterRule(_localctx, 166, SysMLv2Parser::RulePart_definition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1645);
    occurrence_definition_prefix();
    setState(1646);
    match(SysMLv2Parser::KEYWORD_PART);
    setState(1647);
    match(SysMLv2Parser::KEYWORD_DEF);
    setState(1648);
    definition();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Part_usageContext ------------------------------------------------------------------

SysMLv2Parser::Part_usageContext::Part_usageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Occurrence_usage_prefixContext* SysMLv2Parser::Part_usageContext::occurrence_usage_prefix() {
  return getRuleContext<SysMLv2Parser::Occurrence_usage_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Part_usageContext::KEYWORD_PART() {
  return getToken(SysMLv2Parser::KEYWORD_PART, 0);
}

SysMLv2Parser::UsageContext* SysMLv2Parser::Part_usageContext::usage() {
  return getRuleContext<SysMLv2Parser::UsageContext>(0);
}


size_t SysMLv2Parser::Part_usageContext::getRuleIndex() const {
  return SysMLv2Parser::RulePart_usage;
}

void SysMLv2Parser::Part_usageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPart_usage(this);
}

void SysMLv2Parser::Part_usageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPart_usage(this);
}

SysMLv2Parser::Part_usageContext* SysMLv2Parser::part_usage() {
  Part_usageContext *_localctx = _tracker.createInstance<Part_usageContext>(_ctx, getState());
  enterRule(_localctx, 168, SysMLv2Parser::RulePart_usage);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1650);
    occurrence_usage_prefix();
    setState(1651);
    match(SysMLv2Parser::KEYWORD_PART);
    setState(1652);
    usage();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Port_definitionContext ------------------------------------------------------------------

SysMLv2Parser::Port_definitionContext::Port_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Definition_prefixContext* SysMLv2Parser::Port_definitionContext::definition_prefix() {
  return getRuleContext<SysMLv2Parser::Definition_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Port_definitionContext::KEYWORD_PORT() {
  return getToken(SysMLv2Parser::KEYWORD_PORT, 0);
}

tree::TerminalNode* SysMLv2Parser::Port_definitionContext::KEYWORD_DEF() {
  return getToken(SysMLv2Parser::KEYWORD_DEF, 0);
}

SysMLv2Parser::DefinitionContext* SysMLv2Parser::Port_definitionContext::definition() {
  return getRuleContext<SysMLv2Parser::DefinitionContext>(0);
}


size_t SysMLv2Parser::Port_definitionContext::getRuleIndex() const {
  return SysMLv2Parser::RulePort_definition;
}

void SysMLv2Parser::Port_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPort_definition(this);
}

void SysMLv2Parser::Port_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPort_definition(this);
}

SysMLv2Parser::Port_definitionContext* SysMLv2Parser::port_definition() {
  Port_definitionContext *_localctx = _tracker.createInstance<Port_definitionContext>(_ctx, getState());
  enterRule(_localctx, 170, SysMLv2Parser::RulePort_definition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1654);
    definition_prefix();
    setState(1655);
    match(SysMLv2Parser::KEYWORD_PORT);
    setState(1656);
    match(SysMLv2Parser::KEYWORD_DEF);
    setState(1657);
    definition();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Port_usageContext ------------------------------------------------------------------

SysMLv2Parser::Port_usageContext::Port_usageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Occurrence_usage_prefixContext* SysMLv2Parser::Port_usageContext::occurrence_usage_prefix() {
  return getRuleContext<SysMLv2Parser::Occurrence_usage_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Port_usageContext::KEYWORD_PORT() {
  return getToken(SysMLv2Parser::KEYWORD_PORT, 0);
}

SysMLv2Parser::UsageContext* SysMLv2Parser::Port_usageContext::usage() {
  return getRuleContext<SysMLv2Parser::UsageContext>(0);
}


size_t SysMLv2Parser::Port_usageContext::getRuleIndex() const {
  return SysMLv2Parser::RulePort_usage;
}

void SysMLv2Parser::Port_usageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPort_usage(this);
}

void SysMLv2Parser::Port_usageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPort_usage(this);
}

SysMLv2Parser::Port_usageContext* SysMLv2Parser::port_usage() {
  Port_usageContext *_localctx = _tracker.createInstance<Port_usageContext>(_ctx, getState());
  enterRule(_localctx, 172, SysMLv2Parser::RulePort_usage);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1659);
    occurrence_usage_prefix();
    setState(1660);
    match(SysMLv2Parser::KEYWORD_PORT);
    setState(1661);
    usage();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Conjungated_port_typingContext ------------------------------------------------------------------

SysMLv2Parser::Conjungated_port_typingContext::Conjungated_port_typingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Conjungated_port_typingContext::SYMBOL_CONJUNGATES() {
  return getToken(SysMLv2Parser::SYMBOL_CONJUNGATES, 0);
}

SysMLv2Parser::Qualified_nameContext* SysMLv2Parser::Conjungated_port_typingContext::qualified_name() {
  return getRuleContext<SysMLv2Parser::Qualified_nameContext>(0);
}


size_t SysMLv2Parser::Conjungated_port_typingContext::getRuleIndex() const {
  return SysMLv2Parser::RuleConjungated_port_typing;
}

void SysMLv2Parser::Conjungated_port_typingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConjungated_port_typing(this);
}

void SysMLv2Parser::Conjungated_port_typingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConjungated_port_typing(this);
}

SysMLv2Parser::Conjungated_port_typingContext* SysMLv2Parser::conjungated_port_typing() {
  Conjungated_port_typingContext *_localctx = _tracker.createInstance<Conjungated_port_typingContext>(_ctx, getState());
  enterRule(_localctx, 174, SysMLv2Parser::RuleConjungated_port_typing);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1663);
    match(SysMLv2Parser::SYMBOL_CONJUNGATES);
    setState(1664);
    qualified_name();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Connection_definitionContext ------------------------------------------------------------------

SysMLv2Parser::Connection_definitionContext::Connection_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Occurrence_definition_prefixContext* SysMLv2Parser::Connection_definitionContext::occurrence_definition_prefix() {
  return getRuleContext<SysMLv2Parser::Occurrence_definition_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Connection_definitionContext::KEYWORD_CONNECTION() {
  return getToken(SysMLv2Parser::KEYWORD_CONNECTION, 0);
}

tree::TerminalNode* SysMLv2Parser::Connection_definitionContext::KEYWORD_DEF() {
  return getToken(SysMLv2Parser::KEYWORD_DEF, 0);
}

SysMLv2Parser::DefinitionContext* SysMLv2Parser::Connection_definitionContext::definition() {
  return getRuleContext<SysMLv2Parser::DefinitionContext>(0);
}


size_t SysMLv2Parser::Connection_definitionContext::getRuleIndex() const {
  return SysMLv2Parser::RuleConnection_definition;
}

void SysMLv2Parser::Connection_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConnection_definition(this);
}

void SysMLv2Parser::Connection_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConnection_definition(this);
}

SysMLv2Parser::Connection_definitionContext* SysMLv2Parser::connection_definition() {
  Connection_definitionContext *_localctx = _tracker.createInstance<Connection_definitionContext>(_ctx, getState());
  enterRule(_localctx, 176, SysMLv2Parser::RuleConnection_definition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1666);
    occurrence_definition_prefix();
    setState(1667);
    match(SysMLv2Parser::KEYWORD_CONNECTION);
    setState(1668);
    match(SysMLv2Parser::KEYWORD_DEF);
    setState(1669);
    definition();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Connection_usageContext ------------------------------------------------------------------

SysMLv2Parser::Connection_usageContext::Connection_usageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Occurrence_usage_prefixContext* SysMLv2Parser::Connection_usageContext::occurrence_usage_prefix() {
  return getRuleContext<SysMLv2Parser::Occurrence_usage_prefixContext>(0);
}

SysMLv2Parser::Usage_bodyContext* SysMLv2Parser::Connection_usageContext::usage_body() {
  return getRuleContext<SysMLv2Parser::Usage_bodyContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Connection_usageContext::KEYWORD_CONNECTION() {
  return getToken(SysMLv2Parser::KEYWORD_CONNECTION, 0);
}

SysMLv2Parser::Usage_declarationContext* SysMLv2Parser::Connection_usageContext::usage_declaration() {
  return getRuleContext<SysMLv2Parser::Usage_declarationContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Connection_usageContext::KEYWORD_CONNECT() {
  return getToken(SysMLv2Parser::KEYWORD_CONNECT, 0);
}

SysMLv2Parser::Connector_partContext* SysMLv2Parser::Connection_usageContext::connector_part() {
  return getRuleContext<SysMLv2Parser::Connector_partContext>(0);
}

SysMLv2Parser::Value_partContext* SysMLv2Parser::Connection_usageContext::value_part() {
  return getRuleContext<SysMLv2Parser::Value_partContext>(0);
}


size_t SysMLv2Parser::Connection_usageContext::getRuleIndex() const {
  return SysMLv2Parser::RuleConnection_usage;
}

void SysMLv2Parser::Connection_usageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConnection_usage(this);
}

void SysMLv2Parser::Connection_usageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConnection_usage(this);
}

SysMLv2Parser::Connection_usageContext* SysMLv2Parser::connection_usage() {
  Connection_usageContext *_localctx = _tracker.createInstance<Connection_usageContext>(_ctx, getState());
  enterRule(_localctx, 178, SysMLv2Parser::RuleConnection_usage);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1671);
    occurrence_usage_prefix();
    setState(1683);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SysMLv2Parser::KEYWORD_CONNECTION: {
        setState(1672);
        match(SysMLv2Parser::KEYWORD_CONNECTION);
        setState(1673);
        usage_declaration();
        setState(1675);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == SysMLv2Parser::KEYWORD_DEFAULT || _la == SysMLv2Parser::SYMBOL_DEF_ASSIGN

        || _la == SysMLv2Parser::SYMBOL_EQUALS) {
          setState(1674);
          value_part();
        }
        setState(1679);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == SysMLv2Parser::KEYWORD_CONNECT) {
          setState(1677);
          match(SysMLv2Parser::KEYWORD_CONNECT);
          setState(1678);
          connector_part();
        }
        break;
      }

      case SysMLv2Parser::KEYWORD_CONNECT: {
        setState(1681);
        match(SysMLv2Parser::KEYWORD_CONNECT);
        setState(1682);
        connector_part();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(1685);
    usage_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Connector_partContext ------------------------------------------------------------------

SysMLv2Parser::Connector_partContext::Connector_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Binary_connector_partContext* SysMLv2Parser::Connector_partContext::binary_connector_part() {
  return getRuleContext<SysMLv2Parser::Binary_connector_partContext>(0);
}

SysMLv2Parser::Nary_connector_partContext* SysMLv2Parser::Connector_partContext::nary_connector_part() {
  return getRuleContext<SysMLv2Parser::Nary_connector_partContext>(0);
}


size_t SysMLv2Parser::Connector_partContext::getRuleIndex() const {
  return SysMLv2Parser::RuleConnector_part;
}

void SysMLv2Parser::Connector_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConnector_part(this);
}

void SysMLv2Parser::Connector_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConnector_part(this);
}

SysMLv2Parser::Connector_partContext* SysMLv2Parser::connector_part() {
  Connector_partContext *_localctx = _tracker.createInstance<Connector_partContext>(_ctx, getState());
  enterRule(_localctx, 180, SysMLv2Parser::RuleConnector_part);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1689);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SysMLv2Parser::SYMBOL_SQUARE_BRACKET_OPEN:
      case SysMLv2Parser::NAME: {
        enterOuterAlt(_localctx, 1);
        setState(1687);
        binary_connector_part();
        break;
      }

      case SysMLv2Parser::SYMBOL_ROUND_BRACKET_OPEN: {
        enterOuterAlt(_localctx, 2);
        setState(1688);
        nary_connector_part();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Binary_connector_partContext ------------------------------------------------------------------

SysMLv2Parser::Binary_connector_partContext::Binary_connector_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<SysMLv2Parser::Connector_end_memberContext *> SysMLv2Parser::Binary_connector_partContext::connector_end_member() {
  return getRuleContexts<SysMLv2Parser::Connector_end_memberContext>();
}

SysMLv2Parser::Connector_end_memberContext* SysMLv2Parser::Binary_connector_partContext::connector_end_member(size_t i) {
  return getRuleContext<SysMLv2Parser::Connector_end_memberContext>(i);
}

tree::TerminalNode* SysMLv2Parser::Binary_connector_partContext::KEYWORD_TO() {
  return getToken(SysMLv2Parser::KEYWORD_TO, 0);
}


size_t SysMLv2Parser::Binary_connector_partContext::getRuleIndex() const {
  return SysMLv2Parser::RuleBinary_connector_part;
}

void SysMLv2Parser::Binary_connector_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBinary_connector_part(this);
}

void SysMLv2Parser::Binary_connector_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBinary_connector_part(this);
}

SysMLv2Parser::Binary_connector_partContext* SysMLv2Parser::binary_connector_part() {
  Binary_connector_partContext *_localctx = _tracker.createInstance<Binary_connector_partContext>(_ctx, getState());
  enterRule(_localctx, 182, SysMLv2Parser::RuleBinary_connector_part);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1691);
    connector_end_member();
    setState(1692);
    match(SysMLv2Parser::KEYWORD_TO);
    setState(1693);
    connector_end_member();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Nary_connector_partContext ------------------------------------------------------------------

SysMLv2Parser::Nary_connector_partContext::Nary_connector_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Nary_connector_partContext::SYMBOL_ROUND_BRACKET_OPEN() {
  return getToken(SysMLv2Parser::SYMBOL_ROUND_BRACKET_OPEN, 0);
}

std::vector<SysMLv2Parser::Connector_end_memberContext *> SysMLv2Parser::Nary_connector_partContext::connector_end_member() {
  return getRuleContexts<SysMLv2Parser::Connector_end_memberContext>();
}

SysMLv2Parser::Connector_end_memberContext* SysMLv2Parser::Nary_connector_partContext::connector_end_member(size_t i) {
  return getRuleContext<SysMLv2Parser::Connector_end_memberContext>(i);
}

tree::TerminalNode* SysMLv2Parser::Nary_connector_partContext::SYMBOL_ROUND_BRACKET_CLOSE() {
  return getToken(SysMLv2Parser::SYMBOL_ROUND_BRACKET_CLOSE, 0);
}

std::vector<tree::TerminalNode *> SysMLv2Parser::Nary_connector_partContext::SYMBOL_COMMA() {
  return getTokens(SysMLv2Parser::SYMBOL_COMMA);
}

tree::TerminalNode* SysMLv2Parser::Nary_connector_partContext::SYMBOL_COMMA(size_t i) {
  return getToken(SysMLv2Parser::SYMBOL_COMMA, i);
}


size_t SysMLv2Parser::Nary_connector_partContext::getRuleIndex() const {
  return SysMLv2Parser::RuleNary_connector_part;
}

void SysMLv2Parser::Nary_connector_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNary_connector_part(this);
}

void SysMLv2Parser::Nary_connector_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNary_connector_part(this);
}

SysMLv2Parser::Nary_connector_partContext* SysMLv2Parser::nary_connector_part() {
  Nary_connector_partContext *_localctx = _tracker.createInstance<Nary_connector_partContext>(_ctx, getState());
  enterRule(_localctx, 184, SysMLv2Parser::RuleNary_connector_part);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1695);
    match(SysMLv2Parser::SYMBOL_ROUND_BRACKET_OPEN);
    setState(1696);
    connector_end_member();
    setState(1699); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1697);
      match(SysMLv2Parser::SYMBOL_COMMA);
      setState(1698);
      connector_end_member();
      setState(1701); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == SysMLv2Parser::SYMBOL_COMMA);
    setState(1703);
    match(SysMLv2Parser::SYMBOL_ROUND_BRACKET_CLOSE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Connector_end_memberContext ------------------------------------------------------------------

SysMLv2Parser::Connector_end_memberContext::Connector_end_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Connector_endContext* SysMLv2Parser::Connector_end_memberContext::connector_end() {
  return getRuleContext<SysMLv2Parser::Connector_endContext>(0);
}


size_t SysMLv2Parser::Connector_end_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleConnector_end_member;
}

void SysMLv2Parser::Connector_end_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConnector_end_member(this);
}

void SysMLv2Parser::Connector_end_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConnector_end_member(this);
}

SysMLv2Parser::Connector_end_memberContext* SysMLv2Parser::connector_end_member() {
  Connector_end_memberContext *_localctx = _tracker.createInstance<Connector_end_memberContext>(_ctx, getState());
  enterRule(_localctx, 186, SysMLv2Parser::RuleConnector_end_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1705);
    connector_end();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Connecotr_endContext ------------------------------------------------------------------

SysMLv2Parser::Connecotr_endContext::Connecotr_endContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Owned_reference_subsettingContext* SysMLv2Parser::Connecotr_endContext::owned_reference_subsetting() {
  return getRuleContext<SysMLv2Parser::Owned_reference_subsettingContext>(0);
}

SysMLv2Parser::Owned_cross_multiplicity_memberContext* SysMLv2Parser::Connecotr_endContext::owned_cross_multiplicity_member() {
  return getRuleContext<SysMLv2Parser::Owned_cross_multiplicity_memberContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Connecotr_endContext::REFERENCES() {
  return getToken(SysMLv2Parser::REFERENCES, 0);
}

tree::TerminalNode* SysMLv2Parser::Connecotr_endContext::NAME() {
  return getToken(SysMLv2Parser::NAME, 0);
}


size_t SysMLv2Parser::Connecotr_endContext::getRuleIndex() const {
  return SysMLv2Parser::RuleConnecotr_end;
}

void SysMLv2Parser::Connecotr_endContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConnecotr_end(this);
}

void SysMLv2Parser::Connecotr_endContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConnecotr_end(this);
}

SysMLv2Parser::Connecotr_endContext* SysMLv2Parser::connecotr_end() {
  Connecotr_endContext *_localctx = _tracker.createInstance<Connecotr_endContext>(_ctx, getState());
  enterRule(_localctx, 188, SysMLv2Parser::RuleConnecotr_end);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1708);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::SYMBOL_SQUARE_BRACKET_OPEN) {
      setState(1707);
      owned_cross_multiplicity_member();
    }
    setState(1712);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 81, _ctx)) {
    case 1: {
      setState(1710);
      antlrcpp::downCast<Connecotr_endContext *>(_localctx)->declared_name = match(SysMLv2Parser::NAME);
      setState(1711);
      match(SysMLv2Parser::REFERENCES);
      break;
    }

    default:
      break;
    }
    setState(1714);
    owned_reference_subsetting();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Owned_cross_multiplicity_memberContext ------------------------------------------------------------------

SysMLv2Parser::Owned_cross_multiplicity_memberContext::Owned_cross_multiplicity_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Owned_cross_multiplicityContext* SysMLv2Parser::Owned_cross_multiplicity_memberContext::owned_cross_multiplicity() {
  return getRuleContext<SysMLv2Parser::Owned_cross_multiplicityContext>(0);
}


size_t SysMLv2Parser::Owned_cross_multiplicity_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleOwned_cross_multiplicity_member;
}

void SysMLv2Parser::Owned_cross_multiplicity_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOwned_cross_multiplicity_member(this);
}

void SysMLv2Parser::Owned_cross_multiplicity_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOwned_cross_multiplicity_member(this);
}

SysMLv2Parser::Owned_cross_multiplicity_memberContext* SysMLv2Parser::owned_cross_multiplicity_member() {
  Owned_cross_multiplicity_memberContext *_localctx = _tracker.createInstance<Owned_cross_multiplicity_memberContext>(_ctx, getState());
  enterRule(_localctx, 190, SysMLv2Parser::RuleOwned_cross_multiplicity_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1716);
    owned_cross_multiplicity();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Owned_cross_multiplicityContext ------------------------------------------------------------------

SysMLv2Parser::Owned_cross_multiplicityContext::Owned_cross_multiplicityContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Owned_multiplicityContext* SysMLv2Parser::Owned_cross_multiplicityContext::owned_multiplicity() {
  return getRuleContext<SysMLv2Parser::Owned_multiplicityContext>(0);
}


size_t SysMLv2Parser::Owned_cross_multiplicityContext::getRuleIndex() const {
  return SysMLv2Parser::RuleOwned_cross_multiplicity;
}

void SysMLv2Parser::Owned_cross_multiplicityContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOwned_cross_multiplicity(this);
}

void SysMLv2Parser::Owned_cross_multiplicityContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOwned_cross_multiplicity(this);
}

SysMLv2Parser::Owned_cross_multiplicityContext* SysMLv2Parser::owned_cross_multiplicity() {
  Owned_cross_multiplicityContext *_localctx = _tracker.createInstance<Owned_cross_multiplicityContext>(_ctx, getState());
  enterRule(_localctx, 192, SysMLv2Parser::RuleOwned_cross_multiplicity);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1718);
    owned_multiplicity();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Binding_connector_as_usageContext ------------------------------------------------------------------

SysMLv2Parser::Binding_connector_as_usageContext::Binding_connector_as_usageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Usage_prefixContext* SysMLv2Parser::Binding_connector_as_usageContext::usage_prefix() {
  return getRuleContext<SysMLv2Parser::Usage_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Binding_connector_as_usageContext::KEYWORD_BIND() {
  return getToken(SysMLv2Parser::KEYWORD_BIND, 0);
}

std::vector<SysMLv2Parser::Connector_end_memberContext *> SysMLv2Parser::Binding_connector_as_usageContext::connector_end_member() {
  return getRuleContexts<SysMLv2Parser::Connector_end_memberContext>();
}

SysMLv2Parser::Connector_end_memberContext* SysMLv2Parser::Binding_connector_as_usageContext::connector_end_member(size_t i) {
  return getRuleContext<SysMLv2Parser::Connector_end_memberContext>(i);
}

tree::TerminalNode* SysMLv2Parser::Binding_connector_as_usageContext::SYMBOL_ASSIGN() {
  return getToken(SysMLv2Parser::SYMBOL_ASSIGN, 0);
}

SysMLv2Parser::Usage_bodyContext* SysMLv2Parser::Binding_connector_as_usageContext::usage_body() {
  return getRuleContext<SysMLv2Parser::Usage_bodyContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Binding_connector_as_usageContext::KEYWORD_BINDING() {
  return getToken(SysMLv2Parser::KEYWORD_BINDING, 0);
}

SysMLv2Parser::Usage_declarationContext* SysMLv2Parser::Binding_connector_as_usageContext::usage_declaration() {
  return getRuleContext<SysMLv2Parser::Usage_declarationContext>(0);
}


size_t SysMLv2Parser::Binding_connector_as_usageContext::getRuleIndex() const {
  return SysMLv2Parser::RuleBinding_connector_as_usage;
}

void SysMLv2Parser::Binding_connector_as_usageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBinding_connector_as_usage(this);
}

void SysMLv2Parser::Binding_connector_as_usageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBinding_connector_as_usage(this);
}

SysMLv2Parser::Binding_connector_as_usageContext* SysMLv2Parser::binding_connector_as_usage() {
  Binding_connector_as_usageContext *_localctx = _tracker.createInstance<Binding_connector_as_usageContext>(_ctx, getState());
  enterRule(_localctx, 194, SysMLv2Parser::RuleBinding_connector_as_usage);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1720);
    usage_prefix();
    setState(1723);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_BINDING) {
      setState(1721);
      match(SysMLv2Parser::KEYWORD_BINDING);
      setState(1722);
      usage_declaration();
    }
    setState(1725);
    match(SysMLv2Parser::KEYWORD_BIND);
    setState(1726);
    connector_end_member();
    setState(1727);
    match(SysMLv2Parser::SYMBOL_ASSIGN);
    setState(1728);
    connector_end_member();
    setState(1729);
    usage_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Succession_as_usageContext ------------------------------------------------------------------

SysMLv2Parser::Succession_as_usageContext::Succession_as_usageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Usage_prefixContext* SysMLv2Parser::Succession_as_usageContext::usage_prefix() {
  return getRuleContext<SysMLv2Parser::Usage_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Succession_as_usageContext::KEYWORD_FIRST() {
  return getToken(SysMLv2Parser::KEYWORD_FIRST, 0);
}

std::vector<SysMLv2Parser::Connector_end_memberContext *> SysMLv2Parser::Succession_as_usageContext::connector_end_member() {
  return getRuleContexts<SysMLv2Parser::Connector_end_memberContext>();
}

SysMLv2Parser::Connector_end_memberContext* SysMLv2Parser::Succession_as_usageContext::connector_end_member(size_t i) {
  return getRuleContext<SysMLv2Parser::Connector_end_memberContext>(i);
}

tree::TerminalNode* SysMLv2Parser::Succession_as_usageContext::KEYWORD_THEN() {
  return getToken(SysMLv2Parser::KEYWORD_THEN, 0);
}

SysMLv2Parser::Usage_bodyContext* SysMLv2Parser::Succession_as_usageContext::usage_body() {
  return getRuleContext<SysMLv2Parser::Usage_bodyContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Succession_as_usageContext::KEYWORD_SUCCSESSION() {
  return getToken(SysMLv2Parser::KEYWORD_SUCCSESSION, 0);
}

SysMLv2Parser::Usage_declarationContext* SysMLv2Parser::Succession_as_usageContext::usage_declaration() {
  return getRuleContext<SysMLv2Parser::Usage_declarationContext>(0);
}


size_t SysMLv2Parser::Succession_as_usageContext::getRuleIndex() const {
  return SysMLv2Parser::RuleSuccession_as_usage;
}

void SysMLv2Parser::Succession_as_usageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSuccession_as_usage(this);
}

void SysMLv2Parser::Succession_as_usageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSuccession_as_usage(this);
}

SysMLv2Parser::Succession_as_usageContext* SysMLv2Parser::succession_as_usage() {
  Succession_as_usageContext *_localctx = _tracker.createInstance<Succession_as_usageContext>(_ctx, getState());
  enterRule(_localctx, 196, SysMLv2Parser::RuleSuccession_as_usage);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1731);
    usage_prefix();
    setState(1734);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_SUCCSESSION) {
      setState(1732);
      match(SysMLv2Parser::KEYWORD_SUCCSESSION);
      setState(1733);
      usage_declaration();
    }
    setState(1736);
    match(SysMLv2Parser::KEYWORD_FIRST);
    setState(1737);
    connector_end_member();
    setState(1738);
    match(SysMLv2Parser::KEYWORD_THEN);
    setState(1739);
    connector_end_member();
    setState(1740);
    usage_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Interface_definitionContext ------------------------------------------------------------------

SysMLv2Parser::Interface_definitionContext::Interface_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Occurrence_definition_prefixContext* SysMLv2Parser::Interface_definitionContext::occurrence_definition_prefix() {
  return getRuleContext<SysMLv2Parser::Occurrence_definition_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Interface_definitionContext::KEYWORD_INTERFACE() {
  return getToken(SysMLv2Parser::KEYWORD_INTERFACE, 0);
}

tree::TerminalNode* SysMLv2Parser::Interface_definitionContext::KEYWORD_DEF() {
  return getToken(SysMLv2Parser::KEYWORD_DEF, 0);
}

SysMLv2Parser::Definition_declarationContext* SysMLv2Parser::Interface_definitionContext::definition_declaration() {
  return getRuleContext<SysMLv2Parser::Definition_declarationContext>(0);
}

SysMLv2Parser::Interface_bodyContext* SysMLv2Parser::Interface_definitionContext::interface_body() {
  return getRuleContext<SysMLv2Parser::Interface_bodyContext>(0);
}


size_t SysMLv2Parser::Interface_definitionContext::getRuleIndex() const {
  return SysMLv2Parser::RuleInterface_definition;
}

void SysMLv2Parser::Interface_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterface_definition(this);
}

void SysMLv2Parser::Interface_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterface_definition(this);
}

SysMLv2Parser::Interface_definitionContext* SysMLv2Parser::interface_definition() {
  Interface_definitionContext *_localctx = _tracker.createInstance<Interface_definitionContext>(_ctx, getState());
  enterRule(_localctx, 198, SysMLv2Parser::RuleInterface_definition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1742);
    occurrence_definition_prefix();
    setState(1743);
    match(SysMLv2Parser::KEYWORD_INTERFACE);
    setState(1744);
    match(SysMLv2Parser::KEYWORD_DEF);
    setState(1745);
    definition_declaration();
    setState(1746);
    interface_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Interface_bodyContext ------------------------------------------------------------------

SysMLv2Parser::Interface_bodyContext::Interface_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Interface_bodyContext::SYMBOL_STATEMENT_DELIMITER() {
  return getToken(SysMLv2Parser::SYMBOL_STATEMENT_DELIMITER, 0);
}

tree::TerminalNode* SysMLv2Parser::Interface_bodyContext::SYMBOL_CURLY_BRACKET_OPEN() {
  return getToken(SysMLv2Parser::SYMBOL_CURLY_BRACKET_OPEN, 0);
}

tree::TerminalNode* SysMLv2Parser::Interface_bodyContext::SYMBOL_CURLY_BRACKET_CLOSE() {
  return getToken(SysMLv2Parser::SYMBOL_CURLY_BRACKET_CLOSE, 0);
}

std::vector<SysMLv2Parser::Interface_body_itemContext *> SysMLv2Parser::Interface_bodyContext::interface_body_item() {
  return getRuleContexts<SysMLv2Parser::Interface_body_itemContext>();
}

SysMLv2Parser::Interface_body_itemContext* SysMLv2Parser::Interface_bodyContext::interface_body_item(size_t i) {
  return getRuleContext<SysMLv2Parser::Interface_body_itemContext>(i);
}


size_t SysMLv2Parser::Interface_bodyContext::getRuleIndex() const {
  return SysMLv2Parser::RuleInterface_body;
}

void SysMLv2Parser::Interface_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterface_body(this);
}

void SysMLv2Parser::Interface_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterface_body(this);
}

SysMLv2Parser::Interface_bodyContext* SysMLv2Parser::interface_body() {
  Interface_bodyContext *_localctx = _tracker.createInstance<Interface_bodyContext>(_ctx, getState());
  enterRule(_localctx, 200, SysMLv2Parser::RuleInterface_body);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1757);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SysMLv2Parser::SYMBOL_STATEMENT_DELIMITER: {
        enterOuterAlt(_localctx, 1);
        setState(1748);
        match(SysMLv2Parser::SYMBOL_STATEMENT_DELIMITER);
        break;
      }

      case SysMLv2Parser::SYMBOL_CURLY_BRACKET_OPEN: {
        enterOuterAlt(_localctx, 2);
        setState(1749);
        match(SysMLv2Parser::SYMBOL_CURLY_BRACKET_OPEN);
        setState(1753);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & -7713383000981164256) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 65)) & 867541202222475145) != 0) || ((((_la - 132) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 132)) & 620934348976687367) != 0) || ((((_la - 201) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 201)) & 2147745893) != 0)) {
          setState(1750);
          interface_body_item();
          setState(1755);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(1756);
        match(SysMLv2Parser::SYMBOL_CURLY_BRACKET_CLOSE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Interface_body_itemContext ------------------------------------------------------------------

SysMLv2Parser::Interface_body_itemContext::Interface_body_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Definition_memberContext* SysMLv2Parser::Interface_body_itemContext::definition_member() {
  return getRuleContext<SysMLv2Parser::Definition_memberContext>(0);
}

SysMLv2Parser::Variant_usage_memberContext* SysMLv2Parser::Interface_body_itemContext::variant_usage_member() {
  return getRuleContext<SysMLv2Parser::Variant_usage_memberContext>(0);
}

SysMLv2Parser::Interface_non_occurrence_usage_memberContext* SysMLv2Parser::Interface_body_itemContext::interface_non_occurrence_usage_member() {
  return getRuleContext<SysMLv2Parser::Interface_non_occurrence_usage_memberContext>(0);
}

SysMLv2Parser::Source_succession_memberContext* SysMLv2Parser::Interface_body_itemContext::source_succession_member() {
  return getRuleContext<SysMLv2Parser::Source_succession_memberContext>(0);
}

SysMLv2Parser::Interface_occurrence_usage_memberContext* SysMLv2Parser::Interface_body_itemContext::interface_occurrence_usage_member() {
  return getRuleContext<SysMLv2Parser::Interface_occurrence_usage_memberContext>(0);
}

SysMLv2Parser::Alias_memberContext* SysMLv2Parser::Interface_body_itemContext::alias_member() {
  return getRuleContext<SysMLv2Parser::Alias_memberContext>(0);
}

SysMLv2Parser::Namespace_importContext* SysMLv2Parser::Interface_body_itemContext::namespace_import() {
  return getRuleContext<SysMLv2Parser::Namespace_importContext>(0);
}


size_t SysMLv2Parser::Interface_body_itemContext::getRuleIndex() const {
  return SysMLv2Parser::RuleInterface_body_item;
}

void SysMLv2Parser::Interface_body_itemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterface_body_item(this);
}

void SysMLv2Parser::Interface_body_itemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterface_body_item(this);
}

SysMLv2Parser::Interface_body_itemContext* SysMLv2Parser::interface_body_item() {
  Interface_body_itemContext *_localctx = _tracker.createInstance<Interface_body_itemContext>(_ctx, getState());
  enterRule(_localctx, 202, SysMLv2Parser::RuleInterface_body_item);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1768);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 87, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1759);
      definition_member();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1760);
      variant_usage_member();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1761);
      interface_non_occurrence_usage_member();
      setState(1763);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == SysMLv2Parser::KEYWORD_THEN) {
        setState(1762);
        source_succession_member();
      }
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1765);
      interface_occurrence_usage_member();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1766);
      alias_member();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1767);
      namespace_import();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Interface_non_occurrence_usage_memberContext ------------------------------------------------------------------

SysMLv2Parser::Interface_non_occurrence_usage_memberContext::Interface_non_occurrence_usage_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Member_prefixContext* SysMLv2Parser::Interface_non_occurrence_usage_memberContext::member_prefix() {
  return getRuleContext<SysMLv2Parser::Member_prefixContext>(0);
}

SysMLv2Parser::Interface_non_occurrence_usage_elementContext* SysMLv2Parser::Interface_non_occurrence_usage_memberContext::interface_non_occurrence_usage_element() {
  return getRuleContext<SysMLv2Parser::Interface_non_occurrence_usage_elementContext>(0);
}


size_t SysMLv2Parser::Interface_non_occurrence_usage_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleInterface_non_occurrence_usage_member;
}

void SysMLv2Parser::Interface_non_occurrence_usage_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterface_non_occurrence_usage_member(this);
}

void SysMLv2Parser::Interface_non_occurrence_usage_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterface_non_occurrence_usage_member(this);
}

SysMLv2Parser::Interface_non_occurrence_usage_memberContext* SysMLv2Parser::interface_non_occurrence_usage_member() {
  Interface_non_occurrence_usage_memberContext *_localctx = _tracker.createInstance<Interface_non_occurrence_usage_memberContext>(_ctx, getState());
  enterRule(_localctx, 204, SysMLv2Parser::RuleInterface_non_occurrence_usage_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1770);
    member_prefix();
    setState(1771);
    interface_non_occurrence_usage_element();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Interface_non_occurrence_usage_elementContext ------------------------------------------------------------------

SysMLv2Parser::Interface_non_occurrence_usage_elementContext::Interface_non_occurrence_usage_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Reference_usageContext* SysMLv2Parser::Interface_non_occurrence_usage_elementContext::reference_usage() {
  return getRuleContext<SysMLv2Parser::Reference_usageContext>(0);
}

SysMLv2Parser::Attribute_usageContext* SysMLv2Parser::Interface_non_occurrence_usage_elementContext::attribute_usage() {
  return getRuleContext<SysMLv2Parser::Attribute_usageContext>(0);
}

SysMLv2Parser::Enumeration_usageContext* SysMLv2Parser::Interface_non_occurrence_usage_elementContext::enumeration_usage() {
  return getRuleContext<SysMLv2Parser::Enumeration_usageContext>(0);
}

SysMLv2Parser::Binding_connector_as_usageContext* SysMLv2Parser::Interface_non_occurrence_usage_elementContext::binding_connector_as_usage() {
  return getRuleContext<SysMLv2Parser::Binding_connector_as_usageContext>(0);
}

SysMLv2Parser::Succession_as_usageContext* SysMLv2Parser::Interface_non_occurrence_usage_elementContext::succession_as_usage() {
  return getRuleContext<SysMLv2Parser::Succession_as_usageContext>(0);
}


size_t SysMLv2Parser::Interface_non_occurrence_usage_elementContext::getRuleIndex() const {
  return SysMLv2Parser::RuleInterface_non_occurrence_usage_element;
}

void SysMLv2Parser::Interface_non_occurrence_usage_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterface_non_occurrence_usage_element(this);
}

void SysMLv2Parser::Interface_non_occurrence_usage_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterface_non_occurrence_usage_element(this);
}

SysMLv2Parser::Interface_non_occurrence_usage_elementContext* SysMLv2Parser::interface_non_occurrence_usage_element() {
  Interface_non_occurrence_usage_elementContext *_localctx = _tracker.createInstance<Interface_non_occurrence_usage_elementContext>(_ctx, getState());
  enterRule(_localctx, 206, SysMLv2Parser::RuleInterface_non_occurrence_usage_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1778);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 88, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1773);
      reference_usage();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1774);
      attribute_usage();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1775);
      enumeration_usage();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1776);
      binding_connector_as_usage();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1777);
      succession_as_usage();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Interface_occurrence_usage_memberContext ------------------------------------------------------------------

SysMLv2Parser::Interface_occurrence_usage_memberContext::Interface_occurrence_usage_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Member_prefixContext* SysMLv2Parser::Interface_occurrence_usage_memberContext::member_prefix() {
  return getRuleContext<SysMLv2Parser::Member_prefixContext>(0);
}

SysMLv2Parser::Interface_occurrence_usage_elementContext* SysMLv2Parser::Interface_occurrence_usage_memberContext::interface_occurrence_usage_element() {
  return getRuleContext<SysMLv2Parser::Interface_occurrence_usage_elementContext>(0);
}


size_t SysMLv2Parser::Interface_occurrence_usage_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleInterface_occurrence_usage_member;
}

void SysMLv2Parser::Interface_occurrence_usage_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterface_occurrence_usage_member(this);
}

void SysMLv2Parser::Interface_occurrence_usage_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterface_occurrence_usage_member(this);
}

SysMLv2Parser::Interface_occurrence_usage_memberContext* SysMLv2Parser::interface_occurrence_usage_member() {
  Interface_occurrence_usage_memberContext *_localctx = _tracker.createInstance<Interface_occurrence_usage_memberContext>(_ctx, getState());
  enterRule(_localctx, 208, SysMLv2Parser::RuleInterface_occurrence_usage_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1780);
    member_prefix();
    setState(1781);
    interface_occurrence_usage_element();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Interface_occurrence_usage_elementContext ------------------------------------------------------------------

SysMLv2Parser::Interface_occurrence_usage_elementContext::Interface_occurrence_usage_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Default_interface_endContext* SysMLv2Parser::Interface_occurrence_usage_elementContext::default_interface_end() {
  return getRuleContext<SysMLv2Parser::Default_interface_endContext>(0);
}

SysMLv2Parser::Structure_usage_elementContext* SysMLv2Parser::Interface_occurrence_usage_elementContext::structure_usage_element() {
  return getRuleContext<SysMLv2Parser::Structure_usage_elementContext>(0);
}

SysMLv2Parser::Behavior_usage_elementContext* SysMLv2Parser::Interface_occurrence_usage_elementContext::behavior_usage_element() {
  return getRuleContext<SysMLv2Parser::Behavior_usage_elementContext>(0);
}


size_t SysMLv2Parser::Interface_occurrence_usage_elementContext::getRuleIndex() const {
  return SysMLv2Parser::RuleInterface_occurrence_usage_element;
}

void SysMLv2Parser::Interface_occurrence_usage_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterface_occurrence_usage_element(this);
}

void SysMLv2Parser::Interface_occurrence_usage_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterface_occurrence_usage_element(this);
}

SysMLv2Parser::Interface_occurrence_usage_elementContext* SysMLv2Parser::interface_occurrence_usage_element() {
  Interface_occurrence_usage_elementContext *_localctx = _tracker.createInstance<Interface_occurrence_usage_elementContext>(_ctx, getState());
  enterRule(_localctx, 210, SysMLv2Parser::RuleInterface_occurrence_usage_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1786);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 89, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1783);
      default_interface_end();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1784);
      structure_usage_element();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1785);
      behavior_usage_element();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Default_interface_endContext ------------------------------------------------------------------

SysMLv2Parser::Default_interface_endContext::Default_interface_endContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Default_interface_endContext::KEYWORD_END() {
  return getToken(SysMLv2Parser::KEYWORD_END, 0);
}

SysMLv2Parser::UsageContext* SysMLv2Parser::Default_interface_endContext::usage() {
  return getRuleContext<SysMLv2Parser::UsageContext>(0);
}


size_t SysMLv2Parser::Default_interface_endContext::getRuleIndex() const {
  return SysMLv2Parser::RuleDefault_interface_end;
}

void SysMLv2Parser::Default_interface_endContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDefault_interface_end(this);
}

void SysMLv2Parser::Default_interface_endContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDefault_interface_end(this);
}

SysMLv2Parser::Default_interface_endContext* SysMLv2Parser::default_interface_end() {
  Default_interface_endContext *_localctx = _tracker.createInstance<Default_interface_endContext>(_ctx, getState());
  enterRule(_localctx, 212, SysMLv2Parser::RuleDefault_interface_end);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1788);
    match(SysMLv2Parser::KEYWORD_END);
    setState(1789);
    usage();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Interface_usageContext ------------------------------------------------------------------

SysMLv2Parser::Interface_usageContext::Interface_usageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Occurrence_usage_prefixContext* SysMLv2Parser::Interface_usageContext::occurrence_usage_prefix() {
  return getRuleContext<SysMLv2Parser::Occurrence_usage_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Interface_usageContext::KEYWORD_INTERFACE() {
  return getToken(SysMLv2Parser::KEYWORD_INTERFACE, 0);
}

SysMLv2Parser::Interface_usage_declarationContext* SysMLv2Parser::Interface_usageContext::interface_usage_declaration() {
  return getRuleContext<SysMLv2Parser::Interface_usage_declarationContext>(0);
}

SysMLv2Parser::Interface_bodyContext* SysMLv2Parser::Interface_usageContext::interface_body() {
  return getRuleContext<SysMLv2Parser::Interface_bodyContext>(0);
}


size_t SysMLv2Parser::Interface_usageContext::getRuleIndex() const {
  return SysMLv2Parser::RuleInterface_usage;
}

void SysMLv2Parser::Interface_usageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterface_usage(this);
}

void SysMLv2Parser::Interface_usageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterface_usage(this);
}

SysMLv2Parser::Interface_usageContext* SysMLv2Parser::interface_usage() {
  Interface_usageContext *_localctx = _tracker.createInstance<Interface_usageContext>(_ctx, getState());
  enterRule(_localctx, 214, SysMLv2Parser::RuleInterface_usage);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1791);
    occurrence_usage_prefix();
    setState(1792);
    match(SysMLv2Parser::KEYWORD_INTERFACE);
    setState(1793);
    interface_usage_declaration();
    setState(1794);
    interface_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Interface_usage_declarationContext ------------------------------------------------------------------

SysMLv2Parser::Interface_usage_declarationContext::Interface_usage_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Usage_declarationContext* SysMLv2Parser::Interface_usage_declarationContext::usage_declaration() {
  return getRuleContext<SysMLv2Parser::Usage_declarationContext>(0);
}

SysMLv2Parser::Value_partContext* SysMLv2Parser::Interface_usage_declarationContext::value_part() {
  return getRuleContext<SysMLv2Parser::Value_partContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Interface_usage_declarationContext::KEYWORD_CONNECT() {
  return getToken(SysMLv2Parser::KEYWORD_CONNECT, 0);
}

SysMLv2Parser::Interface_partContext* SysMLv2Parser::Interface_usage_declarationContext::interface_part() {
  return getRuleContext<SysMLv2Parser::Interface_partContext>(0);
}


size_t SysMLv2Parser::Interface_usage_declarationContext::getRuleIndex() const {
  return SysMLv2Parser::RuleInterface_usage_declaration;
}

void SysMLv2Parser::Interface_usage_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterface_usage_declaration(this);
}

void SysMLv2Parser::Interface_usage_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterface_usage_declaration(this);
}

SysMLv2Parser::Interface_usage_declarationContext* SysMLv2Parser::interface_usage_declaration() {
  Interface_usage_declarationContext *_localctx = _tracker.createInstance<Interface_usage_declarationContext>(_ctx, getState());
  enterRule(_localctx, 216, SysMLv2Parser::RuleInterface_usage_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1805);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 92, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1796);
      usage_declaration();
      setState(1798);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == SysMLv2Parser::KEYWORD_DEFAULT || _la == SysMLv2Parser::SYMBOL_DEF_ASSIGN

      || _la == SysMLv2Parser::SYMBOL_EQUALS) {
        setState(1797);
        value_part();
      }
      setState(1802);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == SysMLv2Parser::KEYWORD_CONNECT) {
        setState(1800);
        match(SysMLv2Parser::KEYWORD_CONNECT);
        setState(1801);
        interface_part();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1804);
      interface_part();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Interface_partContext ------------------------------------------------------------------

SysMLv2Parser::Interface_partContext::Interface_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Binary_interface_partContext* SysMLv2Parser::Interface_partContext::binary_interface_part() {
  return getRuleContext<SysMLv2Parser::Binary_interface_partContext>(0);
}

SysMLv2Parser::Nary_interface_partContext* SysMLv2Parser::Interface_partContext::nary_interface_part() {
  return getRuleContext<SysMLv2Parser::Nary_interface_partContext>(0);
}


size_t SysMLv2Parser::Interface_partContext::getRuleIndex() const {
  return SysMLv2Parser::RuleInterface_part;
}

void SysMLv2Parser::Interface_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterface_part(this);
}

void SysMLv2Parser::Interface_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterface_part(this);
}

SysMLv2Parser::Interface_partContext* SysMLv2Parser::interface_part() {
  Interface_partContext *_localctx = _tracker.createInstance<Interface_partContext>(_ctx, getState());
  enterRule(_localctx, 218, SysMLv2Parser::RuleInterface_part);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1809);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SysMLv2Parser::SYMBOL_SQUARE_BRACKET_OPEN:
      case SysMLv2Parser::NAME: {
        enterOuterAlt(_localctx, 1);
        setState(1807);
        binary_interface_part();
        break;
      }

      case SysMLv2Parser::SYMBOL_ROUND_BRACKET_OPEN: {
        enterOuterAlt(_localctx, 2);
        setState(1808);
        nary_interface_part();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Binary_interface_partContext ------------------------------------------------------------------

SysMLv2Parser::Binary_interface_partContext::Binary_interface_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<SysMLv2Parser::Interface_end_memberContext *> SysMLv2Parser::Binary_interface_partContext::interface_end_member() {
  return getRuleContexts<SysMLv2Parser::Interface_end_memberContext>();
}

SysMLv2Parser::Interface_end_memberContext* SysMLv2Parser::Binary_interface_partContext::interface_end_member(size_t i) {
  return getRuleContext<SysMLv2Parser::Interface_end_memberContext>(i);
}

tree::TerminalNode* SysMLv2Parser::Binary_interface_partContext::KEYWORD_TO() {
  return getToken(SysMLv2Parser::KEYWORD_TO, 0);
}


size_t SysMLv2Parser::Binary_interface_partContext::getRuleIndex() const {
  return SysMLv2Parser::RuleBinary_interface_part;
}

void SysMLv2Parser::Binary_interface_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBinary_interface_part(this);
}

void SysMLv2Parser::Binary_interface_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBinary_interface_part(this);
}

SysMLv2Parser::Binary_interface_partContext* SysMLv2Parser::binary_interface_part() {
  Binary_interface_partContext *_localctx = _tracker.createInstance<Binary_interface_partContext>(_ctx, getState());
  enterRule(_localctx, 220, SysMLv2Parser::RuleBinary_interface_part);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1811);
    interface_end_member();
    setState(1812);
    match(SysMLv2Parser::KEYWORD_TO);
    setState(1813);
    interface_end_member();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Nary_interface_partContext ------------------------------------------------------------------

SysMLv2Parser::Nary_interface_partContext::Nary_interface_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Nary_interface_partContext::SYMBOL_ROUND_BRACKET_OPEN() {
  return getToken(SysMLv2Parser::SYMBOL_ROUND_BRACKET_OPEN, 0);
}

std::vector<SysMLv2Parser::Interface_end_memberContext *> SysMLv2Parser::Nary_interface_partContext::interface_end_member() {
  return getRuleContexts<SysMLv2Parser::Interface_end_memberContext>();
}

SysMLv2Parser::Interface_end_memberContext* SysMLv2Parser::Nary_interface_partContext::interface_end_member(size_t i) {
  return getRuleContext<SysMLv2Parser::Interface_end_memberContext>(i);
}

tree::TerminalNode* SysMLv2Parser::Nary_interface_partContext::SYMBOL_ROUND_BRACKET_CLOSE() {
  return getToken(SysMLv2Parser::SYMBOL_ROUND_BRACKET_CLOSE, 0);
}

std::vector<tree::TerminalNode *> SysMLv2Parser::Nary_interface_partContext::SYMBOL_COMMA() {
  return getTokens(SysMLv2Parser::SYMBOL_COMMA);
}

tree::TerminalNode* SysMLv2Parser::Nary_interface_partContext::SYMBOL_COMMA(size_t i) {
  return getToken(SysMLv2Parser::SYMBOL_COMMA, i);
}


size_t SysMLv2Parser::Nary_interface_partContext::getRuleIndex() const {
  return SysMLv2Parser::RuleNary_interface_part;
}

void SysMLv2Parser::Nary_interface_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNary_interface_part(this);
}

void SysMLv2Parser::Nary_interface_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNary_interface_part(this);
}

SysMLv2Parser::Nary_interface_partContext* SysMLv2Parser::nary_interface_part() {
  Nary_interface_partContext *_localctx = _tracker.createInstance<Nary_interface_partContext>(_ctx, getState());
  enterRule(_localctx, 222, SysMLv2Parser::RuleNary_interface_part);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1815);
    match(SysMLv2Parser::SYMBOL_ROUND_BRACKET_OPEN);
    setState(1816);
    interface_end_member();
    setState(1819); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1817);
      match(SysMLv2Parser::SYMBOL_COMMA);
      setState(1818);
      interface_end_member();
      setState(1821); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == SysMLv2Parser::SYMBOL_COMMA);
    setState(1823);
    match(SysMLv2Parser::SYMBOL_ROUND_BRACKET_CLOSE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Interface_end_memberContext ------------------------------------------------------------------

SysMLv2Parser::Interface_end_memberContext::Interface_end_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Interface_endContext* SysMLv2Parser::Interface_end_memberContext::interface_end() {
  return getRuleContext<SysMLv2Parser::Interface_endContext>(0);
}


size_t SysMLv2Parser::Interface_end_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleInterface_end_member;
}

void SysMLv2Parser::Interface_end_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterface_end_member(this);
}

void SysMLv2Parser::Interface_end_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterface_end_member(this);
}

SysMLv2Parser::Interface_end_memberContext* SysMLv2Parser::interface_end_member() {
  Interface_end_memberContext *_localctx = _tracker.createInstance<Interface_end_memberContext>(_ctx, getState());
  enterRule(_localctx, 224, SysMLv2Parser::RuleInterface_end_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1825);
    interface_end();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Interface_endContext ------------------------------------------------------------------

SysMLv2Parser::Interface_endContext::Interface_endContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Owned_reference_subsettingContext* SysMLv2Parser::Interface_endContext::owned_reference_subsetting() {
  return getRuleContext<SysMLv2Parser::Owned_reference_subsettingContext>(0);
}

SysMLv2Parser::Owned_cross_multiplicity_memberContext* SysMLv2Parser::Interface_endContext::owned_cross_multiplicity_member() {
  return getRuleContext<SysMLv2Parser::Owned_cross_multiplicity_memberContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Interface_endContext::REFERENCES() {
  return getToken(SysMLv2Parser::REFERENCES, 0);
}

tree::TerminalNode* SysMLv2Parser::Interface_endContext::NAME() {
  return getToken(SysMLv2Parser::NAME, 0);
}


size_t SysMLv2Parser::Interface_endContext::getRuleIndex() const {
  return SysMLv2Parser::RuleInterface_end;
}

void SysMLv2Parser::Interface_endContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterface_end(this);
}

void SysMLv2Parser::Interface_endContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterface_end(this);
}

SysMLv2Parser::Interface_endContext* SysMLv2Parser::interface_end() {
  Interface_endContext *_localctx = _tracker.createInstance<Interface_endContext>(_ctx, getState());
  enterRule(_localctx, 226, SysMLv2Parser::RuleInterface_end);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1828);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::SYMBOL_SQUARE_BRACKET_OPEN) {
      setState(1827);
      owned_cross_multiplicity_member();
    }
    setState(1832);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 96, _ctx)) {
    case 1: {
      setState(1830);
      antlrcpp::downCast<Interface_endContext *>(_localctx)->declared_name = match(SysMLv2Parser::NAME);
      setState(1831);
      match(SysMLv2Parser::REFERENCES);
      break;
    }

    default:
      break;
    }
    setState(1834);
    owned_reference_subsetting();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Allocation_definitionContext ------------------------------------------------------------------

SysMLv2Parser::Allocation_definitionContext::Allocation_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Occurrence_definition_prefixContext* SysMLv2Parser::Allocation_definitionContext::occurrence_definition_prefix() {
  return getRuleContext<SysMLv2Parser::Occurrence_definition_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Allocation_definitionContext::KEYWORD_ALLOCATION() {
  return getToken(SysMLv2Parser::KEYWORD_ALLOCATION, 0);
}

tree::TerminalNode* SysMLv2Parser::Allocation_definitionContext::KEYWORD_DEF() {
  return getToken(SysMLv2Parser::KEYWORD_DEF, 0);
}

SysMLv2Parser::DefinitionContext* SysMLv2Parser::Allocation_definitionContext::definition() {
  return getRuleContext<SysMLv2Parser::DefinitionContext>(0);
}


size_t SysMLv2Parser::Allocation_definitionContext::getRuleIndex() const {
  return SysMLv2Parser::RuleAllocation_definition;
}

void SysMLv2Parser::Allocation_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAllocation_definition(this);
}

void SysMLv2Parser::Allocation_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAllocation_definition(this);
}

SysMLv2Parser::Allocation_definitionContext* SysMLv2Parser::allocation_definition() {
  Allocation_definitionContext *_localctx = _tracker.createInstance<Allocation_definitionContext>(_ctx, getState());
  enterRule(_localctx, 228, SysMLv2Parser::RuleAllocation_definition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1836);
    occurrence_definition_prefix();
    setState(1837);
    match(SysMLv2Parser::KEYWORD_ALLOCATION);
    setState(1838);
    match(SysMLv2Parser::KEYWORD_DEF);
    setState(1839);
    definition();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Allocation_usageContext ------------------------------------------------------------------

SysMLv2Parser::Allocation_usageContext::Allocation_usageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Occurrence_usage_prefixContext* SysMLv2Parser::Allocation_usageContext::occurrence_usage_prefix() {
  return getRuleContext<SysMLv2Parser::Occurrence_usage_prefixContext>(0);
}

SysMLv2Parser::Allocation_usage_declarationContext* SysMLv2Parser::Allocation_usageContext::allocation_usage_declaration() {
  return getRuleContext<SysMLv2Parser::Allocation_usage_declarationContext>(0);
}

SysMLv2Parser::Usage_bodyContext* SysMLv2Parser::Allocation_usageContext::usage_body() {
  return getRuleContext<SysMLv2Parser::Usage_bodyContext>(0);
}


size_t SysMLv2Parser::Allocation_usageContext::getRuleIndex() const {
  return SysMLv2Parser::RuleAllocation_usage;
}

void SysMLv2Parser::Allocation_usageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAllocation_usage(this);
}

void SysMLv2Parser::Allocation_usageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAllocation_usage(this);
}

SysMLv2Parser::Allocation_usageContext* SysMLv2Parser::allocation_usage() {
  Allocation_usageContext *_localctx = _tracker.createInstance<Allocation_usageContext>(_ctx, getState());
  enterRule(_localctx, 230, SysMLv2Parser::RuleAllocation_usage);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1841);
    occurrence_usage_prefix();
    setState(1842);
    allocation_usage_declaration();
    setState(1843);
    usage_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Allocation_usage_declarationContext ------------------------------------------------------------------

SysMLv2Parser::Allocation_usage_declarationContext::Allocation_usage_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> SysMLv2Parser::Allocation_usage_declarationContext::KEYWORD_ALLOCATION() {
  return getTokens(SysMLv2Parser::KEYWORD_ALLOCATION);
}

tree::TerminalNode* SysMLv2Parser::Allocation_usage_declarationContext::KEYWORD_ALLOCATION(size_t i) {
  return getToken(SysMLv2Parser::KEYWORD_ALLOCATION, i);
}

SysMLv2Parser::Usage_declarationContext* SysMLv2Parser::Allocation_usage_declarationContext::usage_declaration() {
  return getRuleContext<SysMLv2Parser::Usage_declarationContext>(0);
}

SysMLv2Parser::Connector_partContext* SysMLv2Parser::Allocation_usage_declarationContext::connector_part() {
  return getRuleContext<SysMLv2Parser::Connector_partContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Allocation_usage_declarationContext::KEYWORD_ALLOCATE() {
  return getToken(SysMLv2Parser::KEYWORD_ALLOCATE, 0);
}


size_t SysMLv2Parser::Allocation_usage_declarationContext::getRuleIndex() const {
  return SysMLv2Parser::RuleAllocation_usage_declaration;
}

void SysMLv2Parser::Allocation_usage_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAllocation_usage_declaration(this);
}

void SysMLv2Parser::Allocation_usage_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAllocation_usage_declaration(this);
}

SysMLv2Parser::Allocation_usage_declarationContext* SysMLv2Parser::allocation_usage_declaration() {
  Allocation_usage_declarationContext *_localctx = _tracker.createInstance<Allocation_usage_declarationContext>(_ctx, getState());
  enterRule(_localctx, 232, SysMLv2Parser::RuleAllocation_usage_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1853);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SysMLv2Parser::KEYWORD_ALLOCATION: {
        enterOuterAlt(_localctx, 1);
        setState(1845);
        match(SysMLv2Parser::KEYWORD_ALLOCATION);
        setState(1846);
        usage_declaration();
        setState(1849);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == SysMLv2Parser::KEYWORD_ALLOCATION) {
          setState(1847);
          match(SysMLv2Parser::KEYWORD_ALLOCATION);
          setState(1848);
          connector_part();
        }
        break;
      }

      case SysMLv2Parser::KEYWORD_ALLOCATE: {
        enterOuterAlt(_localctx, 2);
        setState(1851);
        match(SysMLv2Parser::KEYWORD_ALLOCATE);
        setState(1852);
        connector_part();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Flow_definitionContext ------------------------------------------------------------------

SysMLv2Parser::Flow_definitionContext::Flow_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Occurrence_definition_prefixContext* SysMLv2Parser::Flow_definitionContext::occurrence_definition_prefix() {
  return getRuleContext<SysMLv2Parser::Occurrence_definition_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Flow_definitionContext::KEYWORD_FLOW() {
  return getToken(SysMLv2Parser::KEYWORD_FLOW, 0);
}

tree::TerminalNode* SysMLv2Parser::Flow_definitionContext::KEYWORD_DEF() {
  return getToken(SysMLv2Parser::KEYWORD_DEF, 0);
}

SysMLv2Parser::DefinitionContext* SysMLv2Parser::Flow_definitionContext::definition() {
  return getRuleContext<SysMLv2Parser::DefinitionContext>(0);
}


size_t SysMLv2Parser::Flow_definitionContext::getRuleIndex() const {
  return SysMLv2Parser::RuleFlow_definition;
}

void SysMLv2Parser::Flow_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFlow_definition(this);
}

void SysMLv2Parser::Flow_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFlow_definition(this);
}

SysMLv2Parser::Flow_definitionContext* SysMLv2Parser::flow_definition() {
  Flow_definitionContext *_localctx = _tracker.createInstance<Flow_definitionContext>(_ctx, getState());
  enterRule(_localctx, 234, SysMLv2Parser::RuleFlow_definition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1855);
    occurrence_definition_prefix();
    setState(1856);
    match(SysMLv2Parser::KEYWORD_FLOW);
    setState(1857);
    match(SysMLv2Parser::KEYWORD_DEF);
    setState(1858);
    definition();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MessageContext ------------------------------------------------------------------

SysMLv2Parser::MessageContext::MessageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Occurrence_usage_prefixContext* SysMLv2Parser::MessageContext::occurrence_usage_prefix() {
  return getRuleContext<SysMLv2Parser::Occurrence_usage_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::MessageContext::KEYWORD_MESSAGE() {
  return getToken(SysMLv2Parser::KEYWORD_MESSAGE, 0);
}

SysMLv2Parser::Message_declarationContext* SysMLv2Parser::MessageContext::message_declaration() {
  return getRuleContext<SysMLv2Parser::Message_declarationContext>(0);
}

SysMLv2Parser::Definition_bodyContext* SysMLv2Parser::MessageContext::definition_body() {
  return getRuleContext<SysMLv2Parser::Definition_bodyContext>(0);
}


size_t SysMLv2Parser::MessageContext::getRuleIndex() const {
  return SysMLv2Parser::RuleMessage;
}

void SysMLv2Parser::MessageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMessage(this);
}

void SysMLv2Parser::MessageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMessage(this);
}

SysMLv2Parser::MessageContext* SysMLv2Parser::message() {
  MessageContext *_localctx = _tracker.createInstance<MessageContext>(_ctx, getState());
  enterRule(_localctx, 236, SysMLv2Parser::RuleMessage);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1860);
    occurrence_usage_prefix();
    setState(1861);
    match(SysMLv2Parser::KEYWORD_MESSAGE);
    setState(1862);
    message_declaration();
    setState(1863);
    definition_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Message_declarationContext ------------------------------------------------------------------

SysMLv2Parser::Message_declarationContext::Message_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Usage_declarationContext* SysMLv2Parser::Message_declarationContext::usage_declaration() {
  return getRuleContext<SysMLv2Parser::Usage_declarationContext>(0);
}

SysMLv2Parser::Value_partContext* SysMLv2Parser::Message_declarationContext::value_part() {
  return getRuleContext<SysMLv2Parser::Value_partContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Message_declarationContext::KEYWORD_OF() {
  return getToken(SysMLv2Parser::KEYWORD_OF, 0);
}

SysMLv2Parser::Flow_payload_feature_memberContext* SysMLv2Parser::Message_declarationContext::flow_payload_feature_member() {
  return getRuleContext<SysMLv2Parser::Flow_payload_feature_memberContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Message_declarationContext::KEYWORD_FROM() {
  return getToken(SysMLv2Parser::KEYWORD_FROM, 0);
}

std::vector<SysMLv2Parser::Message_event_memberContext *> SysMLv2Parser::Message_declarationContext::message_event_member() {
  return getRuleContexts<SysMLv2Parser::Message_event_memberContext>();
}

SysMLv2Parser::Message_event_memberContext* SysMLv2Parser::Message_declarationContext::message_event_member(size_t i) {
  return getRuleContext<SysMLv2Parser::Message_event_memberContext>(i);
}

tree::TerminalNode* SysMLv2Parser::Message_declarationContext::KEYWORD_TO() {
  return getToken(SysMLv2Parser::KEYWORD_TO, 0);
}


size_t SysMLv2Parser::Message_declarationContext::getRuleIndex() const {
  return SysMLv2Parser::RuleMessage_declaration;
}

void SysMLv2Parser::Message_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMessage_declaration(this);
}

void SysMLv2Parser::Message_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMessage_declaration(this);
}

SysMLv2Parser::Message_declarationContext* SysMLv2Parser::message_declaration() {
  Message_declarationContext *_localctx = _tracker.createInstance<Message_declarationContext>(_ctx, getState());
  enterRule(_localctx, 238, SysMLv2Parser::RuleMessage_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1884);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 102, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1865);
      usage_declaration();
      setState(1867);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == SysMLv2Parser::KEYWORD_DEFAULT || _la == SysMLv2Parser::SYMBOL_DEF_ASSIGN

      || _la == SysMLv2Parser::SYMBOL_EQUALS) {
        setState(1866);
        value_part();
      }
      setState(1871);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == SysMLv2Parser::KEYWORD_OF) {
        setState(1869);
        match(SysMLv2Parser::KEYWORD_OF);
        setState(1870);
        flow_payload_feature_member();
      }
      setState(1878);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == SysMLv2Parser::KEYWORD_FROM) {
        setState(1873);
        match(SysMLv2Parser::KEYWORD_FROM);
        setState(1874);
        message_event_member();
        setState(1875);
        match(SysMLv2Parser::KEYWORD_TO);
        setState(1876);
        message_event_member();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1880);
      message_event_member();
      setState(1881);
      match(SysMLv2Parser::KEYWORD_TO);
      setState(1882);
      message_event_member();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Message_event_memberContext ------------------------------------------------------------------

SysMLv2Parser::Message_event_memberContext::Message_event_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Message_eventContext* SysMLv2Parser::Message_event_memberContext::message_event() {
  return getRuleContext<SysMLv2Parser::Message_eventContext>(0);
}


size_t SysMLv2Parser::Message_event_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleMessage_event_member;
}

void SysMLv2Parser::Message_event_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMessage_event_member(this);
}

void SysMLv2Parser::Message_event_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMessage_event_member(this);
}

SysMLv2Parser::Message_event_memberContext* SysMLv2Parser::message_event_member() {
  Message_event_memberContext *_localctx = _tracker.createInstance<Message_event_memberContext>(_ctx, getState());
  enterRule(_localctx, 240, SysMLv2Parser::RuleMessage_event_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1886);
    message_event();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Message_eventContext ------------------------------------------------------------------

SysMLv2Parser::Message_eventContext::Message_eventContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Owned_reference_subsettingContext* SysMLv2Parser::Message_eventContext::owned_reference_subsetting() {
  return getRuleContext<SysMLv2Parser::Owned_reference_subsettingContext>(0);
}


size_t SysMLv2Parser::Message_eventContext::getRuleIndex() const {
  return SysMLv2Parser::RuleMessage_event;
}

void SysMLv2Parser::Message_eventContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMessage_event(this);
}

void SysMLv2Parser::Message_eventContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMessage_event(this);
}

SysMLv2Parser::Message_eventContext* SysMLv2Parser::message_event() {
  Message_eventContext *_localctx = _tracker.createInstance<Message_eventContext>(_ctx, getState());
  enterRule(_localctx, 242, SysMLv2Parser::RuleMessage_event);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1888);
    owned_reference_subsetting();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Flow_usageContext ------------------------------------------------------------------

SysMLv2Parser::Flow_usageContext::Flow_usageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Occurrence_usage_prefixContext* SysMLv2Parser::Flow_usageContext::occurrence_usage_prefix() {
  return getRuleContext<SysMLv2Parser::Occurrence_usage_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Flow_usageContext::KEYWORD_FLOW() {
  return getToken(SysMLv2Parser::KEYWORD_FLOW, 0);
}

SysMLv2Parser::Flow_declarationContext* SysMLv2Parser::Flow_usageContext::flow_declaration() {
  return getRuleContext<SysMLv2Parser::Flow_declarationContext>(0);
}

SysMLv2Parser::Definition_bodyContext* SysMLv2Parser::Flow_usageContext::definition_body() {
  return getRuleContext<SysMLv2Parser::Definition_bodyContext>(0);
}


size_t SysMLv2Parser::Flow_usageContext::getRuleIndex() const {
  return SysMLv2Parser::RuleFlow_usage;
}

void SysMLv2Parser::Flow_usageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFlow_usage(this);
}

void SysMLv2Parser::Flow_usageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFlow_usage(this);
}

SysMLv2Parser::Flow_usageContext* SysMLv2Parser::flow_usage() {
  Flow_usageContext *_localctx = _tracker.createInstance<Flow_usageContext>(_ctx, getState());
  enterRule(_localctx, 244, SysMLv2Parser::RuleFlow_usage);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1890);
    occurrence_usage_prefix();
    setState(1891);
    match(SysMLv2Parser::KEYWORD_FLOW);
    setState(1892);
    flow_declaration();
    setState(1893);
    definition_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Succession_flow_usageContext ------------------------------------------------------------------

SysMLv2Parser::Succession_flow_usageContext::Succession_flow_usageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Occurrence_usage_prefixContext* SysMLv2Parser::Succession_flow_usageContext::occurrence_usage_prefix() {
  return getRuleContext<SysMLv2Parser::Occurrence_usage_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Succession_flow_usageContext::KEYWORD_SUCCSESSION() {
  return getToken(SysMLv2Parser::KEYWORD_SUCCSESSION, 0);
}

tree::TerminalNode* SysMLv2Parser::Succession_flow_usageContext::KEYWORD_FLOW() {
  return getToken(SysMLv2Parser::KEYWORD_FLOW, 0);
}

SysMLv2Parser::Flow_declarationContext* SysMLv2Parser::Succession_flow_usageContext::flow_declaration() {
  return getRuleContext<SysMLv2Parser::Flow_declarationContext>(0);
}

SysMLv2Parser::Definition_bodyContext* SysMLv2Parser::Succession_flow_usageContext::definition_body() {
  return getRuleContext<SysMLv2Parser::Definition_bodyContext>(0);
}


size_t SysMLv2Parser::Succession_flow_usageContext::getRuleIndex() const {
  return SysMLv2Parser::RuleSuccession_flow_usage;
}

void SysMLv2Parser::Succession_flow_usageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSuccession_flow_usage(this);
}

void SysMLv2Parser::Succession_flow_usageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSuccession_flow_usage(this);
}

SysMLv2Parser::Succession_flow_usageContext* SysMLv2Parser::succession_flow_usage() {
  Succession_flow_usageContext *_localctx = _tracker.createInstance<Succession_flow_usageContext>(_ctx, getState());
  enterRule(_localctx, 246, SysMLv2Parser::RuleSuccession_flow_usage);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1895);
    occurrence_usage_prefix();
    setState(1896);
    match(SysMLv2Parser::KEYWORD_SUCCSESSION);
    setState(1897);
    match(SysMLv2Parser::KEYWORD_FLOW);
    setState(1898);
    flow_declaration();
    setState(1899);
    definition_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Flow_declarationContext ------------------------------------------------------------------

SysMLv2Parser::Flow_declarationContext::Flow_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Usage_declarationContext* SysMLv2Parser::Flow_declarationContext::usage_declaration() {
  return getRuleContext<SysMLv2Parser::Usage_declarationContext>(0);
}

SysMLv2Parser::Value_partContext* SysMLv2Parser::Flow_declarationContext::value_part() {
  return getRuleContext<SysMLv2Parser::Value_partContext>(0);
}

std::vector<tree::TerminalNode *> SysMLv2Parser::Flow_declarationContext::KEYWORD_OF() {
  return getTokens(SysMLv2Parser::KEYWORD_OF);
}

tree::TerminalNode* SysMLv2Parser::Flow_declarationContext::KEYWORD_OF(size_t i) {
  return getToken(SysMLv2Parser::KEYWORD_OF, i);
}

SysMLv2Parser::Flow_payload_feature_memberContext* SysMLv2Parser::Flow_declarationContext::flow_payload_feature_member() {
  return getRuleContext<SysMLv2Parser::Flow_payload_feature_memberContext>(0);
}

std::vector<SysMLv2Parser::Flow_end_memberContext *> SysMLv2Parser::Flow_declarationContext::flow_end_member() {
  return getRuleContexts<SysMLv2Parser::Flow_end_memberContext>();
}

SysMLv2Parser::Flow_end_memberContext* SysMLv2Parser::Flow_declarationContext::flow_end_member(size_t i) {
  return getRuleContext<SysMLv2Parser::Flow_end_memberContext>(i);
}

tree::TerminalNode* SysMLv2Parser::Flow_declarationContext::KEYWORD_TO() {
  return getToken(SysMLv2Parser::KEYWORD_TO, 0);
}


size_t SysMLv2Parser::Flow_declarationContext::getRuleIndex() const {
  return SysMLv2Parser::RuleFlow_declaration;
}

void SysMLv2Parser::Flow_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFlow_declaration(this);
}

void SysMLv2Parser::Flow_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFlow_declaration(this);
}

SysMLv2Parser::Flow_declarationContext* SysMLv2Parser::flow_declaration() {
  Flow_declarationContext *_localctx = _tracker.createInstance<Flow_declarationContext>(_ctx, getState());
  enterRule(_localctx, 248, SysMLv2Parser::RuleFlow_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1920);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 106, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1901);
      usage_declaration();
      setState(1903);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == SysMLv2Parser::KEYWORD_DEFAULT || _la == SysMLv2Parser::SYMBOL_DEF_ASSIGN

      || _la == SysMLv2Parser::SYMBOL_EQUALS) {
        setState(1902);
        value_part();
      }
      setState(1907);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 104, _ctx)) {
      case 1: {
        setState(1905);
        match(SysMLv2Parser::KEYWORD_OF);
        setState(1906);
        flow_payload_feature_member();
        break;
      }

      default:
        break;
      }
      setState(1914);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == SysMLv2Parser::KEYWORD_OF) {
        setState(1909);
        match(SysMLv2Parser::KEYWORD_OF);
        setState(1910);
        flow_end_member();
        setState(1911);
        match(SysMLv2Parser::KEYWORD_TO);
        setState(1912);
        flow_end_member();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1916);
      flow_end_member();
      setState(1917);
      match(SysMLv2Parser::KEYWORD_TO);
      setState(1918);
      flow_end_member();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Flow_payload_feature_memberContext ------------------------------------------------------------------

SysMLv2Parser::Flow_payload_feature_memberContext::Flow_payload_feature_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Flow_payload_featureContext* SysMLv2Parser::Flow_payload_feature_memberContext::flow_payload_feature() {
  return getRuleContext<SysMLv2Parser::Flow_payload_featureContext>(0);
}


size_t SysMLv2Parser::Flow_payload_feature_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleFlow_payload_feature_member;
}

void SysMLv2Parser::Flow_payload_feature_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFlow_payload_feature_member(this);
}

void SysMLv2Parser::Flow_payload_feature_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFlow_payload_feature_member(this);
}

SysMLv2Parser::Flow_payload_feature_memberContext* SysMLv2Parser::flow_payload_feature_member() {
  Flow_payload_feature_memberContext *_localctx = _tracker.createInstance<Flow_payload_feature_memberContext>(_ctx, getState());
  enterRule(_localctx, 250, SysMLv2Parser::RuleFlow_payload_feature_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1922);
    flow_payload_feature();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Flow_payload_featureContext ------------------------------------------------------------------

SysMLv2Parser::Flow_payload_featureContext::Flow_payload_featureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Payload_featureContext* SysMLv2Parser::Flow_payload_featureContext::payload_feature() {
  return getRuleContext<SysMLv2Parser::Payload_featureContext>(0);
}


size_t SysMLv2Parser::Flow_payload_featureContext::getRuleIndex() const {
  return SysMLv2Parser::RuleFlow_payload_feature;
}

void SysMLv2Parser::Flow_payload_featureContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFlow_payload_feature(this);
}

void SysMLv2Parser::Flow_payload_featureContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFlow_payload_feature(this);
}

SysMLv2Parser::Flow_payload_featureContext* SysMLv2Parser::flow_payload_feature() {
  Flow_payload_featureContext *_localctx = _tracker.createInstance<Flow_payload_featureContext>(_ctx, getState());
  enterRule(_localctx, 252, SysMLv2Parser::RuleFlow_payload_feature);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1924);
    payload_feature();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Payload_featureContext ------------------------------------------------------------------

SysMLv2Parser::Payload_featureContext::Payload_featureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::IdentificationContext* SysMLv2Parser::Payload_featureContext::identification() {
  return getRuleContext<SysMLv2Parser::IdentificationContext>(0);
}

SysMLv2Parser::Payload_feature_specialization_partContext* SysMLv2Parser::Payload_featureContext::payload_feature_specialization_part() {
  return getRuleContext<SysMLv2Parser::Payload_feature_specialization_partContext>(0);
}

SysMLv2Parser::Value_partContext* SysMLv2Parser::Payload_featureContext::value_part() {
  return getRuleContext<SysMLv2Parser::Value_partContext>(0);
}

SysMLv2Parser::Owned_feature_typingContext* SysMLv2Parser::Payload_featureContext::owned_feature_typing() {
  return getRuleContext<SysMLv2Parser::Owned_feature_typingContext>(0);
}

SysMLv2Parser::Owned_multiplicityContext* SysMLv2Parser::Payload_featureContext::owned_multiplicity() {
  return getRuleContext<SysMLv2Parser::Owned_multiplicityContext>(0);
}


size_t SysMLv2Parser::Payload_featureContext::getRuleIndex() const {
  return SysMLv2Parser::RulePayload_feature;
}

void SysMLv2Parser::Payload_featureContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPayload_feature(this);
}

void SysMLv2Parser::Payload_featureContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPayload_feature(this);
}

SysMLv2Parser::Payload_featureContext* SysMLv2Parser::payload_feature() {
  Payload_featureContext *_localctx = _tracker.createInstance<Payload_featureContext>(_ctx, getState());
  enterRule(_localctx, 254, SysMLv2Parser::RulePayload_feature);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1934);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 107, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1926);
      identification();
      setState(1927);
      payload_feature_specialization_part();
      setState(1928);
      value_part();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1930);
      owned_feature_typing();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1931);
      owned_multiplicity();
      setState(1932);
      owned_feature_typing();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Payload_feature_specialization_partContext ------------------------------------------------------------------

SysMLv2Parser::Payload_feature_specialization_partContext::Payload_feature_specialization_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<SysMLv2Parser::Feature_specilizationContext *> SysMLv2Parser::Payload_feature_specialization_partContext::feature_specilization() {
  return getRuleContexts<SysMLv2Parser::Feature_specilizationContext>();
}

SysMLv2Parser::Feature_specilizationContext* SysMLv2Parser::Payload_feature_specialization_partContext::feature_specilization(size_t i) {
  return getRuleContext<SysMLv2Parser::Feature_specilizationContext>(i);
}

SysMLv2Parser::Multiplicity_partContext* SysMLv2Parser::Payload_feature_specialization_partContext::multiplicity_part() {
  return getRuleContext<SysMLv2Parser::Multiplicity_partContext>(0);
}


size_t SysMLv2Parser::Payload_feature_specialization_partContext::getRuleIndex() const {
  return SysMLv2Parser::RulePayload_feature_specialization_part;
}

void SysMLv2Parser::Payload_feature_specialization_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPayload_feature_specialization_part(this);
}

void SysMLv2Parser::Payload_feature_specialization_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPayload_feature_specialization_part(this);
}

SysMLv2Parser::Payload_feature_specialization_partContext* SysMLv2Parser::payload_feature_specialization_part() {
  Payload_feature_specialization_partContext *_localctx = _tracker.createInstance<Payload_feature_specialization_partContext>(_ctx, getState());
  enterRule(_localctx, 256, SysMLv2Parser::RulePayload_feature_specialization_part);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1956);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SysMLv2Parser::TYPED_BY:
      case SysMLv2Parser::SUBSETS:
      case SysMLv2Parser::REFERENCES:
      case SysMLv2Parser::REDEFINES:
      case SysMLv2Parser::KEYWORD_IN:
      case SysMLv2Parser::KEYWORD_INOUT:
      case SysMLv2Parser::KEYWORD_OUT: {
        enterOuterAlt(_localctx, 1);
        setState(1937); 
        _errHandler->sync(this);
        alt = 1;
        do {
          switch (alt) {
            case 1: {
                  setState(1936);
                  feature_specilization();
                  break;
                }

          default:
            throw NoViableAltException(this);
          }
          setState(1939); 
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 108, _ctx);
        } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
        setState(1942);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == SysMLv2Parser::SYMBOL_SQUARE_BRACKET_OPEN) {
          setState(1941);
          multiplicity_part();
        }
        setState(1947);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (((((_la - 83) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 83)) & 3377699720527901) != 0) || _la == SysMLv2Parser::KEYWORD_OUT) {
          setState(1944);
          feature_specilization();
          setState(1949);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      case SysMLv2Parser::SYMBOL_SQUARE_BRACKET_OPEN: {
        enterOuterAlt(_localctx, 2);
        setState(1950);
        multiplicity_part();
        setState(1952); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(1951);
          feature_specilization();
          setState(1954); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while (((((_la - 83) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 83)) & 3377699720527901) != 0) || _la == SysMLv2Parser::KEYWORD_OUT);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Flow_end_memberContext ------------------------------------------------------------------

SysMLv2Parser::Flow_end_memberContext::Flow_end_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Flow_endContext* SysMLv2Parser::Flow_end_memberContext::flow_end() {
  return getRuleContext<SysMLv2Parser::Flow_endContext>(0);
}


size_t SysMLv2Parser::Flow_end_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleFlow_end_member;
}

void SysMLv2Parser::Flow_end_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFlow_end_member(this);
}

void SysMLv2Parser::Flow_end_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFlow_end_member(this);
}

SysMLv2Parser::Flow_end_memberContext* SysMLv2Parser::flow_end_member() {
  Flow_end_memberContext *_localctx = _tracker.createInstance<Flow_end_memberContext>(_ctx, getState());
  enterRule(_localctx, 258, SysMLv2Parser::RuleFlow_end_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1958);
    flow_end();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Flow_endContext ------------------------------------------------------------------

SysMLv2Parser::Flow_endContext::Flow_endContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Flow_feature_memberContext* SysMLv2Parser::Flow_endContext::flow_feature_member() {
  return getRuleContext<SysMLv2Parser::Flow_feature_memberContext>(0);
}

SysMLv2Parser::Flow_end_subsettingContext* SysMLv2Parser::Flow_endContext::flow_end_subsetting() {
  return getRuleContext<SysMLv2Parser::Flow_end_subsettingContext>(0);
}


size_t SysMLv2Parser::Flow_endContext::getRuleIndex() const {
  return SysMLv2Parser::RuleFlow_end;
}

void SysMLv2Parser::Flow_endContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFlow_end(this);
}

void SysMLv2Parser::Flow_endContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFlow_end(this);
}

SysMLv2Parser::Flow_endContext* SysMLv2Parser::flow_end() {
  Flow_endContext *_localctx = _tracker.createInstance<Flow_endContext>(_ctx, getState());
  enterRule(_localctx, 260, SysMLv2Parser::RuleFlow_end);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1961);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 113, _ctx)) {
    case 1: {
      setState(1960);
      flow_end_subsetting();
      break;
    }

    default:
      break;
    }
    setState(1963);
    flow_feature_member();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Flow_end_subsettingContext ------------------------------------------------------------------

SysMLv2Parser::Flow_end_subsettingContext::Flow_end_subsettingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Qualified_nameContext* SysMLv2Parser::Flow_end_subsettingContext::qualified_name() {
  return getRuleContext<SysMLv2Parser::Qualified_nameContext>(0);
}

SysMLv2Parser::Feature_chain_prefixContext* SysMLv2Parser::Flow_end_subsettingContext::feature_chain_prefix() {
  return getRuleContext<SysMLv2Parser::Feature_chain_prefixContext>(0);
}


size_t SysMLv2Parser::Flow_end_subsettingContext::getRuleIndex() const {
  return SysMLv2Parser::RuleFlow_end_subsetting;
}

void SysMLv2Parser::Flow_end_subsettingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFlow_end_subsetting(this);
}

void SysMLv2Parser::Flow_end_subsettingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFlow_end_subsetting(this);
}

SysMLv2Parser::Flow_end_subsettingContext* SysMLv2Parser::flow_end_subsetting() {
  Flow_end_subsettingContext *_localctx = _tracker.createInstance<Flow_end_subsettingContext>(_ctx, getState());
  enterRule(_localctx, 262, SysMLv2Parser::RuleFlow_end_subsetting);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1967);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 114, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1965);
      qualified_name();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1966);
      feature_chain_prefix();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Feature_chain_prefixContext ------------------------------------------------------------------

SysMLv2Parser::Feature_chain_prefixContext::Feature_chain_prefixContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<SysMLv2Parser::Owned_feature_chainingContext *> SysMLv2Parser::Feature_chain_prefixContext::owned_feature_chaining() {
  return getRuleContexts<SysMLv2Parser::Owned_feature_chainingContext>();
}

SysMLv2Parser::Owned_feature_chainingContext* SysMLv2Parser::Feature_chain_prefixContext::owned_feature_chaining(size_t i) {
  return getRuleContext<SysMLv2Parser::Owned_feature_chainingContext>(i);
}

std::vector<tree::TerminalNode *> SysMLv2Parser::Feature_chain_prefixContext::SYMBOL_DOT() {
  return getTokens(SysMLv2Parser::SYMBOL_DOT);
}

tree::TerminalNode* SysMLv2Parser::Feature_chain_prefixContext::SYMBOL_DOT(size_t i) {
  return getToken(SysMLv2Parser::SYMBOL_DOT, i);
}


size_t SysMLv2Parser::Feature_chain_prefixContext::getRuleIndex() const {
  return SysMLv2Parser::RuleFeature_chain_prefix;
}

void SysMLv2Parser::Feature_chain_prefixContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFeature_chain_prefix(this);
}

void SysMLv2Parser::Feature_chain_prefixContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFeature_chain_prefix(this);
}

SysMLv2Parser::Feature_chain_prefixContext* SysMLv2Parser::feature_chain_prefix() {
  Feature_chain_prefixContext *_localctx = _tracker.createInstance<Feature_chain_prefixContext>(_ctx, getState());
  enterRule(_localctx, 264, SysMLv2Parser::RuleFeature_chain_prefix);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1969);
    owned_feature_chaining();
    setState(1970);
    match(SysMLv2Parser::SYMBOL_DOT);
    setState(1974); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(1971);
              owned_feature_chaining();
              setState(1972);
              match(SysMLv2Parser::SYMBOL_DOT);
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(1976); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 115, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Flow_feature_memberContext ------------------------------------------------------------------

SysMLv2Parser::Flow_feature_memberContext::Flow_feature_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Flow_featureContext* SysMLv2Parser::Flow_feature_memberContext::flow_feature() {
  return getRuleContext<SysMLv2Parser::Flow_featureContext>(0);
}


size_t SysMLv2Parser::Flow_feature_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleFlow_feature_member;
}

void SysMLv2Parser::Flow_feature_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFlow_feature_member(this);
}

void SysMLv2Parser::Flow_feature_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFlow_feature_member(this);
}

SysMLv2Parser::Flow_feature_memberContext* SysMLv2Parser::flow_feature_member() {
  Flow_feature_memberContext *_localctx = _tracker.createInstance<Flow_feature_memberContext>(_ctx, getState());
  enterRule(_localctx, 266, SysMLv2Parser::RuleFlow_feature_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1978);
    flow_feature();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Flow_featureContext ------------------------------------------------------------------

SysMLv2Parser::Flow_featureContext::Flow_featureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Flow_feature_redefinitionContext* SysMLv2Parser::Flow_featureContext::flow_feature_redefinition() {
  return getRuleContext<SysMLv2Parser::Flow_feature_redefinitionContext>(0);
}


size_t SysMLv2Parser::Flow_featureContext::getRuleIndex() const {
  return SysMLv2Parser::RuleFlow_feature;
}

void SysMLv2Parser::Flow_featureContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFlow_feature(this);
}

void SysMLv2Parser::Flow_featureContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFlow_feature(this);
}

SysMLv2Parser::Flow_featureContext* SysMLv2Parser::flow_feature() {
  Flow_featureContext *_localctx = _tracker.createInstance<Flow_featureContext>(_ctx, getState());
  enterRule(_localctx, 268, SysMLv2Parser::RuleFlow_feature);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1980);
    flow_feature_redefinition();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Flow_feature_redefinitionContext ------------------------------------------------------------------

SysMLv2Parser::Flow_feature_redefinitionContext::Flow_feature_redefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Qualified_nameContext* SysMLv2Parser::Flow_feature_redefinitionContext::qualified_name() {
  return getRuleContext<SysMLv2Parser::Qualified_nameContext>(0);
}


size_t SysMLv2Parser::Flow_feature_redefinitionContext::getRuleIndex() const {
  return SysMLv2Parser::RuleFlow_feature_redefinition;
}

void SysMLv2Parser::Flow_feature_redefinitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFlow_feature_redefinition(this);
}

void SysMLv2Parser::Flow_feature_redefinitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFlow_feature_redefinition(this);
}

SysMLv2Parser::Flow_feature_redefinitionContext* SysMLv2Parser::flow_feature_redefinition() {
  Flow_feature_redefinitionContext *_localctx = _tracker.createInstance<Flow_feature_redefinitionContext>(_ctx, getState());
  enterRule(_localctx, 270, SysMLv2Parser::RuleFlow_feature_redefinition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1982);
    qualified_name();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Action_definitionContext ------------------------------------------------------------------

SysMLv2Parser::Action_definitionContext::Action_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Occurrence_definition_prefixContext* SysMLv2Parser::Action_definitionContext::occurrence_definition_prefix() {
  return getRuleContext<SysMLv2Parser::Occurrence_definition_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Action_definitionContext::KEYWORD_ACTION() {
  return getToken(SysMLv2Parser::KEYWORD_ACTION, 0);
}

tree::TerminalNode* SysMLv2Parser::Action_definitionContext::KEYWORD_DEF() {
  return getToken(SysMLv2Parser::KEYWORD_DEF, 0);
}

SysMLv2Parser::Definition_declarationContext* SysMLv2Parser::Action_definitionContext::definition_declaration() {
  return getRuleContext<SysMLv2Parser::Definition_declarationContext>(0);
}

SysMLv2Parser::Action_bodyContext* SysMLv2Parser::Action_definitionContext::action_body() {
  return getRuleContext<SysMLv2Parser::Action_bodyContext>(0);
}


size_t SysMLv2Parser::Action_definitionContext::getRuleIndex() const {
  return SysMLv2Parser::RuleAction_definition;
}

void SysMLv2Parser::Action_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAction_definition(this);
}

void SysMLv2Parser::Action_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAction_definition(this);
}

SysMLv2Parser::Action_definitionContext* SysMLv2Parser::action_definition() {
  Action_definitionContext *_localctx = _tracker.createInstance<Action_definitionContext>(_ctx, getState());
  enterRule(_localctx, 272, SysMLv2Parser::RuleAction_definition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1984);
    occurrence_definition_prefix();
    setState(1985);
    match(SysMLv2Parser::KEYWORD_ACTION);
    setState(1986);
    match(SysMLv2Parser::KEYWORD_DEF);
    setState(1987);
    definition_declaration();
    setState(1988);
    action_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Action_bodyContext ------------------------------------------------------------------

SysMLv2Parser::Action_bodyContext::Action_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Action_bodyContext::SYMBOL_STATEMENT_DELIMITER() {
  return getToken(SysMLv2Parser::SYMBOL_STATEMENT_DELIMITER, 0);
}

tree::TerminalNode* SysMLv2Parser::Action_bodyContext::SYMBOL_CURLY_BRACKET_OPEN() {
  return getToken(SysMLv2Parser::SYMBOL_CURLY_BRACKET_OPEN, 0);
}

tree::TerminalNode* SysMLv2Parser::Action_bodyContext::SYMBOL_CURLY_BRACKET_CLOSE() {
  return getToken(SysMLv2Parser::SYMBOL_CURLY_BRACKET_CLOSE, 0);
}

std::vector<SysMLv2Parser::Action_body_itemContext *> SysMLv2Parser::Action_bodyContext::action_body_item() {
  return getRuleContexts<SysMLv2Parser::Action_body_itemContext>();
}

SysMLv2Parser::Action_body_itemContext* SysMLv2Parser::Action_bodyContext::action_body_item(size_t i) {
  return getRuleContext<SysMLv2Parser::Action_body_itemContext>(i);
}


size_t SysMLv2Parser::Action_bodyContext::getRuleIndex() const {
  return SysMLv2Parser::RuleAction_body;
}

void SysMLv2Parser::Action_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAction_body(this);
}

void SysMLv2Parser::Action_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAction_body(this);
}

SysMLv2Parser::Action_bodyContext* SysMLv2Parser::action_body() {
  Action_bodyContext *_localctx = _tracker.createInstance<Action_bodyContext>(_ctx, getState());
  enterRule(_localctx, 274, SysMLv2Parser::RuleAction_body);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1999);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SysMLv2Parser::SYMBOL_STATEMENT_DELIMITER: {
        enterOuterAlt(_localctx, 1);
        setState(1990);
        match(SysMLv2Parser::SYMBOL_STATEMENT_DELIMITER);
        break;
      }

      case SysMLv2Parser::SYMBOL_CURLY_BRACKET_OPEN: {
        enterOuterAlt(_localctx, 2);
        setState(1991);
        match(SysMLv2Parser::SYMBOL_CURLY_BRACKET_OPEN);
        setState(1995);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & -3101591291931574480) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 65)) & 2018228497054263181) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 129)) & 4967483587906521145) != 0) || ((((_la - 201) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 201)) & 2154037349) != 0)) {
          setState(1992);
          action_body_item();
          setState(1997);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(1998);
        match(SysMLv2Parser::SYMBOL_CURLY_BRACKET_CLOSE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Action_body_itemContext ------------------------------------------------------------------

SysMLv2Parser::Action_body_itemContext::Action_body_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Non_behavior_body_itemContext* SysMLv2Parser::Action_body_itemContext::non_behavior_body_item() {
  return getRuleContext<SysMLv2Parser::Non_behavior_body_itemContext>(0);
}

SysMLv2Parser::Initial_node_memberContext* SysMLv2Parser::Action_body_itemContext::initial_node_member() {
  return getRuleContext<SysMLv2Parser::Initial_node_memberContext>(0);
}

std::vector<SysMLv2Parser::Action_target_succession_memberContext *> SysMLv2Parser::Action_body_itemContext::action_target_succession_member() {
  return getRuleContexts<SysMLv2Parser::Action_target_succession_memberContext>();
}

SysMLv2Parser::Action_target_succession_memberContext* SysMLv2Parser::Action_body_itemContext::action_target_succession_member(size_t i) {
  return getRuleContext<SysMLv2Parser::Action_target_succession_memberContext>(i);
}

SysMLv2Parser::Action_behavior_memberContext* SysMLv2Parser::Action_body_itemContext::action_behavior_member() {
  return getRuleContext<SysMLv2Parser::Action_behavior_memberContext>(0);
}

SysMLv2Parser::Source_succession_memberContext* SysMLv2Parser::Action_body_itemContext::source_succession_member() {
  return getRuleContext<SysMLv2Parser::Source_succession_memberContext>(0);
}

SysMLv2Parser::Guarded_succession_memberContext* SysMLv2Parser::Action_body_itemContext::guarded_succession_member() {
  return getRuleContext<SysMLv2Parser::Guarded_succession_memberContext>(0);
}


size_t SysMLv2Parser::Action_body_itemContext::getRuleIndex() const {
  return SysMLv2Parser::RuleAction_body_item;
}

void SysMLv2Parser::Action_body_itemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAction_body_item(this);
}

void SysMLv2Parser::Action_body_itemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAction_body_item(this);
}

SysMLv2Parser::Action_body_itemContext* SysMLv2Parser::action_body_item() {
  Action_body_itemContext *_localctx = _tracker.createInstance<Action_body_itemContext>(_ctx, getState());
  enterRule(_localctx, 276, SysMLv2Parser::RuleAction_body_item);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(2017);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 121, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2001);
      non_behavior_body_item();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2002);
      initial_node_member();
      setState(2006);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 118, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(2003);
          action_target_succession_member(); 
        }
        setState(2008);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 118, _ctx);
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2010);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == SysMLv2Parser::KEYWORD_THEN) {
        setState(2009);
        source_succession_member();
      }
      setState(2012);
      action_behavior_member();
      setState(2014);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 120, _ctx)) {
      case 1: {
        setState(2013);
        action_target_succession_member();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2016);
      guarded_succession_member();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Non_behavior_body_itemContext ------------------------------------------------------------------

SysMLv2Parser::Non_behavior_body_itemContext::Non_behavior_body_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Namespace_importContext* SysMLv2Parser::Non_behavior_body_itemContext::namespace_import() {
  return getRuleContext<SysMLv2Parser::Namespace_importContext>(0);
}

SysMLv2Parser::Alias_memberContext* SysMLv2Parser::Non_behavior_body_itemContext::alias_member() {
  return getRuleContext<SysMLv2Parser::Alias_memberContext>(0);
}

SysMLv2Parser::Definition_memberContext* SysMLv2Parser::Non_behavior_body_itemContext::definition_member() {
  return getRuleContext<SysMLv2Parser::Definition_memberContext>(0);
}

SysMLv2Parser::Variant_usage_memberContext* SysMLv2Parser::Non_behavior_body_itemContext::variant_usage_member() {
  return getRuleContext<SysMLv2Parser::Variant_usage_memberContext>(0);
}

SysMLv2Parser::Structure_usage_memberContext* SysMLv2Parser::Non_behavior_body_itemContext::structure_usage_member() {
  return getRuleContext<SysMLv2Parser::Structure_usage_memberContext>(0);
}

SysMLv2Parser::Source_succession_memberContext* SysMLv2Parser::Non_behavior_body_itemContext::source_succession_member() {
  return getRuleContext<SysMLv2Parser::Source_succession_memberContext>(0);
}


size_t SysMLv2Parser::Non_behavior_body_itemContext::getRuleIndex() const {
  return SysMLv2Parser::RuleNon_behavior_body_item;
}

void SysMLv2Parser::Non_behavior_body_itemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNon_behavior_body_item(this);
}

void SysMLv2Parser::Non_behavior_body_itemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNon_behavior_body_item(this);
}

SysMLv2Parser::Non_behavior_body_itemContext* SysMLv2Parser::non_behavior_body_item() {
  Non_behavior_body_itemContext *_localctx = _tracker.createInstance<Non_behavior_body_itemContext>(_ctx, getState());
  enterRule(_localctx, 278, SysMLv2Parser::RuleNon_behavior_body_item);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2027);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 123, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2019);
      namespace_import();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2020);
      alias_member();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2021);
      definition_member();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2022);
      variant_usage_member();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2024);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == SysMLv2Parser::KEYWORD_THEN) {
        setState(2023);
        source_succession_member();
      }
      setState(2026);
      structure_usage_member();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Action_behavior_memberContext ------------------------------------------------------------------

SysMLv2Parser::Action_behavior_memberContext::Action_behavior_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Behavior_usage_memberContext* SysMLv2Parser::Action_behavior_memberContext::behavior_usage_member() {
  return getRuleContext<SysMLv2Parser::Behavior_usage_memberContext>(0);
}

SysMLv2Parser::Action_node_memberContext* SysMLv2Parser::Action_behavior_memberContext::action_node_member() {
  return getRuleContext<SysMLv2Parser::Action_node_memberContext>(0);
}


size_t SysMLv2Parser::Action_behavior_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleAction_behavior_member;
}

void SysMLv2Parser::Action_behavior_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAction_behavior_member(this);
}

void SysMLv2Parser::Action_behavior_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAction_behavior_member(this);
}

SysMLv2Parser::Action_behavior_memberContext* SysMLv2Parser::action_behavior_member() {
  Action_behavior_memberContext *_localctx = _tracker.createInstance<Action_behavior_memberContext>(_ctx, getState());
  enterRule(_localctx, 280, SysMLv2Parser::RuleAction_behavior_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2031);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 124, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2029);
      behavior_usage_member();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2030);
      action_node_member();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Initial_node_memberContext ------------------------------------------------------------------

SysMLv2Parser::Initial_node_memberContext::Initial_node_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Member_prefixContext* SysMLv2Parser::Initial_node_memberContext::member_prefix() {
  return getRuleContext<SysMLv2Parser::Member_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Initial_node_memberContext::KEYWORD_FIRST() {
  return getToken(SysMLv2Parser::KEYWORD_FIRST, 0);
}

SysMLv2Parser::Qualified_nameContext* SysMLv2Parser::Initial_node_memberContext::qualified_name() {
  return getRuleContext<SysMLv2Parser::Qualified_nameContext>(0);
}

SysMLv2Parser::Relationship_bodyContext* SysMLv2Parser::Initial_node_memberContext::relationship_body() {
  return getRuleContext<SysMLv2Parser::Relationship_bodyContext>(0);
}


size_t SysMLv2Parser::Initial_node_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleInitial_node_member;
}

void SysMLv2Parser::Initial_node_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInitial_node_member(this);
}

void SysMLv2Parser::Initial_node_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInitial_node_member(this);
}

SysMLv2Parser::Initial_node_memberContext* SysMLv2Parser::initial_node_member() {
  Initial_node_memberContext *_localctx = _tracker.createInstance<Initial_node_memberContext>(_ctx, getState());
  enterRule(_localctx, 282, SysMLv2Parser::RuleInitial_node_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2033);
    member_prefix();
    setState(2034);
    match(SysMLv2Parser::KEYWORD_FIRST);
    setState(2035);
    qualified_name();
    setState(2036);
    relationship_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Action_node_memberContext ------------------------------------------------------------------

SysMLv2Parser::Action_node_memberContext::Action_node_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Member_prefixContext* SysMLv2Parser::Action_node_memberContext::member_prefix() {
  return getRuleContext<SysMLv2Parser::Member_prefixContext>(0);
}

SysMLv2Parser::Action_nodeContext* SysMLv2Parser::Action_node_memberContext::action_node() {
  return getRuleContext<SysMLv2Parser::Action_nodeContext>(0);
}


size_t SysMLv2Parser::Action_node_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleAction_node_member;
}

void SysMLv2Parser::Action_node_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAction_node_member(this);
}

void SysMLv2Parser::Action_node_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAction_node_member(this);
}

SysMLv2Parser::Action_node_memberContext* SysMLv2Parser::action_node_member() {
  Action_node_memberContext *_localctx = _tracker.createInstance<Action_node_memberContext>(_ctx, getState());
  enterRule(_localctx, 284, SysMLv2Parser::RuleAction_node_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2038);
    member_prefix();
    setState(2039);
    action_node();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Action_target_succession_memberContext ------------------------------------------------------------------

SysMLv2Parser::Action_target_succession_memberContext::Action_target_succession_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Member_prefixContext* SysMLv2Parser::Action_target_succession_memberContext::member_prefix() {
  return getRuleContext<SysMLv2Parser::Member_prefixContext>(0);
}

SysMLv2Parser::Action_target_successionContext* SysMLv2Parser::Action_target_succession_memberContext::action_target_succession() {
  return getRuleContext<SysMLv2Parser::Action_target_successionContext>(0);
}


size_t SysMLv2Parser::Action_target_succession_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleAction_target_succession_member;
}

void SysMLv2Parser::Action_target_succession_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAction_target_succession_member(this);
}

void SysMLv2Parser::Action_target_succession_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAction_target_succession_member(this);
}

SysMLv2Parser::Action_target_succession_memberContext* SysMLv2Parser::action_target_succession_member() {
  Action_target_succession_memberContext *_localctx = _tracker.createInstance<Action_target_succession_memberContext>(_ctx, getState());
  enterRule(_localctx, 286, SysMLv2Parser::RuleAction_target_succession_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2041);
    member_prefix();
    setState(2042);
    action_target_succession();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Guarded_succession_memberContext ------------------------------------------------------------------

SysMLv2Parser::Guarded_succession_memberContext::Guarded_succession_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Member_prefixContext* SysMLv2Parser::Guarded_succession_memberContext::member_prefix() {
  return getRuleContext<SysMLv2Parser::Member_prefixContext>(0);
}

SysMLv2Parser::Guarded_successionContext* SysMLv2Parser::Guarded_succession_memberContext::guarded_succession() {
  return getRuleContext<SysMLv2Parser::Guarded_successionContext>(0);
}


size_t SysMLv2Parser::Guarded_succession_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleGuarded_succession_member;
}

void SysMLv2Parser::Guarded_succession_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGuarded_succession_member(this);
}

void SysMLv2Parser::Guarded_succession_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGuarded_succession_member(this);
}

SysMLv2Parser::Guarded_succession_memberContext* SysMLv2Parser::guarded_succession_member() {
  Guarded_succession_memberContext *_localctx = _tracker.createInstance<Guarded_succession_memberContext>(_ctx, getState());
  enterRule(_localctx, 288, SysMLv2Parser::RuleGuarded_succession_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2044);
    member_prefix();
    setState(2045);
    guarded_succession();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Action_usageContext ------------------------------------------------------------------

SysMLv2Parser::Action_usageContext::Action_usageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Occurrence_usage_prefixContext* SysMLv2Parser::Action_usageContext::occurrence_usage_prefix() {
  return getRuleContext<SysMLv2Parser::Occurrence_usage_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Action_usageContext::KEYWORD_ACTION() {
  return getToken(SysMLv2Parser::KEYWORD_ACTION, 0);
}

SysMLv2Parser::Action_usage_declarationContext* SysMLv2Parser::Action_usageContext::action_usage_declaration() {
  return getRuleContext<SysMLv2Parser::Action_usage_declarationContext>(0);
}

SysMLv2Parser::Action_bodyContext* SysMLv2Parser::Action_usageContext::action_body() {
  return getRuleContext<SysMLv2Parser::Action_bodyContext>(0);
}


size_t SysMLv2Parser::Action_usageContext::getRuleIndex() const {
  return SysMLv2Parser::RuleAction_usage;
}

void SysMLv2Parser::Action_usageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAction_usage(this);
}

void SysMLv2Parser::Action_usageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAction_usage(this);
}

SysMLv2Parser::Action_usageContext* SysMLv2Parser::action_usage() {
  Action_usageContext *_localctx = _tracker.createInstance<Action_usageContext>(_ctx, getState());
  enterRule(_localctx, 290, SysMLv2Parser::RuleAction_usage);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2047);
    occurrence_usage_prefix();
    setState(2048);
    match(SysMLv2Parser::KEYWORD_ACTION);
    setState(2049);
    action_usage_declaration();
    setState(2050);
    action_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Action_usage_declarationContext ------------------------------------------------------------------

SysMLv2Parser::Action_usage_declarationContext::Action_usage_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Usage_declarationContext* SysMLv2Parser::Action_usage_declarationContext::usage_declaration() {
  return getRuleContext<SysMLv2Parser::Usage_declarationContext>(0);
}

SysMLv2Parser::Value_partContext* SysMLv2Parser::Action_usage_declarationContext::value_part() {
  return getRuleContext<SysMLv2Parser::Value_partContext>(0);
}


size_t SysMLv2Parser::Action_usage_declarationContext::getRuleIndex() const {
  return SysMLv2Parser::RuleAction_usage_declaration;
}

void SysMLv2Parser::Action_usage_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAction_usage_declaration(this);
}

void SysMLv2Parser::Action_usage_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAction_usage_declaration(this);
}

SysMLv2Parser::Action_usage_declarationContext* SysMLv2Parser::action_usage_declaration() {
  Action_usage_declarationContext *_localctx = _tracker.createInstance<Action_usage_declarationContext>(_ctx, getState());
  enterRule(_localctx, 292, SysMLv2Parser::RuleAction_usage_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2052);
    usage_declaration();
    setState(2054);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_DEFAULT || _la == SysMLv2Parser::SYMBOL_DEF_ASSIGN

    || _la == SysMLv2Parser::SYMBOL_EQUALS) {
      setState(2053);
      value_part();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Perform_action_usageContext ------------------------------------------------------------------

SysMLv2Parser::Perform_action_usageContext::Perform_action_usageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Occurrence_usage_prefixContext* SysMLv2Parser::Perform_action_usageContext::occurrence_usage_prefix() {
  return getRuleContext<SysMLv2Parser::Occurrence_usage_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Perform_action_usageContext::KEYWORD_PERFORM() {
  return getToken(SysMLv2Parser::KEYWORD_PERFORM, 0);
}

SysMLv2Parser::Perform_action_usage_declarationContext* SysMLv2Parser::Perform_action_usageContext::perform_action_usage_declaration() {
  return getRuleContext<SysMLv2Parser::Perform_action_usage_declarationContext>(0);
}

SysMLv2Parser::Action_bodyContext* SysMLv2Parser::Perform_action_usageContext::action_body() {
  return getRuleContext<SysMLv2Parser::Action_bodyContext>(0);
}


size_t SysMLv2Parser::Perform_action_usageContext::getRuleIndex() const {
  return SysMLv2Parser::RulePerform_action_usage;
}

void SysMLv2Parser::Perform_action_usageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPerform_action_usage(this);
}

void SysMLv2Parser::Perform_action_usageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPerform_action_usage(this);
}

SysMLv2Parser::Perform_action_usageContext* SysMLv2Parser::perform_action_usage() {
  Perform_action_usageContext *_localctx = _tracker.createInstance<Perform_action_usageContext>(_ctx, getState());
  enterRule(_localctx, 294, SysMLv2Parser::RulePerform_action_usage);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2056);
    occurrence_usage_prefix();
    setState(2057);
    match(SysMLv2Parser::KEYWORD_PERFORM);
    setState(2058);
    perform_action_usage_declaration();
    setState(2059);
    action_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Perform_action_usage_declarationContext ------------------------------------------------------------------

SysMLv2Parser::Perform_action_usage_declarationContext::Perform_action_usage_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Owned_reference_subsettingContext* SysMLv2Parser::Perform_action_usage_declarationContext::owned_reference_subsetting() {
  return getRuleContext<SysMLv2Parser::Owned_reference_subsettingContext>(0);
}

SysMLv2Parser::Feature_specialization_partContext* SysMLv2Parser::Perform_action_usage_declarationContext::feature_specialization_part() {
  return getRuleContext<SysMLv2Parser::Feature_specialization_partContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Perform_action_usage_declarationContext::KEYWORD_ACTION() {
  return getToken(SysMLv2Parser::KEYWORD_ACTION, 0);
}

SysMLv2Parser::Usage_declarationContext* SysMLv2Parser::Perform_action_usage_declarationContext::usage_declaration() {
  return getRuleContext<SysMLv2Parser::Usage_declarationContext>(0);
}

SysMLv2Parser::Value_partContext* SysMLv2Parser::Perform_action_usage_declarationContext::value_part() {
  return getRuleContext<SysMLv2Parser::Value_partContext>(0);
}


size_t SysMLv2Parser::Perform_action_usage_declarationContext::getRuleIndex() const {
  return SysMLv2Parser::RulePerform_action_usage_declaration;
}

void SysMLv2Parser::Perform_action_usage_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPerform_action_usage_declaration(this);
}

void SysMLv2Parser::Perform_action_usage_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPerform_action_usage_declaration(this);
}

SysMLv2Parser::Perform_action_usage_declarationContext* SysMLv2Parser::perform_action_usage_declaration() {
  Perform_action_usage_declarationContext *_localctx = _tracker.createInstance<Perform_action_usage_declarationContext>(_ctx, getState());
  enterRule(_localctx, 296, SysMLv2Parser::RulePerform_action_usage_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2070);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SysMLv2Parser::NAME: {
        enterOuterAlt(_localctx, 1);
        setState(2061);
        owned_reference_subsetting();
        setState(2063);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (((((_la - 83) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 83)) & 3377699720527901) != 0) || _la == SysMLv2Parser::KEYWORD_OUT

        || _la == SysMLv2Parser::SYMBOL_SQUARE_BRACKET_OPEN) {
          setState(2062);
          feature_specialization_part();
        }
        break;
      }

      case SysMLv2Parser::KEYWORD_ACTION: {
        enterOuterAlt(_localctx, 2);
        setState(2065);
        match(SysMLv2Parser::KEYWORD_ACTION);
        setState(2066);
        usage_declaration();
        setState(2068);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == SysMLv2Parser::KEYWORD_DEFAULT || _la == SysMLv2Parser::SYMBOL_DEF_ASSIGN

        || _la == SysMLv2Parser::SYMBOL_EQUALS) {
          setState(2067);
          value_part();
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Action_nodeContext ------------------------------------------------------------------

SysMLv2Parser::Action_nodeContext::Action_nodeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Control_nodeContext* SysMLv2Parser::Action_nodeContext::control_node() {
  return getRuleContext<SysMLv2Parser::Control_nodeContext>(0);
}

SysMLv2Parser::Send_nodeContext* SysMLv2Parser::Action_nodeContext::send_node() {
  return getRuleContext<SysMLv2Parser::Send_nodeContext>(0);
}

SysMLv2Parser::Accept_nodeContext* SysMLv2Parser::Action_nodeContext::accept_node() {
  return getRuleContext<SysMLv2Parser::Accept_nodeContext>(0);
}

SysMLv2Parser::Assignment_nodeContext* SysMLv2Parser::Action_nodeContext::assignment_node() {
  return getRuleContext<SysMLv2Parser::Assignment_nodeContext>(0);
}

SysMLv2Parser::Terminate_nodeContext* SysMLv2Parser::Action_nodeContext::terminate_node() {
  return getRuleContext<SysMLv2Parser::Terminate_nodeContext>(0);
}

SysMLv2Parser::If_nodeContext* SysMLv2Parser::Action_nodeContext::if_node() {
  return getRuleContext<SysMLv2Parser::If_nodeContext>(0);
}

SysMLv2Parser::While_loop_nodeContext* SysMLv2Parser::Action_nodeContext::while_loop_node() {
  return getRuleContext<SysMLv2Parser::While_loop_nodeContext>(0);
}

SysMLv2Parser::For_loop_nodeContext* SysMLv2Parser::Action_nodeContext::for_loop_node() {
  return getRuleContext<SysMLv2Parser::For_loop_nodeContext>(0);
}


size_t SysMLv2Parser::Action_nodeContext::getRuleIndex() const {
  return SysMLv2Parser::RuleAction_node;
}

void SysMLv2Parser::Action_nodeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAction_node(this);
}

void SysMLv2Parser::Action_nodeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAction_node(this);
}

SysMLv2Parser::Action_nodeContext* SysMLv2Parser::action_node() {
  Action_nodeContext *_localctx = _tracker.createInstance<Action_nodeContext>(_ctx, getState());
  enterRule(_localctx, 298, SysMLv2Parser::RuleAction_node);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2080);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 129, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2072);
      control_node();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2073);
      send_node();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2074);
      accept_node();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2075);
      assignment_node();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2076);
      terminate_node();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(2077);
      if_node();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(2078);
      while_loop_node();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(2079);
      for_loop_node();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Action_node_usage_declarationContext ------------------------------------------------------------------

SysMLv2Parser::Action_node_usage_declarationContext::Action_node_usage_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Action_node_usage_declarationContext::KEYWORD_ACTION() {
  return getToken(SysMLv2Parser::KEYWORD_ACTION, 0);
}

SysMLv2Parser::Usage_declarationContext* SysMLv2Parser::Action_node_usage_declarationContext::usage_declaration() {
  return getRuleContext<SysMLv2Parser::Usage_declarationContext>(0);
}


size_t SysMLv2Parser::Action_node_usage_declarationContext::getRuleIndex() const {
  return SysMLv2Parser::RuleAction_node_usage_declaration;
}

void SysMLv2Parser::Action_node_usage_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAction_node_usage_declaration(this);
}

void SysMLv2Parser::Action_node_usage_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAction_node_usage_declaration(this);
}

SysMLv2Parser::Action_node_usage_declarationContext* SysMLv2Parser::action_node_usage_declaration() {
  Action_node_usage_declarationContext *_localctx = _tracker.createInstance<Action_node_usage_declarationContext>(_ctx, getState());
  enterRule(_localctx, 300, SysMLv2Parser::RuleAction_node_usage_declaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2082);
    match(SysMLv2Parser::KEYWORD_ACTION);
    setState(2084);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 130, _ctx)) {
    case 1: {
      setState(2083);
      usage_declaration();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Action_node_prefixContext ------------------------------------------------------------------

SysMLv2Parser::Action_node_prefixContext::Action_node_prefixContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Occurrence_usage_prefixContext* SysMLv2Parser::Action_node_prefixContext::occurrence_usage_prefix() {
  return getRuleContext<SysMLv2Parser::Occurrence_usage_prefixContext>(0);
}

SysMLv2Parser::Action_node_usage_declarationContext* SysMLv2Parser::Action_node_prefixContext::action_node_usage_declaration() {
  return getRuleContext<SysMLv2Parser::Action_node_usage_declarationContext>(0);
}


size_t SysMLv2Parser::Action_node_prefixContext::getRuleIndex() const {
  return SysMLv2Parser::RuleAction_node_prefix;
}

void SysMLv2Parser::Action_node_prefixContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAction_node_prefix(this);
}

void SysMLv2Parser::Action_node_prefixContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAction_node_prefix(this);
}

SysMLv2Parser::Action_node_prefixContext* SysMLv2Parser::action_node_prefix() {
  Action_node_prefixContext *_localctx = _tracker.createInstance<Action_node_prefixContext>(_ctx, getState());
  enterRule(_localctx, 302, SysMLv2Parser::RuleAction_node_prefix);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2086);
    occurrence_usage_prefix();
    setState(2088);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_ACTION) {
      setState(2087);
      action_node_usage_declaration();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Control_nodeContext ------------------------------------------------------------------

SysMLv2Parser::Control_nodeContext::Control_nodeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Merge_nodeContext* SysMLv2Parser::Control_nodeContext::merge_node() {
  return getRuleContext<SysMLv2Parser::Merge_nodeContext>(0);
}

SysMLv2Parser::Decision_nodeContext* SysMLv2Parser::Control_nodeContext::decision_node() {
  return getRuleContext<SysMLv2Parser::Decision_nodeContext>(0);
}

SysMLv2Parser::Join_nodeContext* SysMLv2Parser::Control_nodeContext::join_node() {
  return getRuleContext<SysMLv2Parser::Join_nodeContext>(0);
}

SysMLv2Parser::Fork_nodeContext* SysMLv2Parser::Control_nodeContext::fork_node() {
  return getRuleContext<SysMLv2Parser::Fork_nodeContext>(0);
}


size_t SysMLv2Parser::Control_nodeContext::getRuleIndex() const {
  return SysMLv2Parser::RuleControl_node;
}

void SysMLv2Parser::Control_nodeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterControl_node(this);
}

void SysMLv2Parser::Control_nodeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitControl_node(this);
}

SysMLv2Parser::Control_nodeContext* SysMLv2Parser::control_node() {
  Control_nodeContext *_localctx = _tracker.createInstance<Control_nodeContext>(_ctx, getState());
  enterRule(_localctx, 304, SysMLv2Parser::RuleControl_node);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2094);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 132, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2090);
      merge_node();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2091);
      decision_node();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2092);
      join_node();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2093);
      fork_node();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Control_node_prefixContext ------------------------------------------------------------------

SysMLv2Parser::Control_node_prefixContext::Control_node_prefixContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Ref_prefixContext* SysMLv2Parser::Control_node_prefixContext::ref_prefix() {
  return getRuleContext<SysMLv2Parser::Ref_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Control_node_prefixContext::KEYWORD_INDIVIDIAL() {
  return getToken(SysMLv2Parser::KEYWORD_INDIVIDIAL, 0);
}

SysMLv2Parser::Portion_kindContext* SysMLv2Parser::Control_node_prefixContext::portion_kind() {
  return getRuleContext<SysMLv2Parser::Portion_kindContext>(0);
}

SysMLv2Parser::Usage_extention_keywordContext* SysMLv2Parser::Control_node_prefixContext::usage_extention_keyword() {
  return getRuleContext<SysMLv2Parser::Usage_extention_keywordContext>(0);
}


size_t SysMLv2Parser::Control_node_prefixContext::getRuleIndex() const {
  return SysMLv2Parser::RuleControl_node_prefix;
}

void SysMLv2Parser::Control_node_prefixContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterControl_node_prefix(this);
}

void SysMLv2Parser::Control_node_prefixContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitControl_node_prefix(this);
}

SysMLv2Parser::Control_node_prefixContext* SysMLv2Parser::control_node_prefix() {
  Control_node_prefixContext *_localctx = _tracker.createInstance<Control_node_prefixContext>(_ctx, getState());
  enterRule(_localctx, 306, SysMLv2Parser::RuleControl_node_prefix);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2096);
    ref_prefix();
    setState(2098);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_INDIVIDIAL) {
      setState(2097);
      match(SysMLv2Parser::KEYWORD_INDIVIDIAL);
    }
    setState(2101);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_SNAPSHOT

    || _la == SysMLv2Parser::KEYWORD_TIMESLICE) {
      setState(2100);
      portion_kind();
    }
    setState(2104);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::SYMBOL_HASHTAG) {
      setState(2103);
      usage_extention_keyword();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Merge_nodeContext ------------------------------------------------------------------

SysMLv2Parser::Merge_nodeContext::Merge_nodeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Control_node_prefixContext* SysMLv2Parser::Merge_nodeContext::control_node_prefix() {
  return getRuleContext<SysMLv2Parser::Control_node_prefixContext>(0);
}

SysMLv2Parser::Usage_declarationContext* SysMLv2Parser::Merge_nodeContext::usage_declaration() {
  return getRuleContext<SysMLv2Parser::Usage_declarationContext>(0);
}

SysMLv2Parser::Action_bodyContext* SysMLv2Parser::Merge_nodeContext::action_body() {
  return getRuleContext<SysMLv2Parser::Action_bodyContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Merge_nodeContext::KEYWORD_MERGE() {
  return getToken(SysMLv2Parser::KEYWORD_MERGE, 0);
}


size_t SysMLv2Parser::Merge_nodeContext::getRuleIndex() const {
  return SysMLv2Parser::RuleMerge_node;
}

void SysMLv2Parser::Merge_nodeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMerge_node(this);
}

void SysMLv2Parser::Merge_nodeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMerge_node(this);
}

SysMLv2Parser::Merge_nodeContext* SysMLv2Parser::merge_node() {
  Merge_nodeContext *_localctx = _tracker.createInstance<Merge_nodeContext>(_ctx, getState());
  enterRule(_localctx, 308, SysMLv2Parser::RuleMerge_node);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2106);
    control_node_prefix();
    setState(2108);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_MERGE) {
      setState(2107);
      match(SysMLv2Parser::KEYWORD_MERGE);
    }
    setState(2110);
    usage_declaration();
    setState(2111);
    action_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Decision_nodeContext ------------------------------------------------------------------

SysMLv2Parser::Decision_nodeContext::Decision_nodeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Control_node_prefixContext* SysMLv2Parser::Decision_nodeContext::control_node_prefix() {
  return getRuleContext<SysMLv2Parser::Control_node_prefixContext>(0);
}

SysMLv2Parser::Usage_declarationContext* SysMLv2Parser::Decision_nodeContext::usage_declaration() {
  return getRuleContext<SysMLv2Parser::Usage_declarationContext>(0);
}

SysMLv2Parser::Action_bodyContext* SysMLv2Parser::Decision_nodeContext::action_body() {
  return getRuleContext<SysMLv2Parser::Action_bodyContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Decision_nodeContext::KEYWORD_DECIDE() {
  return getToken(SysMLv2Parser::KEYWORD_DECIDE, 0);
}


size_t SysMLv2Parser::Decision_nodeContext::getRuleIndex() const {
  return SysMLv2Parser::RuleDecision_node;
}

void SysMLv2Parser::Decision_nodeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDecision_node(this);
}

void SysMLv2Parser::Decision_nodeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDecision_node(this);
}

SysMLv2Parser::Decision_nodeContext* SysMLv2Parser::decision_node() {
  Decision_nodeContext *_localctx = _tracker.createInstance<Decision_nodeContext>(_ctx, getState());
  enterRule(_localctx, 310, SysMLv2Parser::RuleDecision_node);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2113);
    control_node_prefix();
    setState(2115);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_DECIDE) {
      setState(2114);
      match(SysMLv2Parser::KEYWORD_DECIDE);
    }
    setState(2117);
    usage_declaration();
    setState(2118);
    action_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Join_nodeContext ------------------------------------------------------------------

SysMLv2Parser::Join_nodeContext::Join_nodeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Control_node_prefixContext* SysMLv2Parser::Join_nodeContext::control_node_prefix() {
  return getRuleContext<SysMLv2Parser::Control_node_prefixContext>(0);
}

SysMLv2Parser::Usage_declarationContext* SysMLv2Parser::Join_nodeContext::usage_declaration() {
  return getRuleContext<SysMLv2Parser::Usage_declarationContext>(0);
}

SysMLv2Parser::Action_bodyContext* SysMLv2Parser::Join_nodeContext::action_body() {
  return getRuleContext<SysMLv2Parser::Action_bodyContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Join_nodeContext::KEYWORD_DECIDE() {
  return getToken(SysMLv2Parser::KEYWORD_DECIDE, 0);
}


size_t SysMLv2Parser::Join_nodeContext::getRuleIndex() const {
  return SysMLv2Parser::RuleJoin_node;
}

void SysMLv2Parser::Join_nodeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterJoin_node(this);
}

void SysMLv2Parser::Join_nodeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitJoin_node(this);
}

SysMLv2Parser::Join_nodeContext* SysMLv2Parser::join_node() {
  Join_nodeContext *_localctx = _tracker.createInstance<Join_nodeContext>(_ctx, getState());
  enterRule(_localctx, 312, SysMLv2Parser::RuleJoin_node);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2120);
    control_node_prefix();
    setState(2122);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_DECIDE) {
      setState(2121);
      match(SysMLv2Parser::KEYWORD_DECIDE);
    }
    setState(2124);
    usage_declaration();
    setState(2125);
    action_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fork_nodeContext ------------------------------------------------------------------

SysMLv2Parser::Fork_nodeContext::Fork_nodeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Control_node_prefixContext* SysMLv2Parser::Fork_nodeContext::control_node_prefix() {
  return getRuleContext<SysMLv2Parser::Control_node_prefixContext>(0);
}

SysMLv2Parser::Usage_declarationContext* SysMLv2Parser::Fork_nodeContext::usage_declaration() {
  return getRuleContext<SysMLv2Parser::Usage_declarationContext>(0);
}

SysMLv2Parser::Action_bodyContext* SysMLv2Parser::Fork_nodeContext::action_body() {
  return getRuleContext<SysMLv2Parser::Action_bodyContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Fork_nodeContext::KEYWORD_FORK() {
  return getToken(SysMLv2Parser::KEYWORD_FORK, 0);
}


size_t SysMLv2Parser::Fork_nodeContext::getRuleIndex() const {
  return SysMLv2Parser::RuleFork_node;
}

void SysMLv2Parser::Fork_nodeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFork_node(this);
}

void SysMLv2Parser::Fork_nodeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFork_node(this);
}

SysMLv2Parser::Fork_nodeContext* SysMLv2Parser::fork_node() {
  Fork_nodeContext *_localctx = _tracker.createInstance<Fork_nodeContext>(_ctx, getState());
  enterRule(_localctx, 314, SysMLv2Parser::RuleFork_node);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2127);
    control_node_prefix();
    setState(2129);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_FORK) {
      setState(2128);
      match(SysMLv2Parser::KEYWORD_FORK);
    }
    setState(2131);
    usage_declaration();
    setState(2132);
    action_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Accept_nodeContext ------------------------------------------------------------------

SysMLv2Parser::Accept_nodeContext::Accept_nodeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Occurrence_usage_prefixContext* SysMLv2Parser::Accept_nodeContext::occurrence_usage_prefix() {
  return getRuleContext<SysMLv2Parser::Occurrence_usage_prefixContext>(0);
}

SysMLv2Parser::Accept_node_declarationContext* SysMLv2Parser::Accept_nodeContext::accept_node_declaration() {
  return getRuleContext<SysMLv2Parser::Accept_node_declarationContext>(0);
}

SysMLv2Parser::Action_bodyContext* SysMLv2Parser::Accept_nodeContext::action_body() {
  return getRuleContext<SysMLv2Parser::Action_bodyContext>(0);
}


size_t SysMLv2Parser::Accept_nodeContext::getRuleIndex() const {
  return SysMLv2Parser::RuleAccept_node;
}

void SysMLv2Parser::Accept_nodeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAccept_node(this);
}

void SysMLv2Parser::Accept_nodeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAccept_node(this);
}

SysMLv2Parser::Accept_nodeContext* SysMLv2Parser::accept_node() {
  Accept_nodeContext *_localctx = _tracker.createInstance<Accept_nodeContext>(_ctx, getState());
  enterRule(_localctx, 316, SysMLv2Parser::RuleAccept_node);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2134);
    occurrence_usage_prefix();
    setState(2135);
    accept_node_declaration();
    setState(2136);
    action_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Accept_node_declarationContext ------------------------------------------------------------------

SysMLv2Parser::Accept_node_declarationContext::Accept_node_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Accept_node_declarationContext::KEYWORD_ACCEPT() {
  return getToken(SysMLv2Parser::KEYWORD_ACCEPT, 0);
}

SysMLv2Parser::Accept_parameter_partContext* SysMLv2Parser::Accept_node_declarationContext::accept_parameter_part() {
  return getRuleContext<SysMLv2Parser::Accept_parameter_partContext>(0);
}

SysMLv2Parser::Action_node_usage_declarationContext* SysMLv2Parser::Accept_node_declarationContext::action_node_usage_declaration() {
  return getRuleContext<SysMLv2Parser::Action_node_usage_declarationContext>(0);
}


size_t SysMLv2Parser::Accept_node_declarationContext::getRuleIndex() const {
  return SysMLv2Parser::RuleAccept_node_declaration;
}

void SysMLv2Parser::Accept_node_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAccept_node_declaration(this);
}

void SysMLv2Parser::Accept_node_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAccept_node_declaration(this);
}

SysMLv2Parser::Accept_node_declarationContext* SysMLv2Parser::accept_node_declaration() {
  Accept_node_declarationContext *_localctx = _tracker.createInstance<Accept_node_declarationContext>(_ctx, getState());
  enterRule(_localctx, 318, SysMLv2Parser::RuleAccept_node_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2139);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_ACTION) {
      setState(2138);
      action_node_usage_declaration();
    }
    setState(2141);
    match(SysMLv2Parser::KEYWORD_ACCEPT);
    setState(2142);
    accept_parameter_part();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Accept_parameter_partContext ------------------------------------------------------------------

SysMLv2Parser::Accept_parameter_partContext::Accept_parameter_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Payload_parameter_memberContext* SysMLv2Parser::Accept_parameter_partContext::payload_parameter_member() {
  return getRuleContext<SysMLv2Parser::Payload_parameter_memberContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Accept_parameter_partContext::KEYWORD_VIA() {
  return getToken(SysMLv2Parser::KEYWORD_VIA, 0);
}

SysMLv2Parser::Node_parameter_memberContext* SysMLv2Parser::Accept_parameter_partContext::node_parameter_member() {
  return getRuleContext<SysMLv2Parser::Node_parameter_memberContext>(0);
}


size_t SysMLv2Parser::Accept_parameter_partContext::getRuleIndex() const {
  return SysMLv2Parser::RuleAccept_parameter_part;
}

void SysMLv2Parser::Accept_parameter_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAccept_parameter_part(this);
}

void SysMLv2Parser::Accept_parameter_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAccept_parameter_part(this);
}

SysMLv2Parser::Accept_parameter_partContext* SysMLv2Parser::accept_parameter_part() {
  Accept_parameter_partContext *_localctx = _tracker.createInstance<Accept_parameter_partContext>(_ctx, getState());
  enterRule(_localctx, 320, SysMLv2Parser::RuleAccept_parameter_part);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2144);
    payload_parameter_member();
    setState(2147);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_VIA) {
      setState(2145);
      match(SysMLv2Parser::KEYWORD_VIA);
      setState(2146);
      node_parameter_member();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Payload_parameter_memberContext ------------------------------------------------------------------

SysMLv2Parser::Payload_parameter_memberContext::Payload_parameter_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Payload_parameterContext* SysMLv2Parser::Payload_parameter_memberContext::payload_parameter() {
  return getRuleContext<SysMLv2Parser::Payload_parameterContext>(0);
}


size_t SysMLv2Parser::Payload_parameter_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RulePayload_parameter_member;
}

void SysMLv2Parser::Payload_parameter_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPayload_parameter_member(this);
}

void SysMLv2Parser::Payload_parameter_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPayload_parameter_member(this);
}

SysMLv2Parser::Payload_parameter_memberContext* SysMLv2Parser::payload_parameter_member() {
  Payload_parameter_memberContext *_localctx = _tracker.createInstance<Payload_parameter_memberContext>(_ctx, getState());
  enterRule(_localctx, 322, SysMLv2Parser::RulePayload_parameter_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2149);
    payload_parameter();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Payload_parameterContext ------------------------------------------------------------------

SysMLv2Parser::Payload_parameterContext::Payload_parameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Payload_featureContext* SysMLv2Parser::Payload_parameterContext::payload_feature() {
  return getRuleContext<SysMLv2Parser::Payload_featureContext>(0);
}

SysMLv2Parser::IdentificationContext* SysMLv2Parser::Payload_parameterContext::identification() {
  return getRuleContext<SysMLv2Parser::IdentificationContext>(0);
}

SysMLv2Parser::Trigger_value_partContext* SysMLv2Parser::Payload_parameterContext::trigger_value_part() {
  return getRuleContext<SysMLv2Parser::Trigger_value_partContext>(0);
}

SysMLv2Parser::Payload_feature_specialization_partContext* SysMLv2Parser::Payload_parameterContext::payload_feature_specialization_part() {
  return getRuleContext<SysMLv2Parser::Payload_feature_specialization_partContext>(0);
}


size_t SysMLv2Parser::Payload_parameterContext::getRuleIndex() const {
  return SysMLv2Parser::RulePayload_parameter;
}

void SysMLv2Parser::Payload_parameterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPayload_parameter(this);
}

void SysMLv2Parser::Payload_parameterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPayload_parameter(this);
}

SysMLv2Parser::Payload_parameterContext* SysMLv2Parser::payload_parameter() {
  Payload_parameterContext *_localctx = _tracker.createInstance<Payload_parameterContext>(_ctx, getState());
  enterRule(_localctx, 324, SysMLv2Parser::RulePayload_parameter);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2158);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 143, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2151);
      payload_feature();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2152);
      identification();
      setState(2154);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 83) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 83)) & 3377699720527901) != 0) || _la == SysMLv2Parser::KEYWORD_OUT

      || _la == SysMLv2Parser::SYMBOL_SQUARE_BRACKET_OPEN) {
        setState(2153);
        payload_feature_specialization_part();
      }
      setState(2156);
      trigger_value_part();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Trigger_value_partContext ------------------------------------------------------------------

SysMLv2Parser::Trigger_value_partContext::Trigger_value_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Trigger_expressionContext* SysMLv2Parser::Trigger_value_partContext::trigger_expression() {
  return getRuleContext<SysMLv2Parser::Trigger_expressionContext>(0);
}


size_t SysMLv2Parser::Trigger_value_partContext::getRuleIndex() const {
  return SysMLv2Parser::RuleTrigger_value_part;
}

void SysMLv2Parser::Trigger_value_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTrigger_value_part(this);
}

void SysMLv2Parser::Trigger_value_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTrigger_value_part(this);
}

SysMLv2Parser::Trigger_value_partContext* SysMLv2Parser::trigger_value_part() {
  Trigger_value_partContext *_localctx = _tracker.createInstance<Trigger_value_partContext>(_ctx, getState());
  enterRule(_localctx, 326, SysMLv2Parser::RuleTrigger_value_part);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2160);
    trigger_expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Trigger_expressionContext ------------------------------------------------------------------

SysMLv2Parser::Trigger_expressionContext::Trigger_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Argument_memberContext* SysMLv2Parser::Trigger_expressionContext::argument_member() {
  return getRuleContext<SysMLv2Parser::Argument_memberContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Trigger_expressionContext::KEYWORD_AT() {
  return getToken(SysMLv2Parser::KEYWORD_AT, 0);
}

tree::TerminalNode* SysMLv2Parser::Trigger_expressionContext::KEYWORD_AFTER() {
  return getToken(SysMLv2Parser::KEYWORD_AFTER, 0);
}

SysMLv2Parser::Argument_expression_memberContext* SysMLv2Parser::Trigger_expressionContext::argument_expression_member() {
  return getRuleContext<SysMLv2Parser::Argument_expression_memberContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Trigger_expressionContext::KEYWORD_WHEN() {
  return getToken(SysMLv2Parser::KEYWORD_WHEN, 0);
}


size_t SysMLv2Parser::Trigger_expressionContext::getRuleIndex() const {
  return SysMLv2Parser::RuleTrigger_expression;
}

void SysMLv2Parser::Trigger_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTrigger_expression(this);
}

void SysMLv2Parser::Trigger_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTrigger_expression(this);
}

SysMLv2Parser::Trigger_expressionContext* SysMLv2Parser::trigger_expression() {
  Trigger_expressionContext *_localctx = _tracker.createInstance<Trigger_expressionContext>(_ctx, getState());
  enterRule(_localctx, 328, SysMLv2Parser::RuleTrigger_expression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2166);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SysMLv2Parser::KEYWORD_AFTER:
      case SysMLv2Parser::KEYWORD_AT: {
        enterOuterAlt(_localctx, 1);
        setState(2162);
        antlrcpp::downCast<Trigger_expressionContext *>(_localctx)->kind = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == SysMLv2Parser::KEYWORD_AFTER

        || _la == SysMLv2Parser::KEYWORD_AT)) {
          antlrcpp::downCast<Trigger_expressionContext *>(_localctx)->kind = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(2163);
        argument_member();
        break;
      }

      case SysMLv2Parser::KEYWORD_WHEN: {
        enterOuterAlt(_localctx, 2);
        setState(2164);
        antlrcpp::downCast<Trigger_expressionContext *>(_localctx)->kind = match(SysMLv2Parser::KEYWORD_WHEN);
        setState(2165);
        argument_expression_member();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Send_nodeContext ------------------------------------------------------------------

SysMLv2Parser::Send_nodeContext::Send_nodeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Occurrence_usage_prefixContext* SysMLv2Parser::Send_nodeContext::occurrence_usage_prefix() {
  return getRuleContext<SysMLv2Parser::Occurrence_usage_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Send_nodeContext::KEYWORD_SEND() {
  return getToken(SysMLv2Parser::KEYWORD_SEND, 0);
}

SysMLv2Parser::Action_bodyContext* SysMLv2Parser::Send_nodeContext::action_body() {
  return getRuleContext<SysMLv2Parser::Action_bodyContext>(0);
}

SysMLv2Parser::Action_usage_declarationContext* SysMLv2Parser::Send_nodeContext::action_usage_declaration() {
  return getRuleContext<SysMLv2Parser::Action_usage_declarationContext>(0);
}

SysMLv2Parser::Node_parameter_memberContext* SysMLv2Parser::Send_nodeContext::node_parameter_member() {
  return getRuleContext<SysMLv2Parser::Node_parameter_memberContext>(0);
}

SysMLv2Parser::Sender_receiver_partContext* SysMLv2Parser::Send_nodeContext::sender_receiver_part() {
  return getRuleContext<SysMLv2Parser::Sender_receiver_partContext>(0);
}


size_t SysMLv2Parser::Send_nodeContext::getRuleIndex() const {
  return SysMLv2Parser::RuleSend_node;
}

void SysMLv2Parser::Send_nodeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSend_node(this);
}

void SysMLv2Parser::Send_nodeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSend_node(this);
}

SysMLv2Parser::Send_nodeContext* SysMLv2Parser::send_node() {
  Send_nodeContext *_localctx = _tracker.createInstance<Send_nodeContext>(_ctx, getState());
  enterRule(_localctx, 330, SysMLv2Parser::RuleSend_node);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2168);
    occurrence_usage_prefix();
    setState(2170);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 145, _ctx)) {
    case 1: {
      setState(2169);
      action_usage_declaration();
      break;
    }

    default:
      break;
    }
    setState(2172);
    match(SysMLv2Parser::KEYWORD_SEND);
    setState(2178);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SysMLv2Parser::T__0:
      case SysMLv2Parser::KEYWORD_ALL:
      case SysMLv2Parser::KEYWORD_AS:
      case SysMLv2Parser::KEYWORD_FALSE:
      case SysMLv2Parser::KEYWORD_HASTYPE:
      case SysMLv2Parser::KEYWORD_IF:
      case SysMLv2Parser::KEYWORD_ISTYPE:
      case SysMLv2Parser::KEYWORD_NOT:
      case SysMLv2Parser::KEYWORD_NULL:
      case SysMLv2Parser::KEYWORD_TRUE:
      case SysMLv2Parser::SYMBOL_STAR:
      case SysMLv2Parser::SYMBOL_CONJUNGATES:
      case SysMLv2Parser::SYMBOL_ROUND_BRACKET_OPEN:
      case SysMLv2Parser::SYMBOL_SQUARE_BRACKET_OPEN:
      case SysMLv2Parser::SYMBOL_AT:
      case SysMLv2Parser::SYMBOL_HASHTAG:
      case SysMLv2Parser::SYMBOL_PLUS:
      case SysMLv2Parser::SYMBOL_MINUS:
      case SysMLv2Parser::SYMBOL_ARROOW:
      case SysMLv2Parser::SYMBOL_DOT:
      case SysMLv2Parser::SYMBOL_DOT_QUESTION:
      case SysMLv2Parser::NAME:
      case SysMLv2Parser::DECIMAL_VALUE:
      case SysMLv2Parser::EXPONENTIAL_VALUE:
      case SysMLv2Parser::STRING_VALUE: {
        setState(2173);
        node_parameter_member();
        setState(2175);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == SysMLv2Parser::KEYWORD_VIA || _la == SysMLv2Parser::KEYWORD_TO) {
          setState(2174);
          sender_receiver_part();
        }
        break;
      }

      case SysMLv2Parser::KEYWORD_VIA:
      case SysMLv2Parser::KEYWORD_TO: {
        setState(2177);
        sender_receiver_part();
        break;
      }

      case SysMLv2Parser::SYMBOL_STATEMENT_DELIMITER:
      case SysMLv2Parser::SYMBOL_CURLY_BRACKET_OPEN: {
        break;
      }

    default:
      break;
    }
    setState(2180);
    action_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Send_node_declarationContext ------------------------------------------------------------------

SysMLv2Parser::Send_node_declarationContext::Send_node_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Send_node_declarationContext::KEYWORD_SEND() {
  return getToken(SysMLv2Parser::KEYWORD_SEND, 0);
}

SysMLv2Parser::Node_parameter_memberContext* SysMLv2Parser::Send_node_declarationContext::node_parameter_member() {
  return getRuleContext<SysMLv2Parser::Node_parameter_memberContext>(0);
}

SysMLv2Parser::Action_node_usage_declarationContext* SysMLv2Parser::Send_node_declarationContext::action_node_usage_declaration() {
  return getRuleContext<SysMLv2Parser::Action_node_usage_declarationContext>(0);
}

SysMLv2Parser::Sender_receiver_partContext* SysMLv2Parser::Send_node_declarationContext::sender_receiver_part() {
  return getRuleContext<SysMLv2Parser::Sender_receiver_partContext>(0);
}


size_t SysMLv2Parser::Send_node_declarationContext::getRuleIndex() const {
  return SysMLv2Parser::RuleSend_node_declaration;
}

void SysMLv2Parser::Send_node_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSend_node_declaration(this);
}

void SysMLv2Parser::Send_node_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSend_node_declaration(this);
}

SysMLv2Parser::Send_node_declarationContext* SysMLv2Parser::send_node_declaration() {
  Send_node_declarationContext *_localctx = _tracker.createInstance<Send_node_declarationContext>(_ctx, getState());
  enterRule(_localctx, 332, SysMLv2Parser::RuleSend_node_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2183);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_ACTION) {
      setState(2182);
      action_node_usage_declaration();
    }
    setState(2185);
    match(SysMLv2Parser::KEYWORD_SEND);
    setState(2186);
    node_parameter_member();
    setState(2188);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_VIA || _la == SysMLv2Parser::KEYWORD_TO) {
      setState(2187);
      sender_receiver_part();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Sender_receiver_partContext ------------------------------------------------------------------

SysMLv2Parser::Sender_receiver_partContext::Sender_receiver_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Sender_receiver_partContext::KEYWORD_VIA() {
  return getToken(SysMLv2Parser::KEYWORD_VIA, 0);
}

std::vector<SysMLv2Parser::Node_parameter_memberContext *> SysMLv2Parser::Sender_receiver_partContext::node_parameter_member() {
  return getRuleContexts<SysMLv2Parser::Node_parameter_memberContext>();
}

SysMLv2Parser::Node_parameter_memberContext* SysMLv2Parser::Sender_receiver_partContext::node_parameter_member(size_t i) {
  return getRuleContext<SysMLv2Parser::Node_parameter_memberContext>(i);
}

tree::TerminalNode* SysMLv2Parser::Sender_receiver_partContext::KEYWORD_TO() {
  return getToken(SysMLv2Parser::KEYWORD_TO, 0);
}


size_t SysMLv2Parser::Sender_receiver_partContext::getRuleIndex() const {
  return SysMLv2Parser::RuleSender_receiver_part;
}

void SysMLv2Parser::Sender_receiver_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSender_receiver_part(this);
}

void SysMLv2Parser::Sender_receiver_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSender_receiver_part(this);
}

SysMLv2Parser::Sender_receiver_partContext* SysMLv2Parser::sender_receiver_part() {
  Sender_receiver_partContext *_localctx = _tracker.createInstance<Sender_receiver_partContext>(_ctx, getState());
  enterRule(_localctx, 334, SysMLv2Parser::RuleSender_receiver_part);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2198);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SysMLv2Parser::KEYWORD_VIA: {
        enterOuterAlt(_localctx, 1);
        setState(2190);
        match(SysMLv2Parser::KEYWORD_VIA);
        setState(2191);
        node_parameter_member();
        setState(2194);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == SysMLv2Parser::KEYWORD_TO) {
          setState(2192);
          match(SysMLv2Parser::KEYWORD_TO);
          setState(2193);
          node_parameter_member();
        }
        break;
      }

      case SysMLv2Parser::KEYWORD_TO: {
        enterOuterAlt(_localctx, 2);
        setState(2196);
        match(SysMLv2Parser::KEYWORD_TO);
        setState(2197);
        node_parameter_member();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Node_parameter_memberContext ------------------------------------------------------------------

SysMLv2Parser::Node_parameter_memberContext::Node_parameter_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Node_parameterContext* SysMLv2Parser::Node_parameter_memberContext::node_parameter() {
  return getRuleContext<SysMLv2Parser::Node_parameterContext>(0);
}


size_t SysMLv2Parser::Node_parameter_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleNode_parameter_member;
}

void SysMLv2Parser::Node_parameter_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNode_parameter_member(this);
}

void SysMLv2Parser::Node_parameter_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNode_parameter_member(this);
}

SysMLv2Parser::Node_parameter_memberContext* SysMLv2Parser::node_parameter_member() {
  Node_parameter_memberContext *_localctx = _tracker.createInstance<Node_parameter_memberContext>(_ctx, getState());
  enterRule(_localctx, 336, SysMLv2Parser::RuleNode_parameter_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2200);
    node_parameter();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Node_parameterContext ------------------------------------------------------------------

SysMLv2Parser::Node_parameterContext::Node_parameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Feature_bindingContext* SysMLv2Parser::Node_parameterContext::feature_binding() {
  return getRuleContext<SysMLv2Parser::Feature_bindingContext>(0);
}


size_t SysMLv2Parser::Node_parameterContext::getRuleIndex() const {
  return SysMLv2Parser::RuleNode_parameter;
}

void SysMLv2Parser::Node_parameterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNode_parameter(this);
}

void SysMLv2Parser::Node_parameterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNode_parameter(this);
}

SysMLv2Parser::Node_parameterContext* SysMLv2Parser::node_parameter() {
  Node_parameterContext *_localctx = _tracker.createInstance<Node_parameterContext>(_ctx, getState());
  enterRule(_localctx, 338, SysMLv2Parser::RuleNode_parameter);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2202);
    feature_binding();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Feature_bindingContext ------------------------------------------------------------------

SysMLv2Parser::Feature_bindingContext::Feature_bindingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Owned_expressionContext* SysMLv2Parser::Feature_bindingContext::owned_expression() {
  return getRuleContext<SysMLv2Parser::Owned_expressionContext>(0);
}


size_t SysMLv2Parser::Feature_bindingContext::getRuleIndex() const {
  return SysMLv2Parser::RuleFeature_binding;
}

void SysMLv2Parser::Feature_bindingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFeature_binding(this);
}

void SysMLv2Parser::Feature_bindingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFeature_binding(this);
}

SysMLv2Parser::Feature_bindingContext* SysMLv2Parser::feature_binding() {
  Feature_bindingContext *_localctx = _tracker.createInstance<Feature_bindingContext>(_ctx, getState());
  enterRule(_localctx, 340, SysMLv2Parser::RuleFeature_binding);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2204);
    owned_expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Assignment_nodeContext ------------------------------------------------------------------

SysMLv2Parser::Assignment_nodeContext::Assignment_nodeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Occurrence_usage_prefixContext* SysMLv2Parser::Assignment_nodeContext::occurrence_usage_prefix() {
  return getRuleContext<SysMLv2Parser::Occurrence_usage_prefixContext>(0);
}

SysMLv2Parser::Assignment_node_declarationContext* SysMLv2Parser::Assignment_nodeContext::assignment_node_declaration() {
  return getRuleContext<SysMLv2Parser::Assignment_node_declarationContext>(0);
}

SysMLv2Parser::Action_bodyContext* SysMLv2Parser::Assignment_nodeContext::action_body() {
  return getRuleContext<SysMLv2Parser::Action_bodyContext>(0);
}


size_t SysMLv2Parser::Assignment_nodeContext::getRuleIndex() const {
  return SysMLv2Parser::RuleAssignment_node;
}

void SysMLv2Parser::Assignment_nodeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssignment_node(this);
}

void SysMLv2Parser::Assignment_nodeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssignment_node(this);
}

SysMLv2Parser::Assignment_nodeContext* SysMLv2Parser::assignment_node() {
  Assignment_nodeContext *_localctx = _tracker.createInstance<Assignment_nodeContext>(_ctx, getState());
  enterRule(_localctx, 342, SysMLv2Parser::RuleAssignment_node);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2206);
    occurrence_usage_prefix();
    setState(2207);
    assignment_node_declaration();
    setState(2208);
    action_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Assignment_node_declarationContext ------------------------------------------------------------------

SysMLv2Parser::Assignment_node_declarationContext::Assignment_node_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Assignment_node_declarationContext::KEYWORD_ASSIGN() {
  return getToken(SysMLv2Parser::KEYWORD_ASSIGN, 0);
}

SysMLv2Parser::Assignment_target_memberContext* SysMLv2Parser::Assignment_node_declarationContext::assignment_target_member() {
  return getRuleContext<SysMLv2Parser::Assignment_target_memberContext>(0);
}

SysMLv2Parser::Feature_chain_memberContext* SysMLv2Parser::Assignment_node_declarationContext::feature_chain_member() {
  return getRuleContext<SysMLv2Parser::Feature_chain_memberContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Assignment_node_declarationContext::SYMBOL_DEF_ASSIGN() {
  return getToken(SysMLv2Parser::SYMBOL_DEF_ASSIGN, 0);
}

SysMLv2Parser::Node_parameter_memberContext* SysMLv2Parser::Assignment_node_declarationContext::node_parameter_member() {
  return getRuleContext<SysMLv2Parser::Node_parameter_memberContext>(0);
}

SysMLv2Parser::Action_node_usage_declarationContext* SysMLv2Parser::Assignment_node_declarationContext::action_node_usage_declaration() {
  return getRuleContext<SysMLv2Parser::Action_node_usage_declarationContext>(0);
}


size_t SysMLv2Parser::Assignment_node_declarationContext::getRuleIndex() const {
  return SysMLv2Parser::RuleAssignment_node_declaration;
}

void SysMLv2Parser::Assignment_node_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssignment_node_declaration(this);
}

void SysMLv2Parser::Assignment_node_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssignment_node_declaration(this);
}

SysMLv2Parser::Assignment_node_declarationContext* SysMLv2Parser::assignment_node_declaration() {
  Assignment_node_declarationContext *_localctx = _tracker.createInstance<Assignment_node_declarationContext>(_ctx, getState());
  enterRule(_localctx, 344, SysMLv2Parser::RuleAssignment_node_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2211);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_ACTION) {
      setState(2210);
      action_node_usage_declaration();
    }
    setState(2213);
    match(SysMLv2Parser::KEYWORD_ASSIGN);
    setState(2214);
    assignment_target_member();
    setState(2215);
    feature_chain_member();
    setState(2216);
    match(SysMLv2Parser::SYMBOL_DEF_ASSIGN);
    setState(2217);
    node_parameter_member();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Assignment_target_memberContext ------------------------------------------------------------------

SysMLv2Parser::Assignment_target_memberContext::Assignment_target_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Assignment_target_parameterContext* SysMLv2Parser::Assignment_target_memberContext::assignment_target_parameter() {
  return getRuleContext<SysMLv2Parser::Assignment_target_parameterContext>(0);
}


size_t SysMLv2Parser::Assignment_target_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleAssignment_target_member;
}

void SysMLv2Parser::Assignment_target_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssignment_target_member(this);
}

void SysMLv2Parser::Assignment_target_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssignment_target_member(this);
}

SysMLv2Parser::Assignment_target_memberContext* SysMLv2Parser::assignment_target_member() {
  Assignment_target_memberContext *_localctx = _tracker.createInstance<Assignment_target_memberContext>(_ctx, getState());
  enterRule(_localctx, 346, SysMLv2Parser::RuleAssignment_target_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2219);
    assignment_target_parameter();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Assignment_target_parameterContext ------------------------------------------------------------------

SysMLv2Parser::Assignment_target_parameterContext::Assignment_target_parameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Assignment_target_bindingContext* SysMLv2Parser::Assignment_target_parameterContext::assignment_target_binding() {
  return getRuleContext<SysMLv2Parser::Assignment_target_bindingContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Assignment_target_parameterContext::SYMBOL_DOT() {
  return getToken(SysMLv2Parser::SYMBOL_DOT, 0);
}


size_t SysMLv2Parser::Assignment_target_parameterContext::getRuleIndex() const {
  return SysMLv2Parser::RuleAssignment_target_parameter;
}

void SysMLv2Parser::Assignment_target_parameterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssignment_target_parameter(this);
}

void SysMLv2Parser::Assignment_target_parameterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssignment_target_parameter(this);
}

SysMLv2Parser::Assignment_target_parameterContext* SysMLv2Parser::assignment_target_parameter() {
  Assignment_target_parameterContext *_localctx = _tracker.createInstance<Assignment_target_parameterContext>(_ctx, getState());
  enterRule(_localctx, 348, SysMLv2Parser::RuleAssignment_target_parameter);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2224);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 153, _ctx)) {
    case 1: {
      setState(2221);
      assignment_target_binding();
      setState(2222);
      match(SysMLv2Parser::SYMBOL_DOT);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Assignment_target_bindingContext ------------------------------------------------------------------

SysMLv2Parser::Assignment_target_bindingContext::Assignment_target_bindingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Non_feature_chain_primary_expressionContext* SysMLv2Parser::Assignment_target_bindingContext::non_feature_chain_primary_expression() {
  return getRuleContext<SysMLv2Parser::Non_feature_chain_primary_expressionContext>(0);
}


size_t SysMLv2Parser::Assignment_target_bindingContext::getRuleIndex() const {
  return SysMLv2Parser::RuleAssignment_target_binding;
}

void SysMLv2Parser::Assignment_target_bindingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssignment_target_binding(this);
}

void SysMLv2Parser::Assignment_target_bindingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssignment_target_binding(this);
}

SysMLv2Parser::Assignment_target_bindingContext* SysMLv2Parser::assignment_target_binding() {
  Assignment_target_bindingContext *_localctx = _tracker.createInstance<Assignment_target_bindingContext>(_ctx, getState());
  enterRule(_localctx, 350, SysMLv2Parser::RuleAssignment_target_binding);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2226);
    non_feature_chain_primary_expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Feature_chain_memberContext ------------------------------------------------------------------

SysMLv2Parser::Feature_chain_memberContext::Feature_chain_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Qualified_nameContext* SysMLv2Parser::Feature_chain_memberContext::qualified_name() {
  return getRuleContext<SysMLv2Parser::Qualified_nameContext>(0);
}

SysMLv2Parser::Owned_feature_chainContext* SysMLv2Parser::Feature_chain_memberContext::owned_feature_chain() {
  return getRuleContext<SysMLv2Parser::Owned_feature_chainContext>(0);
}


size_t SysMLv2Parser::Feature_chain_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleFeature_chain_member;
}

void SysMLv2Parser::Feature_chain_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFeature_chain_member(this);
}

void SysMLv2Parser::Feature_chain_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFeature_chain_member(this);
}

SysMLv2Parser::Feature_chain_memberContext* SysMLv2Parser::feature_chain_member() {
  Feature_chain_memberContext *_localctx = _tracker.createInstance<Feature_chain_memberContext>(_ctx, getState());
  enterRule(_localctx, 352, SysMLv2Parser::RuleFeature_chain_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2230);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 154, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2228);
      antlrcpp::downCast<Feature_chain_memberContext *>(_localctx)->memberElement = qualified_name();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2229);
      owned_feature_chain();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Owned_feature_chain_memberContext ------------------------------------------------------------------

SysMLv2Parser::Owned_feature_chain_memberContext::Owned_feature_chain_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Owned_feature_chainContext* SysMLv2Parser::Owned_feature_chain_memberContext::owned_feature_chain() {
  return getRuleContext<SysMLv2Parser::Owned_feature_chainContext>(0);
}


size_t SysMLv2Parser::Owned_feature_chain_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleOwned_feature_chain_member;
}

void SysMLv2Parser::Owned_feature_chain_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOwned_feature_chain_member(this);
}

void SysMLv2Parser::Owned_feature_chain_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOwned_feature_chain_member(this);
}

SysMLv2Parser::Owned_feature_chain_memberContext* SysMLv2Parser::owned_feature_chain_member() {
  Owned_feature_chain_memberContext *_localctx = _tracker.createInstance<Owned_feature_chain_memberContext>(_ctx, getState());
  enterRule(_localctx, 354, SysMLv2Parser::RuleOwned_feature_chain_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2232);
    owned_feature_chain();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Terminate_nodeContext ------------------------------------------------------------------

SysMLv2Parser::Terminate_nodeContext::Terminate_nodeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Occurrence_usage_prefixContext* SysMLv2Parser::Terminate_nodeContext::occurrence_usage_prefix() {
  return getRuleContext<SysMLv2Parser::Occurrence_usage_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Terminate_nodeContext::KEYWORD_TERMINATE() {
  return getToken(SysMLv2Parser::KEYWORD_TERMINATE, 0);
}

SysMLv2Parser::Action_bodyContext* SysMLv2Parser::Terminate_nodeContext::action_body() {
  return getRuleContext<SysMLv2Parser::Action_bodyContext>(0);
}

SysMLv2Parser::Action_node_usage_declarationContext* SysMLv2Parser::Terminate_nodeContext::action_node_usage_declaration() {
  return getRuleContext<SysMLv2Parser::Action_node_usage_declarationContext>(0);
}

SysMLv2Parser::Node_parameter_memberContext* SysMLv2Parser::Terminate_nodeContext::node_parameter_member() {
  return getRuleContext<SysMLv2Parser::Node_parameter_memberContext>(0);
}


size_t SysMLv2Parser::Terminate_nodeContext::getRuleIndex() const {
  return SysMLv2Parser::RuleTerminate_node;
}

void SysMLv2Parser::Terminate_nodeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTerminate_node(this);
}

void SysMLv2Parser::Terminate_nodeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTerminate_node(this);
}

SysMLv2Parser::Terminate_nodeContext* SysMLv2Parser::terminate_node() {
  Terminate_nodeContext *_localctx = _tracker.createInstance<Terminate_nodeContext>(_ctx, getState());
  enterRule(_localctx, 356, SysMLv2Parser::RuleTerminate_node);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2234);
    occurrence_usage_prefix();
    setState(2236);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_ACTION) {
      setState(2235);
      action_node_usage_declaration();
    }
    setState(2238);
    match(SysMLv2Parser::KEYWORD_TERMINATE);
    setState(2240);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::T__0 || ((((_la - 91) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 91)) & 108368278484680709) != 0) || ((((_la - 174) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 174)) & -1873482588106784767) != 0)) {
      setState(2239);
      node_parameter_member();
    }
    setState(2242);
    action_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- If_nodeContext ------------------------------------------------------------------

SysMLv2Parser::If_nodeContext::If_nodeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Action_node_prefixContext* SysMLv2Parser::If_nodeContext::action_node_prefix() {
  return getRuleContext<SysMLv2Parser::Action_node_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::If_nodeContext::KEYWORD_IF() {
  return getToken(SysMLv2Parser::KEYWORD_IF, 0);
}

SysMLv2Parser::Expression_parameter_memberContext* SysMLv2Parser::If_nodeContext::expression_parameter_member() {
  return getRuleContext<SysMLv2Parser::Expression_parameter_memberContext>(0);
}

std::vector<SysMLv2Parser::Action_body_parameter_memberContext *> SysMLv2Parser::If_nodeContext::action_body_parameter_member() {
  return getRuleContexts<SysMLv2Parser::Action_body_parameter_memberContext>();
}

SysMLv2Parser::Action_body_parameter_memberContext* SysMLv2Parser::If_nodeContext::action_body_parameter_member(size_t i) {
  return getRuleContext<SysMLv2Parser::Action_body_parameter_memberContext>(i);
}

tree::TerminalNode* SysMLv2Parser::If_nodeContext::KEYWORD_ELSE() {
  return getToken(SysMLv2Parser::KEYWORD_ELSE, 0);
}

SysMLv2Parser::If_node_parameter_memberContext* SysMLv2Parser::If_nodeContext::if_node_parameter_member() {
  return getRuleContext<SysMLv2Parser::If_node_parameter_memberContext>(0);
}


size_t SysMLv2Parser::If_nodeContext::getRuleIndex() const {
  return SysMLv2Parser::RuleIf_node;
}

void SysMLv2Parser::If_nodeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIf_node(this);
}

void SysMLv2Parser::If_nodeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIf_node(this);
}

SysMLv2Parser::If_nodeContext* SysMLv2Parser::if_node() {
  If_nodeContext *_localctx = _tracker.createInstance<If_nodeContext>(_ctx, getState());
  enterRule(_localctx, 358, SysMLv2Parser::RuleIf_node);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2244);
    action_node_prefix();
    setState(2245);
    match(SysMLv2Parser::KEYWORD_IF);
    setState(2246);
    expression_parameter_member();
    setState(2247);
    action_body_parameter_member();

    setState(2248);
    match(SysMLv2Parser::KEYWORD_ELSE);
    setState(2251);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 157, _ctx)) {
    case 1: {
      setState(2249);
      action_body_parameter_member();
      break;
    }

    case 2: {
      setState(2250);
      if_node_parameter_member();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expression_parameter_memberContext ------------------------------------------------------------------

SysMLv2Parser::Expression_parameter_memberContext::Expression_parameter_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Owned_expressionContext* SysMLv2Parser::Expression_parameter_memberContext::owned_expression() {
  return getRuleContext<SysMLv2Parser::Owned_expressionContext>(0);
}


size_t SysMLv2Parser::Expression_parameter_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleExpression_parameter_member;
}

void SysMLv2Parser::Expression_parameter_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpression_parameter_member(this);
}

void SysMLv2Parser::Expression_parameter_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpression_parameter_member(this);
}

SysMLv2Parser::Expression_parameter_memberContext* SysMLv2Parser::expression_parameter_member() {
  Expression_parameter_memberContext *_localctx = _tracker.createInstance<Expression_parameter_memberContext>(_ctx, getState());
  enterRule(_localctx, 360, SysMLv2Parser::RuleExpression_parameter_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2253);
    owned_expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Action_body_parameter_memberContext ------------------------------------------------------------------

SysMLv2Parser::Action_body_parameter_memberContext::Action_body_parameter_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Action_body_parameterContext* SysMLv2Parser::Action_body_parameter_memberContext::action_body_parameter() {
  return getRuleContext<SysMLv2Parser::Action_body_parameterContext>(0);
}


size_t SysMLv2Parser::Action_body_parameter_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleAction_body_parameter_member;
}

void SysMLv2Parser::Action_body_parameter_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAction_body_parameter_member(this);
}

void SysMLv2Parser::Action_body_parameter_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAction_body_parameter_member(this);
}

SysMLv2Parser::Action_body_parameter_memberContext* SysMLv2Parser::action_body_parameter_member() {
  Action_body_parameter_memberContext *_localctx = _tracker.createInstance<Action_body_parameter_memberContext>(_ctx, getState());
  enterRule(_localctx, 362, SysMLv2Parser::RuleAction_body_parameter_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2255);
    action_body_parameter();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Action_body_parameterContext ------------------------------------------------------------------

SysMLv2Parser::Action_body_parameterContext::Action_body_parameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Action_body_parameterContext::SYMBOL_CURLY_BRACKET_OPEN() {
  return getToken(SysMLv2Parser::SYMBOL_CURLY_BRACKET_OPEN, 0);
}

tree::TerminalNode* SysMLv2Parser::Action_body_parameterContext::SYMBOL_CURLY_BRACKET_CLOSE() {
  return getToken(SysMLv2Parser::SYMBOL_CURLY_BRACKET_CLOSE, 0);
}

tree::TerminalNode* SysMLv2Parser::Action_body_parameterContext::KEYWORD_ACTION() {
  return getToken(SysMLv2Parser::KEYWORD_ACTION, 0);
}

std::vector<SysMLv2Parser::Action_body_itemContext *> SysMLv2Parser::Action_body_parameterContext::action_body_item() {
  return getRuleContexts<SysMLv2Parser::Action_body_itemContext>();
}

SysMLv2Parser::Action_body_itemContext* SysMLv2Parser::Action_body_parameterContext::action_body_item(size_t i) {
  return getRuleContext<SysMLv2Parser::Action_body_itemContext>(i);
}

SysMLv2Parser::Usage_declarationContext* SysMLv2Parser::Action_body_parameterContext::usage_declaration() {
  return getRuleContext<SysMLv2Parser::Usage_declarationContext>(0);
}


size_t SysMLv2Parser::Action_body_parameterContext::getRuleIndex() const {
  return SysMLv2Parser::RuleAction_body_parameter;
}

void SysMLv2Parser::Action_body_parameterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAction_body_parameter(this);
}

void SysMLv2Parser::Action_body_parameterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAction_body_parameter(this);
}

SysMLv2Parser::Action_body_parameterContext* SysMLv2Parser::action_body_parameter() {
  Action_body_parameterContext *_localctx = _tracker.createInstance<Action_body_parameterContext>(_ctx, getState());
  enterRule(_localctx, 364, SysMLv2Parser::RuleAction_body_parameter);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2261);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_ACTION) {
      setState(2257);
      match(SysMLv2Parser::KEYWORD_ACTION);
      setState(2259);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 158, _ctx)) {
      case 1: {
        setState(2258);
        usage_declaration();
        break;
      }

      default:
        break;
      }
    }
    setState(2263);
    match(SysMLv2Parser::SYMBOL_CURLY_BRACKET_OPEN);
    setState(2267);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -3101591291931574480) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & 2018228497054263181) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 129)) & 4967483587906521145) != 0) || ((((_la - 201) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 201)) & 2154037349) != 0)) {
      setState(2264);
      action_body_item();
      setState(2269);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2270);
    match(SysMLv2Parser::SYMBOL_CURLY_BRACKET_CLOSE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- If_node_parameter_memberContext ------------------------------------------------------------------

SysMLv2Parser::If_node_parameter_memberContext::If_node_parameter_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::If_nodeContext* SysMLv2Parser::If_node_parameter_memberContext::if_node() {
  return getRuleContext<SysMLv2Parser::If_nodeContext>(0);
}


size_t SysMLv2Parser::If_node_parameter_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleIf_node_parameter_member;
}

void SysMLv2Parser::If_node_parameter_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIf_node_parameter_member(this);
}

void SysMLv2Parser::If_node_parameter_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIf_node_parameter_member(this);
}

SysMLv2Parser::If_node_parameter_memberContext* SysMLv2Parser::if_node_parameter_member() {
  If_node_parameter_memberContext *_localctx = _tracker.createInstance<If_node_parameter_memberContext>(_ctx, getState());
  enterRule(_localctx, 366, SysMLv2Parser::RuleIf_node_parameter_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2272);
    if_node();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- While_loop_nodeContext ------------------------------------------------------------------

SysMLv2Parser::While_loop_nodeContext::While_loop_nodeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Action_node_prefixContext* SysMLv2Parser::While_loop_nodeContext::action_node_prefix() {
  return getRuleContext<SysMLv2Parser::Action_node_prefixContext>(0);
}

SysMLv2Parser::Action_body_parameter_memberContext* SysMLv2Parser::While_loop_nodeContext::action_body_parameter_member() {
  return getRuleContext<SysMLv2Parser::Action_body_parameter_memberContext>(0);
}

tree::TerminalNode* SysMLv2Parser::While_loop_nodeContext::KEYWORD_WHILE() {
  return getToken(SysMLv2Parser::KEYWORD_WHILE, 0);
}

std::vector<SysMLv2Parser::Expression_parameter_memberContext *> SysMLv2Parser::While_loop_nodeContext::expression_parameter_member() {
  return getRuleContexts<SysMLv2Parser::Expression_parameter_memberContext>();
}

SysMLv2Parser::Expression_parameter_memberContext* SysMLv2Parser::While_loop_nodeContext::expression_parameter_member(size_t i) {
  return getRuleContext<SysMLv2Parser::Expression_parameter_memberContext>(i);
}

tree::TerminalNode* SysMLv2Parser::While_loop_nodeContext::KEYWORD_LOOP() {
  return getToken(SysMLv2Parser::KEYWORD_LOOP, 0);
}

tree::TerminalNode* SysMLv2Parser::While_loop_nodeContext::KEYWORD_UNTIL() {
  return getToken(SysMLv2Parser::KEYWORD_UNTIL, 0);
}

tree::TerminalNode* SysMLv2Parser::While_loop_nodeContext::SYMBOL_STATEMENT_DELIMITER() {
  return getToken(SysMLv2Parser::SYMBOL_STATEMENT_DELIMITER, 0);
}


size_t SysMLv2Parser::While_loop_nodeContext::getRuleIndex() const {
  return SysMLv2Parser::RuleWhile_loop_node;
}

void SysMLv2Parser::While_loop_nodeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWhile_loop_node(this);
}

void SysMLv2Parser::While_loop_nodeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWhile_loop_node(this);
}

SysMLv2Parser::While_loop_nodeContext* SysMLv2Parser::while_loop_node() {
  While_loop_nodeContext *_localctx = _tracker.createInstance<While_loop_nodeContext>(_ctx, getState());
  enterRule(_localctx, 368, SysMLv2Parser::RuleWhile_loop_node);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2274);
    action_node_prefix();
    setState(2278);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SysMLv2Parser::KEYWORD_WHILE: {
        setState(2275);
        match(SysMLv2Parser::KEYWORD_WHILE);
        setState(2276);
        expression_parameter_member();
        break;
      }

      case SysMLv2Parser::KEYWORD_LOOP: {
        setState(2277);
        match(SysMLv2Parser::KEYWORD_LOOP);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(2280);
    action_body_parameter_member();

    setState(2281);
    match(SysMLv2Parser::KEYWORD_UNTIL);
    setState(2282);
    expression_parameter_member();
    setState(2283);
    match(SysMLv2Parser::SYMBOL_STATEMENT_DELIMITER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- For_loop_nodeContext ------------------------------------------------------------------

SysMLv2Parser::For_loop_nodeContext::For_loop_nodeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Action_node_prefixContext* SysMLv2Parser::For_loop_nodeContext::action_node_prefix() {
  return getRuleContext<SysMLv2Parser::Action_node_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::For_loop_nodeContext::KEYWORD_FOR() {
  return getToken(SysMLv2Parser::KEYWORD_FOR, 0);
}

SysMLv2Parser::For_variable_declaration_memberContext* SysMLv2Parser::For_loop_nodeContext::for_variable_declaration_member() {
  return getRuleContext<SysMLv2Parser::For_variable_declaration_memberContext>(0);
}

tree::TerminalNode* SysMLv2Parser::For_loop_nodeContext::KEYWORD_IN() {
  return getToken(SysMLv2Parser::KEYWORD_IN, 0);
}

SysMLv2Parser::Node_parameter_memberContext* SysMLv2Parser::For_loop_nodeContext::node_parameter_member() {
  return getRuleContext<SysMLv2Parser::Node_parameter_memberContext>(0);
}

SysMLv2Parser::Action_body_parameter_memberContext* SysMLv2Parser::For_loop_nodeContext::action_body_parameter_member() {
  return getRuleContext<SysMLv2Parser::Action_body_parameter_memberContext>(0);
}


size_t SysMLv2Parser::For_loop_nodeContext::getRuleIndex() const {
  return SysMLv2Parser::RuleFor_loop_node;
}

void SysMLv2Parser::For_loop_nodeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFor_loop_node(this);
}

void SysMLv2Parser::For_loop_nodeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFor_loop_node(this);
}

SysMLv2Parser::For_loop_nodeContext* SysMLv2Parser::for_loop_node() {
  For_loop_nodeContext *_localctx = _tracker.createInstance<For_loop_nodeContext>(_ctx, getState());
  enterRule(_localctx, 370, SysMLv2Parser::RuleFor_loop_node);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2285);
    action_node_prefix();
    setState(2286);
    match(SysMLv2Parser::KEYWORD_FOR);
    setState(2287);
    for_variable_declaration_member();
    setState(2288);
    match(SysMLv2Parser::KEYWORD_IN);
    setState(2289);
    node_parameter_member();
    setState(2290);
    action_body_parameter_member();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- For_variable_declaration_memberContext ------------------------------------------------------------------

SysMLv2Parser::For_variable_declaration_memberContext::For_variable_declaration_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Usage_declarationContext* SysMLv2Parser::For_variable_declaration_memberContext::usage_declaration() {
  return getRuleContext<SysMLv2Parser::Usage_declarationContext>(0);
}


size_t SysMLv2Parser::For_variable_declaration_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleFor_variable_declaration_member;
}

void SysMLv2Parser::For_variable_declaration_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFor_variable_declaration_member(this);
}

void SysMLv2Parser::For_variable_declaration_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFor_variable_declaration_member(this);
}

SysMLv2Parser::For_variable_declaration_memberContext* SysMLv2Parser::for_variable_declaration_member() {
  For_variable_declaration_memberContext *_localctx = _tracker.createInstance<For_variable_declaration_memberContext>(_ctx, getState());
  enterRule(_localctx, 372, SysMLv2Parser::RuleFor_variable_declaration_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2292);
    usage_declaration();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- For_variable_declarationContext ------------------------------------------------------------------

SysMLv2Parser::For_variable_declarationContext::For_variable_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Usage_declarationContext* SysMLv2Parser::For_variable_declarationContext::usage_declaration() {
  return getRuleContext<SysMLv2Parser::Usage_declarationContext>(0);
}


size_t SysMLv2Parser::For_variable_declarationContext::getRuleIndex() const {
  return SysMLv2Parser::RuleFor_variable_declaration;
}

void SysMLv2Parser::For_variable_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFor_variable_declaration(this);
}

void SysMLv2Parser::For_variable_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFor_variable_declaration(this);
}

SysMLv2Parser::For_variable_declarationContext* SysMLv2Parser::for_variable_declaration() {
  For_variable_declarationContext *_localctx = _tracker.createInstance<For_variable_declarationContext>(_ctx, getState());
  enterRule(_localctx, 374, SysMLv2Parser::RuleFor_variable_declaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2294);
    usage_declaration();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Action_target_successionContext ------------------------------------------------------------------

SysMLv2Parser::Action_target_successionContext::Action_target_successionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Usage_bodyContext* SysMLv2Parser::Action_target_successionContext::usage_body() {
  return getRuleContext<SysMLv2Parser::Usage_bodyContext>(0);
}

SysMLv2Parser::Target_successionContext* SysMLv2Parser::Action_target_successionContext::target_succession() {
  return getRuleContext<SysMLv2Parser::Target_successionContext>(0);
}

SysMLv2Parser::Guarded_target_successionContext* SysMLv2Parser::Action_target_successionContext::guarded_target_succession() {
  return getRuleContext<SysMLv2Parser::Guarded_target_successionContext>(0);
}

SysMLv2Parser::Default_target_successionContext* SysMLv2Parser::Action_target_successionContext::default_target_succession() {
  return getRuleContext<SysMLv2Parser::Default_target_successionContext>(0);
}


size_t SysMLv2Parser::Action_target_successionContext::getRuleIndex() const {
  return SysMLv2Parser::RuleAction_target_succession;
}

void SysMLv2Parser::Action_target_successionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAction_target_succession(this);
}

void SysMLv2Parser::Action_target_successionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAction_target_succession(this);
}

SysMLv2Parser::Action_target_successionContext* SysMLv2Parser::action_target_succession() {
  Action_target_successionContext *_localctx = _tracker.createInstance<Action_target_successionContext>(_ctx, getState());
  enterRule(_localctx, 376, SysMLv2Parser::RuleAction_target_succession);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2299);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SysMLv2Parser::KEYWORD_THEN:
      case SysMLv2Parser::SYMBOL_SQUARE_BRACKET_OPEN: {
        setState(2296);
        target_succession();
        break;
      }

      case SysMLv2Parser::KEYWORD_IF: {
        setState(2297);
        guarded_target_succession();
        break;
      }

      case SysMLv2Parser::KEYWORD_ELSE: {
        setState(2298);
        default_target_succession();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(2301);
    usage_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Target_successionContext ------------------------------------------------------------------

SysMLv2Parser::Target_successionContext::Target_successionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Source_end_memberContext* SysMLv2Parser::Target_successionContext::source_end_member() {
  return getRuleContext<SysMLv2Parser::Source_end_memberContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Target_successionContext::KEYWORD_THEN() {
  return getToken(SysMLv2Parser::KEYWORD_THEN, 0);
}

SysMLv2Parser::Connector_end_memberContext* SysMLv2Parser::Target_successionContext::connector_end_member() {
  return getRuleContext<SysMLv2Parser::Connector_end_memberContext>(0);
}


size_t SysMLv2Parser::Target_successionContext::getRuleIndex() const {
  return SysMLv2Parser::RuleTarget_succession;
}

void SysMLv2Parser::Target_successionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTarget_succession(this);
}

void SysMLv2Parser::Target_successionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTarget_succession(this);
}

SysMLv2Parser::Target_successionContext* SysMLv2Parser::target_succession() {
  Target_successionContext *_localctx = _tracker.createInstance<Target_successionContext>(_ctx, getState());
  enterRule(_localctx, 378, SysMLv2Parser::RuleTarget_succession);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2303);
    source_end_member();
    setState(2304);
    match(SysMLv2Parser::KEYWORD_THEN);
    setState(2305);
    connector_end_member();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Guarded_target_successionContext ------------------------------------------------------------------

SysMLv2Parser::Guarded_target_successionContext::Guarded_target_successionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Guard_expression_memberContext* SysMLv2Parser::Guarded_target_successionContext::guard_expression_member() {
  return getRuleContext<SysMLv2Parser::Guard_expression_memberContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Guarded_target_successionContext::KEYWORD_THEN() {
  return getToken(SysMLv2Parser::KEYWORD_THEN, 0);
}

SysMLv2Parser::Transition_succession_memberContext* SysMLv2Parser::Guarded_target_successionContext::transition_succession_member() {
  return getRuleContext<SysMLv2Parser::Transition_succession_memberContext>(0);
}


size_t SysMLv2Parser::Guarded_target_successionContext::getRuleIndex() const {
  return SysMLv2Parser::RuleGuarded_target_succession;
}

void SysMLv2Parser::Guarded_target_successionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGuarded_target_succession(this);
}

void SysMLv2Parser::Guarded_target_successionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGuarded_target_succession(this);
}

SysMLv2Parser::Guarded_target_successionContext* SysMLv2Parser::guarded_target_succession() {
  Guarded_target_successionContext *_localctx = _tracker.createInstance<Guarded_target_successionContext>(_ctx, getState());
  enterRule(_localctx, 380, SysMLv2Parser::RuleGuarded_target_succession);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2307);
    guard_expression_member();
    setState(2308);
    match(SysMLv2Parser::KEYWORD_THEN);
    setState(2309);
    transition_succession_member();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Default_target_successionContext ------------------------------------------------------------------

SysMLv2Parser::Default_target_successionContext::Default_target_successionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Default_target_successionContext::KEYWORD_ELSE() {
  return getToken(SysMLv2Parser::KEYWORD_ELSE, 0);
}

SysMLv2Parser::Transition_succession_memberContext* SysMLv2Parser::Default_target_successionContext::transition_succession_member() {
  return getRuleContext<SysMLv2Parser::Transition_succession_memberContext>(0);
}


size_t SysMLv2Parser::Default_target_successionContext::getRuleIndex() const {
  return SysMLv2Parser::RuleDefault_target_succession;
}

void SysMLv2Parser::Default_target_successionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDefault_target_succession(this);
}

void SysMLv2Parser::Default_target_successionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDefault_target_succession(this);
}

SysMLv2Parser::Default_target_successionContext* SysMLv2Parser::default_target_succession() {
  Default_target_successionContext *_localctx = _tracker.createInstance<Default_target_successionContext>(_ctx, getState());
  enterRule(_localctx, 382, SysMLv2Parser::RuleDefault_target_succession);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2311);
    match(SysMLv2Parser::KEYWORD_ELSE);
    setState(2312);
    transition_succession_member();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Guarded_successionContext ------------------------------------------------------------------

SysMLv2Parser::Guarded_successionContext::Guarded_successionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Guarded_successionContext::KEYWORD_FIRST() {
  return getToken(SysMLv2Parser::KEYWORD_FIRST, 0);
}

SysMLv2Parser::Feature_chain_memberContext* SysMLv2Parser::Guarded_successionContext::feature_chain_member() {
  return getRuleContext<SysMLv2Parser::Feature_chain_memberContext>(0);
}

SysMLv2Parser::Guard_expression_memberContext* SysMLv2Parser::Guarded_successionContext::guard_expression_member() {
  return getRuleContext<SysMLv2Parser::Guard_expression_memberContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Guarded_successionContext::KEYWORD_THEN() {
  return getToken(SysMLv2Parser::KEYWORD_THEN, 0);
}

SysMLv2Parser::Transition_succession_memberContext* SysMLv2Parser::Guarded_successionContext::transition_succession_member() {
  return getRuleContext<SysMLv2Parser::Transition_succession_memberContext>(0);
}

SysMLv2Parser::Usage_bodyContext* SysMLv2Parser::Guarded_successionContext::usage_body() {
  return getRuleContext<SysMLv2Parser::Usage_bodyContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Guarded_successionContext::KEYWORD_SUCCSESSION() {
  return getToken(SysMLv2Parser::KEYWORD_SUCCSESSION, 0);
}

SysMLv2Parser::Usage_declarationContext* SysMLv2Parser::Guarded_successionContext::usage_declaration() {
  return getRuleContext<SysMLv2Parser::Usage_declarationContext>(0);
}


size_t SysMLv2Parser::Guarded_successionContext::getRuleIndex() const {
  return SysMLv2Parser::RuleGuarded_succession;
}

void SysMLv2Parser::Guarded_successionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGuarded_succession(this);
}

void SysMLv2Parser::Guarded_successionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGuarded_succession(this);
}

SysMLv2Parser::Guarded_successionContext* SysMLv2Parser::guarded_succession() {
  Guarded_successionContext *_localctx = _tracker.createInstance<Guarded_successionContext>(_ctx, getState());
  enterRule(_localctx, 384, SysMLv2Parser::RuleGuarded_succession);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2316);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_SUCCSESSION) {
      setState(2314);
      match(SysMLv2Parser::KEYWORD_SUCCSESSION);
      setState(2315);
      usage_declaration();
    }
    setState(2318);
    match(SysMLv2Parser::KEYWORD_FIRST);
    setState(2319);
    feature_chain_member();
    setState(2320);
    guard_expression_member();
    setState(2321);
    match(SysMLv2Parser::KEYWORD_THEN);
    setState(2322);
    transition_succession_member();
    setState(2323);
    usage_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- State_definitionContext ------------------------------------------------------------------

SysMLv2Parser::State_definitionContext::State_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Occurrence_definition_prefixContext* SysMLv2Parser::State_definitionContext::occurrence_definition_prefix() {
  return getRuleContext<SysMLv2Parser::Occurrence_definition_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::State_definitionContext::KEYWORD_STATE() {
  return getToken(SysMLv2Parser::KEYWORD_STATE, 0);
}

tree::TerminalNode* SysMLv2Parser::State_definitionContext::KEYWORD_DEF() {
  return getToken(SysMLv2Parser::KEYWORD_DEF, 0);
}

SysMLv2Parser::Definition_declarationContext* SysMLv2Parser::State_definitionContext::definition_declaration() {
  return getRuleContext<SysMLv2Parser::Definition_declarationContext>(0);
}

SysMLv2Parser::State_def_bodyContext* SysMLv2Parser::State_definitionContext::state_def_body() {
  return getRuleContext<SysMLv2Parser::State_def_bodyContext>(0);
}


size_t SysMLv2Parser::State_definitionContext::getRuleIndex() const {
  return SysMLv2Parser::RuleState_definition;
}

void SysMLv2Parser::State_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterState_definition(this);
}

void SysMLv2Parser::State_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitState_definition(this);
}

SysMLv2Parser::State_definitionContext* SysMLv2Parser::state_definition() {
  State_definitionContext *_localctx = _tracker.createInstance<State_definitionContext>(_ctx, getState());
  enterRule(_localctx, 386, SysMLv2Parser::RuleState_definition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2325);
    occurrence_definition_prefix();
    setState(2326);
    match(SysMLv2Parser::KEYWORD_STATE);
    setState(2327);
    match(SysMLv2Parser::KEYWORD_DEF);
    setState(2328);
    definition_declaration();
    setState(2329);
    state_def_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- State_def_bodyContext ------------------------------------------------------------------

SysMLv2Parser::State_def_bodyContext::State_def_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::State_def_bodyContext::SYMBOL_STATEMENT_DELIMITER() {
  return getToken(SysMLv2Parser::SYMBOL_STATEMENT_DELIMITER, 0);
}

tree::TerminalNode* SysMLv2Parser::State_def_bodyContext::SYMBOL_CURLY_BRACKET_OPEN() {
  return getToken(SysMLv2Parser::SYMBOL_CURLY_BRACKET_OPEN, 0);
}

SysMLv2Parser::State_body_itemContext* SysMLv2Parser::State_def_bodyContext::state_body_item() {
  return getRuleContext<SysMLv2Parser::State_body_itemContext>(0);
}

tree::TerminalNode* SysMLv2Parser::State_def_bodyContext::SYMBOL_CURLY_BRACKET_CLOSE() {
  return getToken(SysMLv2Parser::SYMBOL_CURLY_BRACKET_CLOSE, 0);
}

tree::TerminalNode* SysMLv2Parser::State_def_bodyContext::KEYWORD_PARALLEL() {
  return getToken(SysMLv2Parser::KEYWORD_PARALLEL, 0);
}


size_t SysMLv2Parser::State_def_bodyContext::getRuleIndex() const {
  return SysMLv2Parser::RuleState_def_body;
}

void SysMLv2Parser::State_def_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterState_def_body(this);
}

void SysMLv2Parser::State_def_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitState_def_body(this);
}

SysMLv2Parser::State_def_bodyContext* SysMLv2Parser::state_def_body() {
  State_def_bodyContext *_localctx = _tracker.createInstance<State_def_bodyContext>(_ctx, getState());
  enterRule(_localctx, 388, SysMLv2Parser::RuleState_def_body);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2339);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SysMLv2Parser::SYMBOL_STATEMENT_DELIMITER: {
        enterOuterAlt(_localctx, 1);
        setState(2331);
        match(SysMLv2Parser::SYMBOL_STATEMENT_DELIMITER);
        break;
      }

      case SysMLv2Parser::KEYWORD_PARALLEL:
      case SysMLv2Parser::SYMBOL_CURLY_BRACKET_OPEN: {
        enterOuterAlt(_localctx, 2);
        setState(2333);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == SysMLv2Parser::KEYWORD_PARALLEL) {
          setState(2332);
          match(SysMLv2Parser::KEYWORD_PARALLEL);
        }
        setState(2335);
        match(SysMLv2Parser::SYMBOL_CURLY_BRACKET_OPEN);
        setState(2336);
        state_body_item();
        setState(2337);
        match(SysMLv2Parser::SYMBOL_CURLY_BRACKET_CLOSE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- State_body_itemContext ------------------------------------------------------------------

SysMLv2Parser::State_body_itemContext::State_body_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Non_behavior_body_itemContext* SysMLv2Parser::State_body_itemContext::non_behavior_body_item() {
  return getRuleContext<SysMLv2Parser::Non_behavior_body_itemContext>(0);
}

SysMLv2Parser::Behavior_usage_memberContext* SysMLv2Parser::State_body_itemContext::behavior_usage_member() {
  return getRuleContext<SysMLv2Parser::Behavior_usage_memberContext>(0);
}

SysMLv2Parser::Source_succession_memberContext* SysMLv2Parser::State_body_itemContext::source_succession_member() {
  return getRuleContext<SysMLv2Parser::Source_succession_memberContext>(0);
}

std::vector<SysMLv2Parser::Target_transition_usage_memberContext *> SysMLv2Parser::State_body_itemContext::target_transition_usage_member() {
  return getRuleContexts<SysMLv2Parser::Target_transition_usage_memberContext>();
}

SysMLv2Parser::Target_transition_usage_memberContext* SysMLv2Parser::State_body_itemContext::target_transition_usage_member(size_t i) {
  return getRuleContext<SysMLv2Parser::Target_transition_usage_memberContext>(i);
}

SysMLv2Parser::Transition_usage_memberContext* SysMLv2Parser::State_body_itemContext::transition_usage_member() {
  return getRuleContext<SysMLv2Parser::Transition_usage_memberContext>(0);
}

SysMLv2Parser::Entry_action_memberContext* SysMLv2Parser::State_body_itemContext::entry_action_member() {
  return getRuleContext<SysMLv2Parser::Entry_action_memberContext>(0);
}

std::vector<SysMLv2Parser::Entry_transition_memberContext *> SysMLv2Parser::State_body_itemContext::entry_transition_member() {
  return getRuleContexts<SysMLv2Parser::Entry_transition_memberContext>();
}

SysMLv2Parser::Entry_transition_memberContext* SysMLv2Parser::State_body_itemContext::entry_transition_member(size_t i) {
  return getRuleContext<SysMLv2Parser::Entry_transition_memberContext>(i);
}

SysMLv2Parser::Do_action_memberContext* SysMLv2Parser::State_body_itemContext::do_action_member() {
  return getRuleContext<SysMLv2Parser::Do_action_memberContext>(0);
}

SysMLv2Parser::Exit_action_memberContext* SysMLv2Parser::State_body_itemContext::exit_action_member() {
  return getRuleContext<SysMLv2Parser::Exit_action_memberContext>(0);
}


size_t SysMLv2Parser::State_body_itemContext::getRuleIndex() const {
  return SysMLv2Parser::RuleState_body_item;
}

void SysMLv2Parser::State_body_itemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterState_body_item(this);
}

void SysMLv2Parser::State_body_itemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitState_body_item(this);
}

SysMLv2Parser::State_body_itemContext* SysMLv2Parser::state_body_item() {
  State_body_itemContext *_localctx = _tracker.createInstance<State_body_itemContext>(_ctx, getState());
  enterRule(_localctx, 390, SysMLv2Parser::RuleState_body_item);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(2362);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 169, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2341);
      non_behavior_body_item();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2343);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == SysMLv2Parser::KEYWORD_THEN) {
        setState(2342);
        source_succession_member();
      }
      setState(2345);
      behavior_usage_member();
      setState(2349);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 167, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(2346);
          target_transition_usage_member(); 
        }
        setState(2351);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 167, _ctx);
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2352);
      transition_usage_member();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2353);
      entry_action_member();
      setState(2357);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 168, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(2354);
          entry_transition_member(); 
        }
        setState(2359);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 168, _ctx);
      }
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2360);
      do_action_member();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(2361);
      exit_action_member();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Entry_action_memberContext ------------------------------------------------------------------

SysMLv2Parser::Entry_action_memberContext::Entry_action_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Member_prefixContext* SysMLv2Parser::Entry_action_memberContext::member_prefix() {
  return getRuleContext<SysMLv2Parser::Member_prefixContext>(0);
}

SysMLv2Parser::State_action_usageContext* SysMLv2Parser::Entry_action_memberContext::state_action_usage() {
  return getRuleContext<SysMLv2Parser::State_action_usageContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Entry_action_memberContext::KEYWORD_ENTRY() {
  return getToken(SysMLv2Parser::KEYWORD_ENTRY, 0);
}


size_t SysMLv2Parser::Entry_action_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleEntry_action_member;
}

void SysMLv2Parser::Entry_action_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEntry_action_member(this);
}

void SysMLv2Parser::Entry_action_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEntry_action_member(this);
}

SysMLv2Parser::Entry_action_memberContext* SysMLv2Parser::entry_action_member() {
  Entry_action_memberContext *_localctx = _tracker.createInstance<Entry_action_memberContext>(_ctx, getState());
  enterRule(_localctx, 392, SysMLv2Parser::RuleEntry_action_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2364);
    member_prefix();
    setState(2365);
    antlrcpp::downCast<Entry_action_memberContext *>(_localctx)->kind = match(SysMLv2Parser::KEYWORD_ENTRY);
    setState(2366);
    state_action_usage();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Do_action_memberContext ------------------------------------------------------------------

SysMLv2Parser::Do_action_memberContext::Do_action_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Member_prefixContext* SysMLv2Parser::Do_action_memberContext::member_prefix() {
  return getRuleContext<SysMLv2Parser::Member_prefixContext>(0);
}

SysMLv2Parser::State_action_usageContext* SysMLv2Parser::Do_action_memberContext::state_action_usage() {
  return getRuleContext<SysMLv2Parser::State_action_usageContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Do_action_memberContext::KEYWORD_DO() {
  return getToken(SysMLv2Parser::KEYWORD_DO, 0);
}


size_t SysMLv2Parser::Do_action_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleDo_action_member;
}

void SysMLv2Parser::Do_action_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDo_action_member(this);
}

void SysMLv2Parser::Do_action_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDo_action_member(this);
}

SysMLv2Parser::Do_action_memberContext* SysMLv2Parser::do_action_member() {
  Do_action_memberContext *_localctx = _tracker.createInstance<Do_action_memberContext>(_ctx, getState());
  enterRule(_localctx, 394, SysMLv2Parser::RuleDo_action_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2368);
    member_prefix();
    setState(2369);
    antlrcpp::downCast<Do_action_memberContext *>(_localctx)->kind = match(SysMLv2Parser::KEYWORD_DO);
    setState(2370);
    state_action_usage();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Exit_action_memberContext ------------------------------------------------------------------

SysMLv2Parser::Exit_action_memberContext::Exit_action_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Member_prefixContext* SysMLv2Parser::Exit_action_memberContext::member_prefix() {
  return getRuleContext<SysMLv2Parser::Member_prefixContext>(0);
}

SysMLv2Parser::State_action_usageContext* SysMLv2Parser::Exit_action_memberContext::state_action_usage() {
  return getRuleContext<SysMLv2Parser::State_action_usageContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Exit_action_memberContext::KEYWORD_EXIT() {
  return getToken(SysMLv2Parser::KEYWORD_EXIT, 0);
}


size_t SysMLv2Parser::Exit_action_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleExit_action_member;
}

void SysMLv2Parser::Exit_action_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExit_action_member(this);
}

void SysMLv2Parser::Exit_action_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExit_action_member(this);
}

SysMLv2Parser::Exit_action_memberContext* SysMLv2Parser::exit_action_member() {
  Exit_action_memberContext *_localctx = _tracker.createInstance<Exit_action_memberContext>(_ctx, getState());
  enterRule(_localctx, 396, SysMLv2Parser::RuleExit_action_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2372);
    member_prefix();
    setState(2373);
    antlrcpp::downCast<Exit_action_memberContext *>(_localctx)->kind = match(SysMLv2Parser::KEYWORD_EXIT);
    setState(2374);
    state_action_usage();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Entry_transition_memberContext ------------------------------------------------------------------

SysMLv2Parser::Entry_transition_memberContext::Entry_transition_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Member_prefixContext* SysMLv2Parser::Entry_transition_memberContext::member_prefix() {
  return getRuleContext<SysMLv2Parser::Member_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Entry_transition_memberContext::SYMBOL_STATEMENT_DELIMITER() {
  return getToken(SysMLv2Parser::SYMBOL_STATEMENT_DELIMITER, 0);
}

SysMLv2Parser::Guarded_target_successionContext* SysMLv2Parser::Entry_transition_memberContext::guarded_target_succession() {
  return getRuleContext<SysMLv2Parser::Guarded_target_successionContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Entry_transition_memberContext::KEYWORD_THEN() {
  return getToken(SysMLv2Parser::KEYWORD_THEN, 0);
}

SysMLv2Parser::Target_successionContext* SysMLv2Parser::Entry_transition_memberContext::target_succession() {
  return getRuleContext<SysMLv2Parser::Target_successionContext>(0);
}


size_t SysMLv2Parser::Entry_transition_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleEntry_transition_member;
}

void SysMLv2Parser::Entry_transition_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEntry_transition_member(this);
}

void SysMLv2Parser::Entry_transition_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEntry_transition_member(this);
}

SysMLv2Parser::Entry_transition_memberContext* SysMLv2Parser::entry_transition_member() {
  Entry_transition_memberContext *_localctx = _tracker.createInstance<Entry_transition_memberContext>(_ctx, getState());
  enterRule(_localctx, 398, SysMLv2Parser::RuleEntry_transition_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2376);
    member_prefix();
    setState(2380);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SysMLv2Parser::KEYWORD_IF: {
        setState(2377);
        guarded_target_succession();
        break;
      }

      case SysMLv2Parser::KEYWORD_THEN: {
        setState(2378);
        match(SysMLv2Parser::KEYWORD_THEN);
        setState(2379);
        target_succession();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(2382);
    match(SysMLv2Parser::SYMBOL_STATEMENT_DELIMITER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- State_action_usageContext ------------------------------------------------------------------

SysMLv2Parser::State_action_usageContext::State_action_usageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Empty_action_usageContext* SysMLv2Parser::State_action_usageContext::empty_action_usage() {
  return getRuleContext<SysMLv2Parser::Empty_action_usageContext>(0);
}

tree::TerminalNode* SysMLv2Parser::State_action_usageContext::SYMBOL_STATEMENT_DELIMITER() {
  return getToken(SysMLv2Parser::SYMBOL_STATEMENT_DELIMITER, 0);
}

SysMLv2Parser::State_perform_action_uageContext* SysMLv2Parser::State_action_usageContext::state_perform_action_uage() {
  return getRuleContext<SysMLv2Parser::State_perform_action_uageContext>(0);
}

SysMLv2Parser::State_accept_action_usageContext* SysMLv2Parser::State_action_usageContext::state_accept_action_usage() {
  return getRuleContext<SysMLv2Parser::State_accept_action_usageContext>(0);
}

SysMLv2Parser::State_send_action_usageContext* SysMLv2Parser::State_action_usageContext::state_send_action_usage() {
  return getRuleContext<SysMLv2Parser::State_send_action_usageContext>(0);
}

SysMLv2Parser::State_assignment_action_usageContext* SysMLv2Parser::State_action_usageContext::state_assignment_action_usage() {
  return getRuleContext<SysMLv2Parser::State_assignment_action_usageContext>(0);
}


size_t SysMLv2Parser::State_action_usageContext::getRuleIndex() const {
  return SysMLv2Parser::RuleState_action_usage;
}

void SysMLv2Parser::State_action_usageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterState_action_usage(this);
}

void SysMLv2Parser::State_action_usageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitState_action_usage(this);
}

SysMLv2Parser::State_action_usageContext* SysMLv2Parser::state_action_usage() {
  State_action_usageContext *_localctx = _tracker.createInstance<State_action_usageContext>(_ctx, getState());
  enterRule(_localctx, 400, SysMLv2Parser::RuleState_action_usage);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2391);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 171, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2384);
      empty_action_usage();
      setState(2385);
      match(SysMLv2Parser::SYMBOL_STATEMENT_DELIMITER);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2387);
      state_perform_action_uage();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2388);
      state_accept_action_usage();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2389);
      state_send_action_usage();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2390);
      state_assignment_action_usage();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Empty_action_usageContext ------------------------------------------------------------------

SysMLv2Parser::Empty_action_usageContext::Empty_action_usageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t SysMLv2Parser::Empty_action_usageContext::getRuleIndex() const {
  return SysMLv2Parser::RuleEmpty_action_usage;
}

void SysMLv2Parser::Empty_action_usageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEmpty_action_usage(this);
}

void SysMLv2Parser::Empty_action_usageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEmpty_action_usage(this);
}

SysMLv2Parser::Empty_action_usageContext* SysMLv2Parser::empty_action_usage() {
  Empty_action_usageContext *_localctx = _tracker.createInstance<Empty_action_usageContext>(_ctx, getState());
  enterRule(_localctx, 402, SysMLv2Parser::RuleEmpty_action_usage);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);

   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- State_perform_action_uageContext ------------------------------------------------------------------

SysMLv2Parser::State_perform_action_uageContext::State_perform_action_uageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Perform_action_usage_declarationContext* SysMLv2Parser::State_perform_action_uageContext::perform_action_usage_declaration() {
  return getRuleContext<SysMLv2Parser::Perform_action_usage_declarationContext>(0);
}

SysMLv2Parser::Action_bodyContext* SysMLv2Parser::State_perform_action_uageContext::action_body() {
  return getRuleContext<SysMLv2Parser::Action_bodyContext>(0);
}


size_t SysMLv2Parser::State_perform_action_uageContext::getRuleIndex() const {
  return SysMLv2Parser::RuleState_perform_action_uage;
}

void SysMLv2Parser::State_perform_action_uageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterState_perform_action_uage(this);
}

void SysMLv2Parser::State_perform_action_uageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitState_perform_action_uage(this);
}

SysMLv2Parser::State_perform_action_uageContext* SysMLv2Parser::state_perform_action_uage() {
  State_perform_action_uageContext *_localctx = _tracker.createInstance<State_perform_action_uageContext>(_ctx, getState());
  enterRule(_localctx, 404, SysMLv2Parser::RuleState_perform_action_uage);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2395);
    perform_action_usage_declaration();
    setState(2396);
    action_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- State_accept_action_usageContext ------------------------------------------------------------------

SysMLv2Parser::State_accept_action_usageContext::State_accept_action_usageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Accept_node_declarationContext* SysMLv2Parser::State_accept_action_usageContext::accept_node_declaration() {
  return getRuleContext<SysMLv2Parser::Accept_node_declarationContext>(0);
}

SysMLv2Parser::Action_bodyContext* SysMLv2Parser::State_accept_action_usageContext::action_body() {
  return getRuleContext<SysMLv2Parser::Action_bodyContext>(0);
}


size_t SysMLv2Parser::State_accept_action_usageContext::getRuleIndex() const {
  return SysMLv2Parser::RuleState_accept_action_usage;
}

void SysMLv2Parser::State_accept_action_usageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterState_accept_action_usage(this);
}

void SysMLv2Parser::State_accept_action_usageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitState_accept_action_usage(this);
}

SysMLv2Parser::State_accept_action_usageContext* SysMLv2Parser::state_accept_action_usage() {
  State_accept_action_usageContext *_localctx = _tracker.createInstance<State_accept_action_usageContext>(_ctx, getState());
  enterRule(_localctx, 406, SysMLv2Parser::RuleState_accept_action_usage);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2398);
    accept_node_declaration();
    setState(2399);
    action_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- State_send_action_usageContext ------------------------------------------------------------------

SysMLv2Parser::State_send_action_usageContext::State_send_action_usageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Send_node_declarationContext* SysMLv2Parser::State_send_action_usageContext::send_node_declaration() {
  return getRuleContext<SysMLv2Parser::Send_node_declarationContext>(0);
}

SysMLv2Parser::Action_bodyContext* SysMLv2Parser::State_send_action_usageContext::action_body() {
  return getRuleContext<SysMLv2Parser::Action_bodyContext>(0);
}


size_t SysMLv2Parser::State_send_action_usageContext::getRuleIndex() const {
  return SysMLv2Parser::RuleState_send_action_usage;
}

void SysMLv2Parser::State_send_action_usageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterState_send_action_usage(this);
}

void SysMLv2Parser::State_send_action_usageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitState_send_action_usage(this);
}

SysMLv2Parser::State_send_action_usageContext* SysMLv2Parser::state_send_action_usage() {
  State_send_action_usageContext *_localctx = _tracker.createInstance<State_send_action_usageContext>(_ctx, getState());
  enterRule(_localctx, 408, SysMLv2Parser::RuleState_send_action_usage);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2401);
    send_node_declaration();
    setState(2402);
    action_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- State_assignment_action_usageContext ------------------------------------------------------------------

SysMLv2Parser::State_assignment_action_usageContext::State_assignment_action_usageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Assignment_node_declarationContext* SysMLv2Parser::State_assignment_action_usageContext::assignment_node_declaration() {
  return getRuleContext<SysMLv2Parser::Assignment_node_declarationContext>(0);
}

SysMLv2Parser::Action_bodyContext* SysMLv2Parser::State_assignment_action_usageContext::action_body() {
  return getRuleContext<SysMLv2Parser::Action_bodyContext>(0);
}


size_t SysMLv2Parser::State_assignment_action_usageContext::getRuleIndex() const {
  return SysMLv2Parser::RuleState_assignment_action_usage;
}

void SysMLv2Parser::State_assignment_action_usageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterState_assignment_action_usage(this);
}

void SysMLv2Parser::State_assignment_action_usageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitState_assignment_action_usage(this);
}

SysMLv2Parser::State_assignment_action_usageContext* SysMLv2Parser::state_assignment_action_usage() {
  State_assignment_action_usageContext *_localctx = _tracker.createInstance<State_assignment_action_usageContext>(_ctx, getState());
  enterRule(_localctx, 410, SysMLv2Parser::RuleState_assignment_action_usage);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2404);
    assignment_node_declaration();
    setState(2405);
    action_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Transition_usage_memberContext ------------------------------------------------------------------

SysMLv2Parser::Transition_usage_memberContext::Transition_usage_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Member_prefixContext* SysMLv2Parser::Transition_usage_memberContext::member_prefix() {
  return getRuleContext<SysMLv2Parser::Member_prefixContext>(0);
}

SysMLv2Parser::Transition_usageContext* SysMLv2Parser::Transition_usage_memberContext::transition_usage() {
  return getRuleContext<SysMLv2Parser::Transition_usageContext>(0);
}


size_t SysMLv2Parser::Transition_usage_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleTransition_usage_member;
}

void SysMLv2Parser::Transition_usage_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTransition_usage_member(this);
}

void SysMLv2Parser::Transition_usage_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTransition_usage_member(this);
}

SysMLv2Parser::Transition_usage_memberContext* SysMLv2Parser::transition_usage_member() {
  Transition_usage_memberContext *_localctx = _tracker.createInstance<Transition_usage_memberContext>(_ctx, getState());
  enterRule(_localctx, 412, SysMLv2Parser::RuleTransition_usage_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2407);
    member_prefix();
    setState(2408);
    transition_usage();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Target_transition_usage_memberContext ------------------------------------------------------------------

SysMLv2Parser::Target_transition_usage_memberContext::Target_transition_usage_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Member_prefixContext* SysMLv2Parser::Target_transition_usage_memberContext::member_prefix() {
  return getRuleContext<SysMLv2Parser::Member_prefixContext>(0);
}

SysMLv2Parser::Target_transition_usageContext* SysMLv2Parser::Target_transition_usage_memberContext::target_transition_usage() {
  return getRuleContext<SysMLv2Parser::Target_transition_usageContext>(0);
}


size_t SysMLv2Parser::Target_transition_usage_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleTarget_transition_usage_member;
}

void SysMLv2Parser::Target_transition_usage_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTarget_transition_usage_member(this);
}

void SysMLv2Parser::Target_transition_usage_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTarget_transition_usage_member(this);
}

SysMLv2Parser::Target_transition_usage_memberContext* SysMLv2Parser::target_transition_usage_member() {
  Target_transition_usage_memberContext *_localctx = _tracker.createInstance<Target_transition_usage_memberContext>(_ctx, getState());
  enterRule(_localctx, 414, SysMLv2Parser::RuleTarget_transition_usage_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2410);
    member_prefix();
    setState(2411);
    target_transition_usage();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- State_usageContext ------------------------------------------------------------------

SysMLv2Parser::State_usageContext::State_usageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Occurrence_usage_prefixContext* SysMLv2Parser::State_usageContext::occurrence_usage_prefix() {
  return getRuleContext<SysMLv2Parser::Occurrence_usage_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::State_usageContext::KEYWORD_STATE() {
  return getToken(SysMLv2Parser::KEYWORD_STATE, 0);
}

SysMLv2Parser::Action_usage_declarationContext* SysMLv2Parser::State_usageContext::action_usage_declaration() {
  return getRuleContext<SysMLv2Parser::Action_usage_declarationContext>(0);
}

SysMLv2Parser::State_usage_bodyContext* SysMLv2Parser::State_usageContext::state_usage_body() {
  return getRuleContext<SysMLv2Parser::State_usage_bodyContext>(0);
}


size_t SysMLv2Parser::State_usageContext::getRuleIndex() const {
  return SysMLv2Parser::RuleState_usage;
}

void SysMLv2Parser::State_usageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterState_usage(this);
}

void SysMLv2Parser::State_usageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitState_usage(this);
}

SysMLv2Parser::State_usageContext* SysMLv2Parser::state_usage() {
  State_usageContext *_localctx = _tracker.createInstance<State_usageContext>(_ctx, getState());
  enterRule(_localctx, 416, SysMLv2Parser::RuleState_usage);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2413);
    occurrence_usage_prefix();
    setState(2414);
    match(SysMLv2Parser::KEYWORD_STATE);
    setState(2415);
    action_usage_declaration();
    setState(2416);
    state_usage_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- State_usage_bodyContext ------------------------------------------------------------------

SysMLv2Parser::State_usage_bodyContext::State_usage_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::State_usage_bodyContext::SYMBOL_STATEMENT_DELIMITER() {
  return getToken(SysMLv2Parser::SYMBOL_STATEMENT_DELIMITER, 0);
}

tree::TerminalNode* SysMLv2Parser::State_usage_bodyContext::SYMBOL_CURLY_BRACKET_OPEN() {
  return getToken(SysMLv2Parser::SYMBOL_CURLY_BRACKET_OPEN, 0);
}

tree::TerminalNode* SysMLv2Parser::State_usage_bodyContext::SYMBOL_CURLY_BRACKET_CLOSE() {
  return getToken(SysMLv2Parser::SYMBOL_CURLY_BRACKET_CLOSE, 0);
}

tree::TerminalNode* SysMLv2Parser::State_usage_bodyContext::KEYWORD_PARALLEL() {
  return getToken(SysMLv2Parser::KEYWORD_PARALLEL, 0);
}

std::vector<SysMLv2Parser::State_body_itemContext *> SysMLv2Parser::State_usage_bodyContext::state_body_item() {
  return getRuleContexts<SysMLv2Parser::State_body_itemContext>();
}

SysMLv2Parser::State_body_itemContext* SysMLv2Parser::State_usage_bodyContext::state_body_item(size_t i) {
  return getRuleContext<SysMLv2Parser::State_body_itemContext>(i);
}


size_t SysMLv2Parser::State_usage_bodyContext::getRuleIndex() const {
  return SysMLv2Parser::RuleState_usage_body;
}

void SysMLv2Parser::State_usage_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterState_usage_body(this);
}

void SysMLv2Parser::State_usage_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitState_usage_body(this);
}

SysMLv2Parser::State_usage_bodyContext* SysMLv2Parser::state_usage_body() {
  State_usage_bodyContext *_localctx = _tracker.createInstance<State_usage_bodyContext>(_ctx, getState());
  enterRule(_localctx, 418, SysMLv2Parser::RuleState_usage_body);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2430);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SysMLv2Parser::SYMBOL_STATEMENT_DELIMITER: {
        enterOuterAlt(_localctx, 1);
        setState(2418);
        match(SysMLv2Parser::SYMBOL_STATEMENT_DELIMITER);
        break;
      }

      case SysMLv2Parser::KEYWORD_PARALLEL:
      case SysMLv2Parser::SYMBOL_CURLY_BRACKET_OPEN: {
        enterOuterAlt(_localctx, 2);
        setState(2420);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == SysMLv2Parser::KEYWORD_PARALLEL) {
          setState(2419);
          match(SysMLv2Parser::KEYWORD_PARALLEL);
        }
        setState(2422);
        match(SysMLv2Parser::SYMBOL_CURLY_BRACKET_OPEN);
        setState(2426);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & -7713382963400331488) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 65)) & 577059024101992345) != 0) || ((((_la - 132) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 132)) & 620935448488315143) != 0) || ((((_la - 201) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 201)) & 2147745889) != 0)) {
          setState(2423);
          state_body_item();
          setState(2428);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(2429);
        match(SysMLv2Parser::SYMBOL_CURLY_BRACKET_CLOSE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Exhibit_state_usageContext ------------------------------------------------------------------

SysMLv2Parser::Exhibit_state_usageContext::Exhibit_state_usageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Occurrence_usage_prefixContext* SysMLv2Parser::Exhibit_state_usageContext::occurrence_usage_prefix() {
  return getRuleContext<SysMLv2Parser::Occurrence_usage_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Exhibit_state_usageContext::KEYWORD_EXHIBIT() {
  return getToken(SysMLv2Parser::KEYWORD_EXHIBIT, 0);
}

SysMLv2Parser::State_usage_bodyContext* SysMLv2Parser::Exhibit_state_usageContext::state_usage_body() {
  return getRuleContext<SysMLv2Parser::State_usage_bodyContext>(0);
}

SysMLv2Parser::Owned_reference_subsettingContext* SysMLv2Parser::Exhibit_state_usageContext::owned_reference_subsetting() {
  return getRuleContext<SysMLv2Parser::Owned_reference_subsettingContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Exhibit_state_usageContext::KEYWORD_STATE() {
  return getToken(SysMLv2Parser::KEYWORD_STATE, 0);
}

SysMLv2Parser::Usage_declarationContext* SysMLv2Parser::Exhibit_state_usageContext::usage_declaration() {
  return getRuleContext<SysMLv2Parser::Usage_declarationContext>(0);
}

SysMLv2Parser::Value_partContext* SysMLv2Parser::Exhibit_state_usageContext::value_part() {
  return getRuleContext<SysMLv2Parser::Value_partContext>(0);
}

SysMLv2Parser::Feature_specialization_partContext* SysMLv2Parser::Exhibit_state_usageContext::feature_specialization_part() {
  return getRuleContext<SysMLv2Parser::Feature_specialization_partContext>(0);
}


size_t SysMLv2Parser::Exhibit_state_usageContext::getRuleIndex() const {
  return SysMLv2Parser::RuleExhibit_state_usage;
}

void SysMLv2Parser::Exhibit_state_usageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExhibit_state_usage(this);
}

void SysMLv2Parser::Exhibit_state_usageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExhibit_state_usage(this);
}

SysMLv2Parser::Exhibit_state_usageContext* SysMLv2Parser::exhibit_state_usage() {
  Exhibit_state_usageContext *_localctx = _tracker.createInstance<Exhibit_state_usageContext>(_ctx, getState());
  enterRule(_localctx, 420, SysMLv2Parser::RuleExhibit_state_usage);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2432);
    occurrence_usage_prefix();
    setState(2433);
    match(SysMLv2Parser::KEYWORD_EXHIBIT);
    setState(2440);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SysMLv2Parser::NAME: {
        setState(2434);
        owned_reference_subsetting();
        setState(2436);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (((((_la - 83) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 83)) & 3377699720527901) != 0) || _la == SysMLv2Parser::KEYWORD_OUT

        || _la == SysMLv2Parser::SYMBOL_SQUARE_BRACKET_OPEN) {
          setState(2435);
          feature_specialization_part();
        }
        break;
      }

      case SysMLv2Parser::KEYWORD_STATE: {
        setState(2438);
        match(SysMLv2Parser::KEYWORD_STATE);
        setState(2439);
        usage_declaration();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(2443);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_DEFAULT || _la == SysMLv2Parser::SYMBOL_DEF_ASSIGN

    || _la == SysMLv2Parser::SYMBOL_EQUALS) {
      setState(2442);
      value_part();
    }
    setState(2445);
    state_usage_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Transition_usageContext ------------------------------------------------------------------

SysMLv2Parser::Transition_usageContext::Transition_usageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Transition_usageContext::KEYWORD_TRANSISTION() {
  return getToken(SysMLv2Parser::KEYWORD_TRANSISTION, 0);
}

SysMLv2Parser::Feature_chain_memberContext* SysMLv2Parser::Transition_usageContext::feature_chain_member() {
  return getRuleContext<SysMLv2Parser::Feature_chain_memberContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Transition_usageContext::KEYWORD_THEN() {
  return getToken(SysMLv2Parser::KEYWORD_THEN, 0);
}

SysMLv2Parser::Transition_succession_memberContext* SysMLv2Parser::Transition_usageContext::transition_succession_member() {
  return getRuleContext<SysMLv2Parser::Transition_succession_memberContext>(0);
}

SysMLv2Parser::Action_bodyContext* SysMLv2Parser::Transition_usageContext::action_body() {
  return getRuleContext<SysMLv2Parser::Action_bodyContext>(0);
}

SysMLv2Parser::Usage_declarationContext* SysMLv2Parser::Transition_usageContext::usage_declaration() {
  return getRuleContext<SysMLv2Parser::Usage_declarationContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Transition_usageContext::KEYWORD_FROM() {
  return getToken(SysMLv2Parser::KEYWORD_FROM, 0);
}

SysMLv2Parser::Trigger_action_memberContext* SysMLv2Parser::Transition_usageContext::trigger_action_member() {
  return getRuleContext<SysMLv2Parser::Trigger_action_memberContext>(0);
}

SysMLv2Parser::Guard_expression_memberContext* SysMLv2Parser::Transition_usageContext::guard_expression_member() {
  return getRuleContext<SysMLv2Parser::Guard_expression_memberContext>(0);
}

SysMLv2Parser::Effect_behavior_memberContext* SysMLv2Parser::Transition_usageContext::effect_behavior_member() {
  return getRuleContext<SysMLv2Parser::Effect_behavior_memberContext>(0);
}


size_t SysMLv2Parser::Transition_usageContext::getRuleIndex() const {
  return SysMLv2Parser::RuleTransition_usage;
}

void SysMLv2Parser::Transition_usageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTransition_usage(this);
}

void SysMLv2Parser::Transition_usageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTransition_usage(this);
}

SysMLv2Parser::Transition_usageContext* SysMLv2Parser::transition_usage() {
  Transition_usageContext *_localctx = _tracker.createInstance<Transition_usageContext>(_ctx, getState());
  enterRule(_localctx, 422, SysMLv2Parser::RuleTransition_usage);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2447);
    match(SysMLv2Parser::KEYWORD_TRANSISTION);
    setState(2451);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 178, _ctx)) {
    case 1: {
      setState(2448);
      usage_declaration();
      setState(2449);
      match(SysMLv2Parser::KEYWORD_FROM);
      break;
    }

    default:
      break;
    }
    setState(2453);
    feature_chain_member();
    setState(2455);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_ACCEPT) {
      setState(2454);
      trigger_action_member();
    }
    setState(2458);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_IF) {
      setState(2457);
      guard_expression_member();
    }
    setState(2461);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_DO) {
      setState(2460);
      effect_behavior_member();
    }
    setState(2463);
    match(SysMLv2Parser::KEYWORD_THEN);
    setState(2464);
    transition_succession_member();
    setState(2465);
    action_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Target_transition_usageContext ------------------------------------------------------------------

SysMLv2Parser::Target_transition_usageContext::Target_transition_usageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Target_transition_usageContext::KEYWORD_THEN() {
  return getToken(SysMLv2Parser::KEYWORD_THEN, 0);
}

SysMLv2Parser::Transition_succession_memberContext* SysMLv2Parser::Target_transition_usageContext::transition_succession_member() {
  return getRuleContext<SysMLv2Parser::Transition_succession_memberContext>(0);
}

SysMLv2Parser::Action_bodyContext* SysMLv2Parser::Target_transition_usageContext::action_body() {
  return getRuleContext<SysMLv2Parser::Action_bodyContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Target_transition_usageContext::KEYWORD_TRANSISTION() {
  return getToken(SysMLv2Parser::KEYWORD_TRANSISTION, 0);
}

SysMLv2Parser::Trigger_action_memberContext* SysMLv2Parser::Target_transition_usageContext::trigger_action_member() {
  return getRuleContext<SysMLv2Parser::Trigger_action_memberContext>(0);
}

SysMLv2Parser::Guard_expression_memberContext* SysMLv2Parser::Target_transition_usageContext::guard_expression_member() {
  return getRuleContext<SysMLv2Parser::Guard_expression_memberContext>(0);
}

SysMLv2Parser::Effect_behavior_memberContext* SysMLv2Parser::Target_transition_usageContext::effect_behavior_member() {
  return getRuleContext<SysMLv2Parser::Effect_behavior_memberContext>(0);
}


size_t SysMLv2Parser::Target_transition_usageContext::getRuleIndex() const {
  return SysMLv2Parser::RuleTarget_transition_usage;
}

void SysMLv2Parser::Target_transition_usageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTarget_transition_usage(this);
}

void SysMLv2Parser::Target_transition_usageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTarget_transition_usage(this);
}

SysMLv2Parser::Target_transition_usageContext* SysMLv2Parser::target_transition_usage() {
  Target_transition_usageContext *_localctx = _tracker.createInstance<Target_transition_usageContext>(_ctx, getState());
  enterRule(_localctx, 424, SysMLv2Parser::RuleTarget_transition_usage);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2488);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SysMLv2Parser::KEYWORD_TRANSISTION: {
        setState(2467);
        match(SysMLv2Parser::KEYWORD_TRANSISTION);
        setState(2469);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == SysMLv2Parser::KEYWORD_ACCEPT) {
          setState(2468);
          trigger_action_member();
        }
        setState(2472);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == SysMLv2Parser::KEYWORD_IF) {
          setState(2471);
          guard_expression_member();
        }
        setState(2475);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == SysMLv2Parser::KEYWORD_DO) {
          setState(2474);
          effect_behavior_member();
        }
        break;
      }

      case SysMLv2Parser::KEYWORD_ACCEPT: {
        setState(2477);
        trigger_action_member();
        setState(2479);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == SysMLv2Parser::KEYWORD_IF) {
          setState(2478);
          guard_expression_member();
        }
        setState(2482);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == SysMLv2Parser::KEYWORD_DO) {
          setState(2481);
          effect_behavior_member();
        }
        break;
      }

      case SysMLv2Parser::KEYWORD_IF: {
        setState(2484);
        guard_expression_member();
        setState(2486);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == SysMLv2Parser::KEYWORD_DO) {
          setState(2485);
          effect_behavior_member();
        }
        break;
      }

      case SysMLv2Parser::KEYWORD_THEN: {
        break;
      }

    default:
      break;
    }
    setState(2490);
    match(SysMLv2Parser::KEYWORD_THEN);
    setState(2491);
    transition_succession_member();
    setState(2492);
    action_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Trigger_action_memberContext ------------------------------------------------------------------

SysMLv2Parser::Trigger_action_memberContext::Trigger_action_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Trigger_action_memberContext::KEYWORD_ACCEPT() {
  return getToken(SysMLv2Parser::KEYWORD_ACCEPT, 0);
}

SysMLv2Parser::Trigger_actionContext* SysMLv2Parser::Trigger_action_memberContext::trigger_action() {
  return getRuleContext<SysMLv2Parser::Trigger_actionContext>(0);
}


size_t SysMLv2Parser::Trigger_action_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleTrigger_action_member;
}

void SysMLv2Parser::Trigger_action_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTrigger_action_member(this);
}

void SysMLv2Parser::Trigger_action_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTrigger_action_member(this);
}

SysMLv2Parser::Trigger_action_memberContext* SysMLv2Parser::trigger_action_member() {
  Trigger_action_memberContext *_localctx = _tracker.createInstance<Trigger_action_memberContext>(_ctx, getState());
  enterRule(_localctx, 426, SysMLv2Parser::RuleTrigger_action_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2494);
    match(SysMLv2Parser::KEYWORD_ACCEPT);
    //TODO: Lösung finden kind=KEYWORD_TRIGGER
    setState(2496);
    trigger_action();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Trigger_actionContext ------------------------------------------------------------------

SysMLv2Parser::Trigger_actionContext::Trigger_actionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Accept_parameter_partContext* SysMLv2Parser::Trigger_actionContext::accept_parameter_part() {
  return getRuleContext<SysMLv2Parser::Accept_parameter_partContext>(0);
}


size_t SysMLv2Parser::Trigger_actionContext::getRuleIndex() const {
  return SysMLv2Parser::RuleTrigger_action;
}

void SysMLv2Parser::Trigger_actionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTrigger_action(this);
}

void SysMLv2Parser::Trigger_actionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTrigger_action(this);
}

SysMLv2Parser::Trigger_actionContext* SysMLv2Parser::trigger_action() {
  Trigger_actionContext *_localctx = _tracker.createInstance<Trigger_actionContext>(_ctx, getState());
  enterRule(_localctx, 428, SysMLv2Parser::RuleTrigger_action);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2498);
    accept_parameter_part();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Guard_expression_memberContext ------------------------------------------------------------------

SysMLv2Parser::Guard_expression_memberContext::Guard_expression_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Guard_expression_memberContext::KEYWORD_IF() {
  return getToken(SysMLv2Parser::KEYWORD_IF, 0);
}

SysMLv2Parser::Owned_expressionContext* SysMLv2Parser::Guard_expression_memberContext::owned_expression() {
  return getRuleContext<SysMLv2Parser::Owned_expressionContext>(0);
}


size_t SysMLv2Parser::Guard_expression_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleGuard_expression_member;
}

void SysMLv2Parser::Guard_expression_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGuard_expression_member(this);
}

void SysMLv2Parser::Guard_expression_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGuard_expression_member(this);
}

SysMLv2Parser::Guard_expression_memberContext* SysMLv2Parser::guard_expression_member() {
  Guard_expression_memberContext *_localctx = _tracker.createInstance<Guard_expression_memberContext>(_ctx, getState());
  enterRule(_localctx, 430, SysMLv2Parser::RuleGuard_expression_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2500);
    match(SysMLv2Parser::KEYWORD_IF);
    //TODO Lösung finden kind=KEYWORD_GUARD
    setState(2502);
    owned_expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Effect_behavior_memberContext ------------------------------------------------------------------

SysMLv2Parser::Effect_behavior_memberContext::Effect_behavior_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Effect_behavior_memberContext::KEYWORD_DO() {
  return getToken(SysMLv2Parser::KEYWORD_DO, 0);
}

SysMLv2Parser::Effect_behavior_usageContext* SysMLv2Parser::Effect_behavior_memberContext::effect_behavior_usage() {
  return getRuleContext<SysMLv2Parser::Effect_behavior_usageContext>(0);
}


size_t SysMLv2Parser::Effect_behavior_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleEffect_behavior_member;
}

void SysMLv2Parser::Effect_behavior_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEffect_behavior_member(this);
}

void SysMLv2Parser::Effect_behavior_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEffect_behavior_member(this);
}

SysMLv2Parser::Effect_behavior_memberContext* SysMLv2Parser::effect_behavior_member() {
  Effect_behavior_memberContext *_localctx = _tracker.createInstance<Effect_behavior_memberContext>(_ctx, getState());
  enterRule(_localctx, 432, SysMLv2Parser::RuleEffect_behavior_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2504);
    match(SysMLv2Parser::KEYWORD_DO);
    // Todo Lösung Finden kind=KEYWORD_TRIGGER
    setState(2506);
    effect_behavior_usage();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Effect_behavior_usageContext ------------------------------------------------------------------

SysMLv2Parser::Effect_behavior_usageContext::Effect_behavior_usageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Empty_action_usageContext* SysMLv2Parser::Effect_behavior_usageContext::empty_action_usage() {
  return getRuleContext<SysMLv2Parser::Empty_action_usageContext>(0);
}

SysMLv2Parser::Transition_perform_action_usageContext* SysMLv2Parser::Effect_behavior_usageContext::transition_perform_action_usage() {
  return getRuleContext<SysMLv2Parser::Transition_perform_action_usageContext>(0);
}

SysMLv2Parser::Transition_accept_action_usageContext* SysMLv2Parser::Effect_behavior_usageContext::transition_accept_action_usage() {
  return getRuleContext<SysMLv2Parser::Transition_accept_action_usageContext>(0);
}

SysMLv2Parser::Transition_send_action_usageContext* SysMLv2Parser::Effect_behavior_usageContext::transition_send_action_usage() {
  return getRuleContext<SysMLv2Parser::Transition_send_action_usageContext>(0);
}

SysMLv2Parser::Transition_assignment_action_usageContext* SysMLv2Parser::Effect_behavior_usageContext::transition_assignment_action_usage() {
  return getRuleContext<SysMLv2Parser::Transition_assignment_action_usageContext>(0);
}


size_t SysMLv2Parser::Effect_behavior_usageContext::getRuleIndex() const {
  return SysMLv2Parser::RuleEffect_behavior_usage;
}

void SysMLv2Parser::Effect_behavior_usageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEffect_behavior_usage(this);
}

void SysMLv2Parser::Effect_behavior_usageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEffect_behavior_usage(this);
}

SysMLv2Parser::Effect_behavior_usageContext* SysMLv2Parser::effect_behavior_usage() {
  Effect_behavior_usageContext *_localctx = _tracker.createInstance<Effect_behavior_usageContext>(_ctx, getState());
  enterRule(_localctx, 434, SysMLv2Parser::RuleEffect_behavior_usage);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2513);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 189, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2508);
      empty_action_usage();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2509);
      transition_perform_action_usage();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2510);
      transition_accept_action_usage();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2511);
      transition_send_action_usage();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2512);
      transition_assignment_action_usage();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Transition_perform_action_usageContext ------------------------------------------------------------------

SysMLv2Parser::Transition_perform_action_usageContext::Transition_perform_action_usageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Perform_action_usage_declarationContext* SysMLv2Parser::Transition_perform_action_usageContext::perform_action_usage_declaration() {
  return getRuleContext<SysMLv2Parser::Perform_action_usage_declarationContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Transition_perform_action_usageContext::SYMBOL_CURLY_BRACKET_OPEN() {
  return getToken(SysMLv2Parser::SYMBOL_CURLY_BRACKET_OPEN, 0);
}

tree::TerminalNode* SysMLv2Parser::Transition_perform_action_usageContext::SYMBOL_CURLY_BRACKET_CLOSE() {
  return getToken(SysMLv2Parser::SYMBOL_CURLY_BRACKET_CLOSE, 0);
}

std::vector<SysMLv2Parser::Action_body_itemContext *> SysMLv2Parser::Transition_perform_action_usageContext::action_body_item() {
  return getRuleContexts<SysMLv2Parser::Action_body_itemContext>();
}

SysMLv2Parser::Action_body_itemContext* SysMLv2Parser::Transition_perform_action_usageContext::action_body_item(size_t i) {
  return getRuleContext<SysMLv2Parser::Action_body_itemContext>(i);
}


size_t SysMLv2Parser::Transition_perform_action_usageContext::getRuleIndex() const {
  return SysMLv2Parser::RuleTransition_perform_action_usage;
}

void SysMLv2Parser::Transition_perform_action_usageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTransition_perform_action_usage(this);
}

void SysMLv2Parser::Transition_perform_action_usageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTransition_perform_action_usage(this);
}

SysMLv2Parser::Transition_perform_action_usageContext* SysMLv2Parser::transition_perform_action_usage() {
  Transition_perform_action_usageContext *_localctx = _tracker.createInstance<Transition_perform_action_usageContext>(_ctx, getState());
  enterRule(_localctx, 436, SysMLv2Parser::RuleTransition_perform_action_usage);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2515);
    perform_action_usage_declaration();
    setState(2524);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::SYMBOL_CURLY_BRACKET_OPEN) {
      setState(2516);
      match(SysMLv2Parser::SYMBOL_CURLY_BRACKET_OPEN);
      setState(2520);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -3101591291931574480) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 65)) & 2018228497054263181) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 129)) & 4967483587906521145) != 0) || ((((_la - 201) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 201)) & 2154037349) != 0)) {
        setState(2517);
        action_body_item();
        setState(2522);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(2523);
      match(SysMLv2Parser::SYMBOL_CURLY_BRACKET_CLOSE);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Transition_accept_action_usageContext ------------------------------------------------------------------

SysMLv2Parser::Transition_accept_action_usageContext::Transition_accept_action_usageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Accept_node_declarationContext* SysMLv2Parser::Transition_accept_action_usageContext::accept_node_declaration() {
  return getRuleContext<SysMLv2Parser::Accept_node_declarationContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Transition_accept_action_usageContext::SYMBOL_CURLY_BRACKET_OPEN() {
  return getToken(SysMLv2Parser::SYMBOL_CURLY_BRACKET_OPEN, 0);
}

tree::TerminalNode* SysMLv2Parser::Transition_accept_action_usageContext::SYMBOL_CURLY_BRACKET_CLOSE() {
  return getToken(SysMLv2Parser::SYMBOL_CURLY_BRACKET_CLOSE, 0);
}

std::vector<SysMLv2Parser::Action_body_itemContext *> SysMLv2Parser::Transition_accept_action_usageContext::action_body_item() {
  return getRuleContexts<SysMLv2Parser::Action_body_itemContext>();
}

SysMLv2Parser::Action_body_itemContext* SysMLv2Parser::Transition_accept_action_usageContext::action_body_item(size_t i) {
  return getRuleContext<SysMLv2Parser::Action_body_itemContext>(i);
}


size_t SysMLv2Parser::Transition_accept_action_usageContext::getRuleIndex() const {
  return SysMLv2Parser::RuleTransition_accept_action_usage;
}

void SysMLv2Parser::Transition_accept_action_usageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTransition_accept_action_usage(this);
}

void SysMLv2Parser::Transition_accept_action_usageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTransition_accept_action_usage(this);
}

SysMLv2Parser::Transition_accept_action_usageContext* SysMLv2Parser::transition_accept_action_usage() {
  Transition_accept_action_usageContext *_localctx = _tracker.createInstance<Transition_accept_action_usageContext>(_ctx, getState());
  enterRule(_localctx, 438, SysMLv2Parser::RuleTransition_accept_action_usage);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2526);
    accept_node_declaration();
    setState(2535);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::SYMBOL_CURLY_BRACKET_OPEN) {
      setState(2527);
      match(SysMLv2Parser::SYMBOL_CURLY_BRACKET_OPEN);
      setState(2531);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -3101591291931574480) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 65)) & 2018228497054263181) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 129)) & 4967483587906521145) != 0) || ((((_la - 201) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 201)) & 2154037349) != 0)) {
        setState(2528);
        action_body_item();
        setState(2533);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(2534);
      match(SysMLv2Parser::SYMBOL_CURLY_BRACKET_CLOSE);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Transition_send_action_usageContext ------------------------------------------------------------------

SysMLv2Parser::Transition_send_action_usageContext::Transition_send_action_usageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Send_node_declarationContext* SysMLv2Parser::Transition_send_action_usageContext::send_node_declaration() {
  return getRuleContext<SysMLv2Parser::Send_node_declarationContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Transition_send_action_usageContext::SYMBOL_CURLY_BRACKET_OPEN() {
  return getToken(SysMLv2Parser::SYMBOL_CURLY_BRACKET_OPEN, 0);
}

tree::TerminalNode* SysMLv2Parser::Transition_send_action_usageContext::SYMBOL_CURLY_BRACKET_CLOSE() {
  return getToken(SysMLv2Parser::SYMBOL_CURLY_BRACKET_CLOSE, 0);
}

std::vector<SysMLv2Parser::Action_body_itemContext *> SysMLv2Parser::Transition_send_action_usageContext::action_body_item() {
  return getRuleContexts<SysMLv2Parser::Action_body_itemContext>();
}

SysMLv2Parser::Action_body_itemContext* SysMLv2Parser::Transition_send_action_usageContext::action_body_item(size_t i) {
  return getRuleContext<SysMLv2Parser::Action_body_itemContext>(i);
}


size_t SysMLv2Parser::Transition_send_action_usageContext::getRuleIndex() const {
  return SysMLv2Parser::RuleTransition_send_action_usage;
}

void SysMLv2Parser::Transition_send_action_usageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTransition_send_action_usage(this);
}

void SysMLv2Parser::Transition_send_action_usageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTransition_send_action_usage(this);
}

SysMLv2Parser::Transition_send_action_usageContext* SysMLv2Parser::transition_send_action_usage() {
  Transition_send_action_usageContext *_localctx = _tracker.createInstance<Transition_send_action_usageContext>(_ctx, getState());
  enterRule(_localctx, 440, SysMLv2Parser::RuleTransition_send_action_usage);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2537);
    send_node_declaration();
    setState(2546);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::SYMBOL_CURLY_BRACKET_OPEN) {
      setState(2538);
      match(SysMLv2Parser::SYMBOL_CURLY_BRACKET_OPEN);
      setState(2542);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -3101591291931574480) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 65)) & 2018228497054263181) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 129)) & 4967483587906521145) != 0) || ((((_la - 201) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 201)) & 2154037349) != 0)) {
        setState(2539);
        action_body_item();
        setState(2544);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(2545);
      match(SysMLv2Parser::SYMBOL_CURLY_BRACKET_CLOSE);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Transition_assignment_action_usageContext ------------------------------------------------------------------

SysMLv2Parser::Transition_assignment_action_usageContext::Transition_assignment_action_usageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Assignment_node_declarationContext* SysMLv2Parser::Transition_assignment_action_usageContext::assignment_node_declaration() {
  return getRuleContext<SysMLv2Parser::Assignment_node_declarationContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Transition_assignment_action_usageContext::SYMBOL_CURLY_BRACKET_OPEN() {
  return getToken(SysMLv2Parser::SYMBOL_CURLY_BRACKET_OPEN, 0);
}

tree::TerminalNode* SysMLv2Parser::Transition_assignment_action_usageContext::SYMBOL_CURLY_BRACKET_CLOSE() {
  return getToken(SysMLv2Parser::SYMBOL_CURLY_BRACKET_CLOSE, 0);
}

std::vector<SysMLv2Parser::Action_body_itemContext *> SysMLv2Parser::Transition_assignment_action_usageContext::action_body_item() {
  return getRuleContexts<SysMLv2Parser::Action_body_itemContext>();
}

SysMLv2Parser::Action_body_itemContext* SysMLv2Parser::Transition_assignment_action_usageContext::action_body_item(size_t i) {
  return getRuleContext<SysMLv2Parser::Action_body_itemContext>(i);
}


size_t SysMLv2Parser::Transition_assignment_action_usageContext::getRuleIndex() const {
  return SysMLv2Parser::RuleTransition_assignment_action_usage;
}

void SysMLv2Parser::Transition_assignment_action_usageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTransition_assignment_action_usage(this);
}

void SysMLv2Parser::Transition_assignment_action_usageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTransition_assignment_action_usage(this);
}

SysMLv2Parser::Transition_assignment_action_usageContext* SysMLv2Parser::transition_assignment_action_usage() {
  Transition_assignment_action_usageContext *_localctx = _tracker.createInstance<Transition_assignment_action_usageContext>(_ctx, getState());
  enterRule(_localctx, 442, SysMLv2Parser::RuleTransition_assignment_action_usage);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2548);
    assignment_node_declaration();
    setState(2557);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::SYMBOL_CURLY_BRACKET_OPEN) {
      setState(2549);
      match(SysMLv2Parser::SYMBOL_CURLY_BRACKET_OPEN);
      setState(2553);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -3101591291931574480) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 65)) & 2018228497054263181) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 129)) & 4967483587906521145) != 0) || ((((_la - 201) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 201)) & 2154037349) != 0)) {
        setState(2550);
        action_body_item();
        setState(2555);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(2556);
      match(SysMLv2Parser::SYMBOL_CURLY_BRACKET_CLOSE);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Transition_succession_memberContext ------------------------------------------------------------------

SysMLv2Parser::Transition_succession_memberContext::Transition_succession_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Transition_successionContext* SysMLv2Parser::Transition_succession_memberContext::transition_succession() {
  return getRuleContext<SysMLv2Parser::Transition_successionContext>(0);
}


size_t SysMLv2Parser::Transition_succession_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleTransition_succession_member;
}

void SysMLv2Parser::Transition_succession_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTransition_succession_member(this);
}

void SysMLv2Parser::Transition_succession_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTransition_succession_member(this);
}

SysMLv2Parser::Transition_succession_memberContext* SysMLv2Parser::transition_succession_member() {
  Transition_succession_memberContext *_localctx = _tracker.createInstance<Transition_succession_memberContext>(_ctx, getState());
  enterRule(_localctx, 444, SysMLv2Parser::RuleTransition_succession_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2559);
    transition_succession();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Transition_successionContext ------------------------------------------------------------------

SysMLv2Parser::Transition_successionContext::Transition_successionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Connector_end_memberContext* SysMLv2Parser::Transition_successionContext::connector_end_member() {
  return getRuleContext<SysMLv2Parser::Connector_end_memberContext>(0);
}


size_t SysMLv2Parser::Transition_successionContext::getRuleIndex() const {
  return SysMLv2Parser::RuleTransition_succession;
}

void SysMLv2Parser::Transition_successionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTransition_succession(this);
}

void SysMLv2Parser::Transition_successionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTransition_succession(this);
}

SysMLv2Parser::Transition_successionContext* SysMLv2Parser::transition_succession() {
  Transition_successionContext *_localctx = _tracker.createInstance<Transition_successionContext>(_ctx, getState());
  enterRule(_localctx, 446, SysMLv2Parser::RuleTransition_succession);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2561);
    connector_end_member();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Calculation_definitionContext ------------------------------------------------------------------

SysMLv2Parser::Calculation_definitionContext::Calculation_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Occurrence_definition_prefixContext* SysMLv2Parser::Calculation_definitionContext::occurrence_definition_prefix() {
  return getRuleContext<SysMLv2Parser::Occurrence_definition_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Calculation_definitionContext::KEYWORD_CALC() {
  return getToken(SysMLv2Parser::KEYWORD_CALC, 0);
}

tree::TerminalNode* SysMLv2Parser::Calculation_definitionContext::KEYWORD_DEF() {
  return getToken(SysMLv2Parser::KEYWORD_DEF, 0);
}

SysMLv2Parser::Definition_declarationContext* SysMLv2Parser::Calculation_definitionContext::definition_declaration() {
  return getRuleContext<SysMLv2Parser::Definition_declarationContext>(0);
}

SysMLv2Parser::Calculation_bodyContext* SysMLv2Parser::Calculation_definitionContext::calculation_body() {
  return getRuleContext<SysMLv2Parser::Calculation_bodyContext>(0);
}


size_t SysMLv2Parser::Calculation_definitionContext::getRuleIndex() const {
  return SysMLv2Parser::RuleCalculation_definition;
}

void SysMLv2Parser::Calculation_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCalculation_definition(this);
}

void SysMLv2Parser::Calculation_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCalculation_definition(this);
}

SysMLv2Parser::Calculation_definitionContext* SysMLv2Parser::calculation_definition() {
  Calculation_definitionContext *_localctx = _tracker.createInstance<Calculation_definitionContext>(_ctx, getState());
  enterRule(_localctx, 448, SysMLv2Parser::RuleCalculation_definition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2563);
    occurrence_definition_prefix();
    setState(2564);
    match(SysMLv2Parser::KEYWORD_CALC);
    setState(2565);
    match(SysMLv2Parser::KEYWORD_DEF);
    setState(2566);
    definition_declaration();
    setState(2567);
    calculation_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Calculation_usageContext ------------------------------------------------------------------

SysMLv2Parser::Calculation_usageContext::Calculation_usageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Occurrence_usage_prefixContext* SysMLv2Parser::Calculation_usageContext::occurrence_usage_prefix() {
  return getRuleContext<SysMLv2Parser::Occurrence_usage_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Calculation_usageContext::KEYWORD_CALC() {
  return getToken(SysMLv2Parser::KEYWORD_CALC, 0);
}

SysMLv2Parser::Action_usage_declarationContext* SysMLv2Parser::Calculation_usageContext::action_usage_declaration() {
  return getRuleContext<SysMLv2Parser::Action_usage_declarationContext>(0);
}

SysMLv2Parser::Calculation_bodyContext* SysMLv2Parser::Calculation_usageContext::calculation_body() {
  return getRuleContext<SysMLv2Parser::Calculation_bodyContext>(0);
}


size_t SysMLv2Parser::Calculation_usageContext::getRuleIndex() const {
  return SysMLv2Parser::RuleCalculation_usage;
}

void SysMLv2Parser::Calculation_usageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCalculation_usage(this);
}

void SysMLv2Parser::Calculation_usageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCalculation_usage(this);
}

SysMLv2Parser::Calculation_usageContext* SysMLv2Parser::calculation_usage() {
  Calculation_usageContext *_localctx = _tracker.createInstance<Calculation_usageContext>(_ctx, getState());
  enterRule(_localctx, 450, SysMLv2Parser::RuleCalculation_usage);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2569);
    occurrence_usage_prefix();
    setState(2570);
    match(SysMLv2Parser::KEYWORD_CALC);
    setState(2571);
    action_usage_declaration();
    setState(2572);
    calculation_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Calculation_bodyContext ------------------------------------------------------------------

SysMLv2Parser::Calculation_bodyContext::Calculation_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Calculation_bodyContext::SYMBOL_STATEMENT_DELIMITER() {
  return getToken(SysMLv2Parser::SYMBOL_STATEMENT_DELIMITER, 0);
}

tree::TerminalNode* SysMLv2Parser::Calculation_bodyContext::SYMBOL_CURLY_BRACKET_OPEN() {
  return getToken(SysMLv2Parser::SYMBOL_CURLY_BRACKET_OPEN, 0);
}

SysMLv2Parser::Calculation_body_partContext* SysMLv2Parser::Calculation_bodyContext::calculation_body_part() {
  return getRuleContext<SysMLv2Parser::Calculation_body_partContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Calculation_bodyContext::SYMBOL_CURLY_BRACKET_CLOSE() {
  return getToken(SysMLv2Parser::SYMBOL_CURLY_BRACKET_CLOSE, 0);
}


size_t SysMLv2Parser::Calculation_bodyContext::getRuleIndex() const {
  return SysMLv2Parser::RuleCalculation_body;
}

void SysMLv2Parser::Calculation_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCalculation_body(this);
}

void SysMLv2Parser::Calculation_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCalculation_body(this);
}

SysMLv2Parser::Calculation_bodyContext* SysMLv2Parser::calculation_body() {
  Calculation_bodyContext *_localctx = _tracker.createInstance<Calculation_bodyContext>(_ctx, getState());
  enterRule(_localctx, 452, SysMLv2Parser::RuleCalculation_body);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2579);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SysMLv2Parser::SYMBOL_STATEMENT_DELIMITER: {
        enterOuterAlt(_localctx, 1);
        setState(2574);
        match(SysMLv2Parser::SYMBOL_STATEMENT_DELIMITER);
        break;
      }

      case SysMLv2Parser::SYMBOL_CURLY_BRACKET_OPEN: {
        enterOuterAlt(_localctx, 2);
        setState(2575);
        match(SysMLv2Parser::SYMBOL_CURLY_BRACKET_OPEN);
        setState(2576);
        calculation_body_part();
        setState(2577);
        match(SysMLv2Parser::SYMBOL_CURLY_BRACKET_CLOSE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Calculation_body_partContext ------------------------------------------------------------------

SysMLv2Parser::Calculation_body_partContext::Calculation_body_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<SysMLv2Parser::Calculation_body_itemContext *> SysMLv2Parser::Calculation_body_partContext::calculation_body_item() {
  return getRuleContexts<SysMLv2Parser::Calculation_body_itemContext>();
}

SysMLv2Parser::Calculation_body_itemContext* SysMLv2Parser::Calculation_body_partContext::calculation_body_item(size_t i) {
  return getRuleContext<SysMLv2Parser::Calculation_body_itemContext>(i);
}

SysMLv2Parser::Result_expression_memberContext* SysMLv2Parser::Calculation_body_partContext::result_expression_member() {
  return getRuleContext<SysMLv2Parser::Result_expression_memberContext>(0);
}


size_t SysMLv2Parser::Calculation_body_partContext::getRuleIndex() const {
  return SysMLv2Parser::RuleCalculation_body_part;
}

void SysMLv2Parser::Calculation_body_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCalculation_body_part(this);
}

void SysMLv2Parser::Calculation_body_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCalculation_body_part(this);
}

SysMLv2Parser::Calculation_body_partContext* SysMLv2Parser::calculation_body_part() {
  Calculation_body_partContext *_localctx = _tracker.createInstance<Calculation_body_partContext>(_ctx, getState());
  enterRule(_localctx, 454, SysMLv2Parser::RuleCalculation_body_part);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2584);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 199, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2581);
        calculation_body_item(); 
      }
      setState(2586);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 199, _ctx);
    }
    setState(2588);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::T__0 || ((((_la - 91) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 91)) & 108368278484680709) != 0) || ((((_la - 155) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 155)) & 7789283556232527879) != 0) || ((((_la - 231) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 231)) & 115) != 0)) {
      setState(2587);
      result_expression_member();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Calculation_body_itemContext ------------------------------------------------------------------

SysMLv2Parser::Calculation_body_itemContext::Calculation_body_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Action_body_itemContext* SysMLv2Parser::Calculation_body_itemContext::action_body_item() {
  return getRuleContext<SysMLv2Parser::Action_body_itemContext>(0);
}

SysMLv2Parser::Return_parameter_memberContext* SysMLv2Parser::Calculation_body_itemContext::return_parameter_member() {
  return getRuleContext<SysMLv2Parser::Return_parameter_memberContext>(0);
}


size_t SysMLv2Parser::Calculation_body_itemContext::getRuleIndex() const {
  return SysMLv2Parser::RuleCalculation_body_item;
}

void SysMLv2Parser::Calculation_body_itemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCalculation_body_item(this);
}

void SysMLv2Parser::Calculation_body_itemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCalculation_body_item(this);
}

SysMLv2Parser::Calculation_body_itemContext* SysMLv2Parser::calculation_body_item() {
  Calculation_body_itemContext *_localctx = _tracker.createInstance<Calculation_body_itemContext>(_ctx, getState());
  enterRule(_localctx, 456, SysMLv2Parser::RuleCalculation_body_item);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2592);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 201, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2590);
      action_body_item();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2591);
      return_parameter_member();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Return_parameter_memberContext ------------------------------------------------------------------

SysMLv2Parser::Return_parameter_memberContext::Return_parameter_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Return_parameter_memberContext::KEYWORD_RETURN() {
  return getToken(SysMLv2Parser::KEYWORD_RETURN, 0);
}

SysMLv2Parser::Usage_elementContext* SysMLv2Parser::Return_parameter_memberContext::usage_element() {
  return getRuleContext<SysMLv2Parser::Usage_elementContext>(0);
}

SysMLv2Parser::Member_prefixContext* SysMLv2Parser::Return_parameter_memberContext::member_prefix() {
  return getRuleContext<SysMLv2Parser::Member_prefixContext>(0);
}


size_t SysMLv2Parser::Return_parameter_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleReturn_parameter_member;
}

void SysMLv2Parser::Return_parameter_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReturn_parameter_member(this);
}

void SysMLv2Parser::Return_parameter_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReturn_parameter_member(this);
}

SysMLv2Parser::Return_parameter_memberContext* SysMLv2Parser::return_parameter_member() {
  Return_parameter_memberContext *_localctx = _tracker.createInstance<Return_parameter_memberContext>(_ctx, getState());
  enterRule(_localctx, 458, SysMLv2Parser::RuleReturn_parameter_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2595);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 202, _ctx)) {
    case 1: {
      setState(2594);
      member_prefix();
      break;
    }

    default:
      break;
    }
    setState(2597);
    match(SysMLv2Parser::KEYWORD_RETURN);
    setState(2598);
    usage_element();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Result_expression_memberContext ------------------------------------------------------------------

SysMLv2Parser::Result_expression_memberContext::Result_expression_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Owned_expressionContext* SysMLv2Parser::Result_expression_memberContext::owned_expression() {
  return getRuleContext<SysMLv2Parser::Owned_expressionContext>(0);
}

SysMLv2Parser::Member_prefixContext* SysMLv2Parser::Result_expression_memberContext::member_prefix() {
  return getRuleContext<SysMLv2Parser::Member_prefixContext>(0);
}


size_t SysMLv2Parser::Result_expression_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleResult_expression_member;
}

void SysMLv2Parser::Result_expression_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterResult_expression_member(this);
}

void SysMLv2Parser::Result_expression_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitResult_expression_member(this);
}

SysMLv2Parser::Result_expression_memberContext* SysMLv2Parser::result_expression_member() {
  Result_expression_memberContext *_localctx = _tracker.createInstance<Result_expression_memberContext>(_ctx, getState());
  enterRule(_localctx, 460, SysMLv2Parser::RuleResult_expression_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2601);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 203, _ctx)) {
    case 1: {
      setState(2600);
      member_prefix();
      break;
    }

    default:
      break;
    }
    setState(2603);
    owned_expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Constraint_definitionContext ------------------------------------------------------------------

SysMLv2Parser::Constraint_definitionContext::Constraint_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Definition_declarationContext* SysMLv2Parser::Constraint_definitionContext::definition_declaration() {
  return getRuleContext<SysMLv2Parser::Definition_declarationContext>(0);
}

SysMLv2Parser::Calculation_bodyContext* SysMLv2Parser::Constraint_definitionContext::calculation_body() {
  return getRuleContext<SysMLv2Parser::Calculation_bodyContext>(0);
}

SysMLv2Parser::Occurrence_definition_prefixContext* SysMLv2Parser::Constraint_definitionContext::occurrence_definition_prefix() {
  return getRuleContext<SysMLv2Parser::Occurrence_definition_prefixContext>(0);
}


size_t SysMLv2Parser::Constraint_definitionContext::getRuleIndex() const {
  return SysMLv2Parser::RuleConstraint_definition;
}

void SysMLv2Parser::Constraint_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstraint_definition(this);
}

void SysMLv2Parser::Constraint_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstraint_definition(this);
}

SysMLv2Parser::Constraint_definitionContext* SysMLv2Parser::constraint_definition() {
  Constraint_definitionContext *_localctx = _tracker.createInstance<Constraint_definitionContext>(_ctx, getState());
  enterRule(_localctx, 462, SysMLv2Parser::RuleConstraint_definition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2606);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 204, _ctx)) {
    case 1: {
      setState(2605);
      occurrence_definition_prefix();
      break;
    }

    default:
      break;
    }
    setState(2608);
    definition_declaration();
    setState(2609);
    calculation_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Constraint_usageContext ------------------------------------------------------------------

SysMLv2Parser::Constraint_usageContext::Constraint_usageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Constraint_usageContext::KEYWORD_CONSTRAINT() {
  return getToken(SysMLv2Parser::KEYWORD_CONSTRAINT, 0);
}

SysMLv2Parser::Constraint_usage_declarationContext* SysMLv2Parser::Constraint_usageContext::constraint_usage_declaration() {
  return getRuleContext<SysMLv2Parser::Constraint_usage_declarationContext>(0);
}

SysMLv2Parser::Calculation_bodyContext* SysMLv2Parser::Constraint_usageContext::calculation_body() {
  return getRuleContext<SysMLv2Parser::Calculation_bodyContext>(0);
}

SysMLv2Parser::Occurrence_usage_prefixContext* SysMLv2Parser::Constraint_usageContext::occurrence_usage_prefix() {
  return getRuleContext<SysMLv2Parser::Occurrence_usage_prefixContext>(0);
}


size_t SysMLv2Parser::Constraint_usageContext::getRuleIndex() const {
  return SysMLv2Parser::RuleConstraint_usage;
}

void SysMLv2Parser::Constraint_usageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstraint_usage(this);
}

void SysMLv2Parser::Constraint_usageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstraint_usage(this);
}

SysMLv2Parser::Constraint_usageContext* SysMLv2Parser::constraint_usage() {
  Constraint_usageContext *_localctx = _tracker.createInstance<Constraint_usageContext>(_ctx, getState());
  enterRule(_localctx, 464, SysMLv2Parser::RuleConstraint_usage);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2612);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 205, _ctx)) {
    case 1: {
      setState(2611);
      occurrence_usage_prefix();
      break;
    }

    default:
      break;
    }
    setState(2614);
    match(SysMLv2Parser::KEYWORD_CONSTRAINT);
    setState(2615);
    constraint_usage_declaration();
    setState(2616);
    calculation_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Assert_constriant_usageContext ------------------------------------------------------------------

SysMLv2Parser::Assert_constriant_usageContext::Assert_constriant_usageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Occurrence_usage_prefixContext* SysMLv2Parser::Assert_constriant_usageContext::occurrence_usage_prefix() {
  return getRuleContext<SysMLv2Parser::Occurrence_usage_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Assert_constriant_usageContext::KEYWORD_ASSERT() {
  return getToken(SysMLv2Parser::KEYWORD_ASSERT, 0);
}

SysMLv2Parser::Calculation_bodyContext* SysMLv2Parser::Assert_constriant_usageContext::calculation_body() {
  return getRuleContext<SysMLv2Parser::Calculation_bodyContext>(0);
}

SysMLv2Parser::Owned_reference_subsettingContext* SysMLv2Parser::Assert_constriant_usageContext::owned_reference_subsetting() {
  return getRuleContext<SysMLv2Parser::Owned_reference_subsettingContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Assert_constriant_usageContext::KEYWORD_CONSTRAINT() {
  return getToken(SysMLv2Parser::KEYWORD_CONSTRAINT, 0);
}

SysMLv2Parser::Constraint_usage_declarationContext* SysMLv2Parser::Assert_constriant_usageContext::constraint_usage_declaration() {
  return getRuleContext<SysMLv2Parser::Constraint_usage_declarationContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Assert_constriant_usageContext::KEYWORD_NOT() {
  return getToken(SysMLv2Parser::KEYWORD_NOT, 0);
}

SysMLv2Parser::Feature_specialization_partContext* SysMLv2Parser::Assert_constriant_usageContext::feature_specialization_part() {
  return getRuleContext<SysMLv2Parser::Feature_specialization_partContext>(0);
}


size_t SysMLv2Parser::Assert_constriant_usageContext::getRuleIndex() const {
  return SysMLv2Parser::RuleAssert_constriant_usage;
}

void SysMLv2Parser::Assert_constriant_usageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssert_constriant_usage(this);
}

void SysMLv2Parser::Assert_constriant_usageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssert_constriant_usage(this);
}

SysMLv2Parser::Assert_constriant_usageContext* SysMLv2Parser::assert_constriant_usage() {
  Assert_constriant_usageContext *_localctx = _tracker.createInstance<Assert_constriant_usageContext>(_ctx, getState());
  enterRule(_localctx, 466, SysMLv2Parser::RuleAssert_constriant_usage);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2618);
    occurrence_usage_prefix();
    setState(2619);
    match(SysMLv2Parser::KEYWORD_ASSERT);
    setState(2621);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_NOT) {
      setState(2620);
      match(SysMLv2Parser::KEYWORD_NOT);
    }
    setState(2629);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SysMLv2Parser::NAME: {
        setState(2623);
        owned_reference_subsetting();
        setState(2625);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (((((_la - 83) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 83)) & 3377699720527901) != 0) || _la == SysMLv2Parser::KEYWORD_OUT

        || _la == SysMLv2Parser::SYMBOL_SQUARE_BRACKET_OPEN) {
          setState(2624);
          feature_specialization_part();
        }
        break;
      }

      case SysMLv2Parser::KEYWORD_CONSTRAINT: {
        setState(2627);
        match(SysMLv2Parser::KEYWORD_CONSTRAINT);
        setState(2628);
        constraint_usage_declaration();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(2631);
    calculation_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Constraint_usage_declarationContext ------------------------------------------------------------------

SysMLv2Parser::Constraint_usage_declarationContext::Constraint_usage_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Usage_declarationContext* SysMLv2Parser::Constraint_usage_declarationContext::usage_declaration() {
  return getRuleContext<SysMLv2Parser::Usage_declarationContext>(0);
}

SysMLv2Parser::Value_partContext* SysMLv2Parser::Constraint_usage_declarationContext::value_part() {
  return getRuleContext<SysMLv2Parser::Value_partContext>(0);
}


size_t SysMLv2Parser::Constraint_usage_declarationContext::getRuleIndex() const {
  return SysMLv2Parser::RuleConstraint_usage_declaration;
}

void SysMLv2Parser::Constraint_usage_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstraint_usage_declaration(this);
}

void SysMLv2Parser::Constraint_usage_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstraint_usage_declaration(this);
}

SysMLv2Parser::Constraint_usage_declarationContext* SysMLv2Parser::constraint_usage_declaration() {
  Constraint_usage_declarationContext *_localctx = _tracker.createInstance<Constraint_usage_declarationContext>(_ctx, getState());
  enterRule(_localctx, 468, SysMLv2Parser::RuleConstraint_usage_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2633);
    usage_declaration();
    setState(2635);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_DEFAULT || _la == SysMLv2Parser::SYMBOL_DEF_ASSIGN

    || _la == SysMLv2Parser::SYMBOL_EQUALS) {
      setState(2634);
      value_part();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Requirement_definitionContext ------------------------------------------------------------------

SysMLv2Parser::Requirement_definitionContext::Requirement_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Occurrence_definition_prefixContext* SysMLv2Parser::Requirement_definitionContext::occurrence_definition_prefix() {
  return getRuleContext<SysMLv2Parser::Occurrence_definition_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Requirement_definitionContext::KEYWORD_REQUIREMENT() {
  return getToken(SysMLv2Parser::KEYWORD_REQUIREMENT, 0);
}

tree::TerminalNode* SysMLv2Parser::Requirement_definitionContext::KEYWORD_DEF() {
  return getToken(SysMLv2Parser::KEYWORD_DEF, 0);
}

SysMLv2Parser::Definition_declarationContext* SysMLv2Parser::Requirement_definitionContext::definition_declaration() {
  return getRuleContext<SysMLv2Parser::Definition_declarationContext>(0);
}

SysMLv2Parser::Requirement_bodyContext* SysMLv2Parser::Requirement_definitionContext::requirement_body() {
  return getRuleContext<SysMLv2Parser::Requirement_bodyContext>(0);
}


size_t SysMLv2Parser::Requirement_definitionContext::getRuleIndex() const {
  return SysMLv2Parser::RuleRequirement_definition;
}

void SysMLv2Parser::Requirement_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRequirement_definition(this);
}

void SysMLv2Parser::Requirement_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRequirement_definition(this);
}

SysMLv2Parser::Requirement_definitionContext* SysMLv2Parser::requirement_definition() {
  Requirement_definitionContext *_localctx = _tracker.createInstance<Requirement_definitionContext>(_ctx, getState());
  enterRule(_localctx, 470, SysMLv2Parser::RuleRequirement_definition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2637);
    occurrence_definition_prefix();
    setState(2638);
    match(SysMLv2Parser::KEYWORD_REQUIREMENT);
    setState(2639);
    match(SysMLv2Parser::KEYWORD_DEF);
    setState(2640);
    definition_declaration();
    setState(2641);
    requirement_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Requirement_bodyContext ------------------------------------------------------------------

SysMLv2Parser::Requirement_bodyContext::Requirement_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Requirement_bodyContext::SYMBOL_STATEMENT_DELIMITER() {
  return getToken(SysMLv2Parser::SYMBOL_STATEMENT_DELIMITER, 0);
}

tree::TerminalNode* SysMLv2Parser::Requirement_bodyContext::SYMBOL_CURLY_BRACKET_OPEN() {
  return getToken(SysMLv2Parser::SYMBOL_CURLY_BRACKET_OPEN, 0);
}

tree::TerminalNode* SysMLv2Parser::Requirement_bodyContext::SYMBOL_CURLY_BRACKET_CLOSE() {
  return getToken(SysMLv2Parser::SYMBOL_CURLY_BRACKET_CLOSE, 0);
}

std::vector<SysMLv2Parser::Requirement_body_itemContext *> SysMLv2Parser::Requirement_bodyContext::requirement_body_item() {
  return getRuleContexts<SysMLv2Parser::Requirement_body_itemContext>();
}

SysMLv2Parser::Requirement_body_itemContext* SysMLv2Parser::Requirement_bodyContext::requirement_body_item(size_t i) {
  return getRuleContext<SysMLv2Parser::Requirement_body_itemContext>(i);
}


size_t SysMLv2Parser::Requirement_bodyContext::getRuleIndex() const {
  return SysMLv2Parser::RuleRequirement_body;
}

void SysMLv2Parser::Requirement_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRequirement_body(this);
}

void SysMLv2Parser::Requirement_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRequirement_body(this);
}

SysMLv2Parser::Requirement_bodyContext* SysMLv2Parser::requirement_body() {
  Requirement_bodyContext *_localctx = _tracker.createInstance<Requirement_bodyContext>(_ctx, getState());
  enterRule(_localctx, 472, SysMLv2Parser::RuleRequirement_body);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2652);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SysMLv2Parser::SYMBOL_STATEMENT_DELIMITER: {
        enterOuterAlt(_localctx, 1);
        setState(2643);
        match(SysMLv2Parser::SYMBOL_STATEMENT_DELIMITER);
        break;
      }

      case SysMLv2Parser::SYMBOL_CURLY_BRACKET_OPEN: {
        enterOuterAlt(_localctx, 2);
        setState(2644);
        match(SysMLv2Parser::SYMBOL_CURLY_BRACKET_OPEN);
        setState(2648);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & -7136921973799817376) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 64)) & 1735117588817043223) != 0) || ((((_la - 132) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 132)) & 620935448488315143) != 0) || ((((_la - 201) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 201)) & 2154037349) != 0)) {
          setState(2645);
          requirement_body_item();
          setState(2650);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(2651);
        match(SysMLv2Parser::SYMBOL_CURLY_BRACKET_CLOSE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Requirement_body_itemContext ------------------------------------------------------------------

SysMLv2Parser::Requirement_body_itemContext::Requirement_body_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Definition_body_itemContext* SysMLv2Parser::Requirement_body_itemContext::definition_body_item() {
  return getRuleContext<SysMLv2Parser::Definition_body_itemContext>(0);
}

SysMLv2Parser::Subject_memberContext* SysMLv2Parser::Requirement_body_itemContext::subject_member() {
  return getRuleContext<SysMLv2Parser::Subject_memberContext>(0);
}

SysMLv2Parser::Requirement_constraint_memberContext* SysMLv2Parser::Requirement_body_itemContext::requirement_constraint_member() {
  return getRuleContext<SysMLv2Parser::Requirement_constraint_memberContext>(0);
}

SysMLv2Parser::Framed_concern_memberContext* SysMLv2Parser::Requirement_body_itemContext::framed_concern_member() {
  return getRuleContext<SysMLv2Parser::Framed_concern_memberContext>(0);
}

SysMLv2Parser::Requirement_verification_memberContext* SysMLv2Parser::Requirement_body_itemContext::requirement_verification_member() {
  return getRuleContext<SysMLv2Parser::Requirement_verification_memberContext>(0);
}

SysMLv2Parser::Actor_memberContext* SysMLv2Parser::Requirement_body_itemContext::actor_member() {
  return getRuleContext<SysMLv2Parser::Actor_memberContext>(0);
}

SysMLv2Parser::Stakeholder_memberContext* SysMLv2Parser::Requirement_body_itemContext::stakeholder_member() {
  return getRuleContext<SysMLv2Parser::Stakeholder_memberContext>(0);
}


size_t SysMLv2Parser::Requirement_body_itemContext::getRuleIndex() const {
  return SysMLv2Parser::RuleRequirement_body_item;
}

void SysMLv2Parser::Requirement_body_itemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRequirement_body_item(this);
}

void SysMLv2Parser::Requirement_body_itemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRequirement_body_item(this);
}

SysMLv2Parser::Requirement_body_itemContext* SysMLv2Parser::requirement_body_item() {
  Requirement_body_itemContext *_localctx = _tracker.createInstance<Requirement_body_itemContext>(_ctx, getState());
  enterRule(_localctx, 474, SysMLv2Parser::RuleRequirement_body_item);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2661);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 212, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2654);
      definition_body_item();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2655);
      subject_member();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2656);
      requirement_constraint_member();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2657);
      framed_concern_member();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2658);
      requirement_verification_member();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(2659);
      actor_member();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(2660);
      stakeholder_member();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Subject_memberContext ------------------------------------------------------------------

SysMLv2Parser::Subject_memberContext::Subject_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Member_prefixContext* SysMLv2Parser::Subject_memberContext::member_prefix() {
  return getRuleContext<SysMLv2Parser::Member_prefixContext>(0);
}

SysMLv2Parser::Subject_usageContext* SysMLv2Parser::Subject_memberContext::subject_usage() {
  return getRuleContext<SysMLv2Parser::Subject_usageContext>(0);
}


size_t SysMLv2Parser::Subject_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleSubject_member;
}

void SysMLv2Parser::Subject_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubject_member(this);
}

void SysMLv2Parser::Subject_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubject_member(this);
}

SysMLv2Parser::Subject_memberContext* SysMLv2Parser::subject_member() {
  Subject_memberContext *_localctx = _tracker.createInstance<Subject_memberContext>(_ctx, getState());
  enterRule(_localctx, 476, SysMLv2Parser::RuleSubject_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2663);
    member_prefix();
    setState(2664);
    subject_usage();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Subject_usageContext ------------------------------------------------------------------

SysMLv2Parser::Subject_usageContext::Subject_usageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Subject_usageContext::KEYWORD_SUBJECT() {
  return getToken(SysMLv2Parser::KEYWORD_SUBJECT, 0);
}

SysMLv2Parser::UsageContext* SysMLv2Parser::Subject_usageContext::usage() {
  return getRuleContext<SysMLv2Parser::UsageContext>(0);
}

std::vector<SysMLv2Parser::Usage_extention_keywordContext *> SysMLv2Parser::Subject_usageContext::usage_extention_keyword() {
  return getRuleContexts<SysMLv2Parser::Usage_extention_keywordContext>();
}

SysMLv2Parser::Usage_extention_keywordContext* SysMLv2Parser::Subject_usageContext::usage_extention_keyword(size_t i) {
  return getRuleContext<SysMLv2Parser::Usage_extention_keywordContext>(i);
}


size_t SysMLv2Parser::Subject_usageContext::getRuleIndex() const {
  return SysMLv2Parser::RuleSubject_usage;
}

void SysMLv2Parser::Subject_usageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubject_usage(this);
}

void SysMLv2Parser::Subject_usageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubject_usage(this);
}

SysMLv2Parser::Subject_usageContext* SysMLv2Parser::subject_usage() {
  Subject_usageContext *_localctx = _tracker.createInstance<Subject_usageContext>(_ctx, getState());
  enterRule(_localctx, 478, SysMLv2Parser::RuleSubject_usage);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2666);
    match(SysMLv2Parser::KEYWORD_SUBJECT);
    setState(2670);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SysMLv2Parser::SYMBOL_HASHTAG) {
      setState(2667);
      usage_extention_keyword();
      setState(2672);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2673);
    usage();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Requirement_constraint_memberContext ------------------------------------------------------------------

SysMLv2Parser::Requirement_constraint_memberContext::Requirement_constraint_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Requriement_kindContext* SysMLv2Parser::Requirement_constraint_memberContext::requriement_kind() {
  return getRuleContext<SysMLv2Parser::Requriement_kindContext>(0);
}

SysMLv2Parser::Requirement_constraint_usageContext* SysMLv2Parser::Requirement_constraint_memberContext::requirement_constraint_usage() {
  return getRuleContext<SysMLv2Parser::Requirement_constraint_usageContext>(0);
}

SysMLv2Parser::Member_prefixContext* SysMLv2Parser::Requirement_constraint_memberContext::member_prefix() {
  return getRuleContext<SysMLv2Parser::Member_prefixContext>(0);
}


size_t SysMLv2Parser::Requirement_constraint_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleRequirement_constraint_member;
}

void SysMLv2Parser::Requirement_constraint_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRequirement_constraint_member(this);
}

void SysMLv2Parser::Requirement_constraint_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRequirement_constraint_member(this);
}

SysMLv2Parser::Requirement_constraint_memberContext* SysMLv2Parser::requirement_constraint_member() {
  Requirement_constraint_memberContext *_localctx = _tracker.createInstance<Requirement_constraint_memberContext>(_ctx, getState());
  enterRule(_localctx, 480, SysMLv2Parser::RuleRequirement_constraint_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2676);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 214, _ctx)) {
    case 1: {
      setState(2675);
      member_prefix();
      break;
    }

    default:
      break;
    }
    setState(2678);
    requriement_kind();
    setState(2679);
    requirement_constraint_usage();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Requriement_kindContext ------------------------------------------------------------------

SysMLv2Parser::Requriement_kindContext::Requriement_kindContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Requriement_kindContext::KEYWORD_ASSUME() {
  return getToken(SysMLv2Parser::KEYWORD_ASSUME, 0);
}

tree::TerminalNode* SysMLv2Parser::Requriement_kindContext::KEYWORD_REQUIRE() {
  return getToken(SysMLv2Parser::KEYWORD_REQUIRE, 0);
}


size_t SysMLv2Parser::Requriement_kindContext::getRuleIndex() const {
  return SysMLv2Parser::RuleRequriement_kind;
}

void SysMLv2Parser::Requriement_kindContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRequriement_kind(this);
}

void SysMLv2Parser::Requriement_kindContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRequriement_kind(this);
}

SysMLv2Parser::Requriement_kindContext* SysMLv2Parser::requriement_kind() {
  Requriement_kindContext *_localctx = _tracker.createInstance<Requriement_kindContext>(_ctx, getState());
  enterRule(_localctx, 482, SysMLv2Parser::RuleRequriement_kind);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2685);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SysMLv2Parser::KEYWORD_ASSUME: {
        enterOuterAlt(_localctx, 1);
        setState(2681);
        match(SysMLv2Parser::KEYWORD_ASSUME);
        //Todo: Lösung finden kind = 'assumption'
        break;
      }

      case SysMLv2Parser::KEYWORD_REQUIRE: {
        enterOuterAlt(_localctx, 2);
        setState(2683);
        match(SysMLv2Parser::KEYWORD_REQUIRE);
        //TODO Lösung finden kind = 'requirement'
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Requirement_constraint_usageContext ------------------------------------------------------------------

SysMLv2Parser::Requirement_constraint_usageContext::Requirement_constraint_usageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Owned_reference_subsettingContext* SysMLv2Parser::Requirement_constraint_usageContext::owned_reference_subsetting() {
  return getRuleContext<SysMLv2Parser::Owned_reference_subsettingContext>(0);
}

SysMLv2Parser::Requirement_bodyContext* SysMLv2Parser::Requirement_constraint_usageContext::requirement_body() {
  return getRuleContext<SysMLv2Parser::Requirement_bodyContext>(0);
}

SysMLv2Parser::Feature_specialization_partContext* SysMLv2Parser::Requirement_constraint_usageContext::feature_specialization_part() {
  return getRuleContext<SysMLv2Parser::Feature_specialization_partContext>(0);
}

SysMLv2Parser::Constraint_usage_declarationContext* SysMLv2Parser::Requirement_constraint_usageContext::constraint_usage_declaration() {
  return getRuleContext<SysMLv2Parser::Constraint_usage_declarationContext>(0);
}

SysMLv2Parser::Calculation_bodyContext* SysMLv2Parser::Requirement_constraint_usageContext::calculation_body() {
  return getRuleContext<SysMLv2Parser::Calculation_bodyContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Requirement_constraint_usageContext::KEYWORD_CONSTRAINT() {
  return getToken(SysMLv2Parser::KEYWORD_CONSTRAINT, 0);
}

std::vector<SysMLv2Parser::Usage_extention_keywordContext *> SysMLv2Parser::Requirement_constraint_usageContext::usage_extention_keyword() {
  return getRuleContexts<SysMLv2Parser::Usage_extention_keywordContext>();
}

SysMLv2Parser::Usage_extention_keywordContext* SysMLv2Parser::Requirement_constraint_usageContext::usage_extention_keyword(size_t i) {
  return getRuleContext<SysMLv2Parser::Usage_extention_keywordContext>(i);
}


size_t SysMLv2Parser::Requirement_constraint_usageContext::getRuleIndex() const {
  return SysMLv2Parser::RuleRequirement_constraint_usage;
}

void SysMLv2Parser::Requirement_constraint_usageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRequirement_constraint_usage(this);
}

void SysMLv2Parser::Requirement_constraint_usageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRequirement_constraint_usage(this);
}

SysMLv2Parser::Requirement_constraint_usageContext* SysMLv2Parser::requirement_constraint_usage() {
  Requirement_constraint_usageContext *_localctx = _tracker.createInstance<Requirement_constraint_usageContext>(_ctx, getState());
  enterRule(_localctx, 484, SysMLv2Parser::RuleRequirement_constraint_usage);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2710);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SysMLv2Parser::NAME: {
        enterOuterAlt(_localctx, 1);
        setState(2687);
        owned_reference_subsetting();
        setState(2689);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (((((_la - 83) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 83)) & 3377699720527901) != 0) || _la == SysMLv2Parser::KEYWORD_OUT

        || _la == SysMLv2Parser::SYMBOL_SQUARE_BRACKET_OPEN) {
          setState(2688);
          feature_specialization_part();
        }
        setState(2691);
        requirement_body();
        break;
      }

      case SysMLv2Parser::KEYWORD_CONSTRAINT:
      case SysMLv2Parser::SYMBOL_HASHTAG: {
        enterOuterAlt(_localctx, 2);
        setState(2705);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 219, _ctx)) {
        case 1: {
          setState(2696);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while (_la == SysMLv2Parser::SYMBOL_HASHTAG) {
            setState(2693);
            usage_extention_keyword();
            setState(2698);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
          setState(2699);
          match(SysMLv2Parser::KEYWORD_CONSTRAINT);
          break;
        }

        case 2: {
          setState(2701); 
          _errHandler->sync(this);
          _la = _input->LA(1);
          do {
            setState(2700);
            usage_extention_keyword();
            setState(2703); 
            _errHandler->sync(this);
            _la = _input->LA(1);
          } while (_la == SysMLv2Parser::SYMBOL_HASHTAG);
          break;
        }

        default:
          break;
        }
        setState(2707);
        constraint_usage_declaration();
        setState(2708);
        calculation_body();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Framed_concern_memberContext ------------------------------------------------------------------

SysMLv2Parser::Framed_concern_memberContext::Framed_concern_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Framed_concern_memberContext::KEYWORD_FRAME() {
  return getToken(SysMLv2Parser::KEYWORD_FRAME, 0);
}

SysMLv2Parser::Framed_concern_usageContext* SysMLv2Parser::Framed_concern_memberContext::framed_concern_usage() {
  return getRuleContext<SysMLv2Parser::Framed_concern_usageContext>(0);
}

SysMLv2Parser::Member_prefixContext* SysMLv2Parser::Framed_concern_memberContext::member_prefix() {
  return getRuleContext<SysMLv2Parser::Member_prefixContext>(0);
}


size_t SysMLv2Parser::Framed_concern_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleFramed_concern_member;
}

void SysMLv2Parser::Framed_concern_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFramed_concern_member(this);
}

void SysMLv2Parser::Framed_concern_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFramed_concern_member(this);
}

SysMLv2Parser::Framed_concern_memberContext* SysMLv2Parser::framed_concern_member() {
  Framed_concern_memberContext *_localctx = _tracker.createInstance<Framed_concern_memberContext>(_ctx, getState());
  enterRule(_localctx, 486, SysMLv2Parser::RuleFramed_concern_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2713);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 221, _ctx)) {
    case 1: {
      setState(2712);
      member_prefix();
      break;
    }

    default:
      break;
    }
    setState(2715);
    match(SysMLv2Parser::KEYWORD_FRAME);
    setState(2716);
    framed_concern_usage();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Framed_concern_usageContext ------------------------------------------------------------------

SysMLv2Parser::Framed_concern_usageContext::Framed_concern_usageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Owned_reference_subsettingContext* SysMLv2Parser::Framed_concern_usageContext::owned_reference_subsetting() {
  return getRuleContext<SysMLv2Parser::Owned_reference_subsettingContext>(0);
}

SysMLv2Parser::Calculation_bodyContext* SysMLv2Parser::Framed_concern_usageContext::calculation_body() {
  return getRuleContext<SysMLv2Parser::Calculation_bodyContext>(0);
}

SysMLv2Parser::Feature_specialization_partContext* SysMLv2Parser::Framed_concern_usageContext::feature_specialization_part() {
  return getRuleContext<SysMLv2Parser::Feature_specialization_partContext>(0);
}

SysMLv2Parser::Constraint_usage_declarationContext* SysMLv2Parser::Framed_concern_usageContext::constraint_usage_declaration() {
  return getRuleContext<SysMLv2Parser::Constraint_usage_declarationContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Framed_concern_usageContext::KEYWORD_CONSTRAINT() {
  return getToken(SysMLv2Parser::KEYWORD_CONSTRAINT, 0);
}

std::vector<SysMLv2Parser::Usage_extention_keywordContext *> SysMLv2Parser::Framed_concern_usageContext::usage_extention_keyword() {
  return getRuleContexts<SysMLv2Parser::Usage_extention_keywordContext>();
}

SysMLv2Parser::Usage_extention_keywordContext* SysMLv2Parser::Framed_concern_usageContext::usage_extention_keyword(size_t i) {
  return getRuleContext<SysMLv2Parser::Usage_extention_keywordContext>(i);
}


size_t SysMLv2Parser::Framed_concern_usageContext::getRuleIndex() const {
  return SysMLv2Parser::RuleFramed_concern_usage;
}

void SysMLv2Parser::Framed_concern_usageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFramed_concern_usage(this);
}

void SysMLv2Parser::Framed_concern_usageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFramed_concern_usage(this);
}

SysMLv2Parser::Framed_concern_usageContext* SysMLv2Parser::framed_concern_usage() {
  Framed_concern_usageContext *_localctx = _tracker.createInstance<Framed_concern_usageContext>(_ctx, getState());
  enterRule(_localctx, 488, SysMLv2Parser::RuleFramed_concern_usage);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2741);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SysMLv2Parser::NAME: {
        enterOuterAlt(_localctx, 1);
        setState(2718);
        owned_reference_subsetting();
        setState(2720);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (((((_la - 83) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 83)) & 3377699720527901) != 0) || _la == SysMLv2Parser::KEYWORD_OUT

        || _la == SysMLv2Parser::SYMBOL_SQUARE_BRACKET_OPEN) {
          setState(2719);
          feature_specialization_part();
        }
        setState(2722);
        calculation_body();
        break;
      }

      case SysMLv2Parser::KEYWORD_CONSTRAINT:
      case SysMLv2Parser::SYMBOL_HASHTAG: {
        enterOuterAlt(_localctx, 2);
        setState(2736);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 225, _ctx)) {
        case 1: {
          setState(2727);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while (_la == SysMLv2Parser::SYMBOL_HASHTAG) {
            setState(2724);
            usage_extention_keyword();
            setState(2729);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
          setState(2730);
          match(SysMLv2Parser::KEYWORD_CONSTRAINT);
          break;
        }

        case 2: {
          setState(2732); 
          _errHandler->sync(this);
          _la = _input->LA(1);
          do {
            setState(2731);
            usage_extention_keyword();
            setState(2734); 
            _errHandler->sync(this);
            _la = _input->LA(1);
          } while (_la == SysMLv2Parser::SYMBOL_HASHTAG);
          break;
        }

        default:
          break;
        }
        setState(2738);
        constraint_usage_declaration();
        setState(2739);
        calculation_body();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Actor_memberContext ------------------------------------------------------------------

SysMLv2Parser::Actor_memberContext::Actor_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Member_prefixContext* SysMLv2Parser::Actor_memberContext::member_prefix() {
  return getRuleContext<SysMLv2Parser::Member_prefixContext>(0);
}

SysMLv2Parser::Actor_usageContext* SysMLv2Parser::Actor_memberContext::actor_usage() {
  return getRuleContext<SysMLv2Parser::Actor_usageContext>(0);
}


size_t SysMLv2Parser::Actor_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleActor_member;
}

void SysMLv2Parser::Actor_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterActor_member(this);
}

void SysMLv2Parser::Actor_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitActor_member(this);
}

SysMLv2Parser::Actor_memberContext* SysMLv2Parser::actor_member() {
  Actor_memberContext *_localctx = _tracker.createInstance<Actor_memberContext>(_ctx, getState());
  enterRule(_localctx, 490, SysMLv2Parser::RuleActor_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2743);
    member_prefix();
    setState(2744);
    actor_usage();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Actor_usageContext ------------------------------------------------------------------

SysMLv2Parser::Actor_usageContext::Actor_usageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Actor_usageContext::KEYWORD_ACTOR() {
  return getToken(SysMLv2Parser::KEYWORD_ACTOR, 0);
}

SysMLv2Parser::UsageContext* SysMLv2Parser::Actor_usageContext::usage() {
  return getRuleContext<SysMLv2Parser::UsageContext>(0);
}

std::vector<SysMLv2Parser::Usage_extention_keywordContext *> SysMLv2Parser::Actor_usageContext::usage_extention_keyword() {
  return getRuleContexts<SysMLv2Parser::Usage_extention_keywordContext>();
}

SysMLv2Parser::Usage_extention_keywordContext* SysMLv2Parser::Actor_usageContext::usage_extention_keyword(size_t i) {
  return getRuleContext<SysMLv2Parser::Usage_extention_keywordContext>(i);
}


size_t SysMLv2Parser::Actor_usageContext::getRuleIndex() const {
  return SysMLv2Parser::RuleActor_usage;
}

void SysMLv2Parser::Actor_usageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterActor_usage(this);
}

void SysMLv2Parser::Actor_usageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitActor_usage(this);
}

SysMLv2Parser::Actor_usageContext* SysMLv2Parser::actor_usage() {
  Actor_usageContext *_localctx = _tracker.createInstance<Actor_usageContext>(_ctx, getState());
  enterRule(_localctx, 492, SysMLv2Parser::RuleActor_usage);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2746);
    match(SysMLv2Parser::KEYWORD_ACTOR);
    setState(2750);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SysMLv2Parser::SYMBOL_HASHTAG) {
      setState(2747);
      usage_extention_keyword();
      setState(2752);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2753);
    usage();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Stakeholder_memberContext ------------------------------------------------------------------

SysMLv2Parser::Stakeholder_memberContext::Stakeholder_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Member_prefixContext* SysMLv2Parser::Stakeholder_memberContext::member_prefix() {
  return getRuleContext<SysMLv2Parser::Member_prefixContext>(0);
}

SysMLv2Parser::Stakeholder_usageContext* SysMLv2Parser::Stakeholder_memberContext::stakeholder_usage() {
  return getRuleContext<SysMLv2Parser::Stakeholder_usageContext>(0);
}


size_t SysMLv2Parser::Stakeholder_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleStakeholder_member;
}

void SysMLv2Parser::Stakeholder_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStakeholder_member(this);
}

void SysMLv2Parser::Stakeholder_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStakeholder_member(this);
}

SysMLv2Parser::Stakeholder_memberContext* SysMLv2Parser::stakeholder_member() {
  Stakeholder_memberContext *_localctx = _tracker.createInstance<Stakeholder_memberContext>(_ctx, getState());
  enterRule(_localctx, 494, SysMLv2Parser::RuleStakeholder_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2755);
    member_prefix();
    setState(2756);
    stakeholder_usage();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Stakeholder_usageContext ------------------------------------------------------------------

SysMLv2Parser::Stakeholder_usageContext::Stakeholder_usageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Stakeholder_usageContext::KEYWORD_STAKEHOLDER() {
  return getToken(SysMLv2Parser::KEYWORD_STAKEHOLDER, 0);
}

SysMLv2Parser::Usage_extention_keywordContext* SysMLv2Parser::Stakeholder_usageContext::usage_extention_keyword() {
  return getRuleContext<SysMLv2Parser::Usage_extention_keywordContext>(0);
}


size_t SysMLv2Parser::Stakeholder_usageContext::getRuleIndex() const {
  return SysMLv2Parser::RuleStakeholder_usage;
}

void SysMLv2Parser::Stakeholder_usageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStakeholder_usage(this);
}

void SysMLv2Parser::Stakeholder_usageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStakeholder_usage(this);
}

SysMLv2Parser::Stakeholder_usageContext* SysMLv2Parser::stakeholder_usage() {
  Stakeholder_usageContext *_localctx = _tracker.createInstance<Stakeholder_usageContext>(_ctx, getState());
  enterRule(_localctx, 496, SysMLv2Parser::RuleStakeholder_usage);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2758);
    match(SysMLv2Parser::KEYWORD_STAKEHOLDER);
    setState(2759);
    usage_extention_keyword();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Requirement_usageContext ------------------------------------------------------------------

SysMLv2Parser::Requirement_usageContext::Requirement_usageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Occurrence_usage_prefixContext* SysMLv2Parser::Requirement_usageContext::occurrence_usage_prefix() {
  return getRuleContext<SysMLv2Parser::Occurrence_usage_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Requirement_usageContext::KEYWORD_REQUIREMENT() {
  return getToken(SysMLv2Parser::KEYWORD_REQUIREMENT, 0);
}

SysMLv2Parser::Constraint_usage_declarationContext* SysMLv2Parser::Requirement_usageContext::constraint_usage_declaration() {
  return getRuleContext<SysMLv2Parser::Constraint_usage_declarationContext>(0);
}

SysMLv2Parser::Requirement_bodyContext* SysMLv2Parser::Requirement_usageContext::requirement_body() {
  return getRuleContext<SysMLv2Parser::Requirement_bodyContext>(0);
}


size_t SysMLv2Parser::Requirement_usageContext::getRuleIndex() const {
  return SysMLv2Parser::RuleRequirement_usage;
}

void SysMLv2Parser::Requirement_usageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRequirement_usage(this);
}

void SysMLv2Parser::Requirement_usageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRequirement_usage(this);
}

SysMLv2Parser::Requirement_usageContext* SysMLv2Parser::requirement_usage() {
  Requirement_usageContext *_localctx = _tracker.createInstance<Requirement_usageContext>(_ctx, getState());
  enterRule(_localctx, 498, SysMLv2Parser::RuleRequirement_usage);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2761);
    occurrence_usage_prefix();
    setState(2762);
    match(SysMLv2Parser::KEYWORD_REQUIREMENT);
    setState(2763);
    constraint_usage_declaration();
    setState(2764);
    requirement_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Satisfy_requirement_usageContext ------------------------------------------------------------------

SysMLv2Parser::Satisfy_requirement_usageContext::Satisfy_requirement_usageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Occurrence_usage_prefixContext* SysMLv2Parser::Satisfy_requirement_usageContext::occurrence_usage_prefix() {
  return getRuleContext<SysMLv2Parser::Occurrence_usage_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Satisfy_requirement_usageContext::KEYWORD_ASSERT() {
  return getToken(SysMLv2Parser::KEYWORD_ASSERT, 0);
}

tree::TerminalNode* SysMLv2Parser::Satisfy_requirement_usageContext::KEYWORD_SATISFY() {
  return getToken(SysMLv2Parser::KEYWORD_SATISFY, 0);
}

SysMLv2Parser::Requirement_bodyContext* SysMLv2Parser::Satisfy_requirement_usageContext::requirement_body() {
  return getRuleContext<SysMLv2Parser::Requirement_bodyContext>(0);
}

SysMLv2Parser::Owned_reference_subsettingContext* SysMLv2Parser::Satisfy_requirement_usageContext::owned_reference_subsetting() {
  return getRuleContext<SysMLv2Parser::Owned_reference_subsettingContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Satisfy_requirement_usageContext::KEYWORD_REQUIREMENT() {
  return getToken(SysMLv2Parser::KEYWORD_REQUIREMENT, 0);
}

SysMLv2Parser::Usage_declarationContext* SysMLv2Parser::Satisfy_requirement_usageContext::usage_declaration() {
  return getRuleContext<SysMLv2Parser::Usage_declarationContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Satisfy_requirement_usageContext::KEYWORD_NOT() {
  return getToken(SysMLv2Parser::KEYWORD_NOT, 0);
}

SysMLv2Parser::Value_partContext* SysMLv2Parser::Satisfy_requirement_usageContext::value_part() {
  return getRuleContext<SysMLv2Parser::Value_partContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Satisfy_requirement_usageContext::KEYWORD_BY() {
  return getToken(SysMLv2Parser::KEYWORD_BY, 0);
}

SysMLv2Parser::Satisfaction_subject_memberContext* SysMLv2Parser::Satisfy_requirement_usageContext::satisfaction_subject_member() {
  return getRuleContext<SysMLv2Parser::Satisfaction_subject_memberContext>(0);
}

SysMLv2Parser::Feature_specialization_partContext* SysMLv2Parser::Satisfy_requirement_usageContext::feature_specialization_part() {
  return getRuleContext<SysMLv2Parser::Feature_specialization_partContext>(0);
}


size_t SysMLv2Parser::Satisfy_requirement_usageContext::getRuleIndex() const {
  return SysMLv2Parser::RuleSatisfy_requirement_usage;
}

void SysMLv2Parser::Satisfy_requirement_usageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSatisfy_requirement_usage(this);
}

void SysMLv2Parser::Satisfy_requirement_usageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSatisfy_requirement_usage(this);
}

SysMLv2Parser::Satisfy_requirement_usageContext* SysMLv2Parser::satisfy_requirement_usage() {
  Satisfy_requirement_usageContext *_localctx = _tracker.createInstance<Satisfy_requirement_usageContext>(_ctx, getState());
  enterRule(_localctx, 500, SysMLv2Parser::RuleSatisfy_requirement_usage);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2766);
    occurrence_usage_prefix();
    setState(2767);
    match(SysMLv2Parser::KEYWORD_ASSERT);
    setState(2769);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_NOT) {
      setState(2768);
      match(SysMLv2Parser::KEYWORD_NOT);
    }
    setState(2771);
    match(SysMLv2Parser::KEYWORD_SATISFY);
    setState(2778);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SysMLv2Parser::NAME: {
        setState(2772);
        owned_reference_subsetting();
        setState(2774);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (((((_la - 83) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 83)) & 3377699720527901) != 0) || _la == SysMLv2Parser::KEYWORD_OUT

        || _la == SysMLv2Parser::SYMBOL_SQUARE_BRACKET_OPEN) {
          setState(2773);
          feature_specialization_part();
        }
        break;
      }

      case SysMLv2Parser::KEYWORD_REQUIREMENT: {
        setState(2776);
        match(SysMLv2Parser::KEYWORD_REQUIREMENT);
        setState(2777);
        usage_declaration();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(2781);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_DEFAULT || _la == SysMLv2Parser::SYMBOL_DEF_ASSIGN

    || _la == SysMLv2Parser::SYMBOL_EQUALS) {
      setState(2780);
      value_part();
    }
    setState(2785);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_BY) {
      setState(2783);
      match(SysMLv2Parser::KEYWORD_BY);
      setState(2784);
      satisfaction_subject_member();
    }
    setState(2787);
    requirement_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Satisfaction_subject_memberContext ------------------------------------------------------------------

SysMLv2Parser::Satisfaction_subject_memberContext::Satisfaction_subject_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Satisfaction_parameterContext* SysMLv2Parser::Satisfaction_subject_memberContext::satisfaction_parameter() {
  return getRuleContext<SysMLv2Parser::Satisfaction_parameterContext>(0);
}


size_t SysMLv2Parser::Satisfaction_subject_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleSatisfaction_subject_member;
}

void SysMLv2Parser::Satisfaction_subject_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSatisfaction_subject_member(this);
}

void SysMLv2Parser::Satisfaction_subject_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSatisfaction_subject_member(this);
}

SysMLv2Parser::Satisfaction_subject_memberContext* SysMLv2Parser::satisfaction_subject_member() {
  Satisfaction_subject_memberContext *_localctx = _tracker.createInstance<Satisfaction_subject_memberContext>(_ctx, getState());
  enterRule(_localctx, 502, SysMLv2Parser::RuleSatisfaction_subject_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2789);
    satisfaction_parameter();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Satisfaction_parameterContext ------------------------------------------------------------------

SysMLv2Parser::Satisfaction_parameterContext::Satisfaction_parameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Satisfaction_feature_valueContext* SysMLv2Parser::Satisfaction_parameterContext::satisfaction_feature_value() {
  return getRuleContext<SysMLv2Parser::Satisfaction_feature_valueContext>(0);
}


size_t SysMLv2Parser::Satisfaction_parameterContext::getRuleIndex() const {
  return SysMLv2Parser::RuleSatisfaction_parameter;
}

void SysMLv2Parser::Satisfaction_parameterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSatisfaction_parameter(this);
}

void SysMLv2Parser::Satisfaction_parameterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSatisfaction_parameter(this);
}

SysMLv2Parser::Satisfaction_parameterContext* SysMLv2Parser::satisfaction_parameter() {
  Satisfaction_parameterContext *_localctx = _tracker.createInstance<Satisfaction_parameterContext>(_ctx, getState());
  enterRule(_localctx, 504, SysMLv2Parser::RuleSatisfaction_parameter);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2791);
    satisfaction_feature_value();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Satisfaction_feature_valueContext ------------------------------------------------------------------

SysMLv2Parser::Satisfaction_feature_valueContext::Satisfaction_feature_valueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Satisfaction_reference_expressionContext* SysMLv2Parser::Satisfaction_feature_valueContext::satisfaction_reference_expression() {
  return getRuleContext<SysMLv2Parser::Satisfaction_reference_expressionContext>(0);
}


size_t SysMLv2Parser::Satisfaction_feature_valueContext::getRuleIndex() const {
  return SysMLv2Parser::RuleSatisfaction_feature_value;
}

void SysMLv2Parser::Satisfaction_feature_valueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSatisfaction_feature_value(this);
}

void SysMLv2Parser::Satisfaction_feature_valueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSatisfaction_feature_value(this);
}

SysMLv2Parser::Satisfaction_feature_valueContext* SysMLv2Parser::satisfaction_feature_value() {
  Satisfaction_feature_valueContext *_localctx = _tracker.createInstance<Satisfaction_feature_valueContext>(_ctx, getState());
  enterRule(_localctx, 506, SysMLv2Parser::RuleSatisfaction_feature_value);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2793);
    satisfaction_reference_expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Satisfaction_reference_expressionContext ------------------------------------------------------------------

SysMLv2Parser::Satisfaction_reference_expressionContext::Satisfaction_reference_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Feature_chain_memberContext* SysMLv2Parser::Satisfaction_reference_expressionContext::feature_chain_member() {
  return getRuleContext<SysMLv2Parser::Feature_chain_memberContext>(0);
}


size_t SysMLv2Parser::Satisfaction_reference_expressionContext::getRuleIndex() const {
  return SysMLv2Parser::RuleSatisfaction_reference_expression;
}

void SysMLv2Parser::Satisfaction_reference_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSatisfaction_reference_expression(this);
}

void SysMLv2Parser::Satisfaction_reference_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSatisfaction_reference_expression(this);
}

SysMLv2Parser::Satisfaction_reference_expressionContext* SysMLv2Parser::satisfaction_reference_expression() {
  Satisfaction_reference_expressionContext *_localctx = _tracker.createInstance<Satisfaction_reference_expressionContext>(_ctx, getState());
  enterRule(_localctx, 508, SysMLv2Parser::RuleSatisfaction_reference_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2795);
    feature_chain_member();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Concern_definitionContext ------------------------------------------------------------------

SysMLv2Parser::Concern_definitionContext::Concern_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Occurrence_definition_prefixContext* SysMLv2Parser::Concern_definitionContext::occurrence_definition_prefix() {
  return getRuleContext<SysMLv2Parser::Occurrence_definition_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Concern_definitionContext::KEYWORD_CONCERN() {
  return getToken(SysMLv2Parser::KEYWORD_CONCERN, 0);
}

tree::TerminalNode* SysMLv2Parser::Concern_definitionContext::KEYWORD_DEF() {
  return getToken(SysMLv2Parser::KEYWORD_DEF, 0);
}

SysMLv2Parser::Definition_declarationContext* SysMLv2Parser::Concern_definitionContext::definition_declaration() {
  return getRuleContext<SysMLv2Parser::Definition_declarationContext>(0);
}

SysMLv2Parser::Requirement_bodyContext* SysMLv2Parser::Concern_definitionContext::requirement_body() {
  return getRuleContext<SysMLv2Parser::Requirement_bodyContext>(0);
}


size_t SysMLv2Parser::Concern_definitionContext::getRuleIndex() const {
  return SysMLv2Parser::RuleConcern_definition;
}

void SysMLv2Parser::Concern_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConcern_definition(this);
}

void SysMLv2Parser::Concern_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConcern_definition(this);
}

SysMLv2Parser::Concern_definitionContext* SysMLv2Parser::concern_definition() {
  Concern_definitionContext *_localctx = _tracker.createInstance<Concern_definitionContext>(_ctx, getState());
  enterRule(_localctx, 510, SysMLv2Parser::RuleConcern_definition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2797);
    occurrence_definition_prefix();
    setState(2798);
    match(SysMLv2Parser::KEYWORD_CONCERN);
    setState(2799);
    match(SysMLv2Parser::KEYWORD_DEF);
    setState(2800);
    definition_declaration();
    setState(2801);
    requirement_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Concern_usageContext ------------------------------------------------------------------

SysMLv2Parser::Concern_usageContext::Concern_usageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Occurrence_usage_prefixContext* SysMLv2Parser::Concern_usageContext::occurrence_usage_prefix() {
  return getRuleContext<SysMLv2Parser::Occurrence_usage_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Concern_usageContext::KEYWORD_CONCERN() {
  return getToken(SysMLv2Parser::KEYWORD_CONCERN, 0);
}

SysMLv2Parser::Constraint_usage_declarationContext* SysMLv2Parser::Concern_usageContext::constraint_usage_declaration() {
  return getRuleContext<SysMLv2Parser::Constraint_usage_declarationContext>(0);
}

SysMLv2Parser::Requirement_bodyContext* SysMLv2Parser::Concern_usageContext::requirement_body() {
  return getRuleContext<SysMLv2Parser::Requirement_bodyContext>(0);
}


size_t SysMLv2Parser::Concern_usageContext::getRuleIndex() const {
  return SysMLv2Parser::RuleConcern_usage;
}

void SysMLv2Parser::Concern_usageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConcern_usage(this);
}

void SysMLv2Parser::Concern_usageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConcern_usage(this);
}

SysMLv2Parser::Concern_usageContext* SysMLv2Parser::concern_usage() {
  Concern_usageContext *_localctx = _tracker.createInstance<Concern_usageContext>(_ctx, getState());
  enterRule(_localctx, 512, SysMLv2Parser::RuleConcern_usage);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2803);
    occurrence_usage_prefix();
    setState(2804);
    match(SysMLv2Parser::KEYWORD_CONCERN);
    setState(2805);
    constraint_usage_declaration();
    setState(2806);
    requirement_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Case_definitionContext ------------------------------------------------------------------

SysMLv2Parser::Case_definitionContext::Case_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Occurrence_definition_prefixContext* SysMLv2Parser::Case_definitionContext::occurrence_definition_prefix() {
  return getRuleContext<SysMLv2Parser::Occurrence_definition_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Case_definitionContext::KEYWORD_CASE() {
  return getToken(SysMLv2Parser::KEYWORD_CASE, 0);
}

tree::TerminalNode* SysMLv2Parser::Case_definitionContext::KEYWORD_DEF() {
  return getToken(SysMLv2Parser::KEYWORD_DEF, 0);
}

SysMLv2Parser::Definition_declarationContext* SysMLv2Parser::Case_definitionContext::definition_declaration() {
  return getRuleContext<SysMLv2Parser::Definition_declarationContext>(0);
}

SysMLv2Parser::Case_bodyContext* SysMLv2Parser::Case_definitionContext::case_body() {
  return getRuleContext<SysMLv2Parser::Case_bodyContext>(0);
}


size_t SysMLv2Parser::Case_definitionContext::getRuleIndex() const {
  return SysMLv2Parser::RuleCase_definition;
}

void SysMLv2Parser::Case_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCase_definition(this);
}

void SysMLv2Parser::Case_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCase_definition(this);
}

SysMLv2Parser::Case_definitionContext* SysMLv2Parser::case_definition() {
  Case_definitionContext *_localctx = _tracker.createInstance<Case_definitionContext>(_ctx, getState());
  enterRule(_localctx, 514, SysMLv2Parser::RuleCase_definition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2808);
    occurrence_definition_prefix();
    setState(2809);
    match(SysMLv2Parser::KEYWORD_CASE);
    setState(2810);
    match(SysMLv2Parser::KEYWORD_DEF);
    setState(2811);
    definition_declaration();
    setState(2812);
    case_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Case_usageContext ------------------------------------------------------------------

SysMLv2Parser::Case_usageContext::Case_usageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Occurrence_usage_prefixContext* SysMLv2Parser::Case_usageContext::occurrence_usage_prefix() {
  return getRuleContext<SysMLv2Parser::Occurrence_usage_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Case_usageContext::KEYWORD_CASE() {
  return getToken(SysMLv2Parser::KEYWORD_CASE, 0);
}

SysMLv2Parser::Constraint_usage_declarationContext* SysMLv2Parser::Case_usageContext::constraint_usage_declaration() {
  return getRuleContext<SysMLv2Parser::Constraint_usage_declarationContext>(0);
}

SysMLv2Parser::Case_bodyContext* SysMLv2Parser::Case_usageContext::case_body() {
  return getRuleContext<SysMLv2Parser::Case_bodyContext>(0);
}


size_t SysMLv2Parser::Case_usageContext::getRuleIndex() const {
  return SysMLv2Parser::RuleCase_usage;
}

void SysMLv2Parser::Case_usageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCase_usage(this);
}

void SysMLv2Parser::Case_usageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCase_usage(this);
}

SysMLv2Parser::Case_usageContext* SysMLv2Parser::case_usage() {
  Case_usageContext *_localctx = _tracker.createInstance<Case_usageContext>(_ctx, getState());
  enterRule(_localctx, 516, SysMLv2Parser::RuleCase_usage);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2814);
    occurrence_usage_prefix();
    setState(2815);
    match(SysMLv2Parser::KEYWORD_CASE);
    setState(2816);
    constraint_usage_declaration();
    setState(2817);
    case_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Case_bodyContext ------------------------------------------------------------------

SysMLv2Parser::Case_bodyContext::Case_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Case_bodyContext::SYMBOL_STATEMENT_DELIMITER() {
  return getToken(SysMLv2Parser::SYMBOL_STATEMENT_DELIMITER, 0);
}

tree::TerminalNode* SysMLv2Parser::Case_bodyContext::SYMBOL_CURLY_BRACKET_OPEN() {
  return getToken(SysMLv2Parser::SYMBOL_CURLY_BRACKET_OPEN, 0);
}

tree::TerminalNode* SysMLv2Parser::Case_bodyContext::SYMBOL_CURLY_BRACKET_CLOSE() {
  return getToken(SysMLv2Parser::SYMBOL_CURLY_BRACKET_CLOSE, 0);
}

std::vector<SysMLv2Parser::Case_body_itemContext *> SysMLv2Parser::Case_bodyContext::case_body_item() {
  return getRuleContexts<SysMLv2Parser::Case_body_itemContext>();
}

SysMLv2Parser::Case_body_itemContext* SysMLv2Parser::Case_bodyContext::case_body_item(size_t i) {
  return getRuleContext<SysMLv2Parser::Case_body_itemContext>(i);
}

SysMLv2Parser::Result_expression_memberContext* SysMLv2Parser::Case_bodyContext::result_expression_member() {
  return getRuleContext<SysMLv2Parser::Result_expression_memberContext>(0);
}


size_t SysMLv2Parser::Case_bodyContext::getRuleIndex() const {
  return SysMLv2Parser::RuleCase_body;
}

void SysMLv2Parser::Case_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCase_body(this);
}

void SysMLv2Parser::Case_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCase_body(this);
}

SysMLv2Parser::Case_bodyContext* SysMLv2Parser::case_body() {
  Case_bodyContext *_localctx = _tracker.createInstance<Case_bodyContext>(_ctx, getState());
  enterRule(_localctx, 518, SysMLv2Parser::RuleCase_body);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(2831);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SysMLv2Parser::SYMBOL_STATEMENT_DELIMITER: {
        enterOuterAlt(_localctx, 1);
        setState(2819);
        match(SysMLv2Parser::SYMBOL_STATEMENT_DELIMITER);
        break;
      }

      case SysMLv2Parser::SYMBOL_CURLY_BRACKET_OPEN: {
        enterOuterAlt(_localctx, 2);
        setState(2820);
        match(SysMLv2Parser::SYMBOL_CURLY_BRACKET_OPEN);
        setState(2824);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 233, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(2821);
            case_body_item(); 
          }
          setState(2826);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 233, _ctx);
        }
        setState(2828);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == SysMLv2Parser::T__0 || ((((_la - 91) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 91)) & 108368278484680709) != 0) || ((((_la - 155) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 155)) & 7789283556232527879) != 0) || ((((_la - 231) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 231)) & 115) != 0)) {
          setState(2827);
          result_expression_member();
        }
        setState(2830);
        match(SysMLv2Parser::SYMBOL_CURLY_BRACKET_CLOSE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Case_body_itemContext ------------------------------------------------------------------

SysMLv2Parser::Case_body_itemContext::Case_body_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Action_body_itemContext* SysMLv2Parser::Case_body_itemContext::action_body_item() {
  return getRuleContext<SysMLv2Parser::Action_body_itemContext>(0);
}

SysMLv2Parser::Subject_memberContext* SysMLv2Parser::Case_body_itemContext::subject_member() {
  return getRuleContext<SysMLv2Parser::Subject_memberContext>(0);
}

SysMLv2Parser::Actor_memberContext* SysMLv2Parser::Case_body_itemContext::actor_member() {
  return getRuleContext<SysMLv2Parser::Actor_memberContext>(0);
}

SysMLv2Parser::Objective_memberContext* SysMLv2Parser::Case_body_itemContext::objective_member() {
  return getRuleContext<SysMLv2Parser::Objective_memberContext>(0);
}


size_t SysMLv2Parser::Case_body_itemContext::getRuleIndex() const {
  return SysMLv2Parser::RuleCase_body_item;
}

void SysMLv2Parser::Case_body_itemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCase_body_item(this);
}

void SysMLv2Parser::Case_body_itemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCase_body_item(this);
}

SysMLv2Parser::Case_body_itemContext* SysMLv2Parser::case_body_item() {
  Case_body_itemContext *_localctx = _tracker.createInstance<Case_body_itemContext>(_ctx, getState());
  enterRule(_localctx, 520, SysMLv2Parser::RuleCase_body_item);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2837);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 236, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2833);
      action_body_item();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2834);
      subject_member();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2835);
      actor_member();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2836);
      objective_member();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Objective_memberContext ------------------------------------------------------------------

SysMLv2Parser::Objective_memberContext::Objective_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Member_prefixContext* SysMLv2Parser::Objective_memberContext::member_prefix() {
  return getRuleContext<SysMLv2Parser::Member_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Objective_memberContext::KEYWORD_OBJECTIVE() {
  return getToken(SysMLv2Parser::KEYWORD_OBJECTIVE, 0);
}

SysMLv2Parser::Objective_requirement_usageContext* SysMLv2Parser::Objective_memberContext::objective_requirement_usage() {
  return getRuleContext<SysMLv2Parser::Objective_requirement_usageContext>(0);
}


size_t SysMLv2Parser::Objective_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleObjective_member;
}

void SysMLv2Parser::Objective_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterObjective_member(this);
}

void SysMLv2Parser::Objective_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitObjective_member(this);
}

SysMLv2Parser::Objective_memberContext* SysMLv2Parser::objective_member() {
  Objective_memberContext *_localctx = _tracker.createInstance<Objective_memberContext>(_ctx, getState());
  enterRule(_localctx, 522, SysMLv2Parser::RuleObjective_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2839);
    member_prefix();
    setState(2840);
    match(SysMLv2Parser::KEYWORD_OBJECTIVE);
    setState(2841);
    objective_requirement_usage();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Objective_requirement_usageContext ------------------------------------------------------------------

SysMLv2Parser::Objective_requirement_usageContext::Objective_requirement_usageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Constraint_usage_declarationContext* SysMLv2Parser::Objective_requirement_usageContext::constraint_usage_declaration() {
  return getRuleContext<SysMLv2Parser::Constraint_usage_declarationContext>(0);
}

SysMLv2Parser::Requirement_bodyContext* SysMLv2Parser::Objective_requirement_usageContext::requirement_body() {
  return getRuleContext<SysMLv2Parser::Requirement_bodyContext>(0);
}

std::vector<SysMLv2Parser::Usage_extention_keywordContext *> SysMLv2Parser::Objective_requirement_usageContext::usage_extention_keyword() {
  return getRuleContexts<SysMLv2Parser::Usage_extention_keywordContext>();
}

SysMLv2Parser::Usage_extention_keywordContext* SysMLv2Parser::Objective_requirement_usageContext::usage_extention_keyword(size_t i) {
  return getRuleContext<SysMLv2Parser::Usage_extention_keywordContext>(i);
}


size_t SysMLv2Parser::Objective_requirement_usageContext::getRuleIndex() const {
  return SysMLv2Parser::RuleObjective_requirement_usage;
}

void SysMLv2Parser::Objective_requirement_usageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterObjective_requirement_usage(this);
}

void SysMLv2Parser::Objective_requirement_usageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitObjective_requirement_usage(this);
}

SysMLv2Parser::Objective_requirement_usageContext* SysMLv2Parser::objective_requirement_usage() {
  Objective_requirement_usageContext *_localctx = _tracker.createInstance<Objective_requirement_usageContext>(_ctx, getState());
  enterRule(_localctx, 524, SysMLv2Parser::RuleObjective_requirement_usage);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2846);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SysMLv2Parser::SYMBOL_HASHTAG) {
      setState(2843);
      usage_extention_keyword();
      setState(2848);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2849);
    constraint_usage_declaration();
    setState(2850);
    requirement_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Analysis_case_definitionContext ------------------------------------------------------------------

SysMLv2Parser::Analysis_case_definitionContext::Analysis_case_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Occurrence_definition_prefixContext* SysMLv2Parser::Analysis_case_definitionContext::occurrence_definition_prefix() {
  return getRuleContext<SysMLv2Parser::Occurrence_definition_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Analysis_case_definitionContext::KEYWORD_ANALYSIS() {
  return getToken(SysMLv2Parser::KEYWORD_ANALYSIS, 0);
}

tree::TerminalNode* SysMLv2Parser::Analysis_case_definitionContext::KEYWORD_DEF() {
  return getToken(SysMLv2Parser::KEYWORD_DEF, 0);
}

SysMLv2Parser::Definition_declarationContext* SysMLv2Parser::Analysis_case_definitionContext::definition_declaration() {
  return getRuleContext<SysMLv2Parser::Definition_declarationContext>(0);
}

SysMLv2Parser::Case_bodyContext* SysMLv2Parser::Analysis_case_definitionContext::case_body() {
  return getRuleContext<SysMLv2Parser::Case_bodyContext>(0);
}


size_t SysMLv2Parser::Analysis_case_definitionContext::getRuleIndex() const {
  return SysMLv2Parser::RuleAnalysis_case_definition;
}

void SysMLv2Parser::Analysis_case_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnalysis_case_definition(this);
}

void SysMLv2Parser::Analysis_case_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnalysis_case_definition(this);
}

SysMLv2Parser::Analysis_case_definitionContext* SysMLv2Parser::analysis_case_definition() {
  Analysis_case_definitionContext *_localctx = _tracker.createInstance<Analysis_case_definitionContext>(_ctx, getState());
  enterRule(_localctx, 526, SysMLv2Parser::RuleAnalysis_case_definition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2852);
    occurrence_definition_prefix();
    setState(2853);
    match(SysMLv2Parser::KEYWORD_ANALYSIS);
    setState(2854);
    match(SysMLv2Parser::KEYWORD_DEF);
    setState(2855);
    definition_declaration();
    setState(2856);
    case_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Analysis_case_usageContext ------------------------------------------------------------------

SysMLv2Parser::Analysis_case_usageContext::Analysis_case_usageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Occurrence_usage_prefixContext* SysMLv2Parser::Analysis_case_usageContext::occurrence_usage_prefix() {
  return getRuleContext<SysMLv2Parser::Occurrence_usage_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Analysis_case_usageContext::KEYWORD_ANALYSIS() {
  return getToken(SysMLv2Parser::KEYWORD_ANALYSIS, 0);
}

SysMLv2Parser::Constraint_usage_declarationContext* SysMLv2Parser::Analysis_case_usageContext::constraint_usage_declaration() {
  return getRuleContext<SysMLv2Parser::Constraint_usage_declarationContext>(0);
}

SysMLv2Parser::Case_bodyContext* SysMLv2Parser::Analysis_case_usageContext::case_body() {
  return getRuleContext<SysMLv2Parser::Case_bodyContext>(0);
}


size_t SysMLv2Parser::Analysis_case_usageContext::getRuleIndex() const {
  return SysMLv2Parser::RuleAnalysis_case_usage;
}

void SysMLv2Parser::Analysis_case_usageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnalysis_case_usage(this);
}

void SysMLv2Parser::Analysis_case_usageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnalysis_case_usage(this);
}

SysMLv2Parser::Analysis_case_usageContext* SysMLv2Parser::analysis_case_usage() {
  Analysis_case_usageContext *_localctx = _tracker.createInstance<Analysis_case_usageContext>(_ctx, getState());
  enterRule(_localctx, 528, SysMLv2Parser::RuleAnalysis_case_usage);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2858);
    occurrence_usage_prefix();
    setState(2859);
    match(SysMLv2Parser::KEYWORD_ANALYSIS);
    setState(2860);
    constraint_usage_declaration();
    setState(2861);
    case_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Verification_case_definitionContext ------------------------------------------------------------------

SysMLv2Parser::Verification_case_definitionContext::Verification_case_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Occurrence_definition_prefixContext* SysMLv2Parser::Verification_case_definitionContext::occurrence_definition_prefix() {
  return getRuleContext<SysMLv2Parser::Occurrence_definition_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Verification_case_definitionContext::KEYWORD_VERIFICATION() {
  return getToken(SysMLv2Parser::KEYWORD_VERIFICATION, 0);
}

tree::TerminalNode* SysMLv2Parser::Verification_case_definitionContext::KEYWORD_DEF() {
  return getToken(SysMLv2Parser::KEYWORD_DEF, 0);
}

SysMLv2Parser::Definition_declarationContext* SysMLv2Parser::Verification_case_definitionContext::definition_declaration() {
  return getRuleContext<SysMLv2Parser::Definition_declarationContext>(0);
}

SysMLv2Parser::Case_bodyContext* SysMLv2Parser::Verification_case_definitionContext::case_body() {
  return getRuleContext<SysMLv2Parser::Case_bodyContext>(0);
}


size_t SysMLv2Parser::Verification_case_definitionContext::getRuleIndex() const {
  return SysMLv2Parser::RuleVerification_case_definition;
}

void SysMLv2Parser::Verification_case_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVerification_case_definition(this);
}

void SysMLv2Parser::Verification_case_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVerification_case_definition(this);
}

SysMLv2Parser::Verification_case_definitionContext* SysMLv2Parser::verification_case_definition() {
  Verification_case_definitionContext *_localctx = _tracker.createInstance<Verification_case_definitionContext>(_ctx, getState());
  enterRule(_localctx, 530, SysMLv2Parser::RuleVerification_case_definition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2863);
    occurrence_definition_prefix();
    setState(2864);
    match(SysMLv2Parser::KEYWORD_VERIFICATION);
    setState(2865);
    match(SysMLv2Parser::KEYWORD_DEF);
    setState(2866);
    definition_declaration();
    setState(2867);
    case_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Verification_case_usageContext ------------------------------------------------------------------

SysMLv2Parser::Verification_case_usageContext::Verification_case_usageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Occurrence_usage_prefixContext* SysMLv2Parser::Verification_case_usageContext::occurrence_usage_prefix() {
  return getRuleContext<SysMLv2Parser::Occurrence_usage_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Verification_case_usageContext::KEYWORD_VERIFICATION() {
  return getToken(SysMLv2Parser::KEYWORD_VERIFICATION, 0);
}

SysMLv2Parser::Constraint_usage_declarationContext* SysMLv2Parser::Verification_case_usageContext::constraint_usage_declaration() {
  return getRuleContext<SysMLv2Parser::Constraint_usage_declarationContext>(0);
}

SysMLv2Parser::Case_bodyContext* SysMLv2Parser::Verification_case_usageContext::case_body() {
  return getRuleContext<SysMLv2Parser::Case_bodyContext>(0);
}


size_t SysMLv2Parser::Verification_case_usageContext::getRuleIndex() const {
  return SysMLv2Parser::RuleVerification_case_usage;
}

void SysMLv2Parser::Verification_case_usageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVerification_case_usage(this);
}

void SysMLv2Parser::Verification_case_usageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVerification_case_usage(this);
}

SysMLv2Parser::Verification_case_usageContext* SysMLv2Parser::verification_case_usage() {
  Verification_case_usageContext *_localctx = _tracker.createInstance<Verification_case_usageContext>(_ctx, getState());
  enterRule(_localctx, 532, SysMLv2Parser::RuleVerification_case_usage);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2869);
    occurrence_usage_prefix();
    setState(2870);
    match(SysMLv2Parser::KEYWORD_VERIFICATION);
    setState(2871);
    constraint_usage_declaration();
    setState(2872);
    case_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Requirement_verification_memberContext ------------------------------------------------------------------

SysMLv2Parser::Requirement_verification_memberContext::Requirement_verification_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Member_prefixContext* SysMLv2Parser::Requirement_verification_memberContext::member_prefix() {
  return getRuleContext<SysMLv2Parser::Member_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Requirement_verification_memberContext::KEYWORD_VERIFY() {
  return getToken(SysMLv2Parser::KEYWORD_VERIFY, 0);
}

SysMLv2Parser::Requirement_verification_usageContext* SysMLv2Parser::Requirement_verification_memberContext::requirement_verification_usage() {
  return getRuleContext<SysMLv2Parser::Requirement_verification_usageContext>(0);
}


size_t SysMLv2Parser::Requirement_verification_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleRequirement_verification_member;
}

void SysMLv2Parser::Requirement_verification_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRequirement_verification_member(this);
}

void SysMLv2Parser::Requirement_verification_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRequirement_verification_member(this);
}

SysMLv2Parser::Requirement_verification_memberContext* SysMLv2Parser::requirement_verification_member() {
  Requirement_verification_memberContext *_localctx = _tracker.createInstance<Requirement_verification_memberContext>(_ctx, getState());
  enterRule(_localctx, 534, SysMLv2Parser::RuleRequirement_verification_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2874);
    member_prefix();
    setState(2875);
    match(SysMLv2Parser::KEYWORD_VERIFY);
    //TODO LÖsung finden kind = 'requirement'
    setState(2877);
    requirement_verification_usage();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Requirement_verification_usageContext ------------------------------------------------------------------

SysMLv2Parser::Requirement_verification_usageContext::Requirement_verification_usageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Owned_reference_subsettingContext* SysMLv2Parser::Requirement_verification_usageContext::owned_reference_subsetting() {
  return getRuleContext<SysMLv2Parser::Owned_reference_subsettingContext>(0);
}

SysMLv2Parser::Requirement_bodyContext* SysMLv2Parser::Requirement_verification_usageContext::requirement_body() {
  return getRuleContext<SysMLv2Parser::Requirement_bodyContext>(0);
}

std::vector<SysMLv2Parser::Feature_specilizationContext *> SysMLv2Parser::Requirement_verification_usageContext::feature_specilization() {
  return getRuleContexts<SysMLv2Parser::Feature_specilizationContext>();
}

SysMLv2Parser::Feature_specilizationContext* SysMLv2Parser::Requirement_verification_usageContext::feature_specilization(size_t i) {
  return getRuleContext<SysMLv2Parser::Feature_specilizationContext>(i);
}

SysMLv2Parser::Constraint_usage_declarationContext* SysMLv2Parser::Requirement_verification_usageContext::constraint_usage_declaration() {
  return getRuleContext<SysMLv2Parser::Constraint_usage_declarationContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Requirement_verification_usageContext::KEYWORD_REQUIREMENT() {
  return getToken(SysMLv2Parser::KEYWORD_REQUIREMENT, 0);
}

std::vector<SysMLv2Parser::Usage_extention_keywordContext *> SysMLv2Parser::Requirement_verification_usageContext::usage_extention_keyword() {
  return getRuleContexts<SysMLv2Parser::Usage_extention_keywordContext>();
}

SysMLv2Parser::Usage_extention_keywordContext* SysMLv2Parser::Requirement_verification_usageContext::usage_extention_keyword(size_t i) {
  return getRuleContext<SysMLv2Parser::Usage_extention_keywordContext>(i);
}


size_t SysMLv2Parser::Requirement_verification_usageContext::getRuleIndex() const {
  return SysMLv2Parser::RuleRequirement_verification_usage;
}

void SysMLv2Parser::Requirement_verification_usageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRequirement_verification_usage(this);
}

void SysMLv2Parser::Requirement_verification_usageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRequirement_verification_usage(this);
}

SysMLv2Parser::Requirement_verification_usageContext* SysMLv2Parser::requirement_verification_usage() {
  Requirement_verification_usageContext *_localctx = _tracker.createInstance<Requirement_verification_usageContext>(_ctx, getState());
  enterRule(_localctx, 536, SysMLv2Parser::RuleRequirement_verification_usage);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2905);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SysMLv2Parser::NAME: {
        enterOuterAlt(_localctx, 1);
        setState(2879);
        owned_reference_subsetting();
        setState(2883);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (((((_la - 83) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 83)) & 3377699720527901) != 0) || _la == SysMLv2Parser::KEYWORD_OUT) {
          setState(2880);
          feature_specilization();
          setState(2885);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(2886);
        requirement_body();
        break;
      }

      case SysMLv2Parser::KEYWORD_REQUIREMENT:
      case SysMLv2Parser::SYMBOL_HASHTAG: {
        enterOuterAlt(_localctx, 2);
        setState(2900);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 241, _ctx)) {
        case 1: {
          setState(2891);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while (_la == SysMLv2Parser::SYMBOL_HASHTAG) {
            setState(2888);
            usage_extention_keyword();
            setState(2893);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
          setState(2894);
          match(SysMLv2Parser::KEYWORD_REQUIREMENT);
          break;
        }

        case 2: {
          setState(2896); 
          _errHandler->sync(this);
          _la = _input->LA(1);
          do {
            setState(2895);
            usage_extention_keyword();
            setState(2898); 
            _errHandler->sync(this);
            _la = _input->LA(1);
          } while (_la == SysMLv2Parser::SYMBOL_HASHTAG);
          break;
        }

        default:
          break;
        }
        setState(2902);
        constraint_usage_declaration();
        setState(2903);
        requirement_body();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Use_case_definitionContext ------------------------------------------------------------------

SysMLv2Parser::Use_case_definitionContext::Use_case_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Occurrence_definition_prefixContext* SysMLv2Parser::Use_case_definitionContext::occurrence_definition_prefix() {
  return getRuleContext<SysMLv2Parser::Occurrence_definition_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Use_case_definitionContext::KEYWORD_USE() {
  return getToken(SysMLv2Parser::KEYWORD_USE, 0);
}

tree::TerminalNode* SysMLv2Parser::Use_case_definitionContext::KEYWORD_CASE() {
  return getToken(SysMLv2Parser::KEYWORD_CASE, 0);
}

tree::TerminalNode* SysMLv2Parser::Use_case_definitionContext::KEYWORD_DEF() {
  return getToken(SysMLv2Parser::KEYWORD_DEF, 0);
}

SysMLv2Parser::Definition_declarationContext* SysMLv2Parser::Use_case_definitionContext::definition_declaration() {
  return getRuleContext<SysMLv2Parser::Definition_declarationContext>(0);
}

SysMLv2Parser::Case_bodyContext* SysMLv2Parser::Use_case_definitionContext::case_body() {
  return getRuleContext<SysMLv2Parser::Case_bodyContext>(0);
}


size_t SysMLv2Parser::Use_case_definitionContext::getRuleIndex() const {
  return SysMLv2Parser::RuleUse_case_definition;
}

void SysMLv2Parser::Use_case_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUse_case_definition(this);
}

void SysMLv2Parser::Use_case_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUse_case_definition(this);
}

SysMLv2Parser::Use_case_definitionContext* SysMLv2Parser::use_case_definition() {
  Use_case_definitionContext *_localctx = _tracker.createInstance<Use_case_definitionContext>(_ctx, getState());
  enterRule(_localctx, 538, SysMLv2Parser::RuleUse_case_definition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2907);
    occurrence_definition_prefix();
    setState(2908);
    match(SysMLv2Parser::KEYWORD_USE);
    setState(2909);
    match(SysMLv2Parser::KEYWORD_CASE);
    setState(2910);
    match(SysMLv2Parser::KEYWORD_DEF);
    setState(2911);
    definition_declaration();
    setState(2912);
    case_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Use_case_usageContext ------------------------------------------------------------------

SysMLv2Parser::Use_case_usageContext::Use_case_usageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Occurrence_usage_prefixContext* SysMLv2Parser::Use_case_usageContext::occurrence_usage_prefix() {
  return getRuleContext<SysMLv2Parser::Occurrence_usage_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Use_case_usageContext::KEYWORD_USE() {
  return getToken(SysMLv2Parser::KEYWORD_USE, 0);
}

tree::TerminalNode* SysMLv2Parser::Use_case_usageContext::KEYWORD_CASE() {
  return getToken(SysMLv2Parser::KEYWORD_CASE, 0);
}

SysMLv2Parser::Constraint_usage_declarationContext* SysMLv2Parser::Use_case_usageContext::constraint_usage_declaration() {
  return getRuleContext<SysMLv2Parser::Constraint_usage_declarationContext>(0);
}

SysMLv2Parser::Case_bodyContext* SysMLv2Parser::Use_case_usageContext::case_body() {
  return getRuleContext<SysMLv2Parser::Case_bodyContext>(0);
}


size_t SysMLv2Parser::Use_case_usageContext::getRuleIndex() const {
  return SysMLv2Parser::RuleUse_case_usage;
}

void SysMLv2Parser::Use_case_usageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUse_case_usage(this);
}

void SysMLv2Parser::Use_case_usageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUse_case_usage(this);
}

SysMLv2Parser::Use_case_usageContext* SysMLv2Parser::use_case_usage() {
  Use_case_usageContext *_localctx = _tracker.createInstance<Use_case_usageContext>(_ctx, getState());
  enterRule(_localctx, 540, SysMLv2Parser::RuleUse_case_usage);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2914);
    occurrence_usage_prefix();
    setState(2915);
    match(SysMLv2Parser::KEYWORD_USE);
    setState(2916);
    match(SysMLv2Parser::KEYWORD_CASE);
    setState(2917);
    constraint_usage_declaration();
    setState(2918);
    case_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Include_use_case_usageContext ------------------------------------------------------------------

SysMLv2Parser::Include_use_case_usageContext::Include_use_case_usageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Occurrence_usage_prefixContext* SysMLv2Parser::Include_use_case_usageContext::occurrence_usage_prefix() {
  return getRuleContext<SysMLv2Parser::Occurrence_usage_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Include_use_case_usageContext::KEYWORD_INCLUDE() {
  return getToken(SysMLv2Parser::KEYWORD_INCLUDE, 0);
}

SysMLv2Parser::Case_bodyContext* SysMLv2Parser::Include_use_case_usageContext::case_body() {
  return getRuleContext<SysMLv2Parser::Case_bodyContext>(0);
}

SysMLv2Parser::Owned_reference_subsettingContext* SysMLv2Parser::Include_use_case_usageContext::owned_reference_subsetting() {
  return getRuleContext<SysMLv2Parser::Owned_reference_subsettingContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Include_use_case_usageContext::KEYWORD_USE() {
  return getToken(SysMLv2Parser::KEYWORD_USE, 0);
}

tree::TerminalNode* SysMLv2Parser::Include_use_case_usageContext::KEYWORD_CASE() {
  return getToken(SysMLv2Parser::KEYWORD_CASE, 0);
}

SysMLv2Parser::Usage_declarationContext* SysMLv2Parser::Include_use_case_usageContext::usage_declaration() {
  return getRuleContext<SysMLv2Parser::Usage_declarationContext>(0);
}

SysMLv2Parser::Value_partContext* SysMLv2Parser::Include_use_case_usageContext::value_part() {
  return getRuleContext<SysMLv2Parser::Value_partContext>(0);
}

SysMLv2Parser::Feature_specialization_partContext* SysMLv2Parser::Include_use_case_usageContext::feature_specialization_part() {
  return getRuleContext<SysMLv2Parser::Feature_specialization_partContext>(0);
}


size_t SysMLv2Parser::Include_use_case_usageContext::getRuleIndex() const {
  return SysMLv2Parser::RuleInclude_use_case_usage;
}

void SysMLv2Parser::Include_use_case_usageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInclude_use_case_usage(this);
}

void SysMLv2Parser::Include_use_case_usageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInclude_use_case_usage(this);
}

SysMLv2Parser::Include_use_case_usageContext* SysMLv2Parser::include_use_case_usage() {
  Include_use_case_usageContext *_localctx = _tracker.createInstance<Include_use_case_usageContext>(_ctx, getState());
  enterRule(_localctx, 542, SysMLv2Parser::RuleInclude_use_case_usage);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2920);
    occurrence_usage_prefix();
    setState(2921);
    match(SysMLv2Parser::KEYWORD_INCLUDE);
    setState(2929);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SysMLv2Parser::NAME: {
        setState(2922);
        owned_reference_subsetting();
        setState(2924);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (((((_la - 83) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 83)) & 3377699720527901) != 0) || _la == SysMLv2Parser::KEYWORD_OUT

        || _la == SysMLv2Parser::SYMBOL_SQUARE_BRACKET_OPEN) {
          setState(2923);
          feature_specialization_part();
        }
        break;
      }

      case SysMLv2Parser::KEYWORD_USE: {
        setState(2926);
        match(SysMLv2Parser::KEYWORD_USE);
        setState(2927);
        match(SysMLv2Parser::KEYWORD_CASE);
        setState(2928);
        usage_declaration();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(2932);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_DEFAULT || _la == SysMLv2Parser::SYMBOL_DEF_ASSIGN

    || _la == SysMLv2Parser::SYMBOL_EQUALS) {
      setState(2931);
      value_part();
    }
    setState(2934);
    case_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- View_definitionContext ------------------------------------------------------------------

SysMLv2Parser::View_definitionContext::View_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Occurrence_definition_prefixContext* SysMLv2Parser::View_definitionContext::occurrence_definition_prefix() {
  return getRuleContext<SysMLv2Parser::Occurrence_definition_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::View_definitionContext::KEYWORD_VIEW() {
  return getToken(SysMLv2Parser::KEYWORD_VIEW, 0);
}

tree::TerminalNode* SysMLv2Parser::View_definitionContext::KEYWORD_DEF() {
  return getToken(SysMLv2Parser::KEYWORD_DEF, 0);
}

SysMLv2Parser::Definition_declarationContext* SysMLv2Parser::View_definitionContext::definition_declaration() {
  return getRuleContext<SysMLv2Parser::Definition_declarationContext>(0);
}

SysMLv2Parser::View_definition_bodyContext* SysMLv2Parser::View_definitionContext::view_definition_body() {
  return getRuleContext<SysMLv2Parser::View_definition_bodyContext>(0);
}


size_t SysMLv2Parser::View_definitionContext::getRuleIndex() const {
  return SysMLv2Parser::RuleView_definition;
}

void SysMLv2Parser::View_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterView_definition(this);
}

void SysMLv2Parser::View_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitView_definition(this);
}

SysMLv2Parser::View_definitionContext* SysMLv2Parser::view_definition() {
  View_definitionContext *_localctx = _tracker.createInstance<View_definitionContext>(_ctx, getState());
  enterRule(_localctx, 544, SysMLv2Parser::RuleView_definition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2936);
    occurrence_definition_prefix();
    setState(2937);
    match(SysMLv2Parser::KEYWORD_VIEW);
    setState(2938);
    match(SysMLv2Parser::KEYWORD_DEF);
    setState(2939);
    definition_declaration();
    setState(2940);
    view_definition_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- View_definition_bodyContext ------------------------------------------------------------------

SysMLv2Parser::View_definition_bodyContext::View_definition_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::View_definition_bodyContext::SYMBOL_STATEMENT_DELIMITER() {
  return getToken(SysMLv2Parser::SYMBOL_STATEMENT_DELIMITER, 0);
}

std::vector<tree::TerminalNode *> SysMLv2Parser::View_definition_bodyContext::SYMBOL_CURLY_BRACKET_OPEN() {
  return getTokens(SysMLv2Parser::SYMBOL_CURLY_BRACKET_OPEN);
}

tree::TerminalNode* SysMLv2Parser::View_definition_bodyContext::SYMBOL_CURLY_BRACKET_OPEN(size_t i) {
  return getToken(SysMLv2Parser::SYMBOL_CURLY_BRACKET_OPEN, i);
}

std::vector<SysMLv2Parser::View_definition_body_itemContext *> SysMLv2Parser::View_definition_bodyContext::view_definition_body_item() {
  return getRuleContexts<SysMLv2Parser::View_definition_body_itemContext>();
}

SysMLv2Parser::View_definition_body_itemContext* SysMLv2Parser::View_definition_bodyContext::view_definition_body_item(size_t i) {
  return getRuleContext<SysMLv2Parser::View_definition_body_itemContext>(i);
}


size_t SysMLv2Parser::View_definition_bodyContext::getRuleIndex() const {
  return SysMLv2Parser::RuleView_definition_body;
}

void SysMLv2Parser::View_definition_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterView_definition_body(this);
}

void SysMLv2Parser::View_definition_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitView_definition_body(this);
}

SysMLv2Parser::View_definition_bodyContext* SysMLv2Parser::view_definition_body() {
  View_definition_bodyContext *_localctx = _tracker.createInstance<View_definition_bodyContext>(_ctx, getState());
  enterRule(_localctx, 546, SysMLv2Parser::RuleView_definition_body);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(2951);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SysMLv2Parser::SYMBOL_STATEMENT_DELIMITER: {
        enterOuterAlt(_localctx, 1);
        setState(2942);
        match(SysMLv2Parser::SYMBOL_STATEMENT_DELIMITER);
        break;
      }

      case SysMLv2Parser::SYMBOL_CURLY_BRACKET_OPEN: {
        enterOuterAlt(_localctx, 2);
        setState(2943);
        match(SysMLv2Parser::SYMBOL_CURLY_BRACKET_OPEN);
        setState(2947);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 246, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(2944);
            view_definition_body_item(); 
          }
          setState(2949);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 246, _ctx);
        }
        setState(2950);
        match(SysMLv2Parser::SYMBOL_CURLY_BRACKET_OPEN);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- View_definition_body_itemContext ------------------------------------------------------------------

SysMLv2Parser::View_definition_body_itemContext::View_definition_body_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Definition_body_itemContext* SysMLv2Parser::View_definition_body_itemContext::definition_body_item() {
  return getRuleContext<SysMLv2Parser::Definition_body_itemContext>(0);
}

SysMLv2Parser::Element_filter_memberContext* SysMLv2Parser::View_definition_body_itemContext::element_filter_member() {
  return getRuleContext<SysMLv2Parser::Element_filter_memberContext>(0);
}

SysMLv2Parser::View_rendering_memberContext* SysMLv2Parser::View_definition_body_itemContext::view_rendering_member() {
  return getRuleContext<SysMLv2Parser::View_rendering_memberContext>(0);
}


size_t SysMLv2Parser::View_definition_body_itemContext::getRuleIndex() const {
  return SysMLv2Parser::RuleView_definition_body_item;
}

void SysMLv2Parser::View_definition_body_itemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterView_definition_body_item(this);
}

void SysMLv2Parser::View_definition_body_itemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitView_definition_body_item(this);
}

SysMLv2Parser::View_definition_body_itemContext* SysMLv2Parser::view_definition_body_item() {
  View_definition_body_itemContext *_localctx = _tracker.createInstance<View_definition_body_itemContext>(_ctx, getState());
  enterRule(_localctx, 548, SysMLv2Parser::RuleView_definition_body_item);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2956);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 248, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2953);
      definition_body_item();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2954);
      element_filter_member();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2955);
      view_rendering_member();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- View_rendering_memberContext ------------------------------------------------------------------

SysMLv2Parser::View_rendering_memberContext::View_rendering_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Member_prefixContext* SysMLv2Parser::View_rendering_memberContext::member_prefix() {
  return getRuleContext<SysMLv2Parser::Member_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::View_rendering_memberContext::KEYWORD_RENDER() {
  return getToken(SysMLv2Parser::KEYWORD_RENDER, 0);
}

SysMLv2Parser::View_rendering_usageContext* SysMLv2Parser::View_rendering_memberContext::view_rendering_usage() {
  return getRuleContext<SysMLv2Parser::View_rendering_usageContext>(0);
}


size_t SysMLv2Parser::View_rendering_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleView_rendering_member;
}

void SysMLv2Parser::View_rendering_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterView_rendering_member(this);
}

void SysMLv2Parser::View_rendering_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitView_rendering_member(this);
}

SysMLv2Parser::View_rendering_memberContext* SysMLv2Parser::view_rendering_member() {
  View_rendering_memberContext *_localctx = _tracker.createInstance<View_rendering_memberContext>(_ctx, getState());
  enterRule(_localctx, 550, SysMLv2Parser::RuleView_rendering_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2958);
    member_prefix();
    setState(2959);
    match(SysMLv2Parser::KEYWORD_RENDER);
    setState(2960);
    view_rendering_usage();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- View_rendering_usageContext ------------------------------------------------------------------

SysMLv2Parser::View_rendering_usageContext::View_rendering_usageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Owned_reference_subsettingContext* SysMLv2Parser::View_rendering_usageContext::owned_reference_subsetting() {
  return getRuleContext<SysMLv2Parser::Owned_reference_subsettingContext>(0);
}

SysMLv2Parser::Usage_bodyContext* SysMLv2Parser::View_rendering_usageContext::usage_body() {
  return getRuleContext<SysMLv2Parser::Usage_bodyContext>(0);
}

SysMLv2Parser::Feature_specialization_partContext* SysMLv2Parser::View_rendering_usageContext::feature_specialization_part() {
  return getRuleContext<SysMLv2Parser::Feature_specialization_partContext>(0);
}

SysMLv2Parser::UsageContext* SysMLv2Parser::View_rendering_usageContext::usage() {
  return getRuleContext<SysMLv2Parser::UsageContext>(0);
}

tree::TerminalNode* SysMLv2Parser::View_rendering_usageContext::KEYWORD_RENDERING() {
  return getToken(SysMLv2Parser::KEYWORD_RENDERING, 0);
}

std::vector<SysMLv2Parser::Usage_extention_keywordContext *> SysMLv2Parser::View_rendering_usageContext::usage_extention_keyword() {
  return getRuleContexts<SysMLv2Parser::Usage_extention_keywordContext>();
}

SysMLv2Parser::Usage_extention_keywordContext* SysMLv2Parser::View_rendering_usageContext::usage_extention_keyword(size_t i) {
  return getRuleContext<SysMLv2Parser::Usage_extention_keywordContext>(i);
}


size_t SysMLv2Parser::View_rendering_usageContext::getRuleIndex() const {
  return SysMLv2Parser::RuleView_rendering_usage;
}

void SysMLv2Parser::View_rendering_usageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterView_rendering_usage(this);
}

void SysMLv2Parser::View_rendering_usageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitView_rendering_usage(this);
}

SysMLv2Parser::View_rendering_usageContext* SysMLv2Parser::view_rendering_usage() {
  View_rendering_usageContext *_localctx = _tracker.createInstance<View_rendering_usageContext>(_ctx, getState());
  enterRule(_localctx, 552, SysMLv2Parser::RuleView_rendering_usage);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2983);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SysMLv2Parser::NAME: {
        enterOuterAlt(_localctx, 1);
        setState(2962);
        owned_reference_subsetting();
        setState(2964);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (((((_la - 83) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 83)) & 3377699720527901) != 0) || _la == SysMLv2Parser::KEYWORD_OUT

        || _la == SysMLv2Parser::SYMBOL_SQUARE_BRACKET_OPEN) {
          setState(2963);
          feature_specialization_part();
        }
        setState(2966);
        usage_body();
        break;
      }

      case SysMLv2Parser::KEYWORD_RENDERING:
      case SysMLv2Parser::SYMBOL_HASHTAG: {
        enterOuterAlt(_localctx, 2);
        setState(2980);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 252, _ctx)) {
        case 1: {
          setState(2971);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while (_la == SysMLv2Parser::SYMBOL_HASHTAG) {
            setState(2968);
            usage_extention_keyword();
            setState(2973);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
          setState(2974);
          match(SysMLv2Parser::KEYWORD_RENDERING);
          break;
        }

        case 2: {
          setState(2976); 
          _errHandler->sync(this);
          _la = _input->LA(1);
          do {
            setState(2975);
            usage_extention_keyword();
            setState(2978); 
            _errHandler->sync(this);
            _la = _input->LA(1);
          } while (_la == SysMLv2Parser::SYMBOL_HASHTAG);
          break;
        }

        default:
          break;
        }
        setState(2982);
        usage();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- View_usageContext ------------------------------------------------------------------

SysMLv2Parser::View_usageContext::View_usageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Occurrence_usage_prefixContext* SysMLv2Parser::View_usageContext::occurrence_usage_prefix() {
  return getRuleContext<SysMLv2Parser::Occurrence_usage_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::View_usageContext::KEYWORD_VIEW() {
  return getToken(SysMLv2Parser::KEYWORD_VIEW, 0);
}

SysMLv2Parser::View_bodyContext* SysMLv2Parser::View_usageContext::view_body() {
  return getRuleContext<SysMLv2Parser::View_bodyContext>(0);
}

SysMLv2Parser::Usage_declarationContext* SysMLv2Parser::View_usageContext::usage_declaration() {
  return getRuleContext<SysMLv2Parser::Usage_declarationContext>(0);
}

SysMLv2Parser::Value_partContext* SysMLv2Parser::View_usageContext::value_part() {
  return getRuleContext<SysMLv2Parser::Value_partContext>(0);
}


size_t SysMLv2Parser::View_usageContext::getRuleIndex() const {
  return SysMLv2Parser::RuleView_usage;
}

void SysMLv2Parser::View_usageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterView_usage(this);
}

void SysMLv2Parser::View_usageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitView_usage(this);
}

SysMLv2Parser::View_usageContext* SysMLv2Parser::view_usage() {
  View_usageContext *_localctx = _tracker.createInstance<View_usageContext>(_ctx, getState());
  enterRule(_localctx, 554, SysMLv2Parser::RuleView_usage);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2985);
    occurrence_usage_prefix();
    setState(2986);
    match(SysMLv2Parser::KEYWORD_VIEW);
    setState(2988);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 254, _ctx)) {
    case 1: {
      setState(2987);
      usage_declaration();
      break;
    }

    default:
      break;
    }
    setState(2991);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_DEFAULT || _la == SysMLv2Parser::SYMBOL_DEF_ASSIGN

    || _la == SysMLv2Parser::SYMBOL_EQUALS) {
      setState(2990);
      value_part();
    }
    setState(2993);
    view_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- View_bodyContext ------------------------------------------------------------------

SysMLv2Parser::View_bodyContext::View_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::View_bodyContext::SYMBOL_STATEMENT_DELIMITER() {
  return getToken(SysMLv2Parser::SYMBOL_STATEMENT_DELIMITER, 0);
}

tree::TerminalNode* SysMLv2Parser::View_bodyContext::SYMBOL_CURLY_BRACKET_OPEN() {
  return getToken(SysMLv2Parser::SYMBOL_CURLY_BRACKET_OPEN, 0);
}

tree::TerminalNode* SysMLv2Parser::View_bodyContext::SYMBOL_CURLY_BRACKET_CLOSE() {
  return getToken(SysMLv2Parser::SYMBOL_CURLY_BRACKET_CLOSE, 0);
}

std::vector<SysMLv2Parser::View_body_itemContext *> SysMLv2Parser::View_bodyContext::view_body_item() {
  return getRuleContexts<SysMLv2Parser::View_body_itemContext>();
}

SysMLv2Parser::View_body_itemContext* SysMLv2Parser::View_bodyContext::view_body_item(size_t i) {
  return getRuleContext<SysMLv2Parser::View_body_itemContext>(i);
}


size_t SysMLv2Parser::View_bodyContext::getRuleIndex() const {
  return SysMLv2Parser::RuleView_body;
}

void SysMLv2Parser::View_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterView_body(this);
}

void SysMLv2Parser::View_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitView_body(this);
}

SysMLv2Parser::View_bodyContext* SysMLv2Parser::view_body() {
  View_bodyContext *_localctx = _tracker.createInstance<View_bodyContext>(_ctx, getState());
  enterRule(_localctx, 556, SysMLv2Parser::RuleView_body);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3004);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SysMLv2Parser::SYMBOL_STATEMENT_DELIMITER: {
        enterOuterAlt(_localctx, 1);
        setState(2995);
        match(SysMLv2Parser::SYMBOL_STATEMENT_DELIMITER);
        break;
      }

      case SysMLv2Parser::SYMBOL_CURLY_BRACKET_OPEN: {
        enterOuterAlt(_localctx, 2);
        setState(2996);
        match(SysMLv2Parser::SYMBOL_CURLY_BRACKET_OPEN);
        setState(3000);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & -7569267744185831648) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 65)) & 1011673982484375433) != 0) || ((((_la - 132) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 132)) & 620935448488315143) != 0) || ((((_la - 201) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 201)) & 2154037349) != 0)) {
          setState(2997);
          view_body_item();
          setState(3002);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(3003);
        match(SysMLv2Parser::SYMBOL_CURLY_BRACKET_CLOSE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- View_body_itemContext ------------------------------------------------------------------

SysMLv2Parser::View_body_itemContext::View_body_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Definition_body_itemContext* SysMLv2Parser::View_body_itemContext::definition_body_item() {
  return getRuleContext<SysMLv2Parser::Definition_body_itemContext>(0);
}

SysMLv2Parser::Element_filter_memberContext* SysMLv2Parser::View_body_itemContext::element_filter_member() {
  return getRuleContext<SysMLv2Parser::Element_filter_memberContext>(0);
}

SysMLv2Parser::View_rendering_memberContext* SysMLv2Parser::View_body_itemContext::view_rendering_member() {
  return getRuleContext<SysMLv2Parser::View_rendering_memberContext>(0);
}

SysMLv2Parser::ExposeContext* SysMLv2Parser::View_body_itemContext::expose() {
  return getRuleContext<SysMLv2Parser::ExposeContext>(0);
}


size_t SysMLv2Parser::View_body_itemContext::getRuleIndex() const {
  return SysMLv2Parser::RuleView_body_item;
}

void SysMLv2Parser::View_body_itemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterView_body_item(this);
}

void SysMLv2Parser::View_body_itemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitView_body_item(this);
}

SysMLv2Parser::View_body_itemContext* SysMLv2Parser::view_body_item() {
  View_body_itemContext *_localctx = _tracker.createInstance<View_body_itemContext>(_ctx, getState());
  enterRule(_localctx, 558, SysMLv2Parser::RuleView_body_item);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3010);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 258, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3006);
      definition_body_item();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3007);
      element_filter_member();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3008);
      view_rendering_member();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(3009);
      expose();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExposeContext ------------------------------------------------------------------

SysMLv2Parser::ExposeContext::ExposeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::ExposeContext::KEYWORD_EXPOSE() {
  return getToken(SysMLv2Parser::KEYWORD_EXPOSE, 0);
}

SysMLv2Parser::Relationship_bodyContext* SysMLv2Parser::ExposeContext::relationship_body() {
  return getRuleContext<SysMLv2Parser::Relationship_bodyContext>(0);
}

SysMLv2Parser::Membership_exposeContext* SysMLv2Parser::ExposeContext::membership_expose() {
  return getRuleContext<SysMLv2Parser::Membership_exposeContext>(0);
}

SysMLv2Parser::Namespace_exposeContext* SysMLv2Parser::ExposeContext::namespace_expose() {
  return getRuleContext<SysMLv2Parser::Namespace_exposeContext>(0);
}


size_t SysMLv2Parser::ExposeContext::getRuleIndex() const {
  return SysMLv2Parser::RuleExpose;
}

void SysMLv2Parser::ExposeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpose(this);
}

void SysMLv2Parser::ExposeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpose(this);
}

SysMLv2Parser::ExposeContext* SysMLv2Parser::expose() {
  ExposeContext *_localctx = _tracker.createInstance<ExposeContext>(_ctx, getState());
  enterRule(_localctx, 560, SysMLv2Parser::RuleExpose);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3012);
    match(SysMLv2Parser::KEYWORD_EXPOSE);
    setState(3015);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SysMLv2Parser::NAME: {
        setState(3013);
        membership_expose();
        break;
      }

      case SysMLv2Parser::KEYWORD_IMPORT:
      case SysMLv2Parser::KEYWORD_PRIVATE:
      case SysMLv2Parser::KEYWORD_PROTECTED:
      case SysMLv2Parser::KEYWORD_PUBLIC: {
        setState(3014);
        namespace_expose();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(3017);
    relationship_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Membership_exposeContext ------------------------------------------------------------------

SysMLv2Parser::Membership_exposeContext::Membership_exposeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Membership_importContext* SysMLv2Parser::Membership_exposeContext::membership_import() {
  return getRuleContext<SysMLv2Parser::Membership_importContext>(0);
}


size_t SysMLv2Parser::Membership_exposeContext::getRuleIndex() const {
  return SysMLv2Parser::RuleMembership_expose;
}

void SysMLv2Parser::Membership_exposeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMembership_expose(this);
}

void SysMLv2Parser::Membership_exposeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMembership_expose(this);
}

SysMLv2Parser::Membership_exposeContext* SysMLv2Parser::membership_expose() {
  Membership_exposeContext *_localctx = _tracker.createInstance<Membership_exposeContext>(_ctx, getState());
  enterRule(_localctx, 562, SysMLv2Parser::RuleMembership_expose);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3019);
    membership_import();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Namespace_exposeContext ------------------------------------------------------------------

SysMLv2Parser::Namespace_exposeContext::Namespace_exposeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Namespace_importContext* SysMLv2Parser::Namespace_exposeContext::namespace_import() {
  return getRuleContext<SysMLv2Parser::Namespace_importContext>(0);
}


size_t SysMLv2Parser::Namespace_exposeContext::getRuleIndex() const {
  return SysMLv2Parser::RuleNamespace_expose;
}

void SysMLv2Parser::Namespace_exposeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamespace_expose(this);
}

void SysMLv2Parser::Namespace_exposeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamespace_expose(this);
}

SysMLv2Parser::Namespace_exposeContext* SysMLv2Parser::namespace_expose() {
  Namespace_exposeContext *_localctx = _tracker.createInstance<Namespace_exposeContext>(_ctx, getState());
  enterRule(_localctx, 564, SysMLv2Parser::RuleNamespace_expose);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3021);
    namespace_import();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Viewpoint_definitionContext ------------------------------------------------------------------

SysMLv2Parser::Viewpoint_definitionContext::Viewpoint_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Occurrence_definition_prefixContext* SysMLv2Parser::Viewpoint_definitionContext::occurrence_definition_prefix() {
  return getRuleContext<SysMLv2Parser::Occurrence_definition_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Viewpoint_definitionContext::KEYWORD_VIEWPOINT() {
  return getToken(SysMLv2Parser::KEYWORD_VIEWPOINT, 0);
}

tree::TerminalNode* SysMLv2Parser::Viewpoint_definitionContext::KEYWORD_DEF() {
  return getToken(SysMLv2Parser::KEYWORD_DEF, 0);
}

SysMLv2Parser::Definition_declarationContext* SysMLv2Parser::Viewpoint_definitionContext::definition_declaration() {
  return getRuleContext<SysMLv2Parser::Definition_declarationContext>(0);
}

SysMLv2Parser::Requirement_bodyContext* SysMLv2Parser::Viewpoint_definitionContext::requirement_body() {
  return getRuleContext<SysMLv2Parser::Requirement_bodyContext>(0);
}


size_t SysMLv2Parser::Viewpoint_definitionContext::getRuleIndex() const {
  return SysMLv2Parser::RuleViewpoint_definition;
}

void SysMLv2Parser::Viewpoint_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterViewpoint_definition(this);
}

void SysMLv2Parser::Viewpoint_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitViewpoint_definition(this);
}

SysMLv2Parser::Viewpoint_definitionContext* SysMLv2Parser::viewpoint_definition() {
  Viewpoint_definitionContext *_localctx = _tracker.createInstance<Viewpoint_definitionContext>(_ctx, getState());
  enterRule(_localctx, 566, SysMLv2Parser::RuleViewpoint_definition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3023);
    occurrence_definition_prefix();
    setState(3024);
    match(SysMLv2Parser::KEYWORD_VIEWPOINT);
    setState(3025);
    match(SysMLv2Parser::KEYWORD_DEF);
    setState(3026);
    definition_declaration();
    setState(3027);
    requirement_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Viewpoint_usageContext ------------------------------------------------------------------

SysMLv2Parser::Viewpoint_usageContext::Viewpoint_usageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Occurrence_usage_prefixContext* SysMLv2Parser::Viewpoint_usageContext::occurrence_usage_prefix() {
  return getRuleContext<SysMLv2Parser::Occurrence_usage_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Viewpoint_usageContext::KEYWORD_VIEWPOINT() {
  return getToken(SysMLv2Parser::KEYWORD_VIEWPOINT, 0);
}

SysMLv2Parser::Constraint_usage_declarationContext* SysMLv2Parser::Viewpoint_usageContext::constraint_usage_declaration() {
  return getRuleContext<SysMLv2Parser::Constraint_usage_declarationContext>(0);
}

SysMLv2Parser::Requirement_bodyContext* SysMLv2Parser::Viewpoint_usageContext::requirement_body() {
  return getRuleContext<SysMLv2Parser::Requirement_bodyContext>(0);
}


size_t SysMLv2Parser::Viewpoint_usageContext::getRuleIndex() const {
  return SysMLv2Parser::RuleViewpoint_usage;
}

void SysMLv2Parser::Viewpoint_usageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterViewpoint_usage(this);
}

void SysMLv2Parser::Viewpoint_usageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitViewpoint_usage(this);
}

SysMLv2Parser::Viewpoint_usageContext* SysMLv2Parser::viewpoint_usage() {
  Viewpoint_usageContext *_localctx = _tracker.createInstance<Viewpoint_usageContext>(_ctx, getState());
  enterRule(_localctx, 568, SysMLv2Parser::RuleViewpoint_usage);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3029);
    occurrence_usage_prefix();
    setState(3030);
    match(SysMLv2Parser::KEYWORD_VIEWPOINT);
    setState(3031);
    constraint_usage_declaration();
    setState(3032);
    requirement_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Rendering_definitionContext ------------------------------------------------------------------

SysMLv2Parser::Rendering_definitionContext::Rendering_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Occurrence_definition_prefixContext* SysMLv2Parser::Rendering_definitionContext::occurrence_definition_prefix() {
  return getRuleContext<SysMLv2Parser::Occurrence_definition_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Rendering_definitionContext::KEYWORD_RENDERING() {
  return getToken(SysMLv2Parser::KEYWORD_RENDERING, 0);
}

tree::TerminalNode* SysMLv2Parser::Rendering_definitionContext::KEYWORD_DEF() {
  return getToken(SysMLv2Parser::KEYWORD_DEF, 0);
}

SysMLv2Parser::DefinitionContext* SysMLv2Parser::Rendering_definitionContext::definition() {
  return getRuleContext<SysMLv2Parser::DefinitionContext>(0);
}


size_t SysMLv2Parser::Rendering_definitionContext::getRuleIndex() const {
  return SysMLv2Parser::RuleRendering_definition;
}

void SysMLv2Parser::Rendering_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRendering_definition(this);
}

void SysMLv2Parser::Rendering_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRendering_definition(this);
}

SysMLv2Parser::Rendering_definitionContext* SysMLv2Parser::rendering_definition() {
  Rendering_definitionContext *_localctx = _tracker.createInstance<Rendering_definitionContext>(_ctx, getState());
  enterRule(_localctx, 570, SysMLv2Parser::RuleRendering_definition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3034);
    occurrence_definition_prefix();
    setState(3035);
    match(SysMLv2Parser::KEYWORD_RENDERING);
    setState(3036);
    match(SysMLv2Parser::KEYWORD_DEF);
    setState(3037);
    definition();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Rendering_usageContext ------------------------------------------------------------------

SysMLv2Parser::Rendering_usageContext::Rendering_usageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Occurrence_usage_prefixContext* SysMLv2Parser::Rendering_usageContext::occurrence_usage_prefix() {
  return getRuleContext<SysMLv2Parser::Occurrence_usage_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Rendering_usageContext::KEYWORD_RENDERING() {
  return getToken(SysMLv2Parser::KEYWORD_RENDERING, 0);
}

SysMLv2Parser::UsageContext* SysMLv2Parser::Rendering_usageContext::usage() {
  return getRuleContext<SysMLv2Parser::UsageContext>(0);
}


size_t SysMLv2Parser::Rendering_usageContext::getRuleIndex() const {
  return SysMLv2Parser::RuleRendering_usage;
}

void SysMLv2Parser::Rendering_usageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRendering_usage(this);
}

void SysMLv2Parser::Rendering_usageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRendering_usage(this);
}

SysMLv2Parser::Rendering_usageContext* SysMLv2Parser::rendering_usage() {
  Rendering_usageContext *_localctx = _tracker.createInstance<Rendering_usageContext>(_ctx, getState());
  enterRule(_localctx, 572, SysMLv2Parser::RuleRendering_usage);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3039);
    occurrence_usage_prefix();
    setState(3040);
    match(SysMLv2Parser::KEYWORD_RENDERING);
    setState(3041);
    usage();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Metadata_definitionContext ------------------------------------------------------------------

SysMLv2Parser::Metadata_definitionContext::Metadata_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Metadata_definitionContext::KEYWORD_METADATA() {
  return getToken(SysMLv2Parser::KEYWORD_METADATA, 0);
}

tree::TerminalNode* SysMLv2Parser::Metadata_definitionContext::KEYWORD_DEF() {
  return getToken(SysMLv2Parser::KEYWORD_DEF, 0);
}

SysMLv2Parser::DefinitionContext* SysMLv2Parser::Metadata_definitionContext::definition() {
  return getRuleContext<SysMLv2Parser::DefinitionContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Metadata_definitionContext::KEYWORD_ABSTRACT() {
  return getToken(SysMLv2Parser::KEYWORD_ABSTRACT, 0);
}

std::vector<SysMLv2Parser::Definition_extension_keywordContext *> SysMLv2Parser::Metadata_definitionContext::definition_extension_keyword() {
  return getRuleContexts<SysMLv2Parser::Definition_extension_keywordContext>();
}

SysMLv2Parser::Definition_extension_keywordContext* SysMLv2Parser::Metadata_definitionContext::definition_extension_keyword(size_t i) {
  return getRuleContext<SysMLv2Parser::Definition_extension_keywordContext>(i);
}


size_t SysMLv2Parser::Metadata_definitionContext::getRuleIndex() const {
  return SysMLv2Parser::RuleMetadata_definition;
}

void SysMLv2Parser::Metadata_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMetadata_definition(this);
}

void SysMLv2Parser::Metadata_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMetadata_definition(this);
}

SysMLv2Parser::Metadata_definitionContext* SysMLv2Parser::metadata_definition() {
  Metadata_definitionContext *_localctx = _tracker.createInstance<Metadata_definitionContext>(_ctx, getState());
  enterRule(_localctx, 574, SysMLv2Parser::RuleMetadata_definition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3044);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_ABSTRACT) {
      setState(3043);
      match(SysMLv2Parser::KEYWORD_ABSTRACT);
    }
    setState(3049);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SysMLv2Parser::SYMBOL_HASHTAG) {
      setState(3046);
      definition_extension_keyword();
      setState(3051);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(3052);
    match(SysMLv2Parser::KEYWORD_METADATA);
    setState(3053);
    match(SysMLv2Parser::KEYWORD_DEF);
    setState(3054);
    definition();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Prefix_metadata_annotationContext ------------------------------------------------------------------

SysMLv2Parser::Prefix_metadata_annotationContext::Prefix_metadata_annotationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Prefix_metadata_annotationContext::SYMBOL_HASHTAG() {
  return getToken(SysMLv2Parser::SYMBOL_HASHTAG, 0);
}

SysMLv2Parser::Prefix_metadata_usageContext* SysMLv2Parser::Prefix_metadata_annotationContext::prefix_metadata_usage() {
  return getRuleContext<SysMLv2Parser::Prefix_metadata_usageContext>(0);
}

SysMLv2Parser::Annotating_elementContext* SysMLv2Parser::Prefix_metadata_annotationContext::annotating_element() {
  return getRuleContext<SysMLv2Parser::Annotating_elementContext>(0);
}


size_t SysMLv2Parser::Prefix_metadata_annotationContext::getRuleIndex() const {
  return SysMLv2Parser::RulePrefix_metadata_annotation;
}

void SysMLv2Parser::Prefix_metadata_annotationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrefix_metadata_annotation(this);
}

void SysMLv2Parser::Prefix_metadata_annotationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrefix_metadata_annotation(this);
}

SysMLv2Parser::Prefix_metadata_annotationContext* SysMLv2Parser::prefix_metadata_annotation() {
  Prefix_metadata_annotationContext *_localctx = _tracker.createInstance<Prefix_metadata_annotationContext>(_ctx, getState());
  enterRule(_localctx, 576, SysMLv2Parser::RulePrefix_metadata_annotation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3056);
    match(SysMLv2Parser::SYMBOL_HASHTAG);
    setState(3057);
    prefix_metadata_usage();
    setState(3058);
    annotating_element();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Prefix_metadata_memberContext ------------------------------------------------------------------

SysMLv2Parser::Prefix_metadata_memberContext::Prefix_metadata_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Prefix_metadata_memberContext::SYMBOL_HASHTAG() {
  return getToken(SysMLv2Parser::SYMBOL_HASHTAG, 0);
}

SysMLv2Parser::Prefix_metadata_usageContext* SysMLv2Parser::Prefix_metadata_memberContext::prefix_metadata_usage() {
  return getRuleContext<SysMLv2Parser::Prefix_metadata_usageContext>(0);
}


size_t SysMLv2Parser::Prefix_metadata_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RulePrefix_metadata_member;
}

void SysMLv2Parser::Prefix_metadata_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrefix_metadata_member(this);
}

void SysMLv2Parser::Prefix_metadata_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrefix_metadata_member(this);
}

SysMLv2Parser::Prefix_metadata_memberContext* SysMLv2Parser::prefix_metadata_member() {
  Prefix_metadata_memberContext *_localctx = _tracker.createInstance<Prefix_metadata_memberContext>(_ctx, getState());
  enterRule(_localctx, 578, SysMLv2Parser::RulePrefix_metadata_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3060);
    match(SysMLv2Parser::SYMBOL_HASHTAG);
    setState(3061);
    prefix_metadata_usage();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Prefix_metadata_usageContext ------------------------------------------------------------------

SysMLv2Parser::Prefix_metadata_usageContext::Prefix_metadata_usageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Owned_feature_typingContext* SysMLv2Parser::Prefix_metadata_usageContext::owned_feature_typing() {
  return getRuleContext<SysMLv2Parser::Owned_feature_typingContext>(0);
}


size_t SysMLv2Parser::Prefix_metadata_usageContext::getRuleIndex() const {
  return SysMLv2Parser::RulePrefix_metadata_usage;
}

void SysMLv2Parser::Prefix_metadata_usageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrefix_metadata_usage(this);
}

void SysMLv2Parser::Prefix_metadata_usageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrefix_metadata_usage(this);
}

SysMLv2Parser::Prefix_metadata_usageContext* SysMLv2Parser::prefix_metadata_usage() {
  Prefix_metadata_usageContext *_localctx = _tracker.createInstance<Prefix_metadata_usageContext>(_ctx, getState());
  enterRule(_localctx, 580, SysMLv2Parser::RulePrefix_metadata_usage);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3063);
    owned_feature_typing();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Metadata_usageContext ------------------------------------------------------------------

SysMLv2Parser::Metadata_usageContext::Metadata_usageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Metadata_usage_declarationContext* SysMLv2Parser::Metadata_usageContext::metadata_usage_declaration() {
  return getRuleContext<SysMLv2Parser::Metadata_usage_declarationContext>(0);
}

SysMLv2Parser::Metadata_bodyContext* SysMLv2Parser::Metadata_usageContext::metadata_body() {
  return getRuleContext<SysMLv2Parser::Metadata_bodyContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Metadata_usageContext::SYMBOL_AT() {
  return getToken(SysMLv2Parser::SYMBOL_AT, 0);
}

tree::TerminalNode* SysMLv2Parser::Metadata_usageContext::KEYWORD_METADATA() {
  return getToken(SysMLv2Parser::KEYWORD_METADATA, 0);
}

std::vector<SysMLv2Parser::Usage_extention_keywordContext *> SysMLv2Parser::Metadata_usageContext::usage_extention_keyword() {
  return getRuleContexts<SysMLv2Parser::Usage_extention_keywordContext>();
}

SysMLv2Parser::Usage_extention_keywordContext* SysMLv2Parser::Metadata_usageContext::usage_extention_keyword(size_t i) {
  return getRuleContext<SysMLv2Parser::Usage_extention_keywordContext>(i);
}

tree::TerminalNode* SysMLv2Parser::Metadata_usageContext::KEYWORD_ABOUT() {
  return getToken(SysMLv2Parser::KEYWORD_ABOUT, 0);
}

std::vector<SysMLv2Parser::AnnotationContext *> SysMLv2Parser::Metadata_usageContext::annotation() {
  return getRuleContexts<SysMLv2Parser::AnnotationContext>();
}

SysMLv2Parser::AnnotationContext* SysMLv2Parser::Metadata_usageContext::annotation(size_t i) {
  return getRuleContext<SysMLv2Parser::AnnotationContext>(i);
}

std::vector<tree::TerminalNode *> SysMLv2Parser::Metadata_usageContext::SYMBOL_COMMA() {
  return getTokens(SysMLv2Parser::SYMBOL_COMMA);
}

tree::TerminalNode* SysMLv2Parser::Metadata_usageContext::SYMBOL_COMMA(size_t i) {
  return getToken(SysMLv2Parser::SYMBOL_COMMA, i);
}


size_t SysMLv2Parser::Metadata_usageContext::getRuleIndex() const {
  return SysMLv2Parser::RuleMetadata_usage;
}

void SysMLv2Parser::Metadata_usageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMetadata_usage(this);
}

void SysMLv2Parser::Metadata_usageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMetadata_usage(this);
}

SysMLv2Parser::Metadata_usageContext* SysMLv2Parser::metadata_usage() {
  Metadata_usageContext *_localctx = _tracker.createInstance<Metadata_usageContext>(_ctx, getState());
  enterRule(_localctx, 582, SysMLv2Parser::RuleMetadata_usage);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3068);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SysMLv2Parser::SYMBOL_HASHTAG) {
      setState(3065);
      usage_extention_keyword();
      setState(3070);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(3071);
    _la = _input->LA(1);
    if (!(_la == SysMLv2Parser::KEYWORD_METADATA

    || _la == SysMLv2Parser::SYMBOL_AT)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(3072);
    metadata_usage_declaration();
    setState(3082);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_ABOUT) {
      setState(3073);
      match(SysMLv2Parser::KEYWORD_ABOUT);
      setState(3074);
      annotation();
      setState(3079);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == SysMLv2Parser::SYMBOL_COMMA) {
        setState(3075);
        match(SysMLv2Parser::SYMBOL_COMMA);
        setState(3076);
        annotation();
        setState(3081);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(3084);
    metadata_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Metadata_usage_declarationContext ------------------------------------------------------------------

SysMLv2Parser::Metadata_usage_declarationContext::Metadata_usage_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Owned_feature_typingContext* SysMLv2Parser::Metadata_usage_declarationContext::owned_feature_typing() {
  return getRuleContext<SysMLv2Parser::Owned_feature_typingContext>(0);
}

SysMLv2Parser::IdentificationContext* SysMLv2Parser::Metadata_usage_declarationContext::identification() {
  return getRuleContext<SysMLv2Parser::IdentificationContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Metadata_usage_declarationContext::SYMBOL_TYPED_BY() {
  return getToken(SysMLv2Parser::SYMBOL_TYPED_BY, 0);
}

tree::TerminalNode* SysMLv2Parser::Metadata_usage_declarationContext::KEYWORD_TYPED() {
  return getToken(SysMLv2Parser::KEYWORD_TYPED, 0);
}

tree::TerminalNode* SysMLv2Parser::Metadata_usage_declarationContext::KEYWORD_BY() {
  return getToken(SysMLv2Parser::KEYWORD_BY, 0);
}


size_t SysMLv2Parser::Metadata_usage_declarationContext::getRuleIndex() const {
  return SysMLv2Parser::RuleMetadata_usage_declaration;
}

void SysMLv2Parser::Metadata_usage_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMetadata_usage_declaration(this);
}

void SysMLv2Parser::Metadata_usage_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMetadata_usage_declaration(this);
}

SysMLv2Parser::Metadata_usage_declarationContext* SysMLv2Parser::metadata_usage_declaration() {
  Metadata_usage_declarationContext *_localctx = _tracker.createInstance<Metadata_usage_declarationContext>(_ctx, getState());
  enterRule(_localctx, 584, SysMLv2Parser::RuleMetadata_usage_declaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3092);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 266, _ctx)) {
    case 1: {
      setState(3086);
      identification();
      setState(3090);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case SysMLv2Parser::SYMBOL_TYPED_BY: {
          setState(3087);
          match(SysMLv2Parser::SYMBOL_TYPED_BY);
          break;
        }

        case SysMLv2Parser::KEYWORD_TYPED: {
          setState(3088);
          match(SysMLv2Parser::KEYWORD_TYPED);
          setState(3089);
          match(SysMLv2Parser::KEYWORD_BY);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    default:
      break;
    }
    setState(3094);
    owned_feature_typing();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Metadata_bodyContext ------------------------------------------------------------------

SysMLv2Parser::Metadata_bodyContext::Metadata_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Metadata_bodyContext::SYMBOL_STATEMENT_DELIMITER() {
  return getToken(SysMLv2Parser::SYMBOL_STATEMENT_DELIMITER, 0);
}

tree::TerminalNode* SysMLv2Parser::Metadata_bodyContext::SYMBOL_CURLY_BRACKET_OPEN() {
  return getToken(SysMLv2Parser::SYMBOL_CURLY_BRACKET_OPEN, 0);
}

tree::TerminalNode* SysMLv2Parser::Metadata_bodyContext::SYMBOL_CURLY_BRACKET_CLOSE() {
  return getToken(SysMLv2Parser::SYMBOL_CURLY_BRACKET_CLOSE, 0);
}

SysMLv2Parser::Definition_memberContext* SysMLv2Parser::Metadata_bodyContext::definition_member() {
  return getRuleContext<SysMLv2Parser::Definition_memberContext>(0);
}

SysMLv2Parser::Metadata_body_usage_memberContext* SysMLv2Parser::Metadata_bodyContext::metadata_body_usage_member() {
  return getRuleContext<SysMLv2Parser::Metadata_body_usage_memberContext>(0);
}

SysMLv2Parser::Alias_memberContext* SysMLv2Parser::Metadata_bodyContext::alias_member() {
  return getRuleContext<SysMLv2Parser::Alias_memberContext>(0);
}

SysMLv2Parser::Namespace_importContext* SysMLv2Parser::Metadata_bodyContext::namespace_import() {
  return getRuleContext<SysMLv2Parser::Namespace_importContext>(0);
}


size_t SysMLv2Parser::Metadata_bodyContext::getRuleIndex() const {
  return SysMLv2Parser::RuleMetadata_body;
}

void SysMLv2Parser::Metadata_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMetadata_body(this);
}

void SysMLv2Parser::Metadata_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMetadata_body(this);
}

SysMLv2Parser::Metadata_bodyContext* SysMLv2Parser::metadata_body() {
  Metadata_bodyContext *_localctx = _tracker.createInstance<Metadata_bodyContext>(_ctx, getState());
  enterRule(_localctx, 586, SysMLv2Parser::RuleMetadata_body);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3106);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SysMLv2Parser::SYMBOL_STATEMENT_DELIMITER: {
        enterOuterAlt(_localctx, 1);
        setState(3096);
        match(SysMLv2Parser::SYMBOL_STATEMENT_DELIMITER);
        break;
      }

      case SysMLv2Parser::SYMBOL_CURLY_BRACKET_OPEN: {
        enterOuterAlt(_localctx, 2);
        setState(3097);
        match(SysMLv2Parser::SYMBOL_CURLY_BRACKET_OPEN);
        setState(3102);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 267, _ctx)) {
        case 1: {
          setState(3098);
          definition_member();
          break;
        }

        case 2: {
          setState(3099);
          metadata_body_usage_member();
          break;
        }

        case 3: {
          setState(3100);
          alias_member();
          break;
        }

        case 4: {
          setState(3101);
          namespace_import();
          break;
        }

        default:
          break;
        }
        setState(3104);
        match(SysMLv2Parser::SYMBOL_CURLY_BRACKET_CLOSE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Metadata_body_usage_memberContext ------------------------------------------------------------------

SysMLv2Parser::Metadata_body_usage_memberContext::Metadata_body_usage_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Metadata_body_usageContext* SysMLv2Parser::Metadata_body_usage_memberContext::metadata_body_usage() {
  return getRuleContext<SysMLv2Parser::Metadata_body_usageContext>(0);
}


size_t SysMLv2Parser::Metadata_body_usage_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleMetadata_body_usage_member;
}

void SysMLv2Parser::Metadata_body_usage_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMetadata_body_usage_member(this);
}

void SysMLv2Parser::Metadata_body_usage_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMetadata_body_usage_member(this);
}

SysMLv2Parser::Metadata_body_usage_memberContext* SysMLv2Parser::metadata_body_usage_member() {
  Metadata_body_usage_memberContext *_localctx = _tracker.createInstance<Metadata_body_usage_memberContext>(_ctx, getState());
  enterRule(_localctx, 588, SysMLv2Parser::RuleMetadata_body_usage_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3108);
    metadata_body_usage();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Metadata_body_usageContext ------------------------------------------------------------------

SysMLv2Parser::Metadata_body_usageContext::Metadata_body_usageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Owned_redefinitionContext* SysMLv2Parser::Metadata_body_usageContext::owned_redefinition() {
  return getRuleContext<SysMLv2Parser::Owned_redefinitionContext>(0);
}

SysMLv2Parser::Metadata_bodyContext* SysMLv2Parser::Metadata_body_usageContext::metadata_body() {
  return getRuleContext<SysMLv2Parser::Metadata_bodyContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Metadata_body_usageContext::KEYWORD_REF() {
  return getToken(SysMLv2Parser::KEYWORD_REF, 0);
}

tree::TerminalNode* SysMLv2Parser::Metadata_body_usageContext::REDEFINES() {
  return getToken(SysMLv2Parser::REDEFINES, 0);
}

SysMLv2Parser::Feature_specialization_partContext* SysMLv2Parser::Metadata_body_usageContext::feature_specialization_part() {
  return getRuleContext<SysMLv2Parser::Feature_specialization_partContext>(0);
}

SysMLv2Parser::Value_partContext* SysMLv2Parser::Metadata_body_usageContext::value_part() {
  return getRuleContext<SysMLv2Parser::Value_partContext>(0);
}


size_t SysMLv2Parser::Metadata_body_usageContext::getRuleIndex() const {
  return SysMLv2Parser::RuleMetadata_body_usage;
}

void SysMLv2Parser::Metadata_body_usageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMetadata_body_usage(this);
}

void SysMLv2Parser::Metadata_body_usageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMetadata_body_usage(this);
}

SysMLv2Parser::Metadata_body_usageContext* SysMLv2Parser::metadata_body_usage() {
  Metadata_body_usageContext *_localctx = _tracker.createInstance<Metadata_body_usageContext>(_ctx, getState());
  enterRule(_localctx, 590, SysMLv2Parser::RuleMetadata_body_usage);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3111);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_REF) {
      setState(3110);
      match(SysMLv2Parser::KEYWORD_REF);
    }
    setState(3114);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::REDEFINES) {
      setState(3113);
      match(SysMLv2Parser::REDEFINES);
    }
    setState(3116);
    owned_redefinition();
    setState(3118);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 83) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 83)) & 3377699720527901) != 0) || _la == SysMLv2Parser::KEYWORD_OUT

    || _la == SysMLv2Parser::SYMBOL_SQUARE_BRACKET_OPEN) {
      setState(3117);
      feature_specialization_part();
    }
    setState(3121);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_DEFAULT || _la == SysMLv2Parser::SYMBOL_DEF_ASSIGN

    || _la == SysMLv2Parser::SYMBOL_EQUALS) {
      setState(3120);
      value_part();
    }
    setState(3123);
    metadata_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Extended_definitionContext ------------------------------------------------------------------

SysMLv2Parser::Extended_definitionContext::Extended_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Extended_definitionContext::KEYWORD_DEF() {
  return getToken(SysMLv2Parser::KEYWORD_DEF, 0);
}

SysMLv2Parser::DefinitionContext* SysMLv2Parser::Extended_definitionContext::definition() {
  return getRuleContext<SysMLv2Parser::DefinitionContext>(0);
}

SysMLv2Parser::Basic_definition_prefixContext* SysMLv2Parser::Extended_definitionContext::basic_definition_prefix() {
  return getRuleContext<SysMLv2Parser::Basic_definition_prefixContext>(0);
}

std::vector<SysMLv2Parser::Definition_extension_keywordContext *> SysMLv2Parser::Extended_definitionContext::definition_extension_keyword() {
  return getRuleContexts<SysMLv2Parser::Definition_extension_keywordContext>();
}

SysMLv2Parser::Definition_extension_keywordContext* SysMLv2Parser::Extended_definitionContext::definition_extension_keyword(size_t i) {
  return getRuleContext<SysMLv2Parser::Definition_extension_keywordContext>(i);
}


size_t SysMLv2Parser::Extended_definitionContext::getRuleIndex() const {
  return SysMLv2Parser::RuleExtended_definition;
}

void SysMLv2Parser::Extended_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExtended_definition(this);
}

void SysMLv2Parser::Extended_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExtended_definition(this);
}

SysMLv2Parser::Extended_definitionContext* SysMLv2Parser::extended_definition() {
  Extended_definitionContext *_localctx = _tracker.createInstance<Extended_definitionContext>(_ctx, getState());
  enterRule(_localctx, 592, SysMLv2Parser::RuleExtended_definition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3126);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_VARIATION

    || _la == SysMLv2Parser::KEYWORD_ABSTRACT) {
      setState(3125);
      basic_definition_prefix();
    }
    setState(3129); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(3128);
      definition_extension_keyword();
      setState(3131); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == SysMLv2Parser::SYMBOL_HASHTAG);
    setState(3133);
    match(SysMLv2Parser::KEYWORD_DEF);
    setState(3134);
    definition();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Extended_usageContext ------------------------------------------------------------------

SysMLv2Parser::Extended_usageContext::Extended_usageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Unextended_usage_prefixContext* SysMLv2Parser::Extended_usageContext::unextended_usage_prefix() {
  return getRuleContext<SysMLv2Parser::Unextended_usage_prefixContext>(0);
}

SysMLv2Parser::UsageContext* SysMLv2Parser::Extended_usageContext::usage() {
  return getRuleContext<SysMLv2Parser::UsageContext>(0);
}

std::vector<SysMLv2Parser::Usage_extention_keywordContext *> SysMLv2Parser::Extended_usageContext::usage_extention_keyword() {
  return getRuleContexts<SysMLv2Parser::Usage_extention_keywordContext>();
}

SysMLv2Parser::Usage_extention_keywordContext* SysMLv2Parser::Extended_usageContext::usage_extention_keyword(size_t i) {
  return getRuleContext<SysMLv2Parser::Usage_extention_keywordContext>(i);
}


size_t SysMLv2Parser::Extended_usageContext::getRuleIndex() const {
  return SysMLv2Parser::RuleExtended_usage;
}

void SysMLv2Parser::Extended_usageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExtended_usage(this);
}

void SysMLv2Parser::Extended_usageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExtended_usage(this);
}

SysMLv2Parser::Extended_usageContext* SysMLv2Parser::extended_usage() {
  Extended_usageContext *_localctx = _tracker.createInstance<Extended_usageContext>(_ctx, getState());
  enterRule(_localctx, 594, SysMLv2Parser::RuleExtended_usage);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3136);
    unextended_usage_prefix();
    setState(3138); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(3137);
      usage_extention_keyword();
      setState(3140); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == SysMLv2Parser::SYMBOL_HASHTAG);
    setState(3142);
    usage();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElementsContext ------------------------------------------------------------------

SysMLv2Parser::ElementsContext::ElementsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<SysMLv2Parser::ElementContext *> SysMLv2Parser::ElementsContext::element() {
  return getRuleContexts<SysMLv2Parser::ElementContext>();
}

SysMLv2Parser::ElementContext* SysMLv2Parser::ElementsContext::element(size_t i) {
  return getRuleContext<SysMLv2Parser::ElementContext>(i);
}


size_t SysMLv2Parser::ElementsContext::getRuleIndex() const {
  return SysMLv2Parser::RuleElements;
}

void SysMLv2Parser::ElementsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElements(this);
}

void SysMLv2Parser::ElementsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElements(this);
}

SysMLv2Parser::ElementsContext* SysMLv2Parser::elements() {
  ElementsContext *_localctx = _tracker.createInstance<ElementsContext>(_ctx, getState());
  enterRule(_localctx, 596, SysMLv2Parser::RuleElements);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3147);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SysMLv2Parser::KEYWORD_DERIVED || ((((_la - 87) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 87)) & 553908830077708169) != 0) || ((((_la - 151) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 151)) & 112590067542513407) != 0) || _la == SysMLv2Parser::NAME) {
      setState(3144);
      element();
      setState(3149);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IdentificationContext ------------------------------------------------------------------

SysMLv2Parser::IdentificationContext::IdentificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::IdentificationContext::SYMBOL_SMALLER() {
  return getToken(SysMLv2Parser::SYMBOL_SMALLER, 0);
}

tree::TerminalNode* SysMLv2Parser::IdentificationContext::NAME() {
  return getToken(SysMLv2Parser::NAME, 0);
}

tree::TerminalNode* SysMLv2Parser::IdentificationContext::SYMBOL_GREATER() {
  return getToken(SysMLv2Parser::SYMBOL_GREATER, 0);
}


size_t SysMLv2Parser::IdentificationContext::getRuleIndex() const {
  return SysMLv2Parser::RuleIdentification;
}

void SysMLv2Parser::IdentificationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIdentification(this);
}

void SysMLv2Parser::IdentificationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIdentification(this);
}

SysMLv2Parser::IdentificationContext* SysMLv2Parser::identification() {
  IdentificationContext *_localctx = _tracker.createInstance<IdentificationContext>(_ctx, getState());
  enterRule(_localctx, 598, SysMLv2Parser::RuleIdentification);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3158);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 279, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3153);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == SysMLv2Parser::SYMBOL_SMALLER) {
        setState(3150);
        match(SysMLv2Parser::SYMBOL_SMALLER);
        setState(3151);
        match(SysMLv2Parser::NAME);
        setState(3152);
        match(SysMLv2Parser::SYMBOL_GREATER);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3156);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 278, _ctx)) {
      case 1: {
        setState(3155);
        match(SysMLv2Parser::NAME);
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Relationship_onwed_elementsContext ------------------------------------------------------------------

SysMLv2Parser::Relationship_onwed_elementsContext::Relationship_onwed_elementsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<SysMLv2Parser::Relationship_owned_elementContext *> SysMLv2Parser::Relationship_onwed_elementsContext::relationship_owned_element() {
  return getRuleContexts<SysMLv2Parser::Relationship_owned_elementContext>();
}

SysMLv2Parser::Relationship_owned_elementContext* SysMLv2Parser::Relationship_onwed_elementsContext::relationship_owned_element(size_t i) {
  return getRuleContext<SysMLv2Parser::Relationship_owned_elementContext>(i);
}


size_t SysMLv2Parser::Relationship_onwed_elementsContext::getRuleIndex() const {
  return SysMLv2Parser::RuleRelationship_onwed_elements;
}

void SysMLv2Parser::Relationship_onwed_elementsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRelationship_onwed_elements(this);
}

void SysMLv2Parser::Relationship_onwed_elementsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRelationship_onwed_elements(this);
}

SysMLv2Parser::Relationship_onwed_elementsContext* SysMLv2Parser::relationship_onwed_elements() {
  Relationship_onwed_elementsContext *_localctx = _tracker.createInstance<Relationship_onwed_elementsContext>(_ctx, getState());
  enterRule(_localctx, 600, SysMLv2Parser::RuleRelationship_onwed_elements);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3163);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SysMLv2Parser::KEYWORD_DERIVED || ((((_la - 87) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 87)) & 553908830077708169) != 0) || ((((_la - 151) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 151)) & 112590067542513407) != 0) || _la == SysMLv2Parser::NAME) {
      setState(3160);
      relationship_owned_element();
      setState(3165);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Relationship_owned_elementContext ------------------------------------------------------------------

SysMLv2Parser::Relationship_owned_elementContext::Relationship_owned_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Owned_related_elementContext* SysMLv2Parser::Relationship_owned_elementContext::owned_related_element() {
  return getRuleContext<SysMLv2Parser::Owned_related_elementContext>(0);
}

SysMLv2Parser::Owned_annotationContext* SysMLv2Parser::Relationship_owned_elementContext::owned_annotation() {
  return getRuleContext<SysMLv2Parser::Owned_annotationContext>(0);
}


size_t SysMLv2Parser::Relationship_owned_elementContext::getRuleIndex() const {
  return SysMLv2Parser::RuleRelationship_owned_element;
}

void SysMLv2Parser::Relationship_owned_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRelationship_owned_element(this);
}

void SysMLv2Parser::Relationship_owned_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRelationship_owned_element(this);
}

SysMLv2Parser::Relationship_owned_elementContext* SysMLv2Parser::relationship_owned_element() {
  Relationship_owned_elementContext *_localctx = _tracker.createInstance<Relationship_owned_elementContext>(_ctx, getState());
  enterRule(_localctx, 602, SysMLv2Parser::RuleRelationship_owned_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3168);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 281, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3166);
      owned_related_element();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3167);
      owned_annotation();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Owned_related_elementContext ------------------------------------------------------------------

SysMLv2Parser::Owned_related_elementContext::Owned_related_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Non_feature_elementContext* SysMLv2Parser::Owned_related_elementContext::non_feature_element() {
  return getRuleContext<SysMLv2Parser::Non_feature_elementContext>(0);
}

SysMLv2Parser::Feature_elementContext* SysMLv2Parser::Owned_related_elementContext::feature_element() {
  return getRuleContext<SysMLv2Parser::Feature_elementContext>(0);
}


size_t SysMLv2Parser::Owned_related_elementContext::getRuleIndex() const {
  return SysMLv2Parser::RuleOwned_related_element;
}

void SysMLv2Parser::Owned_related_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOwned_related_element(this);
}

void SysMLv2Parser::Owned_related_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOwned_related_element(this);
}

SysMLv2Parser::Owned_related_elementContext* SysMLv2Parser::owned_related_element() {
  Owned_related_elementContext *_localctx = _tracker.createInstance<Owned_related_elementContext>(_ctx, getState());
  enterRule(_localctx, 604, SysMLv2Parser::RuleOwned_related_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3172);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 282, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3170);
      non_feature_element();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3171);
      feature_element();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NamespaceContext ------------------------------------------------------------------

SysMLv2Parser::NamespaceContext::NamespaceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Namespace_declarationContext* SysMLv2Parser::NamespaceContext::namespace_declaration() {
  return getRuleContext<SysMLv2Parser::Namespace_declarationContext>(0);
}

SysMLv2Parser::Namespace_bodyContext* SysMLv2Parser::NamespaceContext::namespace_body() {
  return getRuleContext<SysMLv2Parser::Namespace_bodyContext>(0);
}

std::vector<SysMLv2Parser::Prefix_metadata_memberContext *> SysMLv2Parser::NamespaceContext::prefix_metadata_member() {
  return getRuleContexts<SysMLv2Parser::Prefix_metadata_memberContext>();
}

SysMLv2Parser::Prefix_metadata_memberContext* SysMLv2Parser::NamespaceContext::prefix_metadata_member(size_t i) {
  return getRuleContext<SysMLv2Parser::Prefix_metadata_memberContext>(i);
}


size_t SysMLv2Parser::NamespaceContext::getRuleIndex() const {
  return SysMLv2Parser::RuleNamespace;
}

void SysMLv2Parser::NamespaceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamespace(this);
}

void SysMLv2Parser::NamespaceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamespace(this);
}

SysMLv2Parser::NamespaceContext* SysMLv2Parser::namespace_() {
  NamespaceContext *_localctx = _tracker.createInstance<NamespaceContext>(_ctx, getState());
  enterRule(_localctx, 606, SysMLv2Parser::RuleNamespace);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3177);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SysMLv2Parser::SYMBOL_HASHTAG) {
      setState(3174);
      prefix_metadata_member();
      setState(3179);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(3180);
    namespace_declaration();
    setState(3181);
    namespace_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Namespace_declarationContext ------------------------------------------------------------------

SysMLv2Parser::Namespace_declarationContext::Namespace_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Namespace_declarationContext::KEYWORD_NAMESPACE() {
  return getToken(SysMLv2Parser::KEYWORD_NAMESPACE, 0);
}

SysMLv2Parser::IdentificationContext* SysMLv2Parser::Namespace_declarationContext::identification() {
  return getRuleContext<SysMLv2Parser::IdentificationContext>(0);
}


size_t SysMLv2Parser::Namespace_declarationContext::getRuleIndex() const {
  return SysMLv2Parser::RuleNamespace_declaration;
}

void SysMLv2Parser::Namespace_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamespace_declaration(this);
}

void SysMLv2Parser::Namespace_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamespace_declaration(this);
}

SysMLv2Parser::Namespace_declarationContext* SysMLv2Parser::namespace_declaration() {
  Namespace_declarationContext *_localctx = _tracker.createInstance<Namespace_declarationContext>(_ctx, getState());
  enterRule(_localctx, 608, SysMLv2Parser::RuleNamespace_declaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3183);
    match(SysMLv2Parser::KEYWORD_NAMESPACE);
    setState(3184);
    identification();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Namespace_bodyContext ------------------------------------------------------------------

SysMLv2Parser::Namespace_bodyContext::Namespace_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Namespace_bodyContext::SYMBOL_STATEMENT_DELIMITER() {
  return getToken(SysMLv2Parser::SYMBOL_STATEMENT_DELIMITER, 0);
}

tree::TerminalNode* SysMLv2Parser::Namespace_bodyContext::SYMBOL_CURLY_BRACKET_OPEN() {
  return getToken(SysMLv2Parser::SYMBOL_CURLY_BRACKET_OPEN, 0);
}

SysMLv2Parser::Namespace_body_elementContext* SysMLv2Parser::Namespace_bodyContext::namespace_body_element() {
  return getRuleContext<SysMLv2Parser::Namespace_body_elementContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Namespace_bodyContext::SYMBOL_CURLY_BRACKET_CLOSE() {
  return getToken(SysMLv2Parser::SYMBOL_CURLY_BRACKET_CLOSE, 0);
}


size_t SysMLv2Parser::Namespace_bodyContext::getRuleIndex() const {
  return SysMLv2Parser::RuleNamespace_body;
}

void SysMLv2Parser::Namespace_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamespace_body(this);
}

void SysMLv2Parser::Namespace_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamespace_body(this);
}

SysMLv2Parser::Namespace_bodyContext* SysMLv2Parser::namespace_body() {
  Namespace_bodyContext *_localctx = _tracker.createInstance<Namespace_bodyContext>(_ctx, getState());
  enterRule(_localctx, 610, SysMLv2Parser::RuleNamespace_body);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3191);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SysMLv2Parser::SYMBOL_STATEMENT_DELIMITER: {
        enterOuterAlt(_localctx, 1);
        setState(3186);
        match(SysMLv2Parser::SYMBOL_STATEMENT_DELIMITER);
        break;
      }

      case SysMLv2Parser::SYMBOL_CURLY_BRACKET_OPEN: {
        enterOuterAlt(_localctx, 2);
        setState(3187);
        match(SysMLv2Parser::SYMBOL_CURLY_BRACKET_OPEN);
        setState(3188);
        namespace_body_element();
        setState(3189);
        match(SysMLv2Parser::SYMBOL_CURLY_BRACKET_CLOSE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Namespace_body_elementsContext ------------------------------------------------------------------

SysMLv2Parser::Namespace_body_elementsContext::Namespace_body_elementsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::ElementsContext* SysMLv2Parser::Namespace_body_elementsContext::elements() {
  return getRuleContext<SysMLv2Parser::ElementsContext>(0);
}


size_t SysMLv2Parser::Namespace_body_elementsContext::getRuleIndex() const {
  return SysMLv2Parser::RuleNamespace_body_elements;
}

void SysMLv2Parser::Namespace_body_elementsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamespace_body_elements(this);
}

void SysMLv2Parser::Namespace_body_elementsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamespace_body_elements(this);
}

SysMLv2Parser::Namespace_body_elementsContext* SysMLv2Parser::namespace_body_elements() {
  Namespace_body_elementsContext *_localctx = _tracker.createInstance<Namespace_body_elementsContext>(_ctx, getState());
  enterRule(_localctx, 612, SysMLv2Parser::RuleNamespace_body_elements);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3193);
    elements();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Namespace_body_elementContext ------------------------------------------------------------------

SysMLv2Parser::Namespace_body_elementContext::Namespace_body_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Namespace_memberContext* SysMLv2Parser::Namespace_body_elementContext::namespace_member() {
  return getRuleContext<SysMLv2Parser::Namespace_memberContext>(0);
}

SysMLv2Parser::Alias_memberContext* SysMLv2Parser::Namespace_body_elementContext::alias_member() {
  return getRuleContext<SysMLv2Parser::Alias_memberContext>(0);
}

SysMLv2Parser::Namespace_importContext* SysMLv2Parser::Namespace_body_elementContext::namespace_import() {
  return getRuleContext<SysMLv2Parser::Namespace_importContext>(0);
}


size_t SysMLv2Parser::Namespace_body_elementContext::getRuleIndex() const {
  return SysMLv2Parser::RuleNamespace_body_element;
}

void SysMLv2Parser::Namespace_body_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamespace_body_element(this);
}

void SysMLv2Parser::Namespace_body_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamespace_body_element(this);
}

SysMLv2Parser::Namespace_body_elementContext* SysMLv2Parser::namespace_body_element() {
  Namespace_body_elementContext *_localctx = _tracker.createInstance<Namespace_body_elementContext>(_ctx, getState());
  enterRule(_localctx, 614, SysMLv2Parser::RuleNamespace_body_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3198);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 285, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3195);
      namespace_member();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3196);
      alias_member();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3197);
      namespace_import();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Member_prefixContext ------------------------------------------------------------------

SysMLv2Parser::Member_prefixContext::Member_prefixContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Visibility_indicatorContext* SysMLv2Parser::Member_prefixContext::visibility_indicator() {
  return getRuleContext<SysMLv2Parser::Visibility_indicatorContext>(0);
}


size_t SysMLv2Parser::Member_prefixContext::getRuleIndex() const {
  return SysMLv2Parser::RuleMember_prefix;
}

void SysMLv2Parser::Member_prefixContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMember_prefix(this);
}

void SysMLv2Parser::Member_prefixContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMember_prefix(this);
}

SysMLv2Parser::Member_prefixContext* SysMLv2Parser::member_prefix() {
  Member_prefixContext *_localctx = _tracker.createInstance<Member_prefixContext>(_ctx, getState());
  enterRule(_localctx, 616, SysMLv2Parser::RuleMember_prefix);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3201);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 286, _ctx)) {
    case 1: {
      setState(3200);
      visibility_indicator();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Visibility_indicatorContext ------------------------------------------------------------------

SysMLv2Parser::Visibility_indicatorContext::Visibility_indicatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Visibility_indicatorContext::KEYWORD_PUBLIC() {
  return getToken(SysMLv2Parser::KEYWORD_PUBLIC, 0);
}

tree::TerminalNode* SysMLv2Parser::Visibility_indicatorContext::KEYWORD_PRIVATE() {
  return getToken(SysMLv2Parser::KEYWORD_PRIVATE, 0);
}

tree::TerminalNode* SysMLv2Parser::Visibility_indicatorContext::KEYWORD_PROTECTED() {
  return getToken(SysMLv2Parser::KEYWORD_PROTECTED, 0);
}


size_t SysMLv2Parser::Visibility_indicatorContext::getRuleIndex() const {
  return SysMLv2Parser::RuleVisibility_indicator;
}

void SysMLv2Parser::Visibility_indicatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVisibility_indicator(this);
}

void SysMLv2Parser::Visibility_indicatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVisibility_indicator(this);
}

SysMLv2Parser::Visibility_indicatorContext* SysMLv2Parser::visibility_indicator() {
  Visibility_indicatorContext *_localctx = _tracker.createInstance<Visibility_indicatorContext>(_ctx, getState());
  enterRule(_localctx, 618, SysMLv2Parser::RuleVisibility_indicator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3203);
    _la = _input->LA(1);
    if (!(((((_la - 155) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 155)) & 7) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Namespace_memberContext ------------------------------------------------------------------

SysMLv2Parser::Namespace_memberContext::Namespace_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Non_feature_memberContext* SysMLv2Parser::Namespace_memberContext::non_feature_member() {
  return getRuleContext<SysMLv2Parser::Non_feature_memberContext>(0);
}

SysMLv2Parser::Namespace_feature_memberContext* SysMLv2Parser::Namespace_memberContext::namespace_feature_member() {
  return getRuleContext<SysMLv2Parser::Namespace_feature_memberContext>(0);
}


size_t SysMLv2Parser::Namespace_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleNamespace_member;
}

void SysMLv2Parser::Namespace_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamespace_member(this);
}

void SysMLv2Parser::Namespace_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamespace_member(this);
}

SysMLv2Parser::Namespace_memberContext* SysMLv2Parser::namespace_member() {
  Namespace_memberContext *_localctx = _tracker.createInstance<Namespace_memberContext>(_ctx, getState());
  enterRule(_localctx, 620, SysMLv2Parser::RuleNamespace_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3207);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 287, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3205);
      non_feature_member();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3206);
      namespace_feature_member();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Non_feature_memberContext ------------------------------------------------------------------

SysMLv2Parser::Non_feature_memberContext::Non_feature_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Member_prefixContext* SysMLv2Parser::Non_feature_memberContext::member_prefix() {
  return getRuleContext<SysMLv2Parser::Member_prefixContext>(0);
}

SysMLv2Parser::Non_feature_elementContext* SysMLv2Parser::Non_feature_memberContext::non_feature_element() {
  return getRuleContext<SysMLv2Parser::Non_feature_elementContext>(0);
}


size_t SysMLv2Parser::Non_feature_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleNon_feature_member;
}

void SysMLv2Parser::Non_feature_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNon_feature_member(this);
}

void SysMLv2Parser::Non_feature_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNon_feature_member(this);
}

SysMLv2Parser::Non_feature_memberContext* SysMLv2Parser::non_feature_member() {
  Non_feature_memberContext *_localctx = _tracker.createInstance<Non_feature_memberContext>(_ctx, getState());
  enterRule(_localctx, 622, SysMLv2Parser::RuleNon_feature_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3209);
    member_prefix();
    setState(3210);
    non_feature_element();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Namespace_feature_memberContext ------------------------------------------------------------------

SysMLv2Parser::Namespace_feature_memberContext::Namespace_feature_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Member_prefixContext* SysMLv2Parser::Namespace_feature_memberContext::member_prefix() {
  return getRuleContext<SysMLv2Parser::Member_prefixContext>(0);
}

SysMLv2Parser::Feature_elementContext* SysMLv2Parser::Namespace_feature_memberContext::feature_element() {
  return getRuleContext<SysMLv2Parser::Feature_elementContext>(0);
}


size_t SysMLv2Parser::Namespace_feature_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleNamespace_feature_member;
}

void SysMLv2Parser::Namespace_feature_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamespace_feature_member(this);
}

void SysMLv2Parser::Namespace_feature_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamespace_feature_member(this);
}

SysMLv2Parser::Namespace_feature_memberContext* SysMLv2Parser::namespace_feature_member() {
  Namespace_feature_memberContext *_localctx = _tracker.createInstance<Namespace_feature_memberContext>(_ctx, getState());
  enterRule(_localctx, 624, SysMLv2Parser::RuleNamespace_feature_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3212);
    member_prefix();
    setState(3213);
    feature_element();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Qualified_nameContext ------------------------------------------------------------------

SysMLv2Parser::Qualified_nameContext::Qualified_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> SysMLv2Parser::Qualified_nameContext::NAME() {
  return getTokens(SysMLv2Parser::NAME);
}

tree::TerminalNode* SysMLv2Parser::Qualified_nameContext::NAME(size_t i) {
  return getToken(SysMLv2Parser::NAME, i);
}

std::vector<tree::TerminalNode *> SysMLv2Parser::Qualified_nameContext::SYMBOL_NAMESPACE_SUBSET() {
  return getTokens(SysMLv2Parser::SYMBOL_NAMESPACE_SUBSET);
}

tree::TerminalNode* SysMLv2Parser::Qualified_nameContext::SYMBOL_NAMESPACE_SUBSET(size_t i) {
  return getToken(SysMLv2Parser::SYMBOL_NAMESPACE_SUBSET, i);
}


size_t SysMLv2Parser::Qualified_nameContext::getRuleIndex() const {
  return SysMLv2Parser::RuleQualified_name;
}

void SysMLv2Parser::Qualified_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQualified_name(this);
}

void SysMLv2Parser::Qualified_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQualified_name(this);
}

SysMLv2Parser::Qualified_nameContext* SysMLv2Parser::qualified_name() {
  Qualified_nameContext *_localctx = _tracker.createInstance<Qualified_nameContext>(_ctx, getState());
  enterRule(_localctx, 626, SysMLv2Parser::RuleQualified_name);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3215);
    match(SysMLv2Parser::NAME);
    setState(3220);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 288, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(3216);
        match(SysMLv2Parser::SYMBOL_NAMESPACE_SUBSET);
        setState(3217);
        match(SysMLv2Parser::NAME); 
      }
      setState(3222);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 288, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Namespace_importContext ------------------------------------------------------------------

SysMLv2Parser::Namespace_importContext::Namespace_importContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Namespace_importContext::KEYWORD_IMPORT() {
  return getToken(SysMLv2Parser::KEYWORD_IMPORT, 0);
}

SysMLv2Parser::Import_declarationContext* SysMLv2Parser::Namespace_importContext::import_declaration() {
  return getRuleContext<SysMLv2Parser::Import_declarationContext>(0);
}

SysMLv2Parser::Visibility_indicatorContext* SysMLv2Parser::Namespace_importContext::visibility_indicator() {
  return getRuleContext<SysMLv2Parser::Visibility_indicatorContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Namespace_importContext::KEYWORD_ALL() {
  return getToken(SysMLv2Parser::KEYWORD_ALL, 0);
}

SysMLv2Parser::Relationship_bodyContext* SysMLv2Parser::Namespace_importContext::relationship_body() {
  return getRuleContext<SysMLv2Parser::Relationship_bodyContext>(0);
}


size_t SysMLv2Parser::Namespace_importContext::getRuleIndex() const {
  return SysMLv2Parser::RuleNamespace_import;
}

void SysMLv2Parser::Namespace_importContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamespace_import(this);
}

void SysMLv2Parser::Namespace_importContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamespace_import(this);
}

SysMLv2Parser::Namespace_importContext* SysMLv2Parser::namespace_import() {
  Namespace_importContext *_localctx = _tracker.createInstance<Namespace_importContext>(_ctx, getState());
  enterRule(_localctx, 628, SysMLv2Parser::RuleNamespace_import);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3224);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 155) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 155)) & 7) != 0)) {
      setState(3223);
      visibility_indicator();
    }
    setState(3226);
    match(SysMLv2Parser::KEYWORD_IMPORT);
    setState(3228);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_ALL) {
      setState(3227);
      match(SysMLv2Parser::KEYWORD_ALL);
    }
    setState(3230);
    import_declaration();
    setState(3232);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 291, _ctx)) {
    case 1: {
      setState(3231);
      relationship_body();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Import_declarationContext ------------------------------------------------------------------

SysMLv2Parser::Import_declarationContext::Import_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Membership_importContext* SysMLv2Parser::Import_declarationContext::membership_import() {
  return getRuleContext<SysMLv2Parser::Membership_importContext>(0);
}

SysMLv2Parser::Namespace_importContext* SysMLv2Parser::Import_declarationContext::namespace_import() {
  return getRuleContext<SysMLv2Parser::Namespace_importContext>(0);
}


size_t SysMLv2Parser::Import_declarationContext::getRuleIndex() const {
  return SysMLv2Parser::RuleImport_declaration;
}

void SysMLv2Parser::Import_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImport_declaration(this);
}

void SysMLv2Parser::Import_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImport_declaration(this);
}

SysMLv2Parser::Import_declarationContext* SysMLv2Parser::import_declaration() {
  Import_declarationContext *_localctx = _tracker.createInstance<Import_declarationContext>(_ctx, getState());
  enterRule(_localctx, 630, SysMLv2Parser::RuleImport_declaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3236);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SysMLv2Parser::NAME: {
        enterOuterAlt(_localctx, 1);
        setState(3234);
        membership_import();
        break;
      }

      case SysMLv2Parser::KEYWORD_IMPORT:
      case SysMLv2Parser::KEYWORD_PRIVATE:
      case SysMLv2Parser::KEYWORD_PROTECTED:
      case SysMLv2Parser::KEYWORD_PUBLIC: {
        enterOuterAlt(_localctx, 2);
        setState(3235);
        namespace_import();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Membership_importContext ------------------------------------------------------------------

SysMLv2Parser::Membership_importContext::Membership_importContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Qualified_nameContext* SysMLv2Parser::Membership_importContext::qualified_name() {
  return getRuleContext<SysMLv2Parser::Qualified_nameContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Membership_importContext::SYMBOL_NAMESPACE_SUBSET() {
  return getToken(SysMLv2Parser::SYMBOL_NAMESPACE_SUBSET, 0);
}

tree::TerminalNode* SysMLv2Parser::Membership_importContext::SYMBOL_DOUBLE_STAR() {
  return getToken(SysMLv2Parser::SYMBOL_DOUBLE_STAR, 0);
}

tree::TerminalNode* SysMLv2Parser::Membership_importContext::SYMBOL_STAR() {
  return getToken(SysMLv2Parser::SYMBOL_STAR, 0);
}


size_t SysMLv2Parser::Membership_importContext::getRuleIndex() const {
  return SysMLv2Parser::RuleMembership_import;
}

void SysMLv2Parser::Membership_importContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMembership_import(this);
}

void SysMLv2Parser::Membership_importContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMembership_import(this);
}

SysMLv2Parser::Membership_importContext* SysMLv2Parser::membership_import() {
  Membership_importContext *_localctx = _tracker.createInstance<Membership_importContext>(_ctx, getState());
  enterRule(_localctx, 632, SysMLv2Parser::RuleMembership_import);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3238);
    qualified_name();

    setState(3240);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::SYMBOL_NAMESPACE_SUBSET) {
      setState(3239);
      match(SysMLv2Parser::SYMBOL_NAMESPACE_SUBSET);
    }
    setState(3243);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 294, _ctx)) {
    case 1: {
      setState(3242);
      _la = _input->LA(1);
      if (!(_la == SysMLv2Parser::SYMBOL_STAR

      || _la == SysMLv2Parser::SYMBOL_DOUBLE_STAR)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Filter_packageContext ------------------------------------------------------------------

SysMLv2Parser::Filter_packageContext::Filter_packageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Import_declarationContext* SysMLv2Parser::Filter_packageContext::import_declaration() {
  return getRuleContext<SysMLv2Parser::Import_declarationContext>(0);
}

SysMLv2Parser::Filter_package_memberContext* SysMLv2Parser::Filter_packageContext::filter_package_member() {
  return getRuleContext<SysMLv2Parser::Filter_package_memberContext>(0);
}


size_t SysMLv2Parser::Filter_packageContext::getRuleIndex() const {
  return SysMLv2Parser::RuleFilter_package;
}

void SysMLv2Parser::Filter_packageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFilter_package(this);
}

void SysMLv2Parser::Filter_packageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFilter_package(this);
}

SysMLv2Parser::Filter_packageContext* SysMLv2Parser::filter_package() {
  Filter_packageContext *_localctx = _tracker.createInstance<Filter_packageContext>(_ctx, getState());
  enterRule(_localctx, 634, SysMLv2Parser::RuleFilter_package);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3245);
    import_declaration();
    setState(3246);
    filter_package_member();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Filter_package_memberContext ------------------------------------------------------------------

SysMLv2Parser::Filter_package_memberContext::Filter_package_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Filter_package_memberContext::SYMBOL_SQUARE_BRACKET_OPEN() {
  return getToken(SysMLv2Parser::SYMBOL_SQUARE_BRACKET_OPEN, 0);
}

SysMLv2Parser::Owned_expressionContext* SysMLv2Parser::Filter_package_memberContext::owned_expression() {
  return getRuleContext<SysMLv2Parser::Owned_expressionContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Filter_package_memberContext::SYMBOL_SQUARE_BRACKET_CLOSE() {
  return getToken(SysMLv2Parser::SYMBOL_SQUARE_BRACKET_CLOSE, 0);
}


size_t SysMLv2Parser::Filter_package_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleFilter_package_member;
}

void SysMLv2Parser::Filter_package_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFilter_package_member(this);
}

void SysMLv2Parser::Filter_package_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFilter_package_member(this);
}

SysMLv2Parser::Filter_package_memberContext* SysMLv2Parser::filter_package_member() {
  Filter_package_memberContext *_localctx = _tracker.createInstance<Filter_package_memberContext>(_ctx, getState());
  enterRule(_localctx, 636, SysMLv2Parser::RuleFilter_package_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3248);
    match(SysMLv2Parser::SYMBOL_SQUARE_BRACKET_OPEN);
    setState(3249);
    owned_expression();
    setState(3250);
    match(SysMLv2Parser::SYMBOL_SQUARE_BRACKET_CLOSE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElementContext ------------------------------------------------------------------

SysMLv2Parser::ElementContext::ElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Annotating_elementContext* SysMLv2Parser::ElementContext::annotating_element() {
  return getRuleContext<SysMLv2Parser::Annotating_elementContext>(0);
}

SysMLv2Parser::Non_feature_elementContext* SysMLv2Parser::ElementContext::non_feature_element() {
  return getRuleContext<SysMLv2Parser::Non_feature_elementContext>(0);
}

SysMLv2Parser::Feature_elementContext* SysMLv2Parser::ElementContext::feature_element() {
  return getRuleContext<SysMLv2Parser::Feature_elementContext>(0);
}

SysMLv2Parser::Additional_optionsContext* SysMLv2Parser::ElementContext::additional_options() {
  return getRuleContext<SysMLv2Parser::Additional_optionsContext>(0);
}


size_t SysMLv2Parser::ElementContext::getRuleIndex() const {
  return SysMLv2Parser::RuleElement;
}

void SysMLv2Parser::ElementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElement(this);
}

void SysMLv2Parser::ElementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElement(this);
}

SysMLv2Parser::ElementContext* SysMLv2Parser::element() {
  ElementContext *_localctx = _tracker.createInstance<ElementContext>(_ctx, getState());
  enterRule(_localctx, 638, SysMLv2Parser::RuleElement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3256);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 295, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3252);
      annotating_element();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3253);
      non_feature_element();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3254);
      feature_element();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(3255);
      additional_options();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Non_feature_elementContext ------------------------------------------------------------------

SysMLv2Parser::Non_feature_elementContext::Non_feature_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::DependencyContext* SysMLv2Parser::Non_feature_elementContext::dependency() {
  return getRuleContext<SysMLv2Parser::DependencyContext>(0);
}

SysMLv2Parser::TypeContext* SysMLv2Parser::Non_feature_elementContext::type() {
  return getRuleContext<SysMLv2Parser::TypeContext>(0);
}

SysMLv2Parser::ClassifierContext* SysMLv2Parser::Non_feature_elementContext::classifier() {
  return getRuleContext<SysMLv2Parser::ClassifierContext>(0);
}

SysMLv2Parser::Data_typeContext* SysMLv2Parser::Non_feature_elementContext::data_type() {
  return getRuleContext<SysMLv2Parser::Data_typeContext>(0);
}

SysMLv2Parser::NamespaceContext* SysMLv2Parser::Non_feature_elementContext::namespace_() {
  return getRuleContext<SysMLv2Parser::NamespaceContext>(0);
}

SysMLv2Parser::ClassContext* SysMLv2Parser::Non_feature_elementContext::class_() {
  return getRuleContext<SysMLv2Parser::ClassContext>(0);
}

SysMLv2Parser::StructureContext* SysMLv2Parser::Non_feature_elementContext::structure() {
  return getRuleContext<SysMLv2Parser::StructureContext>(0);
}

SysMLv2Parser::MetaclassContext* SysMLv2Parser::Non_feature_elementContext::metaclass() {
  return getRuleContext<SysMLv2Parser::MetaclassContext>(0);
}

SysMLv2Parser::AssociationContext* SysMLv2Parser::Non_feature_elementContext::association() {
  return getRuleContext<SysMLv2Parser::AssociationContext>(0);
}

SysMLv2Parser::Association_structureContext* SysMLv2Parser::Non_feature_elementContext::association_structure() {
  return getRuleContext<SysMLv2Parser::Association_structureContext>(0);
}

SysMLv2Parser::InteractionContext* SysMLv2Parser::Non_feature_elementContext::interaction() {
  return getRuleContext<SysMLv2Parser::InteractionContext>(0);
}

SysMLv2Parser::BehaviorContext* SysMLv2Parser::Non_feature_elementContext::behavior() {
  return getRuleContext<SysMLv2Parser::BehaviorContext>(0);
}

SysMLv2Parser::FunctionContext* SysMLv2Parser::Non_feature_elementContext::function() {
  return getRuleContext<SysMLv2Parser::FunctionContext>(0);
}

SysMLv2Parser::PredicateContext* SysMLv2Parser::Non_feature_elementContext::predicate() {
  return getRuleContext<SysMLv2Parser::PredicateContext>(0);
}

SysMLv2Parser::MultiplicityContext* SysMLv2Parser::Non_feature_elementContext::multiplicity() {
  return getRuleContext<SysMLv2Parser::MultiplicityContext>(0);
}

SysMLv2Parser::PackageContext* SysMLv2Parser::Non_feature_elementContext::package() {
  return getRuleContext<SysMLv2Parser::PackageContext>(0);
}

SysMLv2Parser::Library_packageContext* SysMLv2Parser::Non_feature_elementContext::library_package() {
  return getRuleContext<SysMLv2Parser::Library_packageContext>(0);
}

SysMLv2Parser::SpecializationContext* SysMLv2Parser::Non_feature_elementContext::specialization() {
  return getRuleContext<SysMLv2Parser::SpecializationContext>(0);
}

SysMLv2Parser::ConjunctionContext* SysMLv2Parser::Non_feature_elementContext::conjunction() {
  return getRuleContext<SysMLv2Parser::ConjunctionContext>(0);
}

SysMLv2Parser::SubclassificationContext* SysMLv2Parser::Non_feature_elementContext::subclassification() {
  return getRuleContext<SysMLv2Parser::SubclassificationContext>(0);
}

SysMLv2Parser::DisjoiningContext* SysMLv2Parser::Non_feature_elementContext::disjoining() {
  return getRuleContext<SysMLv2Parser::DisjoiningContext>(0);
}

SysMLv2Parser::Feature_invertingContext* SysMLv2Parser::Non_feature_elementContext::feature_inverting() {
  return getRuleContext<SysMLv2Parser::Feature_invertingContext>(0);
}

SysMLv2Parser::Feature_typingContext* SysMLv2Parser::Non_feature_elementContext::feature_typing() {
  return getRuleContext<SysMLv2Parser::Feature_typingContext>(0);
}

SysMLv2Parser::SubsettingContext* SysMLv2Parser::Non_feature_elementContext::subsetting() {
  return getRuleContext<SysMLv2Parser::SubsettingContext>(0);
}

SysMLv2Parser::RedefinitionContext* SysMLv2Parser::Non_feature_elementContext::redefinition() {
  return getRuleContext<SysMLv2Parser::RedefinitionContext>(0);
}

SysMLv2Parser::Type_featuringContext* SysMLv2Parser::Non_feature_elementContext::type_featuring() {
  return getRuleContext<SysMLv2Parser::Type_featuringContext>(0);
}

SysMLv2Parser::Namespace_importContext* SysMLv2Parser::Non_feature_elementContext::namespace_import() {
  return getRuleContext<SysMLv2Parser::Namespace_importContext>(0);
}


size_t SysMLv2Parser::Non_feature_elementContext::getRuleIndex() const {
  return SysMLv2Parser::RuleNon_feature_element;
}

void SysMLv2Parser::Non_feature_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNon_feature_element(this);
}

void SysMLv2Parser::Non_feature_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNon_feature_element(this);
}

SysMLv2Parser::Non_feature_elementContext* SysMLv2Parser::non_feature_element() {
  Non_feature_elementContext *_localctx = _tracker.createInstance<Non_feature_elementContext>(_ctx, getState());
  enterRule(_localctx, 640, SysMLv2Parser::RuleNon_feature_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3285);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 296, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3258);
      dependency();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3259);
      type();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3260);
      classifier();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(3261);
      data_type();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(3262);
      namespace_();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(3263);
      class_();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(3264);
      structure();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(3265);
      metaclass();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(3266);
      association();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(3267);
      association_structure();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(3268);
      interaction();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(3269);
      behavior();
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(3270);
      function();
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(3271);
      predicate();
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(3272);
      multiplicity();
      break;
    }

    case 16: {
      enterOuterAlt(_localctx, 16);
      setState(3273);
      package();
      break;
    }

    case 17: {
      enterOuterAlt(_localctx, 17);
      setState(3274);
      library_package();
      break;
    }

    case 18: {
      enterOuterAlt(_localctx, 18);
      setState(3275);
      specialization();
      break;
    }

    case 19: {
      enterOuterAlt(_localctx, 19);
      setState(3276);
      conjunction();
      break;
    }

    case 20: {
      enterOuterAlt(_localctx, 20);
      setState(3277);
      subclassification();
      break;
    }

    case 21: {
      enterOuterAlt(_localctx, 21);
      setState(3278);
      disjoining();
      break;
    }

    case 22: {
      enterOuterAlt(_localctx, 22);
      setState(3279);
      feature_inverting();
      break;
    }

    case 23: {
      enterOuterAlt(_localctx, 23);
      setState(3280);
      feature_typing();
      break;
    }

    case 24: {
      enterOuterAlt(_localctx, 24);
      setState(3281);
      subsetting();
      break;
    }

    case 25: {
      enterOuterAlt(_localctx, 25);
      setState(3282);
      redefinition();
      break;
    }

    case 26: {
      enterOuterAlt(_localctx, 26);
      setState(3283);
      type_featuring();
      break;
    }

    case 27: {
      enterOuterAlt(_localctx, 27);
      setState(3284);
      namespace_import();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Feature_elementContext ------------------------------------------------------------------

SysMLv2Parser::Feature_elementContext::Feature_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::FeatureContext* SysMLv2Parser::Feature_elementContext::feature() {
  return getRuleContext<SysMLv2Parser::FeatureContext>(0);
}

SysMLv2Parser::StepContext* SysMLv2Parser::Feature_elementContext::step() {
  return getRuleContext<SysMLv2Parser::StepContext>(0);
}

SysMLv2Parser::ExpressionContext* SysMLv2Parser::Feature_elementContext::expression() {
  return getRuleContext<SysMLv2Parser::ExpressionContext>(0);
}

SysMLv2Parser::Boolean_expressionContext* SysMLv2Parser::Feature_elementContext::boolean_expression() {
  return getRuleContext<SysMLv2Parser::Boolean_expressionContext>(0);
}

SysMLv2Parser::InvariantContext* SysMLv2Parser::Feature_elementContext::invariant() {
  return getRuleContext<SysMLv2Parser::InvariantContext>(0);
}

SysMLv2Parser::ConnectorContext* SysMLv2Parser::Feature_elementContext::connector() {
  return getRuleContext<SysMLv2Parser::ConnectorContext>(0);
}

SysMLv2Parser::Binding_connectorContext* SysMLv2Parser::Feature_elementContext::binding_connector() {
  return getRuleContext<SysMLv2Parser::Binding_connectorContext>(0);
}

SysMLv2Parser::SuccessionContext* SysMLv2Parser::Feature_elementContext::succession() {
  return getRuleContext<SysMLv2Parser::SuccessionContext>(0);
}

SysMLv2Parser::Item_flowContext* SysMLv2Parser::Feature_elementContext::item_flow() {
  return getRuleContext<SysMLv2Parser::Item_flowContext>(0);
}

SysMLv2Parser::Succession_item_flowContext* SysMLv2Parser::Feature_elementContext::succession_item_flow() {
  return getRuleContext<SysMLv2Parser::Succession_item_flowContext>(0);
}


size_t SysMLv2Parser::Feature_elementContext::getRuleIndex() const {
  return SysMLv2Parser::RuleFeature_element;
}

void SysMLv2Parser::Feature_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFeature_element(this);
}

void SysMLv2Parser::Feature_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFeature_element(this);
}

SysMLv2Parser::Feature_elementContext* SysMLv2Parser::feature_element() {
  Feature_elementContext *_localctx = _tracker.createInstance<Feature_elementContext>(_ctx, getState());
  enterRule(_localctx, 642, SysMLv2Parser::RuleFeature_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3297);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 297, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3287);
      feature();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3288);
      step();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3289);
      expression();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(3290);
      boolean_expression();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(3291);
      invariant();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(3292);
      connector();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(3293);
      binding_connector();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(3294);
      succession();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(3295);
      item_flow();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(3296);
      succession_item_flow();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Additional_optionsContext ------------------------------------------------------------------

SysMLv2Parser::Additional_optionsContext::Additional_optionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Meta_assignmentContext* SysMLv2Parser::Additional_optionsContext::meta_assignment() {
  return getRuleContext<SysMLv2Parser::Meta_assignmentContext>(0);
}


size_t SysMLv2Parser::Additional_optionsContext::getRuleIndex() const {
  return SysMLv2Parser::RuleAdditional_options;
}

void SysMLv2Parser::Additional_optionsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAdditional_options(this);
}

void SysMLv2Parser::Additional_optionsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAdditional_options(this);
}

SysMLv2Parser::Additional_optionsContext* SysMLv2Parser::additional_options() {
  Additional_optionsContext *_localctx = _tracker.createInstance<Additional_optionsContext>(_ctx, getState());
  enterRule(_localctx, 644, SysMLv2Parser::RuleAdditional_options);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3299);
    meta_assignment();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeContext ------------------------------------------------------------------

SysMLv2Parser::TypeContext::TypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Type_prefixContext* SysMLv2Parser::TypeContext::type_prefix() {
  return getRuleContext<SysMLv2Parser::Type_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::TypeContext::KEYWORD_TYPE() {
  return getToken(SysMLv2Parser::KEYWORD_TYPE, 0);
}

SysMLv2Parser::Type_declarationContext* SysMLv2Parser::TypeContext::type_declaration() {
  return getRuleContext<SysMLv2Parser::Type_declarationContext>(0);
}

SysMLv2Parser::Type_bodyContext* SysMLv2Parser::TypeContext::type_body() {
  return getRuleContext<SysMLv2Parser::Type_bodyContext>(0);
}


size_t SysMLv2Parser::TypeContext::getRuleIndex() const {
  return SysMLv2Parser::RuleType;
}

void SysMLv2Parser::TypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType(this);
}

void SysMLv2Parser::TypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType(this);
}

SysMLv2Parser::TypeContext* SysMLv2Parser::type() {
  TypeContext *_localctx = _tracker.createInstance<TypeContext>(_ctx, getState());
  enterRule(_localctx, 646, SysMLv2Parser::RuleType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3301);
    type_prefix();
    setState(3302);
    match(SysMLv2Parser::KEYWORD_TYPE);
    setState(3303);
    type_declaration();
    setState(3304);
    type_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_prefixContext ------------------------------------------------------------------

SysMLv2Parser::Type_prefixContext::Type_prefixContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Type_prefixContext::KEYWORD_ABSTRACT() {
  return getToken(SysMLv2Parser::KEYWORD_ABSTRACT, 0);
}

std::vector<SysMLv2Parser::Prefix_metadata_memberContext *> SysMLv2Parser::Type_prefixContext::prefix_metadata_member() {
  return getRuleContexts<SysMLv2Parser::Prefix_metadata_memberContext>();
}

SysMLv2Parser::Prefix_metadata_memberContext* SysMLv2Parser::Type_prefixContext::prefix_metadata_member(size_t i) {
  return getRuleContext<SysMLv2Parser::Prefix_metadata_memberContext>(i);
}


size_t SysMLv2Parser::Type_prefixContext::getRuleIndex() const {
  return SysMLv2Parser::RuleType_prefix;
}

void SysMLv2Parser::Type_prefixContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_prefix(this);
}

void SysMLv2Parser::Type_prefixContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_prefix(this);
}

SysMLv2Parser::Type_prefixContext* SysMLv2Parser::type_prefix() {
  Type_prefixContext *_localctx = _tracker.createInstance<Type_prefixContext>(_ctx, getState());
  enterRule(_localctx, 648, SysMLv2Parser::RuleType_prefix);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3307);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_ABSTRACT) {
      setState(3306);
      match(SysMLv2Parser::KEYWORD_ABSTRACT);
    }
    setState(3312);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SysMLv2Parser::SYMBOL_HASHTAG) {
      setState(3309);
      prefix_metadata_member();
      setState(3314);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_declarationContext ------------------------------------------------------------------

SysMLv2Parser::Type_declarationContext::Type_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::IdentificationContext* SysMLv2Parser::Type_declarationContext::identification() {
  return getRuleContext<SysMLv2Parser::IdentificationContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Type_declarationContext::KEYWORD_ALL() {
  return getToken(SysMLv2Parser::KEYWORD_ALL, 0);
}

SysMLv2Parser::Multiplicity_boundsContext* SysMLv2Parser::Type_declarationContext::multiplicity_bounds() {
  return getRuleContext<SysMLv2Parser::Multiplicity_boundsContext>(0);
}

std::vector<SysMLv2Parser::Specialization_partContext *> SysMLv2Parser::Type_declarationContext::specialization_part() {
  return getRuleContexts<SysMLv2Parser::Specialization_partContext>();
}

SysMLv2Parser::Specialization_partContext* SysMLv2Parser::Type_declarationContext::specialization_part(size_t i) {
  return getRuleContext<SysMLv2Parser::Specialization_partContext>(i);
}

std::vector<SysMLv2Parser::Conjugation_partContext *> SysMLv2Parser::Type_declarationContext::conjugation_part() {
  return getRuleContexts<SysMLv2Parser::Conjugation_partContext>();
}

SysMLv2Parser::Conjugation_partContext* SysMLv2Parser::Type_declarationContext::conjugation_part(size_t i) {
  return getRuleContext<SysMLv2Parser::Conjugation_partContext>(i);
}

std::vector<SysMLv2Parser::Type_relationship_partContext *> SysMLv2Parser::Type_declarationContext::type_relationship_part() {
  return getRuleContexts<SysMLv2Parser::Type_relationship_partContext>();
}

SysMLv2Parser::Type_relationship_partContext* SysMLv2Parser::Type_declarationContext::type_relationship_part(size_t i) {
  return getRuleContext<SysMLv2Parser::Type_relationship_partContext>(i);
}


size_t SysMLv2Parser::Type_declarationContext::getRuleIndex() const {
  return SysMLv2Parser::RuleType_declaration;
}

void SysMLv2Parser::Type_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_declaration(this);
}

void SysMLv2Parser::Type_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_declaration(this);
}

SysMLv2Parser::Type_declarationContext* SysMLv2Parser::type_declaration() {
  Type_declarationContext *_localctx = _tracker.createInstance<Type_declarationContext>(_ctx, getState());
  enterRule(_localctx, 650, SysMLv2Parser::RuleType_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3316);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_ALL) {
      setState(3315);
      match(SysMLv2Parser::KEYWORD_ALL);
    }
    setState(3318);
    identification();
    setState(3320);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::SYMBOL_SQUARE_BRACKET_OPEN) {
      setState(3319);
      multiplicity_bounds();
    }
    setState(3324); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(3324);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case SysMLv2Parser::SPECIALIZES: {
          setState(3322);
          specialization_part();
          break;
        }

        case SysMLv2Parser::CONJUNGATES: {
          setState(3323);
          conjugation_part();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(3326); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == SysMLv2Parser::SPECIALIZES

    || _la == SysMLv2Parser::CONJUNGATES);
    setState(3331);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 111) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 111)) & 524293) != 0) || _la == SysMLv2Parser::KEYWORD_UNIONS) {
      setState(3328);
      type_relationship_part();
      setState(3333);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Specialization_partContext ------------------------------------------------------------------

SysMLv2Parser::Specialization_partContext::Specialization_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Specialization_partContext::SPECIALIZES() {
  return getToken(SysMLv2Parser::SPECIALIZES, 0);
}

std::vector<SysMLv2Parser::Owned_specializationContext *> SysMLv2Parser::Specialization_partContext::owned_specialization() {
  return getRuleContexts<SysMLv2Parser::Owned_specializationContext>();
}

SysMLv2Parser::Owned_specializationContext* SysMLv2Parser::Specialization_partContext::owned_specialization(size_t i) {
  return getRuleContext<SysMLv2Parser::Owned_specializationContext>(i);
}

std::vector<tree::TerminalNode *> SysMLv2Parser::Specialization_partContext::SYMBOL_COMMA() {
  return getTokens(SysMLv2Parser::SYMBOL_COMMA);
}

tree::TerminalNode* SysMLv2Parser::Specialization_partContext::SYMBOL_COMMA(size_t i) {
  return getToken(SysMLv2Parser::SYMBOL_COMMA, i);
}


size_t SysMLv2Parser::Specialization_partContext::getRuleIndex() const {
  return SysMLv2Parser::RuleSpecialization_part;
}

void SysMLv2Parser::Specialization_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSpecialization_part(this);
}

void SysMLv2Parser::Specialization_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSpecialization_part(this);
}

SysMLv2Parser::Specialization_partContext* SysMLv2Parser::specialization_part() {
  Specialization_partContext *_localctx = _tracker.createInstance<Specialization_partContext>(_ctx, getState());
  enterRule(_localctx, 652, SysMLv2Parser::RuleSpecialization_part);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3334);
    match(SysMLv2Parser::SPECIALIZES);
    setState(3335);
    owned_specialization();
    setState(3340);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SysMLv2Parser::SYMBOL_COMMA) {
      setState(3336);
      match(SysMLv2Parser::SYMBOL_COMMA);
      setState(3337);
      owned_specialization();
      setState(3342);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Conjugation_partContext ------------------------------------------------------------------

SysMLv2Parser::Conjugation_partContext::Conjugation_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Conjugation_partContext::CONJUNGATES() {
  return getToken(SysMLv2Parser::CONJUNGATES, 0);
}

SysMLv2Parser::Owned_conjugationContext* SysMLv2Parser::Conjugation_partContext::owned_conjugation() {
  return getRuleContext<SysMLv2Parser::Owned_conjugationContext>(0);
}


size_t SysMLv2Parser::Conjugation_partContext::getRuleIndex() const {
  return SysMLv2Parser::RuleConjugation_part;
}

void SysMLv2Parser::Conjugation_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConjugation_part(this);
}

void SysMLv2Parser::Conjugation_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConjugation_part(this);
}

SysMLv2Parser::Conjugation_partContext* SysMLv2Parser::conjugation_part() {
  Conjugation_partContext *_localctx = _tracker.createInstance<Conjugation_partContext>(_ctx, getState());
  enterRule(_localctx, 654, SysMLv2Parser::RuleConjugation_part);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3343);
    match(SysMLv2Parser::CONJUNGATES);
    setState(3344);
    owned_conjugation();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_relationship_partContext ------------------------------------------------------------------

SysMLv2Parser::Type_relationship_partContext::Type_relationship_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Disjoining_partContext* SysMLv2Parser::Type_relationship_partContext::disjoining_part() {
  return getRuleContext<SysMLv2Parser::Disjoining_partContext>(0);
}

SysMLv2Parser::Unioning_partContext* SysMLv2Parser::Type_relationship_partContext::unioning_part() {
  return getRuleContext<SysMLv2Parser::Unioning_partContext>(0);
}

SysMLv2Parser::Intersecting_partContext* SysMLv2Parser::Type_relationship_partContext::intersecting_part() {
  return getRuleContext<SysMLv2Parser::Intersecting_partContext>(0);
}

SysMLv2Parser::Differencing_partContext* SysMLv2Parser::Type_relationship_partContext::differencing_part() {
  return getRuleContext<SysMLv2Parser::Differencing_partContext>(0);
}


size_t SysMLv2Parser::Type_relationship_partContext::getRuleIndex() const {
  return SysMLv2Parser::RuleType_relationship_part;
}

void SysMLv2Parser::Type_relationship_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_relationship_part(this);
}

void SysMLv2Parser::Type_relationship_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_relationship_part(this);
}

SysMLv2Parser::Type_relationship_partContext* SysMLv2Parser::type_relationship_part() {
  Type_relationship_partContext *_localctx = _tracker.createInstance<Type_relationship_partContext>(_ctx, getState());
  enterRule(_localctx, 656, SysMLv2Parser::RuleType_relationship_part);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3350);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SysMLv2Parser::KEYWORD_DISJOINT: {
        enterOuterAlt(_localctx, 1);
        setState(3346);
        disjoining_part();
        break;
      }

      case SysMLv2Parser::KEYWORD_UNIONS: {
        enterOuterAlt(_localctx, 2);
        setState(3347);
        unioning_part();
        break;
      }

      case SysMLv2Parser::KEYWORD_INTERSECTS: {
        enterOuterAlt(_localctx, 3);
        setState(3348);
        intersecting_part();
        break;
      }

      case SysMLv2Parser::KEYWORD_DIFFERENCES: {
        enterOuterAlt(_localctx, 4);
        setState(3349);
        differencing_part();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Disjoining_partContext ------------------------------------------------------------------

SysMLv2Parser::Disjoining_partContext::Disjoining_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Disjoining_partContext::KEYWORD_DISJOINT() {
  return getToken(SysMLv2Parser::KEYWORD_DISJOINT, 0);
}

tree::TerminalNode* SysMLv2Parser::Disjoining_partContext::KEYWORD_FROM() {
  return getToken(SysMLv2Parser::KEYWORD_FROM, 0);
}

std::vector<SysMLv2Parser::Owned_disjoiningContext *> SysMLv2Parser::Disjoining_partContext::owned_disjoining() {
  return getRuleContexts<SysMLv2Parser::Owned_disjoiningContext>();
}

SysMLv2Parser::Owned_disjoiningContext* SysMLv2Parser::Disjoining_partContext::owned_disjoining(size_t i) {
  return getRuleContext<SysMLv2Parser::Owned_disjoiningContext>(i);
}

std::vector<tree::TerminalNode *> SysMLv2Parser::Disjoining_partContext::SYMBOL_COMMA() {
  return getTokens(SysMLv2Parser::SYMBOL_COMMA);
}

tree::TerminalNode* SysMLv2Parser::Disjoining_partContext::SYMBOL_COMMA(size_t i) {
  return getToken(SysMLv2Parser::SYMBOL_COMMA, i);
}


size_t SysMLv2Parser::Disjoining_partContext::getRuleIndex() const {
  return SysMLv2Parser::RuleDisjoining_part;
}

void SysMLv2Parser::Disjoining_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDisjoining_part(this);
}

void SysMLv2Parser::Disjoining_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDisjoining_part(this);
}

SysMLv2Parser::Disjoining_partContext* SysMLv2Parser::disjoining_part() {
  Disjoining_partContext *_localctx = _tracker.createInstance<Disjoining_partContext>(_ctx, getState());
  enterRule(_localctx, 658, SysMLv2Parser::RuleDisjoining_part);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3352);
    match(SysMLv2Parser::KEYWORD_DISJOINT);
    setState(3353);
    match(SysMLv2Parser::KEYWORD_FROM);
    setState(3354);
    owned_disjoining();
    setState(3359);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SysMLv2Parser::SYMBOL_COMMA) {
      setState(3355);
      match(SysMLv2Parser::SYMBOL_COMMA);
      setState(3356);
      owned_disjoining();
      setState(3361);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Unioning_partContext ------------------------------------------------------------------

SysMLv2Parser::Unioning_partContext::Unioning_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Unioning_partContext::KEYWORD_UNIONS() {
  return getToken(SysMLv2Parser::KEYWORD_UNIONS, 0);
}

std::vector<SysMLv2Parser::UnioningContext *> SysMLv2Parser::Unioning_partContext::unioning() {
  return getRuleContexts<SysMLv2Parser::UnioningContext>();
}

SysMLv2Parser::UnioningContext* SysMLv2Parser::Unioning_partContext::unioning(size_t i) {
  return getRuleContext<SysMLv2Parser::UnioningContext>(i);
}

std::vector<tree::TerminalNode *> SysMLv2Parser::Unioning_partContext::SYMBOL_COMMA() {
  return getTokens(SysMLv2Parser::SYMBOL_COMMA);
}

tree::TerminalNode* SysMLv2Parser::Unioning_partContext::SYMBOL_COMMA(size_t i) {
  return getToken(SysMLv2Parser::SYMBOL_COMMA, i);
}


size_t SysMLv2Parser::Unioning_partContext::getRuleIndex() const {
  return SysMLv2Parser::RuleUnioning_part;
}

void SysMLv2Parser::Unioning_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnioning_part(this);
}

void SysMLv2Parser::Unioning_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnioning_part(this);
}

SysMLv2Parser::Unioning_partContext* SysMLv2Parser::unioning_part() {
  Unioning_partContext *_localctx = _tracker.createInstance<Unioning_partContext>(_ctx, getState());
  enterRule(_localctx, 660, SysMLv2Parser::RuleUnioning_part);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3362);
    match(SysMLv2Parser::KEYWORD_UNIONS);
    setState(3363);
    unioning();
    setState(3368);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SysMLv2Parser::SYMBOL_COMMA) {
      setState(3364);
      match(SysMLv2Parser::SYMBOL_COMMA);
      setState(3365);
      unioning();
      setState(3370);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Intersecting_partContext ------------------------------------------------------------------

SysMLv2Parser::Intersecting_partContext::Intersecting_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Intersecting_partContext::KEYWORD_INTERSECTS() {
  return getToken(SysMLv2Parser::KEYWORD_INTERSECTS, 0);
}

std::vector<SysMLv2Parser::IntersectingContext *> SysMLv2Parser::Intersecting_partContext::intersecting() {
  return getRuleContexts<SysMLv2Parser::IntersectingContext>();
}

SysMLv2Parser::IntersectingContext* SysMLv2Parser::Intersecting_partContext::intersecting(size_t i) {
  return getRuleContext<SysMLv2Parser::IntersectingContext>(i);
}

std::vector<tree::TerminalNode *> SysMLv2Parser::Intersecting_partContext::SYMBOL_COMMA() {
  return getTokens(SysMLv2Parser::SYMBOL_COMMA);
}

tree::TerminalNode* SysMLv2Parser::Intersecting_partContext::SYMBOL_COMMA(size_t i) {
  return getToken(SysMLv2Parser::SYMBOL_COMMA, i);
}


size_t SysMLv2Parser::Intersecting_partContext::getRuleIndex() const {
  return SysMLv2Parser::RuleIntersecting_part;
}

void SysMLv2Parser::Intersecting_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIntersecting_part(this);
}

void SysMLv2Parser::Intersecting_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIntersecting_part(this);
}

SysMLv2Parser::Intersecting_partContext* SysMLv2Parser::intersecting_part() {
  Intersecting_partContext *_localctx = _tracker.createInstance<Intersecting_partContext>(_ctx, getState());
  enterRule(_localctx, 662, SysMLv2Parser::RuleIntersecting_part);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3371);
    match(SysMLv2Parser::KEYWORD_INTERSECTS);
    setState(3372);
    intersecting();
    setState(3377);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SysMLv2Parser::SYMBOL_COMMA) {
      setState(3373);
      match(SysMLv2Parser::SYMBOL_COMMA);
      setState(3374);
      intersecting();
      setState(3379);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Differencing_partContext ------------------------------------------------------------------

SysMLv2Parser::Differencing_partContext::Differencing_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Differencing_partContext::KEYWORD_DIFFERENCES() {
  return getToken(SysMLv2Parser::KEYWORD_DIFFERENCES, 0);
}

std::vector<SysMLv2Parser::DifferencingContext *> SysMLv2Parser::Differencing_partContext::differencing() {
  return getRuleContexts<SysMLv2Parser::DifferencingContext>();
}

SysMLv2Parser::DifferencingContext* SysMLv2Parser::Differencing_partContext::differencing(size_t i) {
  return getRuleContext<SysMLv2Parser::DifferencingContext>(i);
}

std::vector<tree::TerminalNode *> SysMLv2Parser::Differencing_partContext::SYMBOL_COMMA() {
  return getTokens(SysMLv2Parser::SYMBOL_COMMA);
}

tree::TerminalNode* SysMLv2Parser::Differencing_partContext::SYMBOL_COMMA(size_t i) {
  return getToken(SysMLv2Parser::SYMBOL_COMMA, i);
}


size_t SysMLv2Parser::Differencing_partContext::getRuleIndex() const {
  return SysMLv2Parser::RuleDifferencing_part;
}

void SysMLv2Parser::Differencing_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDifferencing_part(this);
}

void SysMLv2Parser::Differencing_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDifferencing_part(this);
}

SysMLv2Parser::Differencing_partContext* SysMLv2Parser::differencing_part() {
  Differencing_partContext *_localctx = _tracker.createInstance<Differencing_partContext>(_ctx, getState());
  enterRule(_localctx, 664, SysMLv2Parser::RuleDifferencing_part);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3380);
    match(SysMLv2Parser::KEYWORD_DIFFERENCES);
    setState(3381);
    differencing();
    setState(3386);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SysMLv2Parser::SYMBOL_COMMA) {
      setState(3382);
      match(SysMLv2Parser::SYMBOL_COMMA);
      setState(3383);
      differencing();
      setState(3388);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_bodyContext ------------------------------------------------------------------

SysMLv2Parser::Type_bodyContext::Type_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Type_bodyContext::SYMBOL_STATEMENT_DELIMITER() {
  return getToken(SysMLv2Parser::SYMBOL_STATEMENT_DELIMITER, 0);
}

tree::TerminalNode* SysMLv2Parser::Type_bodyContext::SYMBOL_CURLY_BRACKET_OPEN() {
  return getToken(SysMLv2Parser::SYMBOL_CURLY_BRACKET_OPEN, 0);
}

SysMLv2Parser::Type_body_elementsContext* SysMLv2Parser::Type_bodyContext::type_body_elements() {
  return getRuleContext<SysMLv2Parser::Type_body_elementsContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Type_bodyContext::SYMBOL_CURLY_BRACKET_CLOSE() {
  return getToken(SysMLv2Parser::SYMBOL_CURLY_BRACKET_CLOSE, 0);
}


size_t SysMLv2Parser::Type_bodyContext::getRuleIndex() const {
  return SysMLv2Parser::RuleType_body;
}

void SysMLv2Parser::Type_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_body(this);
}

void SysMLv2Parser::Type_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_body(this);
}

SysMLv2Parser::Type_bodyContext* SysMLv2Parser::type_body() {
  Type_bodyContext *_localctx = _tracker.createInstance<Type_bodyContext>(_ctx, getState());
  enterRule(_localctx, 666, SysMLv2Parser::RuleType_body);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3394);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SysMLv2Parser::SYMBOL_STATEMENT_DELIMITER: {
        enterOuterAlt(_localctx, 1);
        setState(3389);
        match(SysMLv2Parser::SYMBOL_STATEMENT_DELIMITER);
        break;
      }

      case SysMLv2Parser::SYMBOL_CURLY_BRACKET_OPEN: {
        enterOuterAlt(_localctx, 2);
        setState(3390);
        match(SysMLv2Parser::SYMBOL_CURLY_BRACKET_OPEN);
        setState(3391);
        type_body_elements();
        setState(3392);
        match(SysMLv2Parser::SYMBOL_CURLY_BRACKET_CLOSE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_body_elementsContext ------------------------------------------------------------------

SysMLv2Parser::Type_body_elementsContext::Type_body_elementsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<SysMLv2Parser::ElementContext *> SysMLv2Parser::Type_body_elementsContext::element() {
  return getRuleContexts<SysMLv2Parser::ElementContext>();
}

SysMLv2Parser::ElementContext* SysMLv2Parser::Type_body_elementsContext::element(size_t i) {
  return getRuleContext<SysMLv2Parser::ElementContext>(i);
}


size_t SysMLv2Parser::Type_body_elementsContext::getRuleIndex() const {
  return SysMLv2Parser::RuleType_body_elements;
}

void SysMLv2Parser::Type_body_elementsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_body_elements(this);
}

void SysMLv2Parser::Type_body_elementsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_body_elements(this);
}

SysMLv2Parser::Type_body_elementsContext* SysMLv2Parser::type_body_elements() {
  Type_body_elementsContext *_localctx = _tracker.createInstance<Type_body_elementsContext>(_ctx, getState());
  enterRule(_localctx, 668, SysMLv2Parser::RuleType_body_elements);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3399);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SysMLv2Parser::KEYWORD_DERIVED || ((((_la - 87) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 87)) & 553908830077708169) != 0) || ((((_la - 151) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 151)) & 112590067542513407) != 0) || _la == SysMLv2Parser::NAME) {
      setState(3396);
      element();
      setState(3401);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_body_elementContext ------------------------------------------------------------------

SysMLv2Parser::Type_body_elementContext::Type_body_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::ElementContext* SysMLv2Parser::Type_body_elementContext::element() {
  return getRuleContext<SysMLv2Parser::ElementContext>(0);
}


size_t SysMLv2Parser::Type_body_elementContext::getRuleIndex() const {
  return SysMLv2Parser::RuleType_body_element;
}

void SysMLv2Parser::Type_body_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_body_element(this);
}

void SysMLv2Parser::Type_body_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_body_element(this);
}

SysMLv2Parser::Type_body_elementContext* SysMLv2Parser::type_body_element() {
  Type_body_elementContext *_localctx = _tracker.createInstance<Type_body_elementContext>(_ctx, getState());
  enterRule(_localctx, 670, SysMLv2Parser::RuleType_body_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3402);
    element();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SpecializationContext ------------------------------------------------------------------

SysMLv2Parser::SpecializationContext::SpecializationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::SpecializationContext::KEYWORD_SUBTYPE() {
  return getToken(SysMLv2Parser::KEYWORD_SUBTYPE, 0);
}

SysMLv2Parser::Specific_typeContext* SysMLv2Parser::SpecializationContext::specific_type() {
  return getRuleContext<SysMLv2Parser::Specific_typeContext>(0);
}

tree::TerminalNode* SysMLv2Parser::SpecializationContext::SPECIALIZES() {
  return getToken(SysMLv2Parser::SPECIALIZES, 0);
}

SysMLv2Parser::General_typeContext* SysMLv2Parser::SpecializationContext::general_type() {
  return getRuleContext<SysMLv2Parser::General_typeContext>(0);
}

SysMLv2Parser::Relationship_bodyContext* SysMLv2Parser::SpecializationContext::relationship_body() {
  return getRuleContext<SysMLv2Parser::Relationship_bodyContext>(0);
}

tree::TerminalNode* SysMLv2Parser::SpecializationContext::KEYWORD_SPECILIZATION() {
  return getToken(SysMLv2Parser::KEYWORD_SPECILIZATION, 0);
}

SysMLv2Parser::IdentificationContext* SysMLv2Parser::SpecializationContext::identification() {
  return getRuleContext<SysMLv2Parser::IdentificationContext>(0);
}


size_t SysMLv2Parser::SpecializationContext::getRuleIndex() const {
  return SysMLv2Parser::RuleSpecialization;
}

void SysMLv2Parser::SpecializationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSpecialization(this);
}

void SysMLv2Parser::SpecializationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSpecialization(this);
}

SysMLv2Parser::SpecializationContext* SysMLv2Parser::specialization() {
  SpecializationContext *_localctx = _tracker.createInstance<SpecializationContext>(_ctx, getState());
  enterRule(_localctx, 672, SysMLv2Parser::RuleSpecialization);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3406);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_SPECILIZATION) {
      setState(3404);
      match(SysMLv2Parser::KEYWORD_SPECILIZATION);
      setState(3405);
      identification();
    }
    setState(3408);
    match(SysMLv2Parser::KEYWORD_SUBTYPE);
    setState(3409);
    specific_type();
    setState(3410);
    match(SysMLv2Parser::SPECIALIZES);
    setState(3411);
    general_type();
    setState(3412);
    relationship_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Owned_specializationContext ------------------------------------------------------------------

SysMLv2Parser::Owned_specializationContext::Owned_specializationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::General_typeContext* SysMLv2Parser::Owned_specializationContext::general_type() {
  return getRuleContext<SysMLv2Parser::General_typeContext>(0);
}


size_t SysMLv2Parser::Owned_specializationContext::getRuleIndex() const {
  return SysMLv2Parser::RuleOwned_specialization;
}

void SysMLv2Parser::Owned_specializationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOwned_specialization(this);
}

void SysMLv2Parser::Owned_specializationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOwned_specialization(this);
}

SysMLv2Parser::Owned_specializationContext* SysMLv2Parser::owned_specialization() {
  Owned_specializationContext *_localctx = _tracker.createInstance<Owned_specializationContext>(_ctx, getState());
  enterRule(_localctx, 674, SysMLv2Parser::RuleOwned_specialization);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3414);
    general_type();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Specific_typeContext ------------------------------------------------------------------

SysMLv2Parser::Specific_typeContext::Specific_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Qualified_nameContext* SysMLv2Parser::Specific_typeContext::qualified_name() {
  return getRuleContext<SysMLv2Parser::Qualified_nameContext>(0);
}

SysMLv2Parser::Owned_feature_chainContext* SysMLv2Parser::Specific_typeContext::owned_feature_chain() {
  return getRuleContext<SysMLv2Parser::Owned_feature_chainContext>(0);
}


size_t SysMLv2Parser::Specific_typeContext::getRuleIndex() const {
  return SysMLv2Parser::RuleSpecific_type;
}

void SysMLv2Parser::Specific_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSpecific_type(this);
}

void SysMLv2Parser::Specific_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSpecific_type(this);
}

SysMLv2Parser::Specific_typeContext* SysMLv2Parser::specific_type() {
  Specific_typeContext *_localctx = _tracker.createInstance<Specific_typeContext>(_ctx, getState());
  enterRule(_localctx, 676, SysMLv2Parser::RuleSpecific_type);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3418);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 314, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3416);
      qualified_name();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3417);
      owned_feature_chain();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- General_typeContext ------------------------------------------------------------------

SysMLv2Parser::General_typeContext::General_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Qualified_nameContext* SysMLv2Parser::General_typeContext::qualified_name() {
  return getRuleContext<SysMLv2Parser::Qualified_nameContext>(0);
}

SysMLv2Parser::Owned_feature_chainContext* SysMLv2Parser::General_typeContext::owned_feature_chain() {
  return getRuleContext<SysMLv2Parser::Owned_feature_chainContext>(0);
}


size_t SysMLv2Parser::General_typeContext::getRuleIndex() const {
  return SysMLv2Parser::RuleGeneral_type;
}

void SysMLv2Parser::General_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGeneral_type(this);
}

void SysMLv2Parser::General_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGeneral_type(this);
}

SysMLv2Parser::General_typeContext* SysMLv2Parser::general_type() {
  General_typeContext *_localctx = _tracker.createInstance<General_typeContext>(_ctx, getState());
  enterRule(_localctx, 678, SysMLv2Parser::RuleGeneral_type);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3422);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 315, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3420);
      qualified_name();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3421);
      owned_feature_chain();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConjunctionContext ------------------------------------------------------------------

SysMLv2Parser::ConjunctionContext::ConjunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::ConjunctionContext::KEYWORD_CONJUGATE() {
  return getToken(SysMLv2Parser::KEYWORD_CONJUGATE, 0);
}

tree::TerminalNode* SysMLv2Parser::ConjunctionContext::CONJUNGATES() {
  return getToken(SysMLv2Parser::CONJUNGATES, 0);
}

SysMLv2Parser::Relationship_bodyContext* SysMLv2Parser::ConjunctionContext::relationship_body() {
  return getRuleContext<SysMLv2Parser::Relationship_bodyContext>(0);
}

std::vector<SysMLv2Parser::Qualified_nameContext *> SysMLv2Parser::ConjunctionContext::qualified_name() {
  return getRuleContexts<SysMLv2Parser::Qualified_nameContext>();
}

SysMLv2Parser::Qualified_nameContext* SysMLv2Parser::ConjunctionContext::qualified_name(size_t i) {
  return getRuleContext<SysMLv2Parser::Qualified_nameContext>(i);
}

std::vector<SysMLv2Parser::Feature_chainContext *> SysMLv2Parser::ConjunctionContext::feature_chain() {
  return getRuleContexts<SysMLv2Parser::Feature_chainContext>();
}

SysMLv2Parser::Feature_chainContext* SysMLv2Parser::ConjunctionContext::feature_chain(size_t i) {
  return getRuleContext<SysMLv2Parser::Feature_chainContext>(i);
}

tree::TerminalNode* SysMLv2Parser::ConjunctionContext::KEYWORD_CONJUGATION() {
  return getToken(SysMLv2Parser::KEYWORD_CONJUGATION, 0);
}

SysMLv2Parser::IdentificationContext* SysMLv2Parser::ConjunctionContext::identification() {
  return getRuleContext<SysMLv2Parser::IdentificationContext>(0);
}


size_t SysMLv2Parser::ConjunctionContext::getRuleIndex() const {
  return SysMLv2Parser::RuleConjunction;
}

void SysMLv2Parser::ConjunctionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConjunction(this);
}

void SysMLv2Parser::ConjunctionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConjunction(this);
}

SysMLv2Parser::ConjunctionContext* SysMLv2Parser::conjunction() {
  ConjunctionContext *_localctx = _tracker.createInstance<ConjunctionContext>(_ctx, getState());
  enterRule(_localctx, 680, SysMLv2Parser::RuleConjunction);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3426);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_CONJUGATION) {
      setState(3424);
      match(SysMLv2Parser::KEYWORD_CONJUGATION);
      setState(3425);
      identification();
    }
    setState(3428);
    match(SysMLv2Parser::KEYWORD_CONJUGATE);
    setState(3431);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 317, _ctx)) {
    case 1: {
      setState(3429);
      qualified_name();
      break;
    }

    case 2: {
      setState(3430);
      feature_chain();
      break;
    }

    default:
      break;
    }
    setState(3433);
    match(SysMLv2Parser::CONJUNGATES);
    setState(3436);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 318, _ctx)) {
    case 1: {
      setState(3434);
      qualified_name();
      break;
    }

    case 2: {
      setState(3435);
      feature_chain();
      break;
    }

    default:
      break;
    }
    setState(3438);
    relationship_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Owned_conjugationContext ------------------------------------------------------------------

SysMLv2Parser::Owned_conjugationContext::Owned_conjugationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Qualified_nameContext* SysMLv2Parser::Owned_conjugationContext::qualified_name() {
  return getRuleContext<SysMLv2Parser::Qualified_nameContext>(0);
}

SysMLv2Parser::Feature_chainContext* SysMLv2Parser::Owned_conjugationContext::feature_chain() {
  return getRuleContext<SysMLv2Parser::Feature_chainContext>(0);
}


size_t SysMLv2Parser::Owned_conjugationContext::getRuleIndex() const {
  return SysMLv2Parser::RuleOwned_conjugation;
}

void SysMLv2Parser::Owned_conjugationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOwned_conjugation(this);
}

void SysMLv2Parser::Owned_conjugationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOwned_conjugation(this);
}

SysMLv2Parser::Owned_conjugationContext* SysMLv2Parser::owned_conjugation() {
  Owned_conjugationContext *_localctx = _tracker.createInstance<Owned_conjugationContext>(_ctx, getState());
  enterRule(_localctx, 682, SysMLv2Parser::RuleOwned_conjugation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3442);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 319, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3440);
      qualified_name();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3441);
      feature_chain();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DisjoiningContext ------------------------------------------------------------------

SysMLv2Parser::DisjoiningContext::DisjoiningContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::DisjoiningContext::KEYWORD_DISJOINT() {
  return getToken(SysMLv2Parser::KEYWORD_DISJOINT, 0);
}

tree::TerminalNode* SysMLv2Parser::DisjoiningContext::KEYWORD_FROM() {
  return getToken(SysMLv2Parser::KEYWORD_FROM, 0);
}

SysMLv2Parser::Relationship_bodyContext* SysMLv2Parser::DisjoiningContext::relationship_body() {
  return getRuleContext<SysMLv2Parser::Relationship_bodyContext>(0);
}

std::vector<SysMLv2Parser::Qualified_nameContext *> SysMLv2Parser::DisjoiningContext::qualified_name() {
  return getRuleContexts<SysMLv2Parser::Qualified_nameContext>();
}

SysMLv2Parser::Qualified_nameContext* SysMLv2Parser::DisjoiningContext::qualified_name(size_t i) {
  return getRuleContext<SysMLv2Parser::Qualified_nameContext>(i);
}

std::vector<SysMLv2Parser::Feature_chainContext *> SysMLv2Parser::DisjoiningContext::feature_chain() {
  return getRuleContexts<SysMLv2Parser::Feature_chainContext>();
}

SysMLv2Parser::Feature_chainContext* SysMLv2Parser::DisjoiningContext::feature_chain(size_t i) {
  return getRuleContext<SysMLv2Parser::Feature_chainContext>(i);
}

tree::TerminalNode* SysMLv2Parser::DisjoiningContext::KEYWORD_DISJOINING() {
  return getToken(SysMLv2Parser::KEYWORD_DISJOINING, 0);
}

SysMLv2Parser::IdentificationContext* SysMLv2Parser::DisjoiningContext::identification() {
  return getRuleContext<SysMLv2Parser::IdentificationContext>(0);
}


size_t SysMLv2Parser::DisjoiningContext::getRuleIndex() const {
  return SysMLv2Parser::RuleDisjoining;
}

void SysMLv2Parser::DisjoiningContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDisjoining(this);
}

void SysMLv2Parser::DisjoiningContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDisjoining(this);
}

SysMLv2Parser::DisjoiningContext* SysMLv2Parser::disjoining() {
  DisjoiningContext *_localctx = _tracker.createInstance<DisjoiningContext>(_ctx, getState());
  enterRule(_localctx, 684, SysMLv2Parser::RuleDisjoining);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3446);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_DISJOINING) {
      setState(3444);
      match(SysMLv2Parser::KEYWORD_DISJOINING);
      setState(3445);
      identification();
    }
    setState(3448);
    match(SysMLv2Parser::KEYWORD_DISJOINT);
    setState(3451);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 321, _ctx)) {
    case 1: {
      setState(3449);
      qualified_name();
      break;
    }

    case 2: {
      setState(3450);
      feature_chain();
      break;
    }

    default:
      break;
    }
    setState(3453);
    match(SysMLv2Parser::KEYWORD_FROM);
    setState(3456);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 322, _ctx)) {
    case 1: {
      setState(3454);
      qualified_name();
      break;
    }

    case 2: {
      setState(3455);
      feature_chain();
      break;
    }

    default:
      break;
    }
    setState(3458);
    relationship_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Owned_disjoiningContext ------------------------------------------------------------------

SysMLv2Parser::Owned_disjoiningContext::Owned_disjoiningContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Qualified_nameContext* SysMLv2Parser::Owned_disjoiningContext::qualified_name() {
  return getRuleContext<SysMLv2Parser::Qualified_nameContext>(0);
}

SysMLv2Parser::Feature_chainContext* SysMLv2Parser::Owned_disjoiningContext::feature_chain() {
  return getRuleContext<SysMLv2Parser::Feature_chainContext>(0);
}


size_t SysMLv2Parser::Owned_disjoiningContext::getRuleIndex() const {
  return SysMLv2Parser::RuleOwned_disjoining;
}

void SysMLv2Parser::Owned_disjoiningContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOwned_disjoining(this);
}

void SysMLv2Parser::Owned_disjoiningContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOwned_disjoining(this);
}

SysMLv2Parser::Owned_disjoiningContext* SysMLv2Parser::owned_disjoining() {
  Owned_disjoiningContext *_localctx = _tracker.createInstance<Owned_disjoiningContext>(_ctx, getState());
  enterRule(_localctx, 686, SysMLv2Parser::RuleOwned_disjoining);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3462);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 323, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3460);
      qualified_name();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3461);
      feature_chain();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnioningContext ------------------------------------------------------------------

SysMLv2Parser::UnioningContext::UnioningContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Qualified_nameContext* SysMLv2Parser::UnioningContext::qualified_name() {
  return getRuleContext<SysMLv2Parser::Qualified_nameContext>(0);
}

SysMLv2Parser::Owned_feature_chainContext* SysMLv2Parser::UnioningContext::owned_feature_chain() {
  return getRuleContext<SysMLv2Parser::Owned_feature_chainContext>(0);
}


size_t SysMLv2Parser::UnioningContext::getRuleIndex() const {
  return SysMLv2Parser::RuleUnioning;
}

void SysMLv2Parser::UnioningContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnioning(this);
}

void SysMLv2Parser::UnioningContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnioning(this);
}

SysMLv2Parser::UnioningContext* SysMLv2Parser::unioning() {
  UnioningContext *_localctx = _tracker.createInstance<UnioningContext>(_ctx, getState());
  enterRule(_localctx, 688, SysMLv2Parser::RuleUnioning);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3466);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 324, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3464);
      qualified_name();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3465);
      owned_feature_chain();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IntersectingContext ------------------------------------------------------------------

SysMLv2Parser::IntersectingContext::IntersectingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Qualified_nameContext* SysMLv2Parser::IntersectingContext::qualified_name() {
  return getRuleContext<SysMLv2Parser::Qualified_nameContext>(0);
}

SysMLv2Parser::Owned_feature_chainContext* SysMLv2Parser::IntersectingContext::owned_feature_chain() {
  return getRuleContext<SysMLv2Parser::Owned_feature_chainContext>(0);
}


size_t SysMLv2Parser::IntersectingContext::getRuleIndex() const {
  return SysMLv2Parser::RuleIntersecting;
}

void SysMLv2Parser::IntersectingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIntersecting(this);
}

void SysMLv2Parser::IntersectingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIntersecting(this);
}

SysMLv2Parser::IntersectingContext* SysMLv2Parser::intersecting() {
  IntersectingContext *_localctx = _tracker.createInstance<IntersectingContext>(_ctx, getState());
  enterRule(_localctx, 690, SysMLv2Parser::RuleIntersecting);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3470);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 325, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3468);
      qualified_name();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3469);
      owned_feature_chain();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DifferencingContext ------------------------------------------------------------------

SysMLv2Parser::DifferencingContext::DifferencingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Qualified_nameContext* SysMLv2Parser::DifferencingContext::qualified_name() {
  return getRuleContext<SysMLv2Parser::Qualified_nameContext>(0);
}

SysMLv2Parser::Owned_feature_chainContext* SysMLv2Parser::DifferencingContext::owned_feature_chain() {
  return getRuleContext<SysMLv2Parser::Owned_feature_chainContext>(0);
}


size_t SysMLv2Parser::DifferencingContext::getRuleIndex() const {
  return SysMLv2Parser::RuleDifferencing;
}

void SysMLv2Parser::DifferencingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDifferencing(this);
}

void SysMLv2Parser::DifferencingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDifferencing(this);
}

SysMLv2Parser::DifferencingContext* SysMLv2Parser::differencing() {
  DifferencingContext *_localctx = _tracker.createInstance<DifferencingContext>(_ctx, getState());
  enterRule(_localctx, 692, SysMLv2Parser::RuleDifferencing);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3474);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 326, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3472);
      qualified_name();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3473);
      owned_feature_chain();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Feature_memberContext ------------------------------------------------------------------

SysMLv2Parser::Feature_memberContext::Feature_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Type_feature_memberContext* SysMLv2Parser::Feature_memberContext::type_feature_member() {
  return getRuleContext<SysMLv2Parser::Type_feature_memberContext>(0);
}

SysMLv2Parser::Owned_feature_memberContext* SysMLv2Parser::Feature_memberContext::owned_feature_member() {
  return getRuleContext<SysMLv2Parser::Owned_feature_memberContext>(0);
}


size_t SysMLv2Parser::Feature_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleFeature_member;
}

void SysMLv2Parser::Feature_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFeature_member(this);
}

void SysMLv2Parser::Feature_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFeature_member(this);
}

SysMLv2Parser::Feature_memberContext* SysMLv2Parser::feature_member() {
  Feature_memberContext *_localctx = _tracker.createInstance<Feature_memberContext>(_ctx, getState());
  enterRule(_localctx, 694, SysMLv2Parser::RuleFeature_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3478);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 327, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3476);
      type_feature_member();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3477);
      owned_feature_member();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_feature_memberContext ------------------------------------------------------------------

SysMLv2Parser::Type_feature_memberContext::Type_feature_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Member_prefixContext* SysMLv2Parser::Type_feature_memberContext::member_prefix() {
  return getRuleContext<SysMLv2Parser::Member_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Type_feature_memberContext::KEYWORD_MEMBER() {
  return getToken(SysMLv2Parser::KEYWORD_MEMBER, 0);
}

SysMLv2Parser::Feature_elementContext* SysMLv2Parser::Type_feature_memberContext::feature_element() {
  return getRuleContext<SysMLv2Parser::Feature_elementContext>(0);
}


size_t SysMLv2Parser::Type_feature_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleType_feature_member;
}

void SysMLv2Parser::Type_feature_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_feature_member(this);
}

void SysMLv2Parser::Type_feature_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_feature_member(this);
}

SysMLv2Parser::Type_feature_memberContext* SysMLv2Parser::type_feature_member() {
  Type_feature_memberContext *_localctx = _tracker.createInstance<Type_feature_memberContext>(_ctx, getState());
  enterRule(_localctx, 696, SysMLv2Parser::RuleType_feature_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3480);
    member_prefix();
    setState(3481);
    match(SysMLv2Parser::KEYWORD_MEMBER);
    setState(3482);
    feature_element();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Owned_feature_memberContext ------------------------------------------------------------------

SysMLv2Parser::Owned_feature_memberContext::Owned_feature_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Member_prefixContext* SysMLv2Parser::Owned_feature_memberContext::member_prefix() {
  return getRuleContext<SysMLv2Parser::Member_prefixContext>(0);
}

SysMLv2Parser::Feature_elementContext* SysMLv2Parser::Owned_feature_memberContext::feature_element() {
  return getRuleContext<SysMLv2Parser::Feature_elementContext>(0);
}


size_t SysMLv2Parser::Owned_feature_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleOwned_feature_member;
}

void SysMLv2Parser::Owned_feature_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOwned_feature_member(this);
}

void SysMLv2Parser::Owned_feature_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOwned_feature_member(this);
}

SysMLv2Parser::Owned_feature_memberContext* SysMLv2Parser::owned_feature_member() {
  Owned_feature_memberContext *_localctx = _tracker.createInstance<Owned_feature_memberContext>(_ctx, getState());
  enterRule(_localctx, 698, SysMLv2Parser::RuleOwned_feature_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3484);
    member_prefix();
    setState(3485);
    feature_element();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassifierContext ------------------------------------------------------------------

SysMLv2Parser::ClassifierContext::ClassifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::ClassifierContext::KEYWORD_CLASSIFIER() {
  return getToken(SysMLv2Parser::KEYWORD_CLASSIFIER, 0);
}

SysMLv2Parser::Classifier_declarationContext* SysMLv2Parser::ClassifierContext::classifier_declaration() {
  return getRuleContext<SysMLv2Parser::Classifier_declarationContext>(0);
}

SysMLv2Parser::Type_bodyContext* SysMLv2Parser::ClassifierContext::type_body() {
  return getRuleContext<SysMLv2Parser::Type_bodyContext>(0);
}

SysMLv2Parser::Type_prefixContext* SysMLv2Parser::ClassifierContext::type_prefix() {
  return getRuleContext<SysMLv2Parser::Type_prefixContext>(0);
}


size_t SysMLv2Parser::ClassifierContext::getRuleIndex() const {
  return SysMLv2Parser::RuleClassifier;
}

void SysMLv2Parser::ClassifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassifier(this);
}

void SysMLv2Parser::ClassifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassifier(this);
}

SysMLv2Parser::ClassifierContext* SysMLv2Parser::classifier() {
  ClassifierContext *_localctx = _tracker.createInstance<ClassifierContext>(_ctx, getState());
  enterRule(_localctx, 700, SysMLv2Parser::RuleClassifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3488);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 328, _ctx)) {
    case 1: {
      setState(3487);
      type_prefix();
      break;
    }

    default:
      break;
    }
    setState(3490);
    match(SysMLv2Parser::KEYWORD_CLASSIFIER);
    setState(3491);
    classifier_declaration();
    setState(3492);
    type_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Classifier_declarationContext ------------------------------------------------------------------

SysMLv2Parser::Classifier_declarationContext::Classifier_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::IdentificationContext* SysMLv2Parser::Classifier_declarationContext::identification() {
  return getRuleContext<SysMLv2Parser::IdentificationContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Classifier_declarationContext::KEYWORD_ALL() {
  return getToken(SysMLv2Parser::KEYWORD_ALL, 0);
}

SysMLv2Parser::Multiplicity_boundsContext* SysMLv2Parser::Classifier_declarationContext::multiplicity_bounds() {
  return getRuleContext<SysMLv2Parser::Multiplicity_boundsContext>(0);
}

SysMLv2Parser::Superclassing_partContext* SysMLv2Parser::Classifier_declarationContext::superclassing_part() {
  return getRuleContext<SysMLv2Parser::Superclassing_partContext>(0);
}

SysMLv2Parser::Conjugation_partContext* SysMLv2Parser::Classifier_declarationContext::conjugation_part() {
  return getRuleContext<SysMLv2Parser::Conjugation_partContext>(0);
}

std::vector<SysMLv2Parser::Type_relationship_partContext *> SysMLv2Parser::Classifier_declarationContext::type_relationship_part() {
  return getRuleContexts<SysMLv2Parser::Type_relationship_partContext>();
}

SysMLv2Parser::Type_relationship_partContext* SysMLv2Parser::Classifier_declarationContext::type_relationship_part(size_t i) {
  return getRuleContext<SysMLv2Parser::Type_relationship_partContext>(i);
}


size_t SysMLv2Parser::Classifier_declarationContext::getRuleIndex() const {
  return SysMLv2Parser::RuleClassifier_declaration;
}

void SysMLv2Parser::Classifier_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassifier_declaration(this);
}

void SysMLv2Parser::Classifier_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassifier_declaration(this);
}

SysMLv2Parser::Classifier_declarationContext* SysMLv2Parser::classifier_declaration() {
  Classifier_declarationContext *_localctx = _tracker.createInstance<Classifier_declarationContext>(_ctx, getState());
  enterRule(_localctx, 702, SysMLv2Parser::RuleClassifier_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3495);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_ALL) {
      setState(3494);
      match(SysMLv2Parser::KEYWORD_ALL);
    }
    setState(3497);
    identification();
    setState(3499);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::SYMBOL_SQUARE_BRACKET_OPEN) {
      setState(3498);
      multiplicity_bounds();
    }
    setState(3503);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 331, _ctx)) {
    case 1: {
      setState(3501);
      superclassing_part();
      break;
    }

    case 2: {
      setState(3502);
      conjugation_part();
      break;
    }

    default:
      break;
    }
    setState(3508);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 111) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 111)) & 524293) != 0) || _la == SysMLv2Parser::KEYWORD_UNIONS) {
      setState(3505);
      type_relationship_part();
      setState(3510);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Superclassing_partContext ------------------------------------------------------------------

SysMLv2Parser::Superclassing_partContext::Superclassing_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Superclassing_partContext::SPECIALIZES() {
  return getToken(SysMLv2Parser::SPECIALIZES, 0);
}

std::vector<SysMLv2Parser::Owned_subclassificationContext *> SysMLv2Parser::Superclassing_partContext::owned_subclassification() {
  return getRuleContexts<SysMLv2Parser::Owned_subclassificationContext>();
}

SysMLv2Parser::Owned_subclassificationContext* SysMLv2Parser::Superclassing_partContext::owned_subclassification(size_t i) {
  return getRuleContext<SysMLv2Parser::Owned_subclassificationContext>(i);
}

std::vector<tree::TerminalNode *> SysMLv2Parser::Superclassing_partContext::SYMBOL_COMMA() {
  return getTokens(SysMLv2Parser::SYMBOL_COMMA);
}

tree::TerminalNode* SysMLv2Parser::Superclassing_partContext::SYMBOL_COMMA(size_t i) {
  return getToken(SysMLv2Parser::SYMBOL_COMMA, i);
}


size_t SysMLv2Parser::Superclassing_partContext::getRuleIndex() const {
  return SysMLv2Parser::RuleSuperclassing_part;
}

void SysMLv2Parser::Superclassing_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSuperclassing_part(this);
}

void SysMLv2Parser::Superclassing_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSuperclassing_part(this);
}

SysMLv2Parser::Superclassing_partContext* SysMLv2Parser::superclassing_part() {
  Superclassing_partContext *_localctx = _tracker.createInstance<Superclassing_partContext>(_ctx, getState());
  enterRule(_localctx, 704, SysMLv2Parser::RuleSuperclassing_part);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3511);
    match(SysMLv2Parser::SPECIALIZES);
    setState(3512);
    owned_subclassification();
    setState(3517);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SysMLv2Parser::SYMBOL_COMMA) {
      setState(3513);
      match(SysMLv2Parser::SYMBOL_COMMA);
      setState(3514);
      owned_subclassification();
      setState(3519);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubclassificationContext ------------------------------------------------------------------

SysMLv2Parser::SubclassificationContext::SubclassificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::SubclassificationContext::KEYWORD_SUBCLASSIFIER() {
  return getToken(SysMLv2Parser::KEYWORD_SUBCLASSIFIER, 0);
}

std::vector<SysMLv2Parser::Qualified_nameContext *> SysMLv2Parser::SubclassificationContext::qualified_name() {
  return getRuleContexts<SysMLv2Parser::Qualified_nameContext>();
}

SysMLv2Parser::Qualified_nameContext* SysMLv2Parser::SubclassificationContext::qualified_name(size_t i) {
  return getRuleContext<SysMLv2Parser::Qualified_nameContext>(i);
}

tree::TerminalNode* SysMLv2Parser::SubclassificationContext::SPECIALIZES() {
  return getToken(SysMLv2Parser::SPECIALIZES, 0);
}

SysMLv2Parser::Relationship_bodyContext* SysMLv2Parser::SubclassificationContext::relationship_body() {
  return getRuleContext<SysMLv2Parser::Relationship_bodyContext>(0);
}

tree::TerminalNode* SysMLv2Parser::SubclassificationContext::KEYWORD_SPECILIZATION() {
  return getToken(SysMLv2Parser::KEYWORD_SPECILIZATION, 0);
}

SysMLv2Parser::IdentificationContext* SysMLv2Parser::SubclassificationContext::identification() {
  return getRuleContext<SysMLv2Parser::IdentificationContext>(0);
}


size_t SysMLv2Parser::SubclassificationContext::getRuleIndex() const {
  return SysMLv2Parser::RuleSubclassification;
}

void SysMLv2Parser::SubclassificationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubclassification(this);
}

void SysMLv2Parser::SubclassificationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubclassification(this);
}

SysMLv2Parser::SubclassificationContext* SysMLv2Parser::subclassification() {
  SubclassificationContext *_localctx = _tracker.createInstance<SubclassificationContext>(_ctx, getState());
  enterRule(_localctx, 706, SysMLv2Parser::RuleSubclassification);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3522);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_SPECILIZATION) {
      setState(3520);
      match(SysMLv2Parser::KEYWORD_SPECILIZATION);
      setState(3521);
      identification();
    }
    setState(3524);
    match(SysMLv2Parser::KEYWORD_SUBCLASSIFIER);
    setState(3525);
    qualified_name();
    setState(3526);
    match(SysMLv2Parser::SPECIALIZES);
    setState(3527);
    qualified_name();
    setState(3528);
    relationship_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Owned_subclassificationContext ------------------------------------------------------------------

SysMLv2Parser::Owned_subclassificationContext::Owned_subclassificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Qualified_nameContext* SysMLv2Parser::Owned_subclassificationContext::qualified_name() {
  return getRuleContext<SysMLv2Parser::Qualified_nameContext>(0);
}


size_t SysMLv2Parser::Owned_subclassificationContext::getRuleIndex() const {
  return SysMLv2Parser::RuleOwned_subclassification;
}

void SysMLv2Parser::Owned_subclassificationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOwned_subclassification(this);
}

void SysMLv2Parser::Owned_subclassificationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOwned_subclassification(this);
}

SysMLv2Parser::Owned_subclassificationContext* SysMLv2Parser::owned_subclassification() {
  Owned_subclassificationContext *_localctx = _tracker.createInstance<Owned_subclassificationContext>(_ctx, getState());
  enterRule(_localctx, 708, SysMLv2Parser::RuleOwned_subclassification);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3530);
    qualified_name();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FeatureContext ------------------------------------------------------------------

SysMLv2Parser::FeatureContext::FeatureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Type_bodyContext* SysMLv2Parser::FeatureContext::type_body() {
  return getRuleContext<SysMLv2Parser::Type_bodyContext>(0);
}

tree::TerminalNode* SysMLv2Parser::FeatureContext::KEYWORD_FEATURE() {
  return getToken(SysMLv2Parser::KEYWORD_FEATURE, 0);
}

SysMLv2Parser::Prefix_metadata_memberContext* SysMLv2Parser::FeatureContext::prefix_metadata_member() {
  return getRuleContext<SysMLv2Parser::Prefix_metadata_memberContext>(0);
}

SysMLv2Parser::Feature_prefixContext* SysMLv2Parser::FeatureContext::feature_prefix() {
  return getRuleContext<SysMLv2Parser::Feature_prefixContext>(0);
}

SysMLv2Parser::SubsettingsContext* SysMLv2Parser::FeatureContext::subsettings() {
  return getRuleContext<SysMLv2Parser::SubsettingsContext>(0);
}

SysMLv2Parser::Feature_assignmentContext* SysMLv2Parser::FeatureContext::feature_assignment() {
  return getRuleContext<SysMLv2Parser::Feature_assignmentContext>(0);
}

SysMLv2Parser::Feature_valueContext* SysMLv2Parser::FeatureContext::feature_value() {
  return getRuleContext<SysMLv2Parser::Feature_valueContext>(0);
}

SysMLv2Parser::Feature_declarationContext* SysMLv2Parser::FeatureContext::feature_declaration() {
  return getRuleContext<SysMLv2Parser::Feature_declarationContext>(0);
}


size_t SysMLv2Parser::FeatureContext::getRuleIndex() const {
  return SysMLv2Parser::RuleFeature;
}

void SysMLv2Parser::FeatureContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFeature(this);
}

void SysMLv2Parser::FeatureContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFeature(this);
}

SysMLv2Parser::FeatureContext* SysMLv2Parser::feature() {
  FeatureContext *_localctx = _tracker.createInstance<FeatureContext>(_ctx, getState());
  enterRule(_localctx, 710, SysMLv2Parser::RuleFeature);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3533);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 335, _ctx)) {
    case 1: {
      setState(3532);
      feature_prefix();
      break;
    }

    default:
      break;
    }
    setState(3539);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 336, _ctx)) {
    case 1: {
      setState(3535);
      match(SysMLv2Parser::KEYWORD_FEATURE);
      setState(3536);
      feature_declaration();
      break;
    }

    case 2: {
      setState(3537);
      match(SysMLv2Parser::KEYWORD_FEATURE);
      break;
    }

    case 3: {
      setState(3538);
      prefix_metadata_member();
      break;
    }

    default:
      break;
    }
    setState(3542);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::SUBSETS) {
      setState(3541);
      subsettings();
    }
    setState(3545);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::SYMBOL_ASSIGN) {
      setState(3544);
      feature_assignment();
    }
    setState(3548);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_DEFAULT || _la == SysMLv2Parser::SYMBOL_DEF_ASSIGN

    || _la == SysMLv2Parser::SYMBOL_EQUALS) {
      setState(3547);
      feature_value();
    }
    setState(3550);
    type_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Feature_prefixContext ------------------------------------------------------------------

SysMLv2Parser::Feature_prefixContext::Feature_prefixContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Feature_directionContext* SysMLv2Parser::Feature_prefixContext::feature_direction() {
  return getRuleContext<SysMLv2Parser::Feature_directionContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Feature_prefixContext::KEYWORD_ABSTRACT() {
  return getToken(SysMLv2Parser::KEYWORD_ABSTRACT, 0);
}

tree::TerminalNode* SysMLv2Parser::Feature_prefixContext::KEYWORD_READONLY() {
  return getToken(SysMLv2Parser::KEYWORD_READONLY, 0);
}

tree::TerminalNode* SysMLv2Parser::Feature_prefixContext::KEYWORD_DERIVED() {
  return getToken(SysMLv2Parser::KEYWORD_DERIVED, 0);
}

tree::TerminalNode* SysMLv2Parser::Feature_prefixContext::KEYWORD_END() {
  return getToken(SysMLv2Parser::KEYWORD_END, 0);
}

std::vector<SysMLv2Parser::Prefix_metadata_memberContext *> SysMLv2Parser::Feature_prefixContext::prefix_metadata_member() {
  return getRuleContexts<SysMLv2Parser::Prefix_metadata_memberContext>();
}

SysMLv2Parser::Prefix_metadata_memberContext* SysMLv2Parser::Feature_prefixContext::prefix_metadata_member(size_t i) {
  return getRuleContext<SysMLv2Parser::Prefix_metadata_memberContext>(i);
}

tree::TerminalNode* SysMLv2Parser::Feature_prefixContext::KEYWORD_VAR() {
  return getToken(SysMLv2Parser::KEYWORD_VAR, 0);
}

tree::TerminalNode* SysMLv2Parser::Feature_prefixContext::KEYWORD_COMPOSITE() {
  return getToken(SysMLv2Parser::KEYWORD_COMPOSITE, 0);
}

tree::TerminalNode* SysMLv2Parser::Feature_prefixContext::KEYWORD_PORTION() {
  return getToken(SysMLv2Parser::KEYWORD_PORTION, 0);
}


size_t SysMLv2Parser::Feature_prefixContext::getRuleIndex() const {
  return SysMLv2Parser::RuleFeature_prefix;
}

void SysMLv2Parser::Feature_prefixContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFeature_prefix(this);
}

void SysMLv2Parser::Feature_prefixContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFeature_prefix(this);
}

SysMLv2Parser::Feature_prefixContext* SysMLv2Parser::feature_prefix() {
  Feature_prefixContext *_localctx = _tracker.createInstance<Feature_prefixContext>(_ctx, getState());
  enterRule(_localctx, 712, SysMLv2Parser::RuleFeature_prefix);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3553);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 133) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 133)) & 262147) != 0)) {
      setState(3552);
      feature_direction();
    }
    setState(3556);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_ABSTRACT) {
      setState(3555);
      match(SysMLv2Parser::KEYWORD_ABSTRACT);
    }
    setState(3559);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_COMPOSITE

    || _la == SysMLv2Parser::KEYWORD_PORTION || _la == SysMLv2Parser::KEYWORD_VAR) {
      setState(3558);
      _la = _input->LA(1);
      if (!(_la == SysMLv2Parser::KEYWORD_COMPOSITE

      || _la == SysMLv2Parser::KEYWORD_PORTION || _la == SysMLv2Parser::KEYWORD_VAR)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(3562);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_READONLY) {
      setState(3561);
      match(SysMLv2Parser::KEYWORD_READONLY);
    }
    setState(3565);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_DERIVED) {
      setState(3564);
      match(SysMLv2Parser::KEYWORD_DERIVED);
    }
    setState(3568);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_END) {
      setState(3567);
      match(SysMLv2Parser::KEYWORD_END);
    }
    setState(3573);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 346, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(3570);
        prefix_metadata_member(); 
      }
      setState(3575);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 346, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Feature_declarationContext ------------------------------------------------------------------

SysMLv2Parser::Feature_declarationContext::Feature_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Feature_identificationContext* SysMLv2Parser::Feature_declarationContext::feature_identification() {
  return getRuleContext<SysMLv2Parser::Feature_identificationContext>(0);
}

SysMLv2Parser::Feature_specialization_partContext* SysMLv2Parser::Feature_declarationContext::feature_specialization_part() {
  return getRuleContext<SysMLv2Parser::Feature_specialization_partContext>(0);
}

SysMLv2Parser::Conjugation_partContext* SysMLv2Parser::Feature_declarationContext::conjugation_part() {
  return getRuleContext<SysMLv2Parser::Conjugation_partContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Feature_declarationContext::KEYWORD_ALL() {
  return getToken(SysMLv2Parser::KEYWORD_ALL, 0);
}

std::vector<SysMLv2Parser::Feature_relationship_partContext *> SysMLv2Parser::Feature_declarationContext::feature_relationship_part() {
  return getRuleContexts<SysMLv2Parser::Feature_relationship_partContext>();
}

SysMLv2Parser::Feature_relationship_partContext* SysMLv2Parser::Feature_declarationContext::feature_relationship_part(size_t i) {
  return getRuleContext<SysMLv2Parser::Feature_relationship_partContext>(i);
}

SysMLv2Parser::Type_bodyContext* SysMLv2Parser::Feature_declarationContext::type_body() {
  return getRuleContext<SysMLv2Parser::Type_bodyContext>(0);
}


size_t SysMLv2Parser::Feature_declarationContext::getRuleIndex() const {
  return SysMLv2Parser::RuleFeature_declaration;
}

void SysMLv2Parser::Feature_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFeature_declaration(this);
}

void SysMLv2Parser::Feature_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFeature_declaration(this);
}

SysMLv2Parser::Feature_declarationContext* SysMLv2Parser::feature_declaration() {
  Feature_declarationContext *_localctx = _tracker.createInstance<Feature_declarationContext>(_ctx, getState());
  enterRule(_localctx, 714, SysMLv2Parser::RuleFeature_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3577);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_ALL) {
      setState(3576);
      match(SysMLv2Parser::KEYWORD_ALL);
    }
    setState(3586);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SysMLv2Parser::SYMBOL_SMALLER:
      case SysMLv2Parser::NAME: {
        setState(3579);
        feature_identification();
        setState(3582);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 348, _ctx)) {
        case 1: {
          setState(3580);
          feature_specialization_part();
          break;
        }

        case 2: {
          setState(3581);
          conjugation_part();
          break;
        }

        default:
          break;
        }
        break;
      }

      case SysMLv2Parser::TYPED_BY:
      case SysMLv2Parser::SUBSETS:
      case SysMLv2Parser::REFERENCES:
      case SysMLv2Parser::REDEFINES:
      case SysMLv2Parser::KEYWORD_IN:
      case SysMLv2Parser::KEYWORD_INOUT:
      case SysMLv2Parser::KEYWORD_OUT:
      case SysMLv2Parser::SYMBOL_SQUARE_BRACKET_OPEN: {
        setState(3584);
        feature_specialization_part();
        break;
      }

      case SysMLv2Parser::CONJUNGATES: {
        setState(3585);
        conjugation_part();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(3591);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 99) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 99)) & 277027508225) != 0) || _la == SysMLv2Parser::KEYWORD_UNIONS) {
      setState(3588);
      feature_relationship_part();
      setState(3593);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(3595);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 351, _ctx)) {
    case 1: {
      setState(3594);
      type_body();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Feature_identificationContext ------------------------------------------------------------------

SysMLv2Parser::Feature_identificationContext::Feature_identificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Feature_identificationContext::SYMBOL_SMALLER() {
  return getToken(SysMLv2Parser::SYMBOL_SMALLER, 0);
}

std::vector<tree::TerminalNode *> SysMLv2Parser::Feature_identificationContext::NAME() {
  return getTokens(SysMLv2Parser::NAME);
}

tree::TerminalNode* SysMLv2Parser::Feature_identificationContext::NAME(size_t i) {
  return getToken(SysMLv2Parser::NAME, i);
}

tree::TerminalNode* SysMLv2Parser::Feature_identificationContext::SYMBOL_GREATER() {
  return getToken(SysMLv2Parser::SYMBOL_GREATER, 0);
}


size_t SysMLv2Parser::Feature_identificationContext::getRuleIndex() const {
  return SysMLv2Parser::RuleFeature_identification;
}

void SysMLv2Parser::Feature_identificationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFeature_identification(this);
}

void SysMLv2Parser::Feature_identificationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFeature_identification(this);
}

SysMLv2Parser::Feature_identificationContext* SysMLv2Parser::feature_identification() {
  Feature_identificationContext *_localctx = _tracker.createInstance<Feature_identificationContext>(_ctx, getState());
  enterRule(_localctx, 716, SysMLv2Parser::RuleFeature_identification);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3604);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SysMLv2Parser::SYMBOL_SMALLER: {
        enterOuterAlt(_localctx, 1);
        setState(3597);
        match(SysMLv2Parser::SYMBOL_SMALLER);
        setState(3598);
        match(SysMLv2Parser::NAME);
        setState(3599);
        match(SysMLv2Parser::SYMBOL_GREATER);
        setState(3601);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == SysMLv2Parser::NAME) {
          setState(3600);
          match(SysMLv2Parser::NAME);
        }
        break;
      }

      case SysMLv2Parser::NAME: {
        enterOuterAlt(_localctx, 2);
        setState(3603);
        match(SysMLv2Parser::NAME);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Feature_relationship_partContext ------------------------------------------------------------------

SysMLv2Parser::Feature_relationship_partContext::Feature_relationship_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Type_relationship_partContext* SysMLv2Parser::Feature_relationship_partContext::type_relationship_part() {
  return getRuleContext<SysMLv2Parser::Type_relationship_partContext>(0);
}

SysMLv2Parser::Chaining_partContext* SysMLv2Parser::Feature_relationship_partContext::chaining_part() {
  return getRuleContext<SysMLv2Parser::Chaining_partContext>(0);
}

SysMLv2Parser::Inverting_partContext* SysMLv2Parser::Feature_relationship_partContext::inverting_part() {
  return getRuleContext<SysMLv2Parser::Inverting_partContext>(0);
}

SysMLv2Parser::Type_featuring_partContext* SysMLv2Parser::Feature_relationship_partContext::type_featuring_part() {
  return getRuleContext<SysMLv2Parser::Type_featuring_partContext>(0);
}


size_t SysMLv2Parser::Feature_relationship_partContext::getRuleIndex() const {
  return SysMLv2Parser::RuleFeature_relationship_part;
}

void SysMLv2Parser::Feature_relationship_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFeature_relationship_part(this);
}

void SysMLv2Parser::Feature_relationship_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFeature_relationship_part(this);
}

SysMLv2Parser::Feature_relationship_partContext* SysMLv2Parser::feature_relationship_part() {
  Feature_relationship_partContext *_localctx = _tracker.createInstance<Feature_relationship_partContext>(_ctx, getState());
  enterRule(_localctx, 718, SysMLv2Parser::RuleFeature_relationship_part);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3610);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SysMLv2Parser::KEYWORD_DIFFERENCES:
      case SysMLv2Parser::KEYWORD_DISJOINT:
      case SysMLv2Parser::KEYWORD_INTERSECTS:
      case SysMLv2Parser::KEYWORD_UNIONS: {
        enterOuterAlt(_localctx, 1);
        setState(3606);
        type_relationship_part();
        break;
      }

      case SysMLv2Parser::KEYWORD_CHAINS: {
        enterOuterAlt(_localctx, 2);
        setState(3607);
        chaining_part();
        break;
      }

      case SysMLv2Parser::KEYWORD_INVERSE: {
        enterOuterAlt(_localctx, 3);
        setState(3608);
        inverting_part();
        break;
      }

      case SysMLv2Parser::KEYWORD_FEATURED: {
        enterOuterAlt(_localctx, 4);
        setState(3609);
        type_featuring_part();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Chaining_partContext ------------------------------------------------------------------

SysMLv2Parser::Chaining_partContext::Chaining_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Chaining_partContext::KEYWORD_CHAINS() {
  return getToken(SysMLv2Parser::KEYWORD_CHAINS, 0);
}

SysMLv2Parser::Owned_feature_chainingContext* SysMLv2Parser::Chaining_partContext::owned_feature_chaining() {
  return getRuleContext<SysMLv2Parser::Owned_feature_chainingContext>(0);
}

SysMLv2Parser::Feature_chainContext* SysMLv2Parser::Chaining_partContext::feature_chain() {
  return getRuleContext<SysMLv2Parser::Feature_chainContext>(0);
}


size_t SysMLv2Parser::Chaining_partContext::getRuleIndex() const {
  return SysMLv2Parser::RuleChaining_part;
}

void SysMLv2Parser::Chaining_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterChaining_part(this);
}

void SysMLv2Parser::Chaining_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitChaining_part(this);
}

SysMLv2Parser::Chaining_partContext* SysMLv2Parser::chaining_part() {
  Chaining_partContext *_localctx = _tracker.createInstance<Chaining_partContext>(_ctx, getState());
  enterRule(_localctx, 720, SysMLv2Parser::RuleChaining_part);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3612);
    match(SysMLv2Parser::KEYWORD_CHAINS);
    setState(3615);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 355, _ctx)) {
    case 1: {
      setState(3613);
      owned_feature_chaining();
      break;
    }

    case 2: {
      setState(3614);
      feature_chain();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Inverting_partContext ------------------------------------------------------------------

SysMLv2Parser::Inverting_partContext::Inverting_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Inverting_partContext::KEYWORD_INVERSE() {
  return getToken(SysMLv2Parser::KEYWORD_INVERSE, 0);
}

tree::TerminalNode* SysMLv2Parser::Inverting_partContext::KEYWORD_OF() {
  return getToken(SysMLv2Parser::KEYWORD_OF, 0);
}

SysMLv2Parser::Owned_feature_invertingContext* SysMLv2Parser::Inverting_partContext::owned_feature_inverting() {
  return getRuleContext<SysMLv2Parser::Owned_feature_invertingContext>(0);
}


size_t SysMLv2Parser::Inverting_partContext::getRuleIndex() const {
  return SysMLv2Parser::RuleInverting_part;
}

void SysMLv2Parser::Inverting_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInverting_part(this);
}

void SysMLv2Parser::Inverting_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInverting_part(this);
}

SysMLv2Parser::Inverting_partContext* SysMLv2Parser::inverting_part() {
  Inverting_partContext *_localctx = _tracker.createInstance<Inverting_partContext>(_ctx, getState());
  enterRule(_localctx, 722, SysMLv2Parser::RuleInverting_part);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3617);
    match(SysMLv2Parser::KEYWORD_INVERSE);
    setState(3618);
    match(SysMLv2Parser::KEYWORD_OF);
    setState(3619);
    owned_feature_inverting();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_featuring_partContext ------------------------------------------------------------------

SysMLv2Parser::Type_featuring_partContext::Type_featuring_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Type_featuring_partContext::KEYWORD_FEATURED() {
  return getToken(SysMLv2Parser::KEYWORD_FEATURED, 0);
}

tree::TerminalNode* SysMLv2Parser::Type_featuring_partContext::KEYWORD_BY() {
  return getToken(SysMLv2Parser::KEYWORD_BY, 0);
}

std::vector<SysMLv2Parser::Owned_type_featuringContext *> SysMLv2Parser::Type_featuring_partContext::owned_type_featuring() {
  return getRuleContexts<SysMLv2Parser::Owned_type_featuringContext>();
}

SysMLv2Parser::Owned_type_featuringContext* SysMLv2Parser::Type_featuring_partContext::owned_type_featuring(size_t i) {
  return getRuleContext<SysMLv2Parser::Owned_type_featuringContext>(i);
}

std::vector<tree::TerminalNode *> SysMLv2Parser::Type_featuring_partContext::SYMBOL_COMMA() {
  return getTokens(SysMLv2Parser::SYMBOL_COMMA);
}

tree::TerminalNode* SysMLv2Parser::Type_featuring_partContext::SYMBOL_COMMA(size_t i) {
  return getToken(SysMLv2Parser::SYMBOL_COMMA, i);
}


size_t SysMLv2Parser::Type_featuring_partContext::getRuleIndex() const {
  return SysMLv2Parser::RuleType_featuring_part;
}

void SysMLv2Parser::Type_featuring_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_featuring_part(this);
}

void SysMLv2Parser::Type_featuring_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_featuring_part(this);
}

SysMLv2Parser::Type_featuring_partContext* SysMLv2Parser::type_featuring_part() {
  Type_featuring_partContext *_localctx = _tracker.createInstance<Type_featuring_partContext>(_ctx, getState());
  enterRule(_localctx, 724, SysMLv2Parser::RuleType_featuring_part);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3621);
    match(SysMLv2Parser::KEYWORD_FEATURED);
    setState(3622);
    match(SysMLv2Parser::KEYWORD_BY);
    setState(3623);
    owned_type_featuring();
    setState(3628);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SysMLv2Parser::SYMBOL_COMMA) {
      setState(3624);
      match(SysMLv2Parser::SYMBOL_COMMA);
      setState(3625);
      owned_type_featuring();
      setState(3630);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Feature_specialization_partContext ------------------------------------------------------------------

SysMLv2Parser::Feature_specialization_partContext::Feature_specialization_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<SysMLv2Parser::Feature_specilizationContext *> SysMLv2Parser::Feature_specialization_partContext::feature_specilization() {
  return getRuleContexts<SysMLv2Parser::Feature_specilizationContext>();
}

SysMLv2Parser::Feature_specilizationContext* SysMLv2Parser::Feature_specialization_partContext::feature_specilization(size_t i) {
  return getRuleContext<SysMLv2Parser::Feature_specilizationContext>(i);
}

SysMLv2Parser::Multiplicity_partContext* SysMLv2Parser::Feature_specialization_partContext::multiplicity_part() {
  return getRuleContext<SysMLv2Parser::Multiplicity_partContext>(0);
}


size_t SysMLv2Parser::Feature_specialization_partContext::getRuleIndex() const {
  return SysMLv2Parser::RuleFeature_specialization_part;
}

void SysMLv2Parser::Feature_specialization_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFeature_specialization_part(this);
}

void SysMLv2Parser::Feature_specialization_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFeature_specialization_part(this);
}

SysMLv2Parser::Feature_specialization_partContext* SysMLv2Parser::feature_specialization_part() {
  Feature_specialization_partContext *_localctx = _tracker.createInstance<Feature_specialization_partContext>(_ctx, getState());
  enterRule(_localctx, 726, SysMLv2Parser::RuleFeature_specialization_part);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(3651);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SysMLv2Parser::TYPED_BY:
      case SysMLv2Parser::SUBSETS:
      case SysMLv2Parser::REFERENCES:
      case SysMLv2Parser::REDEFINES:
      case SysMLv2Parser::KEYWORD_IN:
      case SysMLv2Parser::KEYWORD_INOUT:
      case SysMLv2Parser::KEYWORD_OUT: {
        enterOuterAlt(_localctx, 1);
        setState(3632); 
        _errHandler->sync(this);
        alt = 1;
        do {
          switch (alt) {
            case 1: {
                  setState(3631);
                  feature_specilization();
                  break;
                }

          default:
            throw NoViableAltException(this);
          }
          setState(3634); 
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 357, _ctx);
        } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
        setState(3637);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == SysMLv2Parser::SYMBOL_SQUARE_BRACKET_OPEN) {
          setState(3636);
          multiplicity_part();
        }
        setState(3642);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 359, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(3639);
            feature_specilization(); 
          }
          setState(3644);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 359, _ctx);
        }
        break;
      }

      case SysMLv2Parser::SYMBOL_SQUARE_BRACKET_OPEN: {
        enterOuterAlt(_localctx, 2);
        setState(3645);
        multiplicity_part();
        setState(3647); 
        _errHandler->sync(this);
        alt = 1;
        do {
          switch (alt) {
            case 1: {
                  setState(3646);
                  feature_specilization();
                  break;
                }

          default:
            throw NoViableAltException(this);
          }
          setState(3649); 
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 360, _ctx);
        } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Feature_specilizationContext ------------------------------------------------------------------

SysMLv2Parser::Feature_specilizationContext::Feature_specilizationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::TypingsContext* SysMLv2Parser::Feature_specilizationContext::typings() {
  return getRuleContext<SysMLv2Parser::TypingsContext>(0);
}

SysMLv2Parser::SubsettingsContext* SysMLv2Parser::Feature_specilizationContext::subsettings() {
  return getRuleContext<SysMLv2Parser::SubsettingsContext>(0);
}

SysMLv2Parser::ReferencesContext* SysMLv2Parser::Feature_specilizationContext::references() {
  return getRuleContext<SysMLv2Parser::ReferencesContext>(0);
}

SysMLv2Parser::RedefinitionsContext* SysMLv2Parser::Feature_specilizationContext::redefinitions() {
  return getRuleContext<SysMLv2Parser::RedefinitionsContext>(0);
}


size_t SysMLv2Parser::Feature_specilizationContext::getRuleIndex() const {
  return SysMLv2Parser::RuleFeature_specilization;
}

void SysMLv2Parser::Feature_specilizationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFeature_specilization(this);
}

void SysMLv2Parser::Feature_specilizationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFeature_specilization(this);
}

SysMLv2Parser::Feature_specilizationContext* SysMLv2Parser::feature_specilization() {
  Feature_specilizationContext *_localctx = _tracker.createInstance<Feature_specilizationContext>(_ctx, getState());
  enterRule(_localctx, 728, SysMLv2Parser::RuleFeature_specilization);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3657);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SysMLv2Parser::TYPED_BY: {
        enterOuterAlt(_localctx, 1);
        setState(3653);
        typings();
        break;
      }

      case SysMLv2Parser::SUBSETS: {
        enterOuterAlt(_localctx, 2);
        setState(3654);
        subsettings();
        break;
      }

      case SysMLv2Parser::REFERENCES: {
        enterOuterAlt(_localctx, 3);
        setState(3655);
        references();
        break;
      }

      case SysMLv2Parser::REDEFINES:
      case SysMLv2Parser::KEYWORD_IN:
      case SysMLv2Parser::KEYWORD_INOUT:
      case SysMLv2Parser::KEYWORD_OUT: {
        enterOuterAlt(_localctx, 4);
        setState(3656);
        redefinitions();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypingsContext ------------------------------------------------------------------

SysMLv2Parser::TypingsContext::TypingsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Typed_byContext* SysMLv2Parser::TypingsContext::typed_by() {
  return getRuleContext<SysMLv2Parser::Typed_byContext>(0);
}

std::vector<tree::TerminalNode *> SysMLv2Parser::TypingsContext::SYMBOL_COMMA() {
  return getTokens(SysMLv2Parser::SYMBOL_COMMA);
}

tree::TerminalNode* SysMLv2Parser::TypingsContext::SYMBOL_COMMA(size_t i) {
  return getToken(SysMLv2Parser::SYMBOL_COMMA, i);
}

std::vector<SysMLv2Parser::Owned_feature_typingContext *> SysMLv2Parser::TypingsContext::owned_feature_typing() {
  return getRuleContexts<SysMLv2Parser::Owned_feature_typingContext>();
}

SysMLv2Parser::Owned_feature_typingContext* SysMLv2Parser::TypingsContext::owned_feature_typing(size_t i) {
  return getRuleContext<SysMLv2Parser::Owned_feature_typingContext>(i);
}


size_t SysMLv2Parser::TypingsContext::getRuleIndex() const {
  return SysMLv2Parser::RuleTypings;
}

void SysMLv2Parser::TypingsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypings(this);
}

void SysMLv2Parser::TypingsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypings(this);
}

SysMLv2Parser::TypingsContext* SysMLv2Parser::typings() {
  TypingsContext *_localctx = _tracker.createInstance<TypingsContext>(_ctx, getState());
  enterRule(_localctx, 730, SysMLv2Parser::RuleTypings);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3659);
    typed_by();
    setState(3664);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SysMLv2Parser::SYMBOL_COMMA) {
      setState(3660);
      match(SysMLv2Parser::SYMBOL_COMMA);
      setState(3661);
      owned_feature_typing();
      setState(3666);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Typed_byContext ------------------------------------------------------------------

SysMLv2Parser::Typed_byContext::Typed_byContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Typed_byContext::TYPED_BY() {
  return getToken(SysMLv2Parser::TYPED_BY, 0);
}

SysMLv2Parser::Owned_feature_typingContext* SysMLv2Parser::Typed_byContext::owned_feature_typing() {
  return getRuleContext<SysMLv2Parser::Owned_feature_typingContext>(0);
}


size_t SysMLv2Parser::Typed_byContext::getRuleIndex() const {
  return SysMLv2Parser::RuleTyped_by;
}

void SysMLv2Parser::Typed_byContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTyped_by(this);
}

void SysMLv2Parser::Typed_byContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTyped_by(this);
}

SysMLv2Parser::Typed_byContext* SysMLv2Parser::typed_by() {
  Typed_byContext *_localctx = _tracker.createInstance<Typed_byContext>(_ctx, getState());
  enterRule(_localctx, 732, SysMLv2Parser::RuleTyped_by);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3667);
    match(SysMLv2Parser::TYPED_BY);
    setState(3668);
    owned_feature_typing();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubsettingsContext ------------------------------------------------------------------

SysMLv2Parser::SubsettingsContext::SubsettingsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::SubsetsContext* SysMLv2Parser::SubsettingsContext::subsets() {
  return getRuleContext<SysMLv2Parser::SubsetsContext>(0);
}

std::vector<SysMLv2Parser::Owned_subsettingContext *> SysMLv2Parser::SubsettingsContext::owned_subsetting() {
  return getRuleContexts<SysMLv2Parser::Owned_subsettingContext>();
}

SysMLv2Parser::Owned_subsettingContext* SysMLv2Parser::SubsettingsContext::owned_subsetting(size_t i) {
  return getRuleContext<SysMLv2Parser::Owned_subsettingContext>(i);
}

std::vector<tree::TerminalNode *> SysMLv2Parser::SubsettingsContext::SYMBOL_COMMA() {
  return getTokens(SysMLv2Parser::SYMBOL_COMMA);
}

tree::TerminalNode* SysMLv2Parser::SubsettingsContext::SYMBOL_COMMA(size_t i) {
  return getToken(SysMLv2Parser::SYMBOL_COMMA, i);
}


size_t SysMLv2Parser::SubsettingsContext::getRuleIndex() const {
  return SysMLv2Parser::RuleSubsettings;
}

void SysMLv2Parser::SubsettingsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubsettings(this);
}

void SysMLv2Parser::SubsettingsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubsettings(this);
}

SysMLv2Parser::SubsettingsContext* SysMLv2Parser::subsettings() {
  SubsettingsContext *_localctx = _tracker.createInstance<SubsettingsContext>(_ctx, getState());
  enterRule(_localctx, 734, SysMLv2Parser::RuleSubsettings);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3670);
    subsets();
    setState(3672);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::NAME) {
      setState(3671);
      owned_subsetting();
    }
    setState(3678);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SysMLv2Parser::SYMBOL_COMMA) {
      setState(3674);
      match(SysMLv2Parser::SYMBOL_COMMA);
      setState(3675);
      owned_subsetting();
      setState(3680);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubsetsContext ------------------------------------------------------------------

SysMLv2Parser::SubsetsContext::SubsetsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::SubsetsContext::SUBSETS() {
  return getToken(SysMLv2Parser::SUBSETS, 0);
}

SysMLv2Parser::Owned_subsettingContext* SysMLv2Parser::SubsetsContext::owned_subsetting() {
  return getRuleContext<SysMLv2Parser::Owned_subsettingContext>(0);
}


size_t SysMLv2Parser::SubsetsContext::getRuleIndex() const {
  return SysMLv2Parser::RuleSubsets;
}

void SysMLv2Parser::SubsetsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubsets(this);
}

void SysMLv2Parser::SubsetsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubsets(this);
}

SysMLv2Parser::SubsetsContext* SysMLv2Parser::subsets() {
  SubsetsContext *_localctx = _tracker.createInstance<SubsetsContext>(_ctx, getState());
  enterRule(_localctx, 736, SysMLv2Parser::RuleSubsets);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3681);
    match(SysMLv2Parser::SUBSETS);
    setState(3682);
    owned_subsetting();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReferencesContext ------------------------------------------------------------------

SysMLv2Parser::ReferencesContext::ReferencesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::ReferencesContext::REFERENCES() {
  return getToken(SysMLv2Parser::REFERENCES, 0);
}

SysMLv2Parser::Owned_reference_subsettingContext* SysMLv2Parser::ReferencesContext::owned_reference_subsetting() {
  return getRuleContext<SysMLv2Parser::Owned_reference_subsettingContext>(0);
}


size_t SysMLv2Parser::ReferencesContext::getRuleIndex() const {
  return SysMLv2Parser::RuleReferences;
}

void SysMLv2Parser::ReferencesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReferences(this);
}

void SysMLv2Parser::ReferencesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReferences(this);
}

SysMLv2Parser::ReferencesContext* SysMLv2Parser::references() {
  ReferencesContext *_localctx = _tracker.createInstance<ReferencesContext>(_ctx, getState());
  enterRule(_localctx, 738, SysMLv2Parser::RuleReferences);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3684);
    match(SysMLv2Parser::REFERENCES);
    setState(3685);
    owned_reference_subsetting();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RedefinitionsContext ------------------------------------------------------------------

SysMLv2Parser::RedefinitionsContext::RedefinitionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::RedefinesContext* SysMLv2Parser::RedefinitionsContext::redefines() {
  return getRuleContext<SysMLv2Parser::RedefinesContext>(0);
}

tree::TerminalNode* SysMLv2Parser::RedefinitionsContext::SYMBOL_COMMA() {
  return getToken(SysMLv2Parser::SYMBOL_COMMA, 0);
}

SysMLv2Parser::Owned_redefinitionContext* SysMLv2Parser::RedefinitionsContext::owned_redefinition() {
  return getRuleContext<SysMLv2Parser::Owned_redefinitionContext>(0);
}


size_t SysMLv2Parser::RedefinitionsContext::getRuleIndex() const {
  return SysMLv2Parser::RuleRedefinitions;
}

void SysMLv2Parser::RedefinitionsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRedefinitions(this);
}

void SysMLv2Parser::RedefinitionsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRedefinitions(this);
}

SysMLv2Parser::RedefinitionsContext* SysMLv2Parser::redefinitions() {
  RedefinitionsContext *_localctx = _tracker.createInstance<RedefinitionsContext>(_ctx, getState());
  enterRule(_localctx, 740, SysMLv2Parser::RuleRedefinitions);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3687);
    redefines();
    setState(3690);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::SYMBOL_COMMA) {
      setState(3688);
      match(SysMLv2Parser::SYMBOL_COMMA);
      setState(3689);
      owned_redefinition();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RedefinesContext ------------------------------------------------------------------

SysMLv2Parser::RedefinesContext::RedefinesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::RedefinesContext::REDEFINES() {
  return getToken(SysMLv2Parser::REDEFINES, 0);
}

SysMLv2Parser::Owned_redefinitionContext* SysMLv2Parser::RedefinesContext::owned_redefinition() {
  return getRuleContext<SysMLv2Parser::Owned_redefinitionContext>(0);
}

SysMLv2Parser::Feature_directionContext* SysMLv2Parser::RedefinesContext::feature_direction() {
  return getRuleContext<SysMLv2Parser::Feature_directionContext>(0);
}


size_t SysMLv2Parser::RedefinesContext::getRuleIndex() const {
  return SysMLv2Parser::RuleRedefines;
}

void SysMLv2Parser::RedefinesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRedefines(this);
}

void SysMLv2Parser::RedefinesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRedefines(this);
}

SysMLv2Parser::RedefinesContext* SysMLv2Parser::redefines() {
  RedefinesContext *_localctx = _tracker.createInstance<RedefinesContext>(_ctx, getState());
  enterRule(_localctx, 742, SysMLv2Parser::RuleRedefines);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3693);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 133) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 133)) & 262147) != 0)) {
      setState(3692);
      feature_direction();
    }
    setState(3695);
    match(SysMLv2Parser::REDEFINES);
    setState(3696);
    owned_redefinition();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Feature_typingContext ------------------------------------------------------------------

SysMLv2Parser::Feature_typingContext::Feature_typingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Qualified_nameContext* SysMLv2Parser::Feature_typingContext::qualified_name() {
  return getRuleContext<SysMLv2Parser::Qualified_nameContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Feature_typingContext::TYPED_BY() {
  return getToken(SysMLv2Parser::TYPED_BY, 0);
}

SysMLv2Parser::General_typeContext* SysMLv2Parser::Feature_typingContext::general_type() {
  return getRuleContext<SysMLv2Parser::General_typeContext>(0);
}

SysMLv2Parser::Relationship_bodyContext* SysMLv2Parser::Feature_typingContext::relationship_body() {
  return getRuleContext<SysMLv2Parser::Relationship_bodyContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Feature_typingContext::KEYWORD_SPECILIZATION() {
  return getToken(SysMLv2Parser::KEYWORD_SPECILIZATION, 0);
}

SysMLv2Parser::IdentificationContext* SysMLv2Parser::Feature_typingContext::identification() {
  return getRuleContext<SysMLv2Parser::IdentificationContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Feature_typingContext::KEYWORD_TYPING() {
  return getToken(SysMLv2Parser::KEYWORD_TYPING, 0);
}

SysMLv2Parser::Multiplicity_partContext* SysMLv2Parser::Feature_typingContext::multiplicity_part() {
  return getRuleContext<SysMLv2Parser::Multiplicity_partContext>(0);
}


size_t SysMLv2Parser::Feature_typingContext::getRuleIndex() const {
  return SysMLv2Parser::RuleFeature_typing;
}

void SysMLv2Parser::Feature_typingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFeature_typing(this);
}

void SysMLv2Parser::Feature_typingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFeature_typing(this);
}

SysMLv2Parser::Feature_typingContext* SysMLv2Parser::feature_typing() {
  Feature_typingContext *_localctx = _tracker.createInstance<Feature_typingContext>(_ctx, getState());
  enterRule(_localctx, 744, SysMLv2Parser::RuleFeature_typing);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3700);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_SPECILIZATION) {
      setState(3698);
      match(SysMLv2Parser::KEYWORD_SPECILIZATION);
      setState(3699);
      identification();
    }
    setState(3703);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_TYPING) {
      setState(3702);
      match(SysMLv2Parser::KEYWORD_TYPING);
    }
    setState(3705);
    qualified_name();
    setState(3706);
    match(SysMLv2Parser::TYPED_BY);
    setState(3707);
    general_type();
    setState(3709);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::SYMBOL_SQUARE_BRACKET_OPEN) {
      setState(3708);
      multiplicity_part();
    }
    setState(3711);
    relationship_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Owned_feature_typingContext ------------------------------------------------------------------

SysMLv2Parser::Owned_feature_typingContext::Owned_feature_typingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::General_typeContext* SysMLv2Parser::Owned_feature_typingContext::general_type() {
  return getRuleContext<SysMLv2Parser::General_typeContext>(0);
}


size_t SysMLv2Parser::Owned_feature_typingContext::getRuleIndex() const {
  return SysMLv2Parser::RuleOwned_feature_typing;
}

void SysMLv2Parser::Owned_feature_typingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOwned_feature_typing(this);
}

void SysMLv2Parser::Owned_feature_typingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOwned_feature_typing(this);
}

SysMLv2Parser::Owned_feature_typingContext* SysMLv2Parser::owned_feature_typing() {
  Owned_feature_typingContext *_localctx = _tracker.createInstance<Owned_feature_typingContext>(_ctx, getState());
  enterRule(_localctx, 746, SysMLv2Parser::RuleOwned_feature_typing);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3713);
    general_type();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubsettingContext ------------------------------------------------------------------

SysMLv2Parser::SubsettingContext::SubsettingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Specific_typeContext* SysMLv2Parser::SubsettingContext::specific_type() {
  return getRuleContext<SysMLv2Parser::Specific_typeContext>(0);
}

tree::TerminalNode* SysMLv2Parser::SubsettingContext::SUBSETS() {
  return getToken(SysMLv2Parser::SUBSETS, 0);
}

SysMLv2Parser::General_typeContext* SysMLv2Parser::SubsettingContext::general_type() {
  return getRuleContext<SysMLv2Parser::General_typeContext>(0);
}

SysMLv2Parser::Relationship_bodyContext* SysMLv2Parser::SubsettingContext::relationship_body() {
  return getRuleContext<SysMLv2Parser::Relationship_bodyContext>(0);
}

tree::TerminalNode* SysMLv2Parser::SubsettingContext::KEYWORD_SPECILIZATION() {
  return getToken(SysMLv2Parser::KEYWORD_SPECILIZATION, 0);
}

SysMLv2Parser::IdentificationContext* SysMLv2Parser::SubsettingContext::identification() {
  return getRuleContext<SysMLv2Parser::IdentificationContext>(0);
}

tree::TerminalNode* SysMLv2Parser::SubsettingContext::KEYWORD_SUBSET() {
  return getToken(SysMLv2Parser::KEYWORD_SUBSET, 0);
}

SysMLv2Parser::Multiplicity_partContext* SysMLv2Parser::SubsettingContext::multiplicity_part() {
  return getRuleContext<SysMLv2Parser::Multiplicity_partContext>(0);
}


size_t SysMLv2Parser::SubsettingContext::getRuleIndex() const {
  return SysMLv2Parser::RuleSubsetting;
}

void SysMLv2Parser::SubsettingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubsetting(this);
}

void SysMLv2Parser::SubsettingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubsetting(this);
}

SysMLv2Parser::SubsettingContext* SysMLv2Parser::subsetting() {
  SubsettingContext *_localctx = _tracker.createInstance<SubsettingContext>(_ctx, getState());
  enterRule(_localctx, 748, SysMLv2Parser::RuleSubsetting);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3717);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_SPECILIZATION) {
      setState(3715);
      match(SysMLv2Parser::KEYWORD_SPECILIZATION);
      setState(3716);
      identification();
    }
    setState(3720);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_SUBSET) {
      setState(3719);
      match(SysMLv2Parser::KEYWORD_SUBSET);
    }
    setState(3722);
    specific_type();
    setState(3723);
    match(SysMLv2Parser::SUBSETS);
    setState(3724);
    general_type();
    setState(3726);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::SYMBOL_SQUARE_BRACKET_OPEN) {
      setState(3725);
      multiplicity_part();
    }
    setState(3728);
    relationship_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Owned_subsettingContext ------------------------------------------------------------------

SysMLv2Parser::Owned_subsettingContext::Owned_subsettingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::General_typeContext* SysMLv2Parser::Owned_subsettingContext::general_type() {
  return getRuleContext<SysMLv2Parser::General_typeContext>(0);
}


size_t SysMLv2Parser::Owned_subsettingContext::getRuleIndex() const {
  return SysMLv2Parser::RuleOwned_subsetting;
}

void SysMLv2Parser::Owned_subsettingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOwned_subsetting(this);
}

void SysMLv2Parser::Owned_subsettingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOwned_subsetting(this);
}

SysMLv2Parser::Owned_subsettingContext* SysMLv2Parser::owned_subsetting() {
  Owned_subsettingContext *_localctx = _tracker.createInstance<Owned_subsettingContext>(_ctx, getState());
  enterRule(_localctx, 750, SysMLv2Parser::RuleOwned_subsetting);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3730);
    general_type();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Owned_reference_subsettingContext ------------------------------------------------------------------

SysMLv2Parser::Owned_reference_subsettingContext::Owned_reference_subsettingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::General_typeContext* SysMLv2Parser::Owned_reference_subsettingContext::general_type() {
  return getRuleContext<SysMLv2Parser::General_typeContext>(0);
}


size_t SysMLv2Parser::Owned_reference_subsettingContext::getRuleIndex() const {
  return SysMLv2Parser::RuleOwned_reference_subsetting;
}

void SysMLv2Parser::Owned_reference_subsettingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOwned_reference_subsetting(this);
}

void SysMLv2Parser::Owned_reference_subsettingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOwned_reference_subsetting(this);
}

SysMLv2Parser::Owned_reference_subsettingContext* SysMLv2Parser::owned_reference_subsetting() {
  Owned_reference_subsettingContext *_localctx = _tracker.createInstance<Owned_reference_subsettingContext>(_ctx, getState());
  enterRule(_localctx, 752, SysMLv2Parser::RuleOwned_reference_subsetting);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3732);
    general_type();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RedefinitionContext ------------------------------------------------------------------

SysMLv2Parser::RedefinitionContext::RedefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::RedefinitionContext::REDEFINES() {
  return getToken(SysMLv2Parser::REDEFINES, 0);
}

SysMLv2Parser::Qualified_nameContext* SysMLv2Parser::RedefinitionContext::qualified_name() {
  return getRuleContext<SysMLv2Parser::Qualified_nameContext>(0);
}

SysMLv2Parser::Relationship_bodyContext* SysMLv2Parser::RedefinitionContext::relationship_body() {
  return getRuleContext<SysMLv2Parser::Relationship_bodyContext>(0);
}

SysMLv2Parser::Feature_directionContext* SysMLv2Parser::RedefinitionContext::feature_direction() {
  return getRuleContext<SysMLv2Parser::Feature_directionContext>(0);
}

tree::TerminalNode* SysMLv2Parser::RedefinitionContext::KEYWORD_SPECILIZATION() {
  return getToken(SysMLv2Parser::KEYWORD_SPECILIZATION, 0);
}

SysMLv2Parser::IdentificationContext* SysMLv2Parser::RedefinitionContext::identification() {
  return getRuleContext<SysMLv2Parser::IdentificationContext>(0);
}

tree::TerminalNode* SysMLv2Parser::RedefinitionContext::KEYWORD_REDEFINITION() {
  return getToken(SysMLv2Parser::KEYWORD_REDEFINITION, 0);
}

SysMLv2Parser::Specific_typeContext* SysMLv2Parser::RedefinitionContext::specific_type() {
  return getRuleContext<SysMLv2Parser::Specific_typeContext>(0);
}

SysMLv2Parser::Typed_byContext* SysMLv2Parser::RedefinitionContext::typed_by() {
  return getRuleContext<SysMLv2Parser::Typed_byContext>(0);
}

SysMLv2Parser::Multiplicity_partContext* SysMLv2Parser::RedefinitionContext::multiplicity_part() {
  return getRuleContext<SysMLv2Parser::Multiplicity_partContext>(0);
}

SysMLv2Parser::SubsetsContext* SysMLv2Parser::RedefinitionContext::subsets() {
  return getRuleContext<SysMLv2Parser::SubsetsContext>(0);
}

SysMLv2Parser::Feature_assignmentContext* SysMLv2Parser::RedefinitionContext::feature_assignment() {
  return getRuleContext<SysMLv2Parser::Feature_assignmentContext>(0);
}


size_t SysMLv2Parser::RedefinitionContext::getRuleIndex() const {
  return SysMLv2Parser::RuleRedefinition;
}

void SysMLv2Parser::RedefinitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRedefinition(this);
}

void SysMLv2Parser::RedefinitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRedefinition(this);
}

SysMLv2Parser::RedefinitionContext* SysMLv2Parser::redefinition() {
  RedefinitionContext *_localctx = _tracker.createInstance<RedefinitionContext>(_ctx, getState());
  enterRule(_localctx, 754, SysMLv2Parser::RuleRedefinition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3735);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 133) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 133)) & 262147) != 0)) {
      setState(3734);
      feature_direction();
    }
    setState(3739);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_SPECILIZATION) {
      setState(3737);
      match(SysMLv2Parser::KEYWORD_SPECILIZATION);
      setState(3738);
      identification();
    }
    setState(3743);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_REDEFINITION) {
      setState(3741);
      match(SysMLv2Parser::KEYWORD_REDEFINITION);
      setState(3742);
      specific_type();
    }
    setState(3745);
    match(SysMLv2Parser::REDEFINES);
    setState(3746);
    qualified_name();
    setState(3748);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::TYPED_BY) {
      setState(3747);
      typed_by();
    }
    setState(3751);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::SYMBOL_SQUARE_BRACKET_OPEN) {
      setState(3750);
      multiplicity_part();
    }
    setState(3754);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::SUBSETS) {
      setState(3753);
      subsets();
    }
    setState(3757);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::SYMBOL_ASSIGN) {
      setState(3756);
      feature_assignment();
    }
    setState(3759);
    relationship_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Owned_redefinitionContext ------------------------------------------------------------------

SysMLv2Parser::Owned_redefinitionContext::Owned_redefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::General_typeContext* SysMLv2Parser::Owned_redefinitionContext::general_type() {
  return getRuleContext<SysMLv2Parser::General_typeContext>(0);
}


size_t SysMLv2Parser::Owned_redefinitionContext::getRuleIndex() const {
  return SysMLv2Parser::RuleOwned_redefinition;
}

void SysMLv2Parser::Owned_redefinitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOwned_redefinition(this);
}

void SysMLv2Parser::Owned_redefinitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOwned_redefinition(this);
}

SysMLv2Parser::Owned_redefinitionContext* SysMLv2Parser::owned_redefinition() {
  Owned_redefinitionContext *_localctx = _tracker.createInstance<Owned_redefinitionContext>(_ctx, getState());
  enterRule(_localctx, 756, SysMLv2Parser::RuleOwned_redefinition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3761);
    general_type();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Owned_feature_chainContext ------------------------------------------------------------------

SysMLv2Parser::Owned_feature_chainContext::Owned_feature_chainContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Feature_chainContext* SysMLv2Parser::Owned_feature_chainContext::feature_chain() {
  return getRuleContext<SysMLv2Parser::Feature_chainContext>(0);
}


size_t SysMLv2Parser::Owned_feature_chainContext::getRuleIndex() const {
  return SysMLv2Parser::RuleOwned_feature_chain;
}

void SysMLv2Parser::Owned_feature_chainContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOwned_feature_chain(this);
}

void SysMLv2Parser::Owned_feature_chainContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOwned_feature_chain(this);
}

SysMLv2Parser::Owned_feature_chainContext* SysMLv2Parser::owned_feature_chain() {
  Owned_feature_chainContext *_localctx = _tracker.createInstance<Owned_feature_chainContext>(_ctx, getState());
  enterRule(_localctx, 758, SysMLv2Parser::RuleOwned_feature_chain);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3763);
    feature_chain();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Feature_chainContext ------------------------------------------------------------------

SysMLv2Parser::Feature_chainContext::Feature_chainContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<SysMLv2Parser::Owned_feature_chainingContext *> SysMLv2Parser::Feature_chainContext::owned_feature_chaining() {
  return getRuleContexts<SysMLv2Parser::Owned_feature_chainingContext>();
}

SysMLv2Parser::Owned_feature_chainingContext* SysMLv2Parser::Feature_chainContext::owned_feature_chaining(size_t i) {
  return getRuleContext<SysMLv2Parser::Owned_feature_chainingContext>(i);
}

std::vector<tree::TerminalNode *> SysMLv2Parser::Feature_chainContext::SYMBOL_DOT() {
  return getTokens(SysMLv2Parser::SYMBOL_DOT);
}

tree::TerminalNode* SysMLv2Parser::Feature_chainContext::SYMBOL_DOT(size_t i) {
  return getToken(SysMLv2Parser::SYMBOL_DOT, i);
}


size_t SysMLv2Parser::Feature_chainContext::getRuleIndex() const {
  return SysMLv2Parser::RuleFeature_chain;
}

void SysMLv2Parser::Feature_chainContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFeature_chain(this);
}

void SysMLv2Parser::Feature_chainContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFeature_chain(this);
}

SysMLv2Parser::Feature_chainContext* SysMLv2Parser::feature_chain() {
  Feature_chainContext *_localctx = _tracker.createInstance<Feature_chainContext>(_ctx, getState());
  enterRule(_localctx, 760, SysMLv2Parser::RuleFeature_chain);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3765);
    owned_feature_chaining();
    setState(3770);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 381, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(3766);
        match(SysMLv2Parser::SYMBOL_DOT);
        setState(3767);
        owned_feature_chaining(); 
      }
      setState(3772);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 381, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Owned_feature_chainingContext ------------------------------------------------------------------

SysMLv2Parser::Owned_feature_chainingContext::Owned_feature_chainingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Qualified_nameContext* SysMLv2Parser::Owned_feature_chainingContext::qualified_name() {
  return getRuleContext<SysMLv2Parser::Qualified_nameContext>(0);
}


size_t SysMLv2Parser::Owned_feature_chainingContext::getRuleIndex() const {
  return SysMLv2Parser::RuleOwned_feature_chaining;
}

void SysMLv2Parser::Owned_feature_chainingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOwned_feature_chaining(this);
}

void SysMLv2Parser::Owned_feature_chainingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOwned_feature_chaining(this);
}

SysMLv2Parser::Owned_feature_chainingContext* SysMLv2Parser::owned_feature_chaining() {
  Owned_feature_chainingContext *_localctx = _tracker.createInstance<Owned_feature_chainingContext>(_ctx, getState());
  enterRule(_localctx, 762, SysMLv2Parser::RuleOwned_feature_chaining);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3773);
    qualified_name();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Feature_invertingContext ------------------------------------------------------------------

SysMLv2Parser::Feature_invertingContext::Feature_invertingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Feature_invertingContext::KEYWORD_INVERSE() {
  return getToken(SysMLv2Parser::KEYWORD_INVERSE, 0);
}

tree::TerminalNode* SysMLv2Parser::Feature_invertingContext::KEYWORD_OF() {
  return getToken(SysMLv2Parser::KEYWORD_OF, 0);
}

SysMLv2Parser::Relationship_bodyContext* SysMLv2Parser::Feature_invertingContext::relationship_body() {
  return getRuleContext<SysMLv2Parser::Relationship_bodyContext>(0);
}

std::vector<SysMLv2Parser::Qualified_nameContext *> SysMLv2Parser::Feature_invertingContext::qualified_name() {
  return getRuleContexts<SysMLv2Parser::Qualified_nameContext>();
}

SysMLv2Parser::Qualified_nameContext* SysMLv2Parser::Feature_invertingContext::qualified_name(size_t i) {
  return getRuleContext<SysMLv2Parser::Qualified_nameContext>(i);
}

std::vector<SysMLv2Parser::Owned_feature_chainContext *> SysMLv2Parser::Feature_invertingContext::owned_feature_chain() {
  return getRuleContexts<SysMLv2Parser::Owned_feature_chainContext>();
}

SysMLv2Parser::Owned_feature_chainContext* SysMLv2Parser::Feature_invertingContext::owned_feature_chain(size_t i) {
  return getRuleContext<SysMLv2Parser::Owned_feature_chainContext>(i);
}

tree::TerminalNode* SysMLv2Parser::Feature_invertingContext::KEYWORD_INVERTING() {
  return getToken(SysMLv2Parser::KEYWORD_INVERTING, 0);
}

SysMLv2Parser::IdentificationContext* SysMLv2Parser::Feature_invertingContext::identification() {
  return getRuleContext<SysMLv2Parser::IdentificationContext>(0);
}


size_t SysMLv2Parser::Feature_invertingContext::getRuleIndex() const {
  return SysMLv2Parser::RuleFeature_inverting;
}

void SysMLv2Parser::Feature_invertingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFeature_inverting(this);
}

void SysMLv2Parser::Feature_invertingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFeature_inverting(this);
}

SysMLv2Parser::Feature_invertingContext* SysMLv2Parser::feature_inverting() {
  Feature_invertingContext *_localctx = _tracker.createInstance<Feature_invertingContext>(_ctx, getState());
  enterRule(_localctx, 764, SysMLv2Parser::RuleFeature_inverting);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3777);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_INVERTING) {
      setState(3775);
      match(SysMLv2Parser::KEYWORD_INVERTING);
      setState(3776);
      identification();
    }
    setState(3779);
    match(SysMLv2Parser::KEYWORD_INVERSE);
    setState(3782);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 383, _ctx)) {
    case 1: {
      setState(3780);
      qualified_name();
      break;
    }

    case 2: {
      setState(3781);
      owned_feature_chain();
      break;
    }

    default:
      break;
    }
    setState(3784);
    match(SysMLv2Parser::KEYWORD_OF);
    setState(3787);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 384, _ctx)) {
    case 1: {
      setState(3785);
      qualified_name();
      break;
    }

    case 2: {
      setState(3786);
      owned_feature_chain();
      break;
    }

    default:
      break;
    }
    setState(3789);
    relationship_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Owned_feature_invertingContext ------------------------------------------------------------------

SysMLv2Parser::Owned_feature_invertingContext::Owned_feature_invertingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Qualified_nameContext* SysMLv2Parser::Owned_feature_invertingContext::qualified_name() {
  return getRuleContext<SysMLv2Parser::Qualified_nameContext>(0);
}

SysMLv2Parser::Owned_feature_chainContext* SysMLv2Parser::Owned_feature_invertingContext::owned_feature_chain() {
  return getRuleContext<SysMLv2Parser::Owned_feature_chainContext>(0);
}


size_t SysMLv2Parser::Owned_feature_invertingContext::getRuleIndex() const {
  return SysMLv2Parser::RuleOwned_feature_inverting;
}

void SysMLv2Parser::Owned_feature_invertingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOwned_feature_inverting(this);
}

void SysMLv2Parser::Owned_feature_invertingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOwned_feature_inverting(this);
}

SysMLv2Parser::Owned_feature_invertingContext* SysMLv2Parser::owned_feature_inverting() {
  Owned_feature_invertingContext *_localctx = _tracker.createInstance<Owned_feature_invertingContext>(_ctx, getState());
  enterRule(_localctx, 766, SysMLv2Parser::RuleOwned_feature_inverting);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3793);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 385, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3791);
      qualified_name();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3792);
      owned_feature_chain();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_featuringContext ------------------------------------------------------------------

SysMLv2Parser::Type_featuringContext::Type_featuringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Type_featuringContext::KEYWORD_FEATURING() {
  return getToken(SysMLv2Parser::KEYWORD_FEATURING, 0);
}

std::vector<SysMLv2Parser::Qualified_nameContext *> SysMLv2Parser::Type_featuringContext::qualified_name() {
  return getRuleContexts<SysMLv2Parser::Qualified_nameContext>();
}

SysMLv2Parser::Qualified_nameContext* SysMLv2Parser::Type_featuringContext::qualified_name(size_t i) {
  return getRuleContext<SysMLv2Parser::Qualified_nameContext>(i);
}

tree::TerminalNode* SysMLv2Parser::Type_featuringContext::KEYWORD_BY() {
  return getToken(SysMLv2Parser::KEYWORD_BY, 0);
}

SysMLv2Parser::Relationship_bodyContext* SysMLv2Parser::Type_featuringContext::relationship_body() {
  return getRuleContext<SysMLv2Parser::Relationship_bodyContext>(0);
}

SysMLv2Parser::IdentificationContext* SysMLv2Parser::Type_featuringContext::identification() {
  return getRuleContext<SysMLv2Parser::IdentificationContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Type_featuringContext::KEYWORD_OF() {
  return getToken(SysMLv2Parser::KEYWORD_OF, 0);
}


size_t SysMLv2Parser::Type_featuringContext::getRuleIndex() const {
  return SysMLv2Parser::RuleType_featuring;
}

void SysMLv2Parser::Type_featuringContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_featuring(this);
}

void SysMLv2Parser::Type_featuringContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_featuring(this);
}

SysMLv2Parser::Type_featuringContext* SysMLv2Parser::type_featuring() {
  Type_featuringContext *_localctx = _tracker.createInstance<Type_featuringContext>(_ctx, getState());
  enterRule(_localctx, 768, SysMLv2Parser::RuleType_featuring);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3795);
    match(SysMLv2Parser::KEYWORD_FEATURING);
    setState(3799);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 386, _ctx)) {
    case 1: {
      setState(3796);
      identification();
      setState(3797);
      match(SysMLv2Parser::KEYWORD_OF);
      break;
    }

    default:
      break;
    }
    setState(3801);
    qualified_name();
    setState(3802);
    match(SysMLv2Parser::KEYWORD_BY);
    setState(3803);
    qualified_name();
    setState(3804);
    relationship_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Owned_type_featuringContext ------------------------------------------------------------------

SysMLv2Parser::Owned_type_featuringContext::Owned_type_featuringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Qualified_nameContext* SysMLv2Parser::Owned_type_featuringContext::qualified_name() {
  return getRuleContext<SysMLv2Parser::Qualified_nameContext>(0);
}


size_t SysMLv2Parser::Owned_type_featuringContext::getRuleIndex() const {
  return SysMLv2Parser::RuleOwned_type_featuring;
}

void SysMLv2Parser::Owned_type_featuringContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOwned_type_featuring(this);
}

void SysMLv2Parser::Owned_type_featuringContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOwned_type_featuring(this);
}

SysMLv2Parser::Owned_type_featuringContext* SysMLv2Parser::owned_type_featuring() {
  Owned_type_featuringContext *_localctx = _tracker.createInstance<Owned_type_featuringContext>(_ctx, getState());
  enterRule(_localctx, 770, SysMLv2Parser::RuleOwned_type_featuring);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3806);
    qualified_name();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Data_typeContext ------------------------------------------------------------------

SysMLv2Parser::Data_typeContext::Data_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Type_prefixContext* SysMLv2Parser::Data_typeContext::type_prefix() {
  return getRuleContext<SysMLv2Parser::Type_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Data_typeContext::KEYWORD_DATATYPE() {
  return getToken(SysMLv2Parser::KEYWORD_DATATYPE, 0);
}

SysMLv2Parser::Classifier_declarationContext* SysMLv2Parser::Data_typeContext::classifier_declaration() {
  return getRuleContext<SysMLv2Parser::Classifier_declarationContext>(0);
}

SysMLv2Parser::Type_bodyContext* SysMLv2Parser::Data_typeContext::type_body() {
  return getRuleContext<SysMLv2Parser::Type_bodyContext>(0);
}


size_t SysMLv2Parser::Data_typeContext::getRuleIndex() const {
  return SysMLv2Parser::RuleData_type;
}

void SysMLv2Parser::Data_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterData_type(this);
}

void SysMLv2Parser::Data_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitData_type(this);
}

SysMLv2Parser::Data_typeContext* SysMLv2Parser::data_type() {
  Data_typeContext *_localctx = _tracker.createInstance<Data_typeContext>(_ctx, getState());
  enterRule(_localctx, 772, SysMLv2Parser::RuleData_type);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3808);
    type_prefix();
    setState(3809);
    match(SysMLv2Parser::KEYWORD_DATATYPE);
    setState(3810);
    classifier_declaration();
    setState(3811);
    type_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassContext ------------------------------------------------------------------

SysMLv2Parser::ClassContext::ClassContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Type_prefixContext* SysMLv2Parser::ClassContext::type_prefix() {
  return getRuleContext<SysMLv2Parser::Type_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::ClassContext::KEYWORD_CLASS() {
  return getToken(SysMLv2Parser::KEYWORD_CLASS, 0);
}

SysMLv2Parser::Classifier_declarationContext* SysMLv2Parser::ClassContext::classifier_declaration() {
  return getRuleContext<SysMLv2Parser::Classifier_declarationContext>(0);
}

SysMLv2Parser::Type_bodyContext* SysMLv2Parser::ClassContext::type_body() {
  return getRuleContext<SysMLv2Parser::Type_bodyContext>(0);
}


size_t SysMLv2Parser::ClassContext::getRuleIndex() const {
  return SysMLv2Parser::RuleClass;
}

void SysMLv2Parser::ClassContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClass(this);
}

void SysMLv2Parser::ClassContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClass(this);
}

SysMLv2Parser::ClassContext* SysMLv2Parser::class_() {
  ClassContext *_localctx = _tracker.createInstance<ClassContext>(_ctx, getState());
  enterRule(_localctx, 774, SysMLv2Parser::RuleClass);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3813);
    type_prefix();
    setState(3814);
    match(SysMLv2Parser::KEYWORD_CLASS);
    setState(3815);
    classifier_declaration();
    setState(3816);
    type_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StructureContext ------------------------------------------------------------------

SysMLv2Parser::StructureContext::StructureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::StructureContext::KEYWORD_STRUCT() {
  return getToken(SysMLv2Parser::KEYWORD_STRUCT, 0);
}

SysMLv2Parser::Classifier_declarationContext* SysMLv2Parser::StructureContext::classifier_declaration() {
  return getRuleContext<SysMLv2Parser::Classifier_declarationContext>(0);
}

SysMLv2Parser::Type_bodyContext* SysMLv2Parser::StructureContext::type_body() {
  return getRuleContext<SysMLv2Parser::Type_bodyContext>(0);
}

SysMLv2Parser::Type_prefixContext* SysMLv2Parser::StructureContext::type_prefix() {
  return getRuleContext<SysMLv2Parser::Type_prefixContext>(0);
}


size_t SysMLv2Parser::StructureContext::getRuleIndex() const {
  return SysMLv2Parser::RuleStructure;
}

void SysMLv2Parser::StructureContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStructure(this);
}

void SysMLv2Parser::StructureContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStructure(this);
}

SysMLv2Parser::StructureContext* SysMLv2Parser::structure() {
  StructureContext *_localctx = _tracker.createInstance<StructureContext>(_ctx, getState());
  enterRule(_localctx, 776, SysMLv2Parser::RuleStructure);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3819);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 387, _ctx)) {
    case 1: {
      setState(3818);
      type_prefix();
      break;
    }

    default:
      break;
    }
    setState(3821);
    match(SysMLv2Parser::KEYWORD_STRUCT);
    setState(3822);
    classifier_declaration();
    setState(3823);
    type_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssociationContext ------------------------------------------------------------------

SysMLv2Parser::AssociationContext::AssociationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Type_prefixContext* SysMLv2Parser::AssociationContext::type_prefix() {
  return getRuleContext<SysMLv2Parser::Type_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::AssociationContext::KEYWORD_ASSOC() {
  return getToken(SysMLv2Parser::KEYWORD_ASSOC, 0);
}

SysMLv2Parser::Classifier_declarationContext* SysMLv2Parser::AssociationContext::classifier_declaration() {
  return getRuleContext<SysMLv2Parser::Classifier_declarationContext>(0);
}

SysMLv2Parser::Type_bodyContext* SysMLv2Parser::AssociationContext::type_body() {
  return getRuleContext<SysMLv2Parser::Type_bodyContext>(0);
}


size_t SysMLv2Parser::AssociationContext::getRuleIndex() const {
  return SysMLv2Parser::RuleAssociation;
}

void SysMLv2Parser::AssociationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssociation(this);
}

void SysMLv2Parser::AssociationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssociation(this);
}

SysMLv2Parser::AssociationContext* SysMLv2Parser::association() {
  AssociationContext *_localctx = _tracker.createInstance<AssociationContext>(_ctx, getState());
  enterRule(_localctx, 778, SysMLv2Parser::RuleAssociation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3825);
    type_prefix();
    setState(3826);
    match(SysMLv2Parser::KEYWORD_ASSOC);
    setState(3827);
    classifier_declaration();
    setState(3828);
    type_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Association_structureContext ------------------------------------------------------------------

SysMLv2Parser::Association_structureContext::Association_structureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Type_prefixContext* SysMLv2Parser::Association_structureContext::type_prefix() {
  return getRuleContext<SysMLv2Parser::Type_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Association_structureContext::KEYWORD_ASSOC() {
  return getToken(SysMLv2Parser::KEYWORD_ASSOC, 0);
}

tree::TerminalNode* SysMLv2Parser::Association_structureContext::KEYWORD_STRUCT() {
  return getToken(SysMLv2Parser::KEYWORD_STRUCT, 0);
}

SysMLv2Parser::Classifier_declarationContext* SysMLv2Parser::Association_structureContext::classifier_declaration() {
  return getRuleContext<SysMLv2Parser::Classifier_declarationContext>(0);
}

SysMLv2Parser::Type_bodyContext* SysMLv2Parser::Association_structureContext::type_body() {
  return getRuleContext<SysMLv2Parser::Type_bodyContext>(0);
}


size_t SysMLv2Parser::Association_structureContext::getRuleIndex() const {
  return SysMLv2Parser::RuleAssociation_structure;
}

void SysMLv2Parser::Association_structureContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssociation_structure(this);
}

void SysMLv2Parser::Association_structureContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssociation_structure(this);
}

SysMLv2Parser::Association_structureContext* SysMLv2Parser::association_structure() {
  Association_structureContext *_localctx = _tracker.createInstance<Association_structureContext>(_ctx, getState());
  enterRule(_localctx, 780, SysMLv2Parser::RuleAssociation_structure);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3830);
    type_prefix();
    setState(3831);
    match(SysMLv2Parser::KEYWORD_ASSOC);
    setState(3832);
    match(SysMLv2Parser::KEYWORD_STRUCT);
    setState(3833);
    classifier_declaration();
    setState(3834);
    type_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConnectorContext ------------------------------------------------------------------

SysMLv2Parser::ConnectorContext::ConnectorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::ConnectorContext::KEYWORD_CONNECTOR() {
  return getToken(SysMLv2Parser::KEYWORD_CONNECTOR, 0);
}

SysMLv2Parser::Connector_declarationContext* SysMLv2Parser::ConnectorContext::connector_declaration() {
  return getRuleContext<SysMLv2Parser::Connector_declarationContext>(0);
}

SysMLv2Parser::Type_bodyContext* SysMLv2Parser::ConnectorContext::type_body() {
  return getRuleContext<SysMLv2Parser::Type_bodyContext>(0);
}

SysMLv2Parser::Type_prefixContext* SysMLv2Parser::ConnectorContext::type_prefix() {
  return getRuleContext<SysMLv2Parser::Type_prefixContext>(0);
}


size_t SysMLv2Parser::ConnectorContext::getRuleIndex() const {
  return SysMLv2Parser::RuleConnector;
}

void SysMLv2Parser::ConnectorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConnector(this);
}

void SysMLv2Parser::ConnectorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConnector(this);
}

SysMLv2Parser::ConnectorContext* SysMLv2Parser::connector() {
  ConnectorContext *_localctx = _tracker.createInstance<ConnectorContext>(_ctx, getState());
  enterRule(_localctx, 782, SysMLv2Parser::RuleConnector);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3837);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 388, _ctx)) {
    case 1: {
      setState(3836);
      type_prefix();
      break;
    }

    default:
      break;
    }
    setState(3839);
    match(SysMLv2Parser::KEYWORD_CONNECTOR);
    setState(3840);
    connector_declaration();
    setState(3841);
    type_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Connector_declarationContext ------------------------------------------------------------------

SysMLv2Parser::Connector_declarationContext::Connector_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Feature_declarationContext* SysMLv2Parser::Connector_declarationContext::feature_declaration() {
  return getRuleContext<SysMLv2Parser::Feature_declarationContext>(0);
}

SysMLv2Parser::Binary_connector_declarationContext* SysMLv2Parser::Connector_declarationContext::binary_connector_declaration() {
  return getRuleContext<SysMLv2Parser::Binary_connector_declarationContext>(0);
}

SysMLv2Parser::Nary_connector_declarationContext* SysMLv2Parser::Connector_declarationContext::nary_connector_declaration() {
  return getRuleContext<SysMLv2Parser::Nary_connector_declarationContext>(0);
}


size_t SysMLv2Parser::Connector_declarationContext::getRuleIndex() const {
  return SysMLv2Parser::RuleConnector_declaration;
}

void SysMLv2Parser::Connector_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConnector_declaration(this);
}

void SysMLv2Parser::Connector_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConnector_declaration(this);
}

SysMLv2Parser::Connector_declarationContext* SysMLv2Parser::connector_declaration() {
  Connector_declarationContext *_localctx = _tracker.createInstance<Connector_declarationContext>(_ctx, getState());
  enterRule(_localctx, 784, SysMLv2Parser::RuleConnector_declaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3843);
    feature_declaration();
    setState(3846);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SysMLv2Parser::KEYWORD_ALL:
      case SysMLv2Parser::KEYWORD_FROM: {
        setState(3844);
        binary_connector_declaration();
        break;
      }

      case SysMLv2Parser::SYMBOL_ROUND_BRACKET_OPEN: {
        setState(3845);
        nary_connector_declaration();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Binary_connector_declarationContext ------------------------------------------------------------------

SysMLv2Parser::Binary_connector_declarationContext::Binary_connector_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Binary_connector_declarationContext::KEYWORD_FROM() {
  return getToken(SysMLv2Parser::KEYWORD_FROM, 0);
}

std::vector<SysMLv2Parser::Connector_end_memberContext *> SysMLv2Parser::Binary_connector_declarationContext::connector_end_member() {
  return getRuleContexts<SysMLv2Parser::Connector_end_memberContext>();
}

SysMLv2Parser::Connector_end_memberContext* SysMLv2Parser::Binary_connector_declarationContext::connector_end_member(size_t i) {
  return getRuleContext<SysMLv2Parser::Connector_end_memberContext>(i);
}

tree::TerminalNode* SysMLv2Parser::Binary_connector_declarationContext::KEYWORD_TO() {
  return getToken(SysMLv2Parser::KEYWORD_TO, 0);
}

tree::TerminalNode* SysMLv2Parser::Binary_connector_declarationContext::KEYWORD_ALL() {
  return getToken(SysMLv2Parser::KEYWORD_ALL, 0);
}


size_t SysMLv2Parser::Binary_connector_declarationContext::getRuleIndex() const {
  return SysMLv2Parser::RuleBinary_connector_declaration;
}

void SysMLv2Parser::Binary_connector_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBinary_connector_declaration(this);
}

void SysMLv2Parser::Binary_connector_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBinary_connector_declaration(this);
}

SysMLv2Parser::Binary_connector_declarationContext* SysMLv2Parser::binary_connector_declaration() {
  Binary_connector_declarationContext *_localctx = _tracker.createInstance<Binary_connector_declarationContext>(_ctx, getState());
  enterRule(_localctx, 786, SysMLv2Parser::RuleBinary_connector_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3849);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_ALL) {
      setState(3848);
      match(SysMLv2Parser::KEYWORD_ALL);
    }
    setState(3851);
    match(SysMLv2Parser::KEYWORD_FROM);
    setState(3852);
    connector_end_member();
    setState(3853);
    match(SysMLv2Parser::KEYWORD_TO);
    setState(3854);
    connector_end_member();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Nary_connector_declarationContext ------------------------------------------------------------------

SysMLv2Parser::Nary_connector_declarationContext::Nary_connector_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Nary_connector_declarationContext::SYMBOL_ROUND_BRACKET_OPEN() {
  return getToken(SysMLv2Parser::SYMBOL_ROUND_BRACKET_OPEN, 0);
}

std::vector<SysMLv2Parser::Connector_end_memberContext *> SysMLv2Parser::Nary_connector_declarationContext::connector_end_member() {
  return getRuleContexts<SysMLv2Parser::Connector_end_memberContext>();
}

SysMLv2Parser::Connector_end_memberContext* SysMLv2Parser::Nary_connector_declarationContext::connector_end_member(size_t i) {
  return getRuleContext<SysMLv2Parser::Connector_end_memberContext>(i);
}

std::vector<tree::TerminalNode *> SysMLv2Parser::Nary_connector_declarationContext::SYMBOL_COMMA() {
  return getTokens(SysMLv2Parser::SYMBOL_COMMA);
}

tree::TerminalNode* SysMLv2Parser::Nary_connector_declarationContext::SYMBOL_COMMA(size_t i) {
  return getToken(SysMLv2Parser::SYMBOL_COMMA, i);
}

tree::TerminalNode* SysMLv2Parser::Nary_connector_declarationContext::SYMBOL_ROUND_BRACKET_CLOSE() {
  return getToken(SysMLv2Parser::SYMBOL_ROUND_BRACKET_CLOSE, 0);
}


size_t SysMLv2Parser::Nary_connector_declarationContext::getRuleIndex() const {
  return SysMLv2Parser::RuleNary_connector_declaration;
}

void SysMLv2Parser::Nary_connector_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNary_connector_declaration(this);
}

void SysMLv2Parser::Nary_connector_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNary_connector_declaration(this);
}

SysMLv2Parser::Nary_connector_declarationContext* SysMLv2Parser::nary_connector_declaration() {
  Nary_connector_declarationContext *_localctx = _tracker.createInstance<Nary_connector_declarationContext>(_ctx, getState());
  enterRule(_localctx, 788, SysMLv2Parser::RuleNary_connector_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3856);
    match(SysMLv2Parser::SYMBOL_ROUND_BRACKET_OPEN);
    setState(3857);
    connector_end_member();
    setState(3858);
    match(SysMLv2Parser::SYMBOL_COMMA);
    setState(3859);
    connector_end_member();
    setState(3864);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SysMLv2Parser::SYMBOL_COMMA) {
      setState(3860);
      match(SysMLv2Parser::SYMBOL_COMMA);
      setState(3861);
      connector_end_member();
      setState(3866);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(3867);
    match(SysMLv2Parser::SYMBOL_ROUND_BRACKET_CLOSE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Connector_endContext ------------------------------------------------------------------

SysMLv2Parser::Connector_endContext::Connector_endContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Owned_reference_subsettingContext* SysMLv2Parser::Connector_endContext::owned_reference_subsetting() {
  return getRuleContext<SysMLv2Parser::Owned_reference_subsettingContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Connector_endContext::NAME() {
  return getToken(SysMLv2Parser::NAME, 0);
}

tree::TerminalNode* SysMLv2Parser::Connector_endContext::REFERENCES() {
  return getToken(SysMLv2Parser::REFERENCES, 0);
}

SysMLv2Parser::Multiplicity_boundsContext* SysMLv2Parser::Connector_endContext::multiplicity_bounds() {
  return getRuleContext<SysMLv2Parser::Multiplicity_boundsContext>(0);
}


size_t SysMLv2Parser::Connector_endContext::getRuleIndex() const {
  return SysMLv2Parser::RuleConnector_end;
}

void SysMLv2Parser::Connector_endContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConnector_end(this);
}

void SysMLv2Parser::Connector_endContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConnector_end(this);
}

SysMLv2Parser::Connector_endContext* SysMLv2Parser::connector_end() {
  Connector_endContext *_localctx = _tracker.createInstance<Connector_endContext>(_ctx, getState());
  enterRule(_localctx, 790, SysMLv2Parser::RuleConnector_end);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3871);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 392, _ctx)) {
    case 1: {
      setState(3869);
      match(SysMLv2Parser::NAME);
      setState(3870);
      match(SysMLv2Parser::REFERENCES);
      break;
    }

    default:
      break;
    }
    setState(3874);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::SYMBOL_SQUARE_BRACKET_OPEN) {
      setState(3873);
      multiplicity_bounds();
    }
    setState(3876);
    owned_reference_subsetting();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Binding_connectorContext ------------------------------------------------------------------

SysMLv2Parser::Binding_connectorContext::Binding_connectorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Feature_prefixContext* SysMLv2Parser::Binding_connectorContext::feature_prefix() {
  return getRuleContext<SysMLv2Parser::Feature_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Binding_connectorContext::KEYWORD_BINDING() {
  return getToken(SysMLv2Parser::KEYWORD_BINDING, 0);
}

SysMLv2Parser::Binding_connector_declarationContext* SysMLv2Parser::Binding_connectorContext::binding_connector_declaration() {
  return getRuleContext<SysMLv2Parser::Binding_connector_declarationContext>(0);
}

SysMLv2Parser::Type_bodyContext* SysMLv2Parser::Binding_connectorContext::type_body() {
  return getRuleContext<SysMLv2Parser::Type_bodyContext>(0);
}


size_t SysMLv2Parser::Binding_connectorContext::getRuleIndex() const {
  return SysMLv2Parser::RuleBinding_connector;
}

void SysMLv2Parser::Binding_connectorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBinding_connector(this);
}

void SysMLv2Parser::Binding_connectorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBinding_connector(this);
}

SysMLv2Parser::Binding_connectorContext* SysMLv2Parser::binding_connector() {
  Binding_connectorContext *_localctx = _tracker.createInstance<Binding_connectorContext>(_ctx, getState());
  enterRule(_localctx, 792, SysMLv2Parser::RuleBinding_connector);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3878);
    feature_prefix();
    setState(3879);
    match(SysMLv2Parser::KEYWORD_BINDING);
    setState(3880);
    binding_connector_declaration();
    setState(3881);
    type_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Binding_connector_declarationContext ------------------------------------------------------------------

SysMLv2Parser::Binding_connector_declarationContext::Binding_connector_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Feature_declarationContext* SysMLv2Parser::Binding_connector_declarationContext::feature_declaration() {
  return getRuleContext<SysMLv2Parser::Feature_declarationContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Binding_connector_declarationContext::KEYWORD_OF() {
  return getToken(SysMLv2Parser::KEYWORD_OF, 0);
}

std::vector<SysMLv2Parser::Connector_end_memberContext *> SysMLv2Parser::Binding_connector_declarationContext::connector_end_member() {
  return getRuleContexts<SysMLv2Parser::Connector_end_memberContext>();
}

SysMLv2Parser::Connector_end_memberContext* SysMLv2Parser::Binding_connector_declarationContext::connector_end_member(size_t i) {
  return getRuleContext<SysMLv2Parser::Connector_end_memberContext>(i);
}

tree::TerminalNode* SysMLv2Parser::Binding_connector_declarationContext::SYMBOL_EQUALS() {
  return getToken(SysMLv2Parser::SYMBOL_EQUALS, 0);
}

tree::TerminalNode* SysMLv2Parser::Binding_connector_declarationContext::KEYWORD_ALL() {
  return getToken(SysMLv2Parser::KEYWORD_ALL, 0);
}


size_t SysMLv2Parser::Binding_connector_declarationContext::getRuleIndex() const {
  return SysMLv2Parser::RuleBinding_connector_declaration;
}

void SysMLv2Parser::Binding_connector_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBinding_connector_declaration(this);
}

void SysMLv2Parser::Binding_connector_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBinding_connector_declaration(this);
}

SysMLv2Parser::Binding_connector_declarationContext* SysMLv2Parser::binding_connector_declaration() {
  Binding_connector_declarationContext *_localctx = _tracker.createInstance<Binding_connector_declarationContext>(_ctx, getState());
  enterRule(_localctx, 794, SysMLv2Parser::RuleBinding_connector_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3903);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 398, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3883);
      feature_declaration();
      setState(3889);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == SysMLv2Parser::KEYWORD_OF) {
        setState(3884);
        match(SysMLv2Parser::KEYWORD_OF);
        setState(3885);
        connector_end_member();
        setState(3886);
        match(SysMLv2Parser::SYMBOL_EQUALS);
        setState(3887);
        connector_end_member();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3892);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == SysMLv2Parser::KEYWORD_ALL) {
        setState(3891);
        match(SysMLv2Parser::KEYWORD_ALL);
      }
      setState(3901);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == SysMLv2Parser::KEYWORD_OF

      || _la == SysMLv2Parser::SYMBOL_SQUARE_BRACKET_OPEN || _la == SysMLv2Parser::NAME) {
        setState(3895);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == SysMLv2Parser::KEYWORD_OF) {
          setState(3894);
          match(SysMLv2Parser::KEYWORD_OF);
        }
        setState(3897);
        connector_end_member();
        setState(3898);
        match(SysMLv2Parser::SYMBOL_EQUALS);
        setState(3899);
        connector_end_member();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SuccessionContext ------------------------------------------------------------------

SysMLv2Parser::SuccessionContext::SuccessionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Feature_prefixContext* SysMLv2Parser::SuccessionContext::feature_prefix() {
  return getRuleContext<SysMLv2Parser::Feature_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::SuccessionContext::KEYWORD_SUCCSESSION() {
  return getToken(SysMLv2Parser::KEYWORD_SUCCSESSION, 0);
}

SysMLv2Parser::Succession_declarationContext* SysMLv2Parser::SuccessionContext::succession_declaration() {
  return getRuleContext<SysMLv2Parser::Succession_declarationContext>(0);
}

SysMLv2Parser::Type_bodyContext* SysMLv2Parser::SuccessionContext::type_body() {
  return getRuleContext<SysMLv2Parser::Type_bodyContext>(0);
}


size_t SysMLv2Parser::SuccessionContext::getRuleIndex() const {
  return SysMLv2Parser::RuleSuccession;
}

void SysMLv2Parser::SuccessionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSuccession(this);
}

void SysMLv2Parser::SuccessionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSuccession(this);
}

SysMLv2Parser::SuccessionContext* SysMLv2Parser::succession() {
  SuccessionContext *_localctx = _tracker.createInstance<SuccessionContext>(_ctx, getState());
  enterRule(_localctx, 796, SysMLv2Parser::RuleSuccession);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3905);
    feature_prefix();
    setState(3906);
    match(SysMLv2Parser::KEYWORD_SUCCSESSION);
    setState(3907);
    succession_declaration();
    setState(3908);
    type_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Succession_declarationContext ------------------------------------------------------------------

SysMLv2Parser::Succession_declarationContext::Succession_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Feature_declarationContext* SysMLv2Parser::Succession_declarationContext::feature_declaration() {
  return getRuleContext<SysMLv2Parser::Feature_declarationContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Succession_declarationContext::KEYWORD_FIRST() {
  return getToken(SysMLv2Parser::KEYWORD_FIRST, 0);
}

std::vector<SysMLv2Parser::Connector_end_memberContext *> SysMLv2Parser::Succession_declarationContext::connector_end_member() {
  return getRuleContexts<SysMLv2Parser::Connector_end_memberContext>();
}

SysMLv2Parser::Connector_end_memberContext* SysMLv2Parser::Succession_declarationContext::connector_end_member(size_t i) {
  return getRuleContext<SysMLv2Parser::Connector_end_memberContext>(i);
}

tree::TerminalNode* SysMLv2Parser::Succession_declarationContext::KEYWORD_THEN() {
  return getToken(SysMLv2Parser::KEYWORD_THEN, 0);
}

tree::TerminalNode* SysMLv2Parser::Succession_declarationContext::KEYWORD_ALL() {
  return getToken(SysMLv2Parser::KEYWORD_ALL, 0);
}


size_t SysMLv2Parser::Succession_declarationContext::getRuleIndex() const {
  return SysMLv2Parser::RuleSuccession_declaration;
}

void SysMLv2Parser::Succession_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSuccession_declaration(this);
}

void SysMLv2Parser::Succession_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSuccession_declaration(this);
}

SysMLv2Parser::Succession_declarationContext* SysMLv2Parser::succession_declaration() {
  Succession_declarationContext *_localctx = _tracker.createInstance<Succession_declarationContext>(_ctx, getState());
  enterRule(_localctx, 798, SysMLv2Parser::RuleSuccession_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3930);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 403, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3910);
      feature_declaration();
      setState(3916);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == SysMLv2Parser::KEYWORD_FIRST) {
        setState(3911);
        match(SysMLv2Parser::KEYWORD_FIRST);
        setState(3912);
        connector_end_member();
        setState(3913);
        match(SysMLv2Parser::KEYWORD_THEN);
        setState(3914);
        connector_end_member();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3919);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == SysMLv2Parser::KEYWORD_ALL) {
        setState(3918);
        match(SysMLv2Parser::KEYWORD_ALL);
      }
      setState(3928);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == SysMLv2Parser::KEYWORD_FIRST || _la == SysMLv2Parser::SYMBOL_SQUARE_BRACKET_OPEN

      || _la == SysMLv2Parser::NAME) {
        setState(3922);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == SysMLv2Parser::KEYWORD_FIRST) {
          setState(3921);
          match(SysMLv2Parser::KEYWORD_FIRST);
        }
        setState(3924);
        connector_end_member();
        setState(3925);
        match(SysMLv2Parser::KEYWORD_THEN);
        setState(3926);
        connector_end_member();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BehaviorContext ------------------------------------------------------------------

SysMLv2Parser::BehaviorContext::BehaviorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Type_prefixContext* SysMLv2Parser::BehaviorContext::type_prefix() {
  return getRuleContext<SysMLv2Parser::Type_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::BehaviorContext::KEYWORD_BEHAVIOR() {
  return getToken(SysMLv2Parser::KEYWORD_BEHAVIOR, 0);
}

SysMLv2Parser::Classifier_declarationContext* SysMLv2Parser::BehaviorContext::classifier_declaration() {
  return getRuleContext<SysMLv2Parser::Classifier_declarationContext>(0);
}

SysMLv2Parser::Type_bodyContext* SysMLv2Parser::BehaviorContext::type_body() {
  return getRuleContext<SysMLv2Parser::Type_bodyContext>(0);
}


size_t SysMLv2Parser::BehaviorContext::getRuleIndex() const {
  return SysMLv2Parser::RuleBehavior;
}

void SysMLv2Parser::BehaviorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBehavior(this);
}

void SysMLv2Parser::BehaviorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBehavior(this);
}

SysMLv2Parser::BehaviorContext* SysMLv2Parser::behavior() {
  BehaviorContext *_localctx = _tracker.createInstance<BehaviorContext>(_ctx, getState());
  enterRule(_localctx, 800, SysMLv2Parser::RuleBehavior);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3932);
    type_prefix();
    setState(3933);
    match(SysMLv2Parser::KEYWORD_BEHAVIOR);
    setState(3934);
    classifier_declaration();
    setState(3935);
    type_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StepContext ------------------------------------------------------------------

SysMLv2Parser::StepContext::StepContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Feature_prefixContext* SysMLv2Parser::StepContext::feature_prefix() {
  return getRuleContext<SysMLv2Parser::Feature_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::StepContext::KEYWORD_STEP() {
  return getToken(SysMLv2Parser::KEYWORD_STEP, 0);
}

SysMLv2Parser::Feature_declarationContext* SysMLv2Parser::StepContext::feature_declaration() {
  return getRuleContext<SysMLv2Parser::Feature_declarationContext>(0);
}

SysMLv2Parser::Type_bodyContext* SysMLv2Parser::StepContext::type_body() {
  return getRuleContext<SysMLv2Parser::Type_bodyContext>(0);
}

SysMLv2Parser::Value_partContext* SysMLv2Parser::StepContext::value_part() {
  return getRuleContext<SysMLv2Parser::Value_partContext>(0);
}


size_t SysMLv2Parser::StepContext::getRuleIndex() const {
  return SysMLv2Parser::RuleStep;
}

void SysMLv2Parser::StepContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStep(this);
}

void SysMLv2Parser::StepContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStep(this);
}

SysMLv2Parser::StepContext* SysMLv2Parser::step() {
  StepContext *_localctx = _tracker.createInstance<StepContext>(_ctx, getState());
  enterRule(_localctx, 802, SysMLv2Parser::RuleStep);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3937);
    feature_prefix();
    setState(3938);
    match(SysMLv2Parser::KEYWORD_STEP);
    setState(3939);
    feature_declaration();
    setState(3941);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_DEFAULT || _la == SysMLv2Parser::SYMBOL_DEF_ASSIGN

    || _la == SysMLv2Parser::SYMBOL_EQUALS) {
      setState(3940);
      value_part();
    }
    setState(3943);
    type_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionContext ------------------------------------------------------------------

SysMLv2Parser::FunctionContext::FunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Type_prefixContext* SysMLv2Parser::FunctionContext::type_prefix() {
  return getRuleContext<SysMLv2Parser::Type_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::FunctionContext::KEYWORD_FUNCTION() {
  return getToken(SysMLv2Parser::KEYWORD_FUNCTION, 0);
}

SysMLv2Parser::Classifier_declarationContext* SysMLv2Parser::FunctionContext::classifier_declaration() {
  return getRuleContext<SysMLv2Parser::Classifier_declarationContext>(0);
}

SysMLv2Parser::Function_bodyContext* SysMLv2Parser::FunctionContext::function_body() {
  return getRuleContext<SysMLv2Parser::Function_bodyContext>(0);
}


size_t SysMLv2Parser::FunctionContext::getRuleIndex() const {
  return SysMLv2Parser::RuleFunction;
}

void SysMLv2Parser::FunctionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunction(this);
}

void SysMLv2Parser::FunctionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunction(this);
}

SysMLv2Parser::FunctionContext* SysMLv2Parser::function() {
  FunctionContext *_localctx = _tracker.createInstance<FunctionContext>(_ctx, getState());
  enterRule(_localctx, 804, SysMLv2Parser::RuleFunction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3945);
    type_prefix();
    setState(3946);
    match(SysMLv2Parser::KEYWORD_FUNCTION);
    setState(3947);
    classifier_declaration();
    setState(3948);
    function_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Function_bodyContext ------------------------------------------------------------------

SysMLv2Parser::Function_bodyContext::Function_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Function_bodyContext::SYMBOL_STATEMENT_DELIMITER() {
  return getToken(SysMLv2Parser::SYMBOL_STATEMENT_DELIMITER, 0);
}

tree::TerminalNode* SysMLv2Parser::Function_bodyContext::SYMBOL_CURLY_BRACKET_OPEN() {
  return getToken(SysMLv2Parser::SYMBOL_CURLY_BRACKET_OPEN, 0);
}

SysMLv2Parser::Function_body_partContext* SysMLv2Parser::Function_bodyContext::function_body_part() {
  return getRuleContext<SysMLv2Parser::Function_body_partContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Function_bodyContext::SYMBOL_CURLY_BRACKET_CLOSE() {
  return getToken(SysMLv2Parser::SYMBOL_CURLY_BRACKET_CLOSE, 0);
}


size_t SysMLv2Parser::Function_bodyContext::getRuleIndex() const {
  return SysMLv2Parser::RuleFunction_body;
}

void SysMLv2Parser::Function_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunction_body(this);
}

void SysMLv2Parser::Function_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunction_body(this);
}

SysMLv2Parser::Function_bodyContext* SysMLv2Parser::function_body() {
  Function_bodyContext *_localctx = _tracker.createInstance<Function_bodyContext>(_ctx, getState());
  enterRule(_localctx, 806, SysMLv2Parser::RuleFunction_body);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3955);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SysMLv2Parser::SYMBOL_STATEMENT_DELIMITER: {
        enterOuterAlt(_localctx, 1);
        setState(3950);
        match(SysMLv2Parser::SYMBOL_STATEMENT_DELIMITER);
        break;
      }

      case SysMLv2Parser::SYMBOL_CURLY_BRACKET_OPEN: {
        enterOuterAlt(_localctx, 2);
        setState(3951);
        match(SysMLv2Parser::SYMBOL_CURLY_BRACKET_OPEN);
        setState(3952);
        function_body_part();
        setState(3953);
        match(SysMLv2Parser::SYMBOL_CURLY_BRACKET_CLOSE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Function_body_partContext ------------------------------------------------------------------

SysMLv2Parser::Function_body_partContext::Function_body_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<SysMLv2Parser::Type_body_elementContext *> SysMLv2Parser::Function_body_partContext::type_body_element() {
  return getRuleContexts<SysMLv2Parser::Type_body_elementContext>();
}

SysMLv2Parser::Type_body_elementContext* SysMLv2Parser::Function_body_partContext::type_body_element(size_t i) {
  return getRuleContext<SysMLv2Parser::Type_body_elementContext>(i);
}

std::vector<SysMLv2Parser::Return_feature_memberContext *> SysMLv2Parser::Function_body_partContext::return_feature_member() {
  return getRuleContexts<SysMLv2Parser::Return_feature_memberContext>();
}

SysMLv2Parser::Return_feature_memberContext* SysMLv2Parser::Function_body_partContext::return_feature_member(size_t i) {
  return getRuleContext<SysMLv2Parser::Return_feature_memberContext>(i);
}

SysMLv2Parser::Result_expression_memberContext* SysMLv2Parser::Function_body_partContext::result_expression_member() {
  return getRuleContext<SysMLv2Parser::Result_expression_memberContext>(0);
}


size_t SysMLv2Parser::Function_body_partContext::getRuleIndex() const {
  return SysMLv2Parser::RuleFunction_body_part;
}

void SysMLv2Parser::Function_body_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunction_body_part(this);
}

void SysMLv2Parser::Function_body_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunction_body_part(this);
}

SysMLv2Parser::Function_body_partContext* SysMLv2Parser::function_body_part() {
  Function_body_partContext *_localctx = _tracker.createInstance<Function_body_partContext>(_ctx, getState());
  enterRule(_localctx, 808, SysMLv2Parser::RuleFunction_body_part);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3959); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(3959);
              _errHandler->sync(this);
              switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 406, _ctx)) {
              case 1: {
                setState(3957);
                type_body_element();
                break;
              }

              case 2: {
                setState(3958);
                return_feature_member();
                break;
              }

              default:
                break;
              }
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(3961); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 407, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
    setState(3964);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::T__0 || ((((_la - 91) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 91)) & 108368278484680709) != 0) || ((((_la - 155) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 155)) & 7789283556232527879) != 0) || ((((_la - 231) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 231)) & 115) != 0)) {
      setState(3963);
      result_expression_member();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Return_feature_memberContext ------------------------------------------------------------------

SysMLv2Parser::Return_feature_memberContext::Return_feature_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Member_prefixContext* SysMLv2Parser::Return_feature_memberContext::member_prefix() {
  return getRuleContext<SysMLv2Parser::Member_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Return_feature_memberContext::KEYWORD_RETURN() {
  return getToken(SysMLv2Parser::KEYWORD_RETURN, 0);
}

SysMLv2Parser::Feature_elementContext* SysMLv2Parser::Return_feature_memberContext::feature_element() {
  return getRuleContext<SysMLv2Parser::Feature_elementContext>(0);
}


size_t SysMLv2Parser::Return_feature_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleReturn_feature_member;
}

void SysMLv2Parser::Return_feature_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReturn_feature_member(this);
}

void SysMLv2Parser::Return_feature_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReturn_feature_member(this);
}

SysMLv2Parser::Return_feature_memberContext* SysMLv2Parser::return_feature_member() {
  Return_feature_memberContext *_localctx = _tracker.createInstance<Return_feature_memberContext>(_ctx, getState());
  enterRule(_localctx, 810, SysMLv2Parser::RuleReturn_feature_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3966);
    member_prefix();
    setState(3967);
    match(SysMLv2Parser::KEYWORD_RETURN);
    setState(3968);
    feature_element();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionContext ------------------------------------------------------------------

SysMLv2Parser::ExpressionContext::ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Feature_prefixContext* SysMLv2Parser::ExpressionContext::feature_prefix() {
  return getRuleContext<SysMLv2Parser::Feature_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::ExpressionContext::KEYWORD_EXPR() {
  return getToken(SysMLv2Parser::KEYWORD_EXPR, 0);
}

SysMLv2Parser::Feature_declarationContext* SysMLv2Parser::ExpressionContext::feature_declaration() {
  return getRuleContext<SysMLv2Parser::Feature_declarationContext>(0);
}

SysMLv2Parser::Function_bodyContext* SysMLv2Parser::ExpressionContext::function_body() {
  return getRuleContext<SysMLv2Parser::Function_bodyContext>(0);
}

SysMLv2Parser::Value_partContext* SysMLv2Parser::ExpressionContext::value_part() {
  return getRuleContext<SysMLv2Parser::Value_partContext>(0);
}


size_t SysMLv2Parser::ExpressionContext::getRuleIndex() const {
  return SysMLv2Parser::RuleExpression;
}

void SysMLv2Parser::ExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpression(this);
}

void SysMLv2Parser::ExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpression(this);
}

SysMLv2Parser::ExpressionContext* SysMLv2Parser::expression() {
  ExpressionContext *_localctx = _tracker.createInstance<ExpressionContext>(_ctx, getState());
  enterRule(_localctx, 812, SysMLv2Parser::RuleExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3970);
    feature_prefix();
    setState(3971);
    match(SysMLv2Parser::KEYWORD_EXPR);
    setState(3972);
    feature_declaration();
    setState(3974);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_DEFAULT || _la == SysMLv2Parser::SYMBOL_DEF_ASSIGN

    || _la == SysMLv2Parser::SYMBOL_EQUALS) {
      setState(3973);
      value_part();
    }
    setState(3976);
    function_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PredicateContext ------------------------------------------------------------------

SysMLv2Parser::PredicateContext::PredicateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Type_prefixContext* SysMLv2Parser::PredicateContext::type_prefix() {
  return getRuleContext<SysMLv2Parser::Type_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::PredicateContext::KEYWORD_PREDICATE() {
  return getToken(SysMLv2Parser::KEYWORD_PREDICATE, 0);
}

SysMLv2Parser::Classifier_declarationContext* SysMLv2Parser::PredicateContext::classifier_declaration() {
  return getRuleContext<SysMLv2Parser::Classifier_declarationContext>(0);
}

SysMLv2Parser::Function_bodyContext* SysMLv2Parser::PredicateContext::function_body() {
  return getRuleContext<SysMLv2Parser::Function_bodyContext>(0);
}


size_t SysMLv2Parser::PredicateContext::getRuleIndex() const {
  return SysMLv2Parser::RulePredicate;
}

void SysMLv2Parser::PredicateContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPredicate(this);
}

void SysMLv2Parser::PredicateContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPredicate(this);
}

SysMLv2Parser::PredicateContext* SysMLv2Parser::predicate() {
  PredicateContext *_localctx = _tracker.createInstance<PredicateContext>(_ctx, getState());
  enterRule(_localctx, 814, SysMLv2Parser::RulePredicate);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3978);
    type_prefix();
    setState(3979);
    match(SysMLv2Parser::KEYWORD_PREDICATE);
    setState(3980);
    classifier_declaration();
    setState(3981);
    function_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Boolean_expressionContext ------------------------------------------------------------------

SysMLv2Parser::Boolean_expressionContext::Boolean_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Feature_prefixContext* SysMLv2Parser::Boolean_expressionContext::feature_prefix() {
  return getRuleContext<SysMLv2Parser::Feature_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Boolean_expressionContext::KEYWORD_BOOL() {
  return getToken(SysMLv2Parser::KEYWORD_BOOL, 0);
}

SysMLv2Parser::Feature_declarationContext* SysMLv2Parser::Boolean_expressionContext::feature_declaration() {
  return getRuleContext<SysMLv2Parser::Feature_declarationContext>(0);
}

SysMLv2Parser::Function_bodyContext* SysMLv2Parser::Boolean_expressionContext::function_body() {
  return getRuleContext<SysMLv2Parser::Function_bodyContext>(0);
}

SysMLv2Parser::Value_partContext* SysMLv2Parser::Boolean_expressionContext::value_part() {
  return getRuleContext<SysMLv2Parser::Value_partContext>(0);
}


size_t SysMLv2Parser::Boolean_expressionContext::getRuleIndex() const {
  return SysMLv2Parser::RuleBoolean_expression;
}

void SysMLv2Parser::Boolean_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBoolean_expression(this);
}

void SysMLv2Parser::Boolean_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBoolean_expression(this);
}

SysMLv2Parser::Boolean_expressionContext* SysMLv2Parser::boolean_expression() {
  Boolean_expressionContext *_localctx = _tracker.createInstance<Boolean_expressionContext>(_ctx, getState());
  enterRule(_localctx, 816, SysMLv2Parser::RuleBoolean_expression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3983);
    feature_prefix();
    setState(3984);
    match(SysMLv2Parser::KEYWORD_BOOL);
    setState(3985);
    feature_declaration();
    setState(3987);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_DEFAULT || _la == SysMLv2Parser::SYMBOL_DEF_ASSIGN

    || _la == SysMLv2Parser::SYMBOL_EQUALS) {
      setState(3986);
      value_part();
    }
    setState(3989);
    function_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InvariantContext ------------------------------------------------------------------

SysMLv2Parser::InvariantContext::InvariantContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Feature_prefixContext* SysMLv2Parser::InvariantContext::feature_prefix() {
  return getRuleContext<SysMLv2Parser::Feature_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::InvariantContext::KEYWORD_INV() {
  return getToken(SysMLv2Parser::KEYWORD_INV, 0);
}

SysMLv2Parser::Feature_declarationContext* SysMLv2Parser::InvariantContext::feature_declaration() {
  return getRuleContext<SysMLv2Parser::Feature_declarationContext>(0);
}

SysMLv2Parser::Function_bodyContext* SysMLv2Parser::InvariantContext::function_body() {
  return getRuleContext<SysMLv2Parser::Function_bodyContext>(0);
}

SysMLv2Parser::Value_partContext* SysMLv2Parser::InvariantContext::value_part() {
  return getRuleContext<SysMLv2Parser::Value_partContext>(0);
}

tree::TerminalNode* SysMLv2Parser::InvariantContext::KEYWORD_TRUE() {
  return getToken(SysMLv2Parser::KEYWORD_TRUE, 0);
}

tree::TerminalNode* SysMLv2Parser::InvariantContext::KEYWORD_FALSE() {
  return getToken(SysMLv2Parser::KEYWORD_FALSE, 0);
}


size_t SysMLv2Parser::InvariantContext::getRuleIndex() const {
  return SysMLv2Parser::RuleInvariant;
}

void SysMLv2Parser::InvariantContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInvariant(this);
}

void SysMLv2Parser::InvariantContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInvariant(this);
}

SysMLv2Parser::InvariantContext* SysMLv2Parser::invariant() {
  InvariantContext *_localctx = _tracker.createInstance<InvariantContext>(_ctx, getState());
  enterRule(_localctx, 818, SysMLv2Parser::RuleInvariant);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3991);
    feature_prefix();
    setState(3992);
    match(SysMLv2Parser::KEYWORD_INV);
    setState(3994);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_FALSE

    || _la == SysMLv2Parser::KEYWORD_TRUE) {
      setState(3993);
      _la = _input->LA(1);
      if (!(_la == SysMLv2Parser::KEYWORD_FALSE

      || _la == SysMLv2Parser::KEYWORD_TRUE)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(3996);
    feature_declaration();
    setState(3998);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_DEFAULT || _la == SysMLv2Parser::SYMBOL_DEF_ASSIGN

    || _la == SysMLv2Parser::SYMBOL_EQUALS) {
      setState(3997);
      value_part();
    }
    setState(4000);
    function_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Owned_expression_reference_memberContext ------------------------------------------------------------------

SysMLv2Parser::Owned_expression_reference_memberContext::Owned_expression_reference_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Owned_expression_referenceContext* SysMLv2Parser::Owned_expression_reference_memberContext::owned_expression_reference() {
  return getRuleContext<SysMLv2Parser::Owned_expression_referenceContext>(0);
}


size_t SysMLv2Parser::Owned_expression_reference_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleOwned_expression_reference_member;
}

void SysMLv2Parser::Owned_expression_reference_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOwned_expression_reference_member(this);
}

void SysMLv2Parser::Owned_expression_reference_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOwned_expression_reference_member(this);
}

SysMLv2Parser::Owned_expression_reference_memberContext* SysMLv2Parser::owned_expression_reference_member() {
  Owned_expression_reference_memberContext *_localctx = _tracker.createInstance<Owned_expression_reference_memberContext>(_ctx, getState());
  enterRule(_localctx, 820, SysMLv2Parser::RuleOwned_expression_reference_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4002);
    owned_expression_reference();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Owned_expression_referenceContext ------------------------------------------------------------------

SysMLv2Parser::Owned_expression_referenceContext::Owned_expression_referenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Owned_expression_memberContext* SysMLv2Parser::Owned_expression_referenceContext::owned_expression_member() {
  return getRuleContext<SysMLv2Parser::Owned_expression_memberContext>(0);
}


size_t SysMLv2Parser::Owned_expression_referenceContext::getRuleIndex() const {
  return SysMLv2Parser::RuleOwned_expression_reference;
}

void SysMLv2Parser::Owned_expression_referenceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOwned_expression_reference(this);
}

void SysMLv2Parser::Owned_expression_referenceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOwned_expression_reference(this);
}

SysMLv2Parser::Owned_expression_referenceContext* SysMLv2Parser::owned_expression_reference() {
  Owned_expression_referenceContext *_localctx = _tracker.createInstance<Owned_expression_referenceContext>(_ctx, getState());
  enterRule(_localctx, 822, SysMLv2Parser::RuleOwned_expression_reference);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4004);
    owned_expression_member();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Owned_expression_memberContext ------------------------------------------------------------------

SysMLv2Parser::Owned_expression_memberContext::Owned_expression_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Owned_expressionsContext* SysMLv2Parser::Owned_expression_memberContext::owned_expressions() {
  return getRuleContext<SysMLv2Parser::Owned_expressionsContext>(0);
}


size_t SysMLv2Parser::Owned_expression_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleOwned_expression_member;
}

void SysMLv2Parser::Owned_expression_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOwned_expression_member(this);
}

void SysMLv2Parser::Owned_expression_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOwned_expression_member(this);
}

SysMLv2Parser::Owned_expression_memberContext* SysMLv2Parser::owned_expression_member() {
  Owned_expression_memberContext *_localctx = _tracker.createInstance<Owned_expression_memberContext>(_ctx, getState());
  enterRule(_localctx, 824, SysMLv2Parser::RuleOwned_expression_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4006);
    owned_expressions();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Owned_expressionsContext ------------------------------------------------------------------

SysMLv2Parser::Owned_expressionsContext::Owned_expressionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<SysMLv2Parser::Owned_expressionContext *> SysMLv2Parser::Owned_expressionsContext::owned_expression() {
  return getRuleContexts<SysMLv2Parser::Owned_expressionContext>();
}

SysMLv2Parser::Owned_expressionContext* SysMLv2Parser::Owned_expressionsContext::owned_expression(size_t i) {
  return getRuleContext<SysMLv2Parser::Owned_expressionContext>(i);
}


size_t SysMLv2Parser::Owned_expressionsContext::getRuleIndex() const {
  return SysMLv2Parser::RuleOwned_expressions;
}

void SysMLv2Parser::Owned_expressionsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOwned_expressions(this);
}

void SysMLv2Parser::Owned_expressionsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOwned_expressions(this);
}

SysMLv2Parser::Owned_expressionsContext* SysMLv2Parser::owned_expressions() {
  Owned_expressionsContext *_localctx = _tracker.createInstance<Owned_expressionsContext>(_ctx, getState());
  enterRule(_localctx, 826, SysMLv2Parser::RuleOwned_expressions);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(4009); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(4008);
              owned_expression();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(4011); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 413, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Owned_expressionContext ------------------------------------------------------------------

SysMLv2Parser::Owned_expressionContext::Owned_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Conditional_expressionContext* SysMLv2Parser::Owned_expressionContext::conditional_expression() {
  return getRuleContext<SysMLv2Parser::Conditional_expressionContext>(0);
}

SysMLv2Parser::Conditional_binary_operator_expressionContext* SysMLv2Parser::Owned_expressionContext::conditional_binary_operator_expression() {
  return getRuleContext<SysMLv2Parser::Conditional_binary_operator_expressionContext>(0);
}

SysMLv2Parser::Binary_operator_expressionContext* SysMLv2Parser::Owned_expressionContext::binary_operator_expression() {
  return getRuleContext<SysMLv2Parser::Binary_operator_expressionContext>(0);
}

SysMLv2Parser::Unary_operator_expressionContext* SysMLv2Parser::Owned_expressionContext::unary_operator_expression() {
  return getRuleContext<SysMLv2Parser::Unary_operator_expressionContext>(0);
}

SysMLv2Parser::Classification_expressionContext* SysMLv2Parser::Owned_expressionContext::classification_expression() {
  return getRuleContext<SysMLv2Parser::Classification_expressionContext>(0);
}

SysMLv2Parser::Metaclassification_expressionContext* SysMLv2Parser::Owned_expressionContext::metaclassification_expression() {
  return getRuleContext<SysMLv2Parser::Metaclassification_expressionContext>(0);
}

SysMLv2Parser::Extend_expressionContext* SysMLv2Parser::Owned_expressionContext::extend_expression() {
  return getRuleContext<SysMLv2Parser::Extend_expressionContext>(0);
}

SysMLv2Parser::Primary_expressionContext* SysMLv2Parser::Owned_expressionContext::primary_expression() {
  return getRuleContext<SysMLv2Parser::Primary_expressionContext>(0);
}


size_t SysMLv2Parser::Owned_expressionContext::getRuleIndex() const {
  return SysMLv2Parser::RuleOwned_expression;
}

void SysMLv2Parser::Owned_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOwned_expression(this);
}

void SysMLv2Parser::Owned_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOwned_expression(this);
}

SysMLv2Parser::Owned_expressionContext* SysMLv2Parser::owned_expression() {
  Owned_expressionContext *_localctx = _tracker.createInstance<Owned_expressionContext>(_ctx, getState());
  enterRule(_localctx, 828, SysMLv2Parser::RuleOwned_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4021);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 414, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(4013);
      conditional_expression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(4014);
      conditional_binary_operator_expression();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(4015);
      binary_operator_expression();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(4016);
      unary_operator_expression();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(4017);
      classification_expression();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(4018);
      metaclassification_expression();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(4019);
      extend_expression();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(4020);
      primary_expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Eased_owned_expressionContext ------------------------------------------------------------------

SysMLv2Parser::Eased_owned_expressionContext::Eased_owned_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Primary_expressionContext* SysMLv2Parser::Eased_owned_expressionContext::primary_expression() {
  return getRuleContext<SysMLv2Parser::Primary_expressionContext>(0);
}

SysMLv2Parser::Extend_expressionContext* SysMLv2Parser::Eased_owned_expressionContext::extend_expression() {
  return getRuleContext<SysMLv2Parser::Extend_expressionContext>(0);
}

SysMLv2Parser::Metaclassification_expressionContext* SysMLv2Parser::Eased_owned_expressionContext::metaclassification_expression() {
  return getRuleContext<SysMLv2Parser::Metaclassification_expressionContext>(0);
}

SysMLv2Parser::Unary_operator_expressionContext* SysMLv2Parser::Eased_owned_expressionContext::unary_operator_expression() {
  return getRuleContext<SysMLv2Parser::Unary_operator_expressionContext>(0);
}


size_t SysMLv2Parser::Eased_owned_expressionContext::getRuleIndex() const {
  return SysMLv2Parser::RuleEased_owned_expression;
}

void SysMLv2Parser::Eased_owned_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEased_owned_expression(this);
}

void SysMLv2Parser::Eased_owned_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEased_owned_expression(this);
}

SysMLv2Parser::Eased_owned_expressionContext* SysMLv2Parser::eased_owned_expression() {
  Eased_owned_expressionContext *_localctx = _tracker.createInstance<Eased_owned_expressionContext>(_ctx, getState());
  enterRule(_localctx, 830, SysMLv2Parser::RuleEased_owned_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4027);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 415, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(4023);
      primary_expression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(4024);
      extend_expression();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(4025);
      metaclassification_expression();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(4026);
      unary_operator_expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Conditional_expressionContext ------------------------------------------------------------------

SysMLv2Parser::Conditional_expressionContext::Conditional_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Conditional_expressionContext::KEYWORD_IF() {
  return getToken(SysMLv2Parser::KEYWORD_IF, 0);
}

SysMLv2Parser::Argument_memberContext* SysMLv2Parser::Conditional_expressionContext::argument_member() {
  return getRuleContext<SysMLv2Parser::Argument_memberContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Conditional_expressionContext::SYMBOL_QUESTION() {
  return getToken(SysMLv2Parser::SYMBOL_QUESTION, 0);
}

std::vector<SysMLv2Parser::Argument_expression_memberContext *> SysMLv2Parser::Conditional_expressionContext::argument_expression_member() {
  return getRuleContexts<SysMLv2Parser::Argument_expression_memberContext>();
}

SysMLv2Parser::Argument_expression_memberContext* SysMLv2Parser::Conditional_expressionContext::argument_expression_member(size_t i) {
  return getRuleContext<SysMLv2Parser::Argument_expression_memberContext>(i);
}

tree::TerminalNode* SysMLv2Parser::Conditional_expressionContext::KEYWORD_ELSE() {
  return getToken(SysMLv2Parser::KEYWORD_ELSE, 0);
}


size_t SysMLv2Parser::Conditional_expressionContext::getRuleIndex() const {
  return SysMLv2Parser::RuleConditional_expression;
}

void SysMLv2Parser::Conditional_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConditional_expression(this);
}

void SysMLv2Parser::Conditional_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConditional_expression(this);
}

SysMLv2Parser::Conditional_expressionContext* SysMLv2Parser::conditional_expression() {
  Conditional_expressionContext *_localctx = _tracker.createInstance<Conditional_expressionContext>(_ctx, getState());
  enterRule(_localctx, 832, SysMLv2Parser::RuleConditional_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4029);
    match(SysMLv2Parser::KEYWORD_IF);
    setState(4030);
    argument_member();
    setState(4031);
    match(SysMLv2Parser::SYMBOL_QUESTION);
    setState(4032);
    argument_expression_member();
    setState(4033);
    match(SysMLv2Parser::KEYWORD_ELSE);
    setState(4034);
    argument_expression_member();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Conditional_binary_operator_expressionContext ------------------------------------------------------------------

SysMLv2Parser::Conditional_binary_operator_expressionContext::Conditional_binary_operator_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Argument_memberContext* SysMLv2Parser::Conditional_binary_operator_expressionContext::argument_member() {
  return getRuleContext<SysMLv2Parser::Argument_memberContext>(0);
}

SysMLv2Parser::Conditional_binary_operatorContext* SysMLv2Parser::Conditional_binary_operator_expressionContext::conditional_binary_operator() {
  return getRuleContext<SysMLv2Parser::Conditional_binary_operatorContext>(0);
}

SysMLv2Parser::Argument_expression_memberContext* SysMLv2Parser::Conditional_binary_operator_expressionContext::argument_expression_member() {
  return getRuleContext<SysMLv2Parser::Argument_expression_memberContext>(0);
}


size_t SysMLv2Parser::Conditional_binary_operator_expressionContext::getRuleIndex() const {
  return SysMLv2Parser::RuleConditional_binary_operator_expression;
}

void SysMLv2Parser::Conditional_binary_operator_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConditional_binary_operator_expression(this);
}

void SysMLv2Parser::Conditional_binary_operator_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConditional_binary_operator_expression(this);
}

SysMLv2Parser::Conditional_binary_operator_expressionContext* SysMLv2Parser::conditional_binary_operator_expression() {
  Conditional_binary_operator_expressionContext *_localctx = _tracker.createInstance<Conditional_binary_operator_expressionContext>(_ctx, getState());
  enterRule(_localctx, 834, SysMLv2Parser::RuleConditional_binary_operator_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4036);
    argument_member();
    setState(4037);
    conditional_binary_operator();
    setState(4038);
    argument_expression_member();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Conditional_binary_operatorContext ------------------------------------------------------------------

SysMLv2Parser::Conditional_binary_operatorContext::Conditional_binary_operatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Conditional_binary_operatorContext::SYMBOL_DQUESTION() {
  return getToken(SysMLv2Parser::SYMBOL_DQUESTION, 0);
}

tree::TerminalNode* SysMLv2Parser::Conditional_binary_operatorContext::KEYWORD_OR() {
  return getToken(SysMLv2Parser::KEYWORD_OR, 0);
}

tree::TerminalNode* SysMLv2Parser::Conditional_binary_operatorContext::KEYWORD_AND() {
  return getToken(SysMLv2Parser::KEYWORD_AND, 0);
}

tree::TerminalNode* SysMLv2Parser::Conditional_binary_operatorContext::KEYWORD_IMPLIES() {
  return getToken(SysMLv2Parser::KEYWORD_IMPLIES, 0);
}


size_t SysMLv2Parser::Conditional_binary_operatorContext::getRuleIndex() const {
  return SysMLv2Parser::RuleConditional_binary_operator;
}

void SysMLv2Parser::Conditional_binary_operatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConditional_binary_operator(this);
}

void SysMLv2Parser::Conditional_binary_operatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConditional_binary_operator(this);
}

SysMLv2Parser::Conditional_binary_operatorContext* SysMLv2Parser::conditional_binary_operator() {
  Conditional_binary_operatorContext *_localctx = _tracker.createInstance<Conditional_binary_operatorContext>(_ctx, getState());
  enterRule(_localctx, 836, SysMLv2Parser::RuleConditional_binary_operator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4040);
    _la = _input->LA(1);
    if (!(((((_la - 92) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 92)) & 144115737831669761) != 0) || _la == SysMLv2Parser::SYMBOL_DQUESTION)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Binary_operator_expressionContext ------------------------------------------------------------------

SysMLv2Parser::Binary_operator_expressionContext::Binary_operator_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Argument_memberContext* SysMLv2Parser::Binary_operator_expressionContext::argument_member() {
  return getRuleContext<SysMLv2Parser::Argument_memberContext>(0);
}

SysMLv2Parser::Binary_operatorContext* SysMLv2Parser::Binary_operator_expressionContext::binary_operator() {
  return getRuleContext<SysMLv2Parser::Binary_operatorContext>(0);
}

SysMLv2Parser::Owned_expressionsContext* SysMLv2Parser::Binary_operator_expressionContext::owned_expressions() {
  return getRuleContext<SysMLv2Parser::Owned_expressionsContext>(0);
}


size_t SysMLv2Parser::Binary_operator_expressionContext::getRuleIndex() const {
  return SysMLv2Parser::RuleBinary_operator_expression;
}

void SysMLv2Parser::Binary_operator_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBinary_operator_expression(this);
}

void SysMLv2Parser::Binary_operator_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBinary_operator_expression(this);
}

SysMLv2Parser::Binary_operator_expressionContext* SysMLv2Parser::binary_operator_expression() {
  Binary_operator_expressionContext *_localctx = _tracker.createInstance<Binary_operator_expressionContext>(_ctx, getState());
  enterRule(_localctx, 838, SysMLv2Parser::RuleBinary_operator_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4042);
    argument_member();
    setState(4043);
    binary_operator();
    setState(4044);
    owned_expressions();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Binary_operatorContext ------------------------------------------------------------------

SysMLv2Parser::Binary_operatorContext::Binary_operatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Binary_operatorContext::SYMBOL_VERTICAL_LINE() {
  return getToken(SysMLv2Parser::SYMBOL_VERTICAL_LINE, 0);
}

tree::TerminalNode* SysMLv2Parser::Binary_operatorContext::SYMBOL_AND() {
  return getToken(SysMLv2Parser::SYMBOL_AND, 0);
}

tree::TerminalNode* SysMLv2Parser::Binary_operatorContext::KEYWORD_XOR() {
  return getToken(SysMLv2Parser::KEYWORD_XOR, 0);
}

tree::TerminalNode* SysMLv2Parser::Binary_operatorContext::SYMBOL_DDOT() {
  return getToken(SysMLv2Parser::SYMBOL_DDOT, 0);
}

tree::TerminalNode* SysMLv2Parser::Binary_operatorContext::SYMBOL_EQUALS() {
  return getToken(SysMLv2Parser::SYMBOL_EQUALS, 0);
}

tree::TerminalNode* SysMLv2Parser::Binary_operatorContext::SYMBOL_NOT_EQUALS() {
  return getToken(SysMLv2Parser::SYMBOL_NOT_EQUALS, 0);
}

tree::TerminalNode* SysMLv2Parser::Binary_operatorContext::SYMBOL_IFF_EQUALS() {
  return getToken(SysMLv2Parser::SYMBOL_IFF_EQUALS, 0);
}

tree::TerminalNode* SysMLv2Parser::Binary_operatorContext::SYMBOL_IFF_NOT_EQUALS() {
  return getToken(SysMLv2Parser::SYMBOL_IFF_NOT_EQUALS, 0);
}

tree::TerminalNode* SysMLv2Parser::Binary_operatorContext::SYMBOL_GREATER() {
  return getToken(SysMLv2Parser::SYMBOL_GREATER, 0);
}

tree::TerminalNode* SysMLv2Parser::Binary_operatorContext::SYMBOL_SMALLER() {
  return getToken(SysMLv2Parser::SYMBOL_SMALLER, 0);
}

tree::TerminalNode* SysMLv2Parser::Binary_operatorContext::SYMBOL_GREATER_EQUALS() {
  return getToken(SysMLv2Parser::SYMBOL_GREATER_EQUALS, 0);
}

tree::TerminalNode* SysMLv2Parser::Binary_operatorContext::SYMBOL_SMALLER_EQUAL() {
  return getToken(SysMLv2Parser::SYMBOL_SMALLER_EQUAL, 0);
}

tree::TerminalNode* SysMLv2Parser::Binary_operatorContext::SYMBOL_PLUS() {
  return getToken(SysMLv2Parser::SYMBOL_PLUS, 0);
}

tree::TerminalNode* SysMLv2Parser::Binary_operatorContext::SYMBOL_MINUS() {
  return getToken(SysMLv2Parser::SYMBOL_MINUS, 0);
}

tree::TerminalNode* SysMLv2Parser::Binary_operatorContext::SYMBOL_STAR() {
  return getToken(SysMLv2Parser::SYMBOL_STAR, 0);
}

tree::TerminalNode* SysMLv2Parser::Binary_operatorContext::SYMBOL_SLASH() {
  return getToken(SysMLv2Parser::SYMBOL_SLASH, 0);
}

tree::TerminalNode* SysMLv2Parser::Binary_operatorContext::SYMBOL_MOD() {
  return getToken(SysMLv2Parser::SYMBOL_MOD, 0);
}

tree::TerminalNode* SysMLv2Parser::Binary_operatorContext::SYMBOL_UPPER() {
  return getToken(SysMLv2Parser::SYMBOL_UPPER, 0);
}

tree::TerminalNode* SysMLv2Parser::Binary_operatorContext::SYMBOL_DOUBLE_STAR() {
  return getToken(SysMLv2Parser::SYMBOL_DOUBLE_STAR, 0);
}


size_t SysMLv2Parser::Binary_operatorContext::getRuleIndex() const {
  return SysMLv2Parser::RuleBinary_operator;
}

void SysMLv2Parser::Binary_operatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBinary_operator(this);
}

void SysMLv2Parser::Binary_operatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBinary_operator(this);
}

SysMLv2Parser::Binary_operatorContext* SysMLv2Parser::binary_operator() {
  Binary_operatorContext *_localctx = _tracker.createInstance<Binary_operatorContext>(_ctx, getState());
  enterRule(_localctx, 840, SysMLv2Parser::RuleBinary_operator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4046);
    _la = _input->LA(1);
    if (!(((((_la - 179) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 179)) & 1112292913586177) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Unary_operator_expressionContext ------------------------------------------------------------------

SysMLv2Parser::Unary_operator_expressionContext::Unary_operator_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Unary_operatorContext* SysMLv2Parser::Unary_operator_expressionContext::unary_operator() {
  return getRuleContext<SysMLv2Parser::Unary_operatorContext>(0);
}

SysMLv2Parser::Owned_expressionsContext* SysMLv2Parser::Unary_operator_expressionContext::owned_expressions() {
  return getRuleContext<SysMLv2Parser::Owned_expressionsContext>(0);
}


size_t SysMLv2Parser::Unary_operator_expressionContext::getRuleIndex() const {
  return SysMLv2Parser::RuleUnary_operator_expression;
}

void SysMLv2Parser::Unary_operator_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnary_operator_expression(this);
}

void SysMLv2Parser::Unary_operator_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnary_operator_expression(this);
}

SysMLv2Parser::Unary_operator_expressionContext* SysMLv2Parser::unary_operator_expression() {
  Unary_operator_expressionContext *_localctx = _tracker.createInstance<Unary_operator_expressionContext>(_ctx, getState());
  enterRule(_localctx, 842, SysMLv2Parser::RuleUnary_operator_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4048);
    unary_operator();
    setState(4049);
    owned_expressions();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Unary_operatorContext ------------------------------------------------------------------

SysMLv2Parser::Unary_operatorContext::Unary_operatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Unary_operatorContext::SYMBOL_PLUS() {
  return getToken(SysMLv2Parser::SYMBOL_PLUS, 0);
}

tree::TerminalNode* SysMLv2Parser::Unary_operatorContext::SYMBOL_MINUS() {
  return getToken(SysMLv2Parser::SYMBOL_MINUS, 0);
}

tree::TerminalNode* SysMLv2Parser::Unary_operatorContext::SYMBOL_CONJUNGATES() {
  return getToken(SysMLv2Parser::SYMBOL_CONJUNGATES, 0);
}

tree::TerminalNode* SysMLv2Parser::Unary_operatorContext::KEYWORD_NOT() {
  return getToken(SysMLv2Parser::KEYWORD_NOT, 0);
}


size_t SysMLv2Parser::Unary_operatorContext::getRuleIndex() const {
  return SysMLv2Parser::RuleUnary_operator;
}

void SysMLv2Parser::Unary_operatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnary_operator(this);
}

void SysMLv2Parser::Unary_operatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnary_operator(this);
}

SysMLv2Parser::Unary_operatorContext* SysMLv2Parser::unary_operator() {
  Unary_operatorContext *_localctx = _tracker.createInstance<Unary_operatorContext>(_ctx, getState());
  enterRule(_localctx, 844, SysMLv2Parser::RuleUnary_operator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4051);
    _la = _input->LA(1);
    if (!(_la == SysMLv2Parser::KEYWORD_NOT

    || _la == SysMLv2Parser::SYMBOL_CONJUNGATES || _la == SysMLv2Parser::SYMBOL_PLUS

    || _la == SysMLv2Parser::SYMBOL_MINUS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Classification_expressionContext ------------------------------------------------------------------

SysMLv2Parser::Classification_expressionContext::Classification_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Argument_memberContext* SysMLv2Parser::Classification_expressionContext::argument_member() {
  return getRuleContext<SysMLv2Parser::Argument_memberContext>(0);
}

SysMLv2Parser::Classification_test_operatorContext* SysMLv2Parser::Classification_expressionContext::classification_test_operator() {
  return getRuleContext<SysMLv2Parser::Classification_test_operatorContext>(0);
}

SysMLv2Parser::Type_reference_memberContext* SysMLv2Parser::Classification_expressionContext::type_reference_member() {
  return getRuleContext<SysMLv2Parser::Type_reference_memberContext>(0);
}

SysMLv2Parser::Cast_operatorContext* SysMLv2Parser::Classification_expressionContext::cast_operator() {
  return getRuleContext<SysMLv2Parser::Cast_operatorContext>(0);
}

SysMLv2Parser::Type_result_memberContext* SysMLv2Parser::Classification_expressionContext::type_result_member() {
  return getRuleContext<SysMLv2Parser::Type_result_memberContext>(0);
}


size_t SysMLv2Parser::Classification_expressionContext::getRuleIndex() const {
  return SysMLv2Parser::RuleClassification_expression;
}

void SysMLv2Parser::Classification_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassification_expression(this);
}

void SysMLv2Parser::Classification_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassification_expression(this);
}

SysMLv2Parser::Classification_expressionContext* SysMLv2Parser::classification_expression() {
  Classification_expressionContext *_localctx = _tracker.createInstance<Classification_expressionContext>(_ctx, getState());
  enterRule(_localctx, 846, SysMLv2Parser::RuleClassification_expression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4054);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::T__0 || ((((_la - 91) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 91)) & 108086391191109633) != 0) || ((((_la - 174) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 174)) & -1873482592401752063) != 0)) {
      setState(4053);
      argument_member();
    }
    setState(4062);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SysMLv2Parser::KEYWORD_HASTYPE:
      case SysMLv2Parser::KEYWORD_ISTYPE:
      case SysMLv2Parser::SYMBOL_AT: {
        setState(4056);
        classification_test_operator();
        setState(4057);
        type_reference_member();
        break;
      }

      case SysMLv2Parser::KEYWORD_AS: {
        setState(4059);
        cast_operator();
        setState(4060);
        type_result_member();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassificationContext ------------------------------------------------------------------

SysMLv2Parser::ClassificationContext::ClassificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Classification_test_operatorContext* SysMLv2Parser::ClassificationContext::classification_test_operator() {
  return getRuleContext<SysMLv2Parser::Classification_test_operatorContext>(0);
}

SysMLv2Parser::Type_reference_memberContext* SysMLv2Parser::ClassificationContext::type_reference_member() {
  return getRuleContext<SysMLv2Parser::Type_reference_memberContext>(0);
}

SysMLv2Parser::Argument_memberContext* SysMLv2Parser::ClassificationContext::argument_member() {
  return getRuleContext<SysMLv2Parser::Argument_memberContext>(0);
}

SysMLv2Parser::Cast_operatorContext* SysMLv2Parser::ClassificationContext::cast_operator() {
  return getRuleContext<SysMLv2Parser::Cast_operatorContext>(0);
}

SysMLv2Parser::Type_result_memberContext* SysMLv2Parser::ClassificationContext::type_result_member() {
  return getRuleContext<SysMLv2Parser::Type_result_memberContext>(0);
}


size_t SysMLv2Parser::ClassificationContext::getRuleIndex() const {
  return SysMLv2Parser::RuleClassification;
}

void SysMLv2Parser::ClassificationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassification(this);
}

void SysMLv2Parser::ClassificationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassification(this);
}

SysMLv2Parser::ClassificationContext* SysMLv2Parser::classification() {
  ClassificationContext *_localctx = _tracker.createInstance<ClassificationContext>(_ctx, getState());
  enterRule(_localctx, 848, SysMLv2Parser::RuleClassification);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4073);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SysMLv2Parser::T__0:
      case SysMLv2Parser::KEYWORD_ALL:
      case SysMLv2Parser::KEYWORD_FALSE:
      case SysMLv2Parser::KEYWORD_HASTYPE:
      case SysMLv2Parser::KEYWORD_ISTYPE:
      case SysMLv2Parser::KEYWORD_NOT:
      case SysMLv2Parser::KEYWORD_NULL:
      case SysMLv2Parser::KEYWORD_TRUE:
      case SysMLv2Parser::SYMBOL_STAR:
      case SysMLv2Parser::SYMBOL_CONJUNGATES:
      case SysMLv2Parser::SYMBOL_ROUND_BRACKET_OPEN:
      case SysMLv2Parser::SYMBOL_SQUARE_BRACKET_OPEN:
      case SysMLv2Parser::SYMBOL_AT:
      case SysMLv2Parser::SYMBOL_HASHTAG:
      case SysMLv2Parser::SYMBOL_PLUS:
      case SysMLv2Parser::SYMBOL_MINUS:
      case SysMLv2Parser::SYMBOL_ARROOW:
      case SysMLv2Parser::SYMBOL_DOT:
      case SysMLv2Parser::SYMBOL_DOT_QUESTION:
      case SysMLv2Parser::NAME:
      case SysMLv2Parser::DECIMAL_VALUE:
      case SysMLv2Parser::EXPONENTIAL_VALUE:
      case SysMLv2Parser::STRING_VALUE: {
        enterOuterAlt(_localctx, 1);
        setState(4065);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == SysMLv2Parser::T__0 || ((((_la - 91) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 91)) & 108086391191109633) != 0) || ((((_la - 174) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 174)) & -1873482592401752063) != 0)) {
          setState(4064);
          argument_member();
        }

        setState(4067);
        classification_test_operator();
        setState(4068);
        type_reference_member();
        break;
      }

      case SysMLv2Parser::KEYWORD_AS: {
        enterOuterAlt(_localctx, 2);
        setState(4070);
        cast_operator();
        setState(4071);
        type_result_member();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Classification_test_operatorContext ------------------------------------------------------------------

SysMLv2Parser::Classification_test_operatorContext::Classification_test_operatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Classification_test_operatorContext::KEYWORD_ISTYPE() {
  return getToken(SysMLv2Parser::KEYWORD_ISTYPE, 0);
}

tree::TerminalNode* SysMLv2Parser::Classification_test_operatorContext::KEYWORD_HASTYPE() {
  return getToken(SysMLv2Parser::KEYWORD_HASTYPE, 0);
}

tree::TerminalNode* SysMLv2Parser::Classification_test_operatorContext::SYMBOL_AT() {
  return getToken(SysMLv2Parser::SYMBOL_AT, 0);
}


size_t SysMLv2Parser::Classification_test_operatorContext::getRuleIndex() const {
  return SysMLv2Parser::RuleClassification_test_operator;
}

void SysMLv2Parser::Classification_test_operatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassification_test_operator(this);
}

void SysMLv2Parser::Classification_test_operatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassification_test_operator(this);
}

SysMLv2Parser::Classification_test_operatorContext* SysMLv2Parser::classification_test_operator() {
  Classification_test_operatorContext *_localctx = _tracker.createInstance<Classification_test_operatorContext>(_ctx, getState());
  enterRule(_localctx, 850, SysMLv2Parser::RuleClassification_test_operator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4075);
    _la = _input->LA(1);
    if (!(_la == SysMLv2Parser::KEYWORD_HASTYPE

    || _la == SysMLv2Parser::KEYWORD_ISTYPE || _la == SysMLv2Parser::SYMBOL_AT)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Cast_operatorContext ------------------------------------------------------------------

SysMLv2Parser::Cast_operatorContext::Cast_operatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Cast_operatorContext::KEYWORD_AS() {
  return getToken(SysMLv2Parser::KEYWORD_AS, 0);
}


size_t SysMLv2Parser::Cast_operatorContext::getRuleIndex() const {
  return SysMLv2Parser::RuleCast_operator;
}

void SysMLv2Parser::Cast_operatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCast_operator(this);
}

void SysMLv2Parser::Cast_operatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCast_operator(this);
}

SysMLv2Parser::Cast_operatorContext* SysMLv2Parser::cast_operator() {
  Cast_operatorContext *_localctx = _tracker.createInstance<Cast_operatorContext>(_ctx, getState());
  enterRule(_localctx, 852, SysMLv2Parser::RuleCast_operator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4077);
    match(SysMLv2Parser::KEYWORD_AS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Metaclassification_expressionContext ------------------------------------------------------------------

SysMLv2Parser::Metaclassification_expressionContext::Metaclassification_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Metadata_argument_memberContext* SysMLv2Parser::Metaclassification_expressionContext::metadata_argument_member() {
  return getRuleContext<SysMLv2Parser::Metadata_argument_memberContext>(0);
}

SysMLv2Parser::Metadataclassification_test_operatorContext* SysMLv2Parser::Metaclassification_expressionContext::metadataclassification_test_operator() {
  return getRuleContext<SysMLv2Parser::Metadataclassification_test_operatorContext>(0);
}

SysMLv2Parser::Type_reference_memberContext* SysMLv2Parser::Metaclassification_expressionContext::type_reference_member() {
  return getRuleContext<SysMLv2Parser::Type_reference_memberContext>(0);
}

SysMLv2Parser::Meta_cast_operatorContext* SysMLv2Parser::Metaclassification_expressionContext::meta_cast_operator() {
  return getRuleContext<SysMLv2Parser::Meta_cast_operatorContext>(0);
}

SysMLv2Parser::Type_result_memberContext* SysMLv2Parser::Metaclassification_expressionContext::type_result_member() {
  return getRuleContext<SysMLv2Parser::Type_result_memberContext>(0);
}


size_t SysMLv2Parser::Metaclassification_expressionContext::getRuleIndex() const {
  return SysMLv2Parser::RuleMetaclassification_expression;
}

void SysMLv2Parser::Metaclassification_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMetaclassification_expression(this);
}

void SysMLv2Parser::Metaclassification_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMetaclassification_expression(this);
}

SysMLv2Parser::Metaclassification_expressionContext* SysMLv2Parser::metaclassification_expression() {
  Metaclassification_expressionContext *_localctx = _tracker.createInstance<Metaclassification_expressionContext>(_ctx, getState());
  enterRule(_localctx, 854, SysMLv2Parser::RuleMetaclassification_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4086);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SysMLv2Parser::NAME: {
        enterOuterAlt(_localctx, 1);
        setState(4079);
        metadata_argument_member();

        setState(4080);
        metadataclassification_test_operator();
        setState(4081);
        type_reference_member();
        break;
      }

      case SysMLv2Parser::T__0: {
        enterOuterAlt(_localctx, 2);
        setState(4083);
        meta_cast_operator();
        setState(4084);
        type_result_member();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Argument_memberContext ------------------------------------------------------------------

SysMLv2Parser::Argument_memberContext::Argument_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::ArgumentContext* SysMLv2Parser::Argument_memberContext::argument() {
  return getRuleContext<SysMLv2Parser::ArgumentContext>(0);
}


size_t SysMLv2Parser::Argument_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleArgument_member;
}

void SysMLv2Parser::Argument_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArgument_member(this);
}

void SysMLv2Parser::Argument_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArgument_member(this);
}

SysMLv2Parser::Argument_memberContext* SysMLv2Parser::argument_member() {
  Argument_memberContext *_localctx = _tracker.createInstance<Argument_memberContext>(_ctx, getState());
  enterRule(_localctx, 856, SysMLv2Parser::RuleArgument_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4088);
    argument();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArgumentContext ------------------------------------------------------------------

SysMLv2Parser::ArgumentContext::ArgumentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Argument_valueContext* SysMLv2Parser::ArgumentContext::argument_value() {
  return getRuleContext<SysMLv2Parser::Argument_valueContext>(0);
}


size_t SysMLv2Parser::ArgumentContext::getRuleIndex() const {
  return SysMLv2Parser::RuleArgument;
}

void SysMLv2Parser::ArgumentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArgument(this);
}

void SysMLv2Parser::ArgumentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArgument(this);
}

SysMLv2Parser::ArgumentContext* SysMLv2Parser::argument() {
  ArgumentContext *_localctx = _tracker.createInstance<ArgumentContext>(_ctx, getState());
  enterRule(_localctx, 858, SysMLv2Parser::RuleArgument);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4090);
    argument_value();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Argument_valueContext ------------------------------------------------------------------

SysMLv2Parser::Argument_valueContext::Argument_valueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Eased_owned_expressionContext* SysMLv2Parser::Argument_valueContext::eased_owned_expression() {
  return getRuleContext<SysMLv2Parser::Eased_owned_expressionContext>(0);
}


size_t SysMLv2Parser::Argument_valueContext::getRuleIndex() const {
  return SysMLv2Parser::RuleArgument_value;
}

void SysMLv2Parser::Argument_valueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArgument_value(this);
}

void SysMLv2Parser::Argument_valueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArgument_value(this);
}

SysMLv2Parser::Argument_valueContext* SysMLv2Parser::argument_value() {
  Argument_valueContext *_localctx = _tracker.createInstance<Argument_valueContext>(_ctx, getState());
  enterRule(_localctx, 860, SysMLv2Parser::RuleArgument_value);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4092);
    eased_owned_expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Argument_expression_memberContext ------------------------------------------------------------------

SysMLv2Parser::Argument_expression_memberContext::Argument_expression_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Argument_expressionContext* SysMLv2Parser::Argument_expression_memberContext::argument_expression() {
  return getRuleContext<SysMLv2Parser::Argument_expressionContext>(0);
}


size_t SysMLv2Parser::Argument_expression_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleArgument_expression_member;
}

void SysMLv2Parser::Argument_expression_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArgument_expression_member(this);
}

void SysMLv2Parser::Argument_expression_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArgument_expression_member(this);
}

SysMLv2Parser::Argument_expression_memberContext* SysMLv2Parser::argument_expression_member() {
  Argument_expression_memberContext *_localctx = _tracker.createInstance<Argument_expression_memberContext>(_ctx, getState());
  enterRule(_localctx, 862, SysMLv2Parser::RuleArgument_expression_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4094);
    argument_expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Argument_expressionContext ------------------------------------------------------------------

SysMLv2Parser::Argument_expressionContext::Argument_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Argument_expression_valueContext* SysMLv2Parser::Argument_expressionContext::argument_expression_value() {
  return getRuleContext<SysMLv2Parser::Argument_expression_valueContext>(0);
}


size_t SysMLv2Parser::Argument_expressionContext::getRuleIndex() const {
  return SysMLv2Parser::RuleArgument_expression;
}

void SysMLv2Parser::Argument_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArgument_expression(this);
}

void SysMLv2Parser::Argument_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArgument_expression(this);
}

SysMLv2Parser::Argument_expressionContext* SysMLv2Parser::argument_expression() {
  Argument_expressionContext *_localctx = _tracker.createInstance<Argument_expressionContext>(_ctx, getState());
  enterRule(_localctx, 864, SysMLv2Parser::RuleArgument_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4096);
    argument_expression_value();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Argument_expression_valueContext ------------------------------------------------------------------

SysMLv2Parser::Argument_expression_valueContext::Argument_expression_valueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Owned_expression_referenceContext* SysMLv2Parser::Argument_expression_valueContext::owned_expression_reference() {
  return getRuleContext<SysMLv2Parser::Owned_expression_referenceContext>(0);
}


size_t SysMLv2Parser::Argument_expression_valueContext::getRuleIndex() const {
  return SysMLv2Parser::RuleArgument_expression_value;
}

void SysMLv2Parser::Argument_expression_valueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArgument_expression_value(this);
}

void SysMLv2Parser::Argument_expression_valueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArgument_expression_value(this);
}

SysMLv2Parser::Argument_expression_valueContext* SysMLv2Parser::argument_expression_value() {
  Argument_expression_valueContext *_localctx = _tracker.createInstance<Argument_expression_valueContext>(_ctx, getState());
  enterRule(_localctx, 866, SysMLv2Parser::RuleArgument_expression_value);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4098);
    owned_expression_reference();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Metadata_argument_memberContext ------------------------------------------------------------------

SysMLv2Parser::Metadata_argument_memberContext::Metadata_argument_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Metadata_argumentContext* SysMLv2Parser::Metadata_argument_memberContext::metadata_argument() {
  return getRuleContext<SysMLv2Parser::Metadata_argumentContext>(0);
}


size_t SysMLv2Parser::Metadata_argument_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleMetadata_argument_member;
}

void SysMLv2Parser::Metadata_argument_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMetadata_argument_member(this);
}

void SysMLv2Parser::Metadata_argument_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMetadata_argument_member(this);
}

SysMLv2Parser::Metadata_argument_memberContext* SysMLv2Parser::metadata_argument_member() {
  Metadata_argument_memberContext *_localctx = _tracker.createInstance<Metadata_argument_memberContext>(_ctx, getState());
  enterRule(_localctx, 868, SysMLv2Parser::RuleMetadata_argument_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4100);
    metadata_argument();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Metadata_argumentContext ------------------------------------------------------------------

SysMLv2Parser::Metadata_argumentContext::Metadata_argumentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Metadata_valueContext* SysMLv2Parser::Metadata_argumentContext::metadata_value() {
  return getRuleContext<SysMLv2Parser::Metadata_valueContext>(0);
}


size_t SysMLv2Parser::Metadata_argumentContext::getRuleIndex() const {
  return SysMLv2Parser::RuleMetadata_argument;
}

void SysMLv2Parser::Metadata_argumentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMetadata_argument(this);
}

void SysMLv2Parser::Metadata_argumentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMetadata_argument(this);
}

SysMLv2Parser::Metadata_argumentContext* SysMLv2Parser::metadata_argument() {
  Metadata_argumentContext *_localctx = _tracker.createInstance<Metadata_argumentContext>(_ctx, getState());
  enterRule(_localctx, 870, SysMLv2Parser::RuleMetadata_argument);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4102);
    metadata_value();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Metadata_valueContext ------------------------------------------------------------------

SysMLv2Parser::Metadata_valueContext::Metadata_valueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Metadata_referenceContext* SysMLv2Parser::Metadata_valueContext::metadata_reference() {
  return getRuleContext<SysMLv2Parser::Metadata_referenceContext>(0);
}


size_t SysMLv2Parser::Metadata_valueContext::getRuleIndex() const {
  return SysMLv2Parser::RuleMetadata_value;
}

void SysMLv2Parser::Metadata_valueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMetadata_value(this);
}

void SysMLv2Parser::Metadata_valueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMetadata_value(this);
}

SysMLv2Parser::Metadata_valueContext* SysMLv2Parser::metadata_value() {
  Metadata_valueContext *_localctx = _tracker.createInstance<Metadata_valueContext>(_ctx, getState());
  enterRule(_localctx, 872, SysMLv2Parser::RuleMetadata_value);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4104);
    metadata_reference();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Metadata_referenceContext ------------------------------------------------------------------

SysMLv2Parser::Metadata_referenceContext::Metadata_referenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Qualified_nameContext* SysMLv2Parser::Metadata_referenceContext::qualified_name() {
  return getRuleContext<SysMLv2Parser::Qualified_nameContext>(0);
}


size_t SysMLv2Parser::Metadata_referenceContext::getRuleIndex() const {
  return SysMLv2Parser::RuleMetadata_reference;
}

void SysMLv2Parser::Metadata_referenceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMetadata_reference(this);
}

void SysMLv2Parser::Metadata_referenceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMetadata_reference(this);
}

SysMLv2Parser::Metadata_referenceContext* SysMLv2Parser::metadata_reference() {
  Metadata_referenceContext *_localctx = _tracker.createInstance<Metadata_referenceContext>(_ctx, getState());
  enterRule(_localctx, 874, SysMLv2Parser::RuleMetadata_reference);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4106);
    qualified_name();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Metadataclassification_test_operatorContext ------------------------------------------------------------------

SysMLv2Parser::Metadataclassification_test_operatorContext::Metadataclassification_test_operatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Metadataclassification_test_operatorContext::SYMBOL_DOT() {
  return getToken(SysMLv2Parser::SYMBOL_DOT, 0);
}


size_t SysMLv2Parser::Metadataclassification_test_operatorContext::getRuleIndex() const {
  return SysMLv2Parser::RuleMetadataclassification_test_operator;
}

void SysMLv2Parser::Metadataclassification_test_operatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMetadataclassification_test_operator(this);
}

void SysMLv2Parser::Metadataclassification_test_operatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMetadataclassification_test_operator(this);
}

SysMLv2Parser::Metadataclassification_test_operatorContext* SysMLv2Parser::metadataclassification_test_operator() {
  Metadataclassification_test_operatorContext *_localctx = _tracker.createInstance<Metadataclassification_test_operatorContext>(_ctx, getState());
  enterRule(_localctx, 876, SysMLv2Parser::RuleMetadataclassification_test_operator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4108);
    match(SysMLv2Parser::SYMBOL_DOT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Meta_cast_operatorContext ------------------------------------------------------------------

SysMLv2Parser::Meta_cast_operatorContext::Meta_cast_operatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t SysMLv2Parser::Meta_cast_operatorContext::getRuleIndex() const {
  return SysMLv2Parser::RuleMeta_cast_operator;
}

void SysMLv2Parser::Meta_cast_operatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMeta_cast_operator(this);
}

void SysMLv2Parser::Meta_cast_operatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMeta_cast_operator(this);
}

SysMLv2Parser::Meta_cast_operatorContext* SysMLv2Parser::meta_cast_operator() {
  Meta_cast_operatorContext *_localctx = _tracker.createInstance<Meta_cast_operatorContext>(_ctx, getState());
  enterRule(_localctx, 878, SysMLv2Parser::RuleMeta_cast_operator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4110);
    match(SysMLv2Parser::T__0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Extend_expressionContext ------------------------------------------------------------------

SysMLv2Parser::Extend_expressionContext::Extend_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Extend_expressionContext::KEYWORD_ALL() {
  return getToken(SysMLv2Parser::KEYWORD_ALL, 0);
}

SysMLv2Parser::Type_reference_memberContext* SysMLv2Parser::Extend_expressionContext::type_reference_member() {
  return getRuleContext<SysMLv2Parser::Type_reference_memberContext>(0);
}


size_t SysMLv2Parser::Extend_expressionContext::getRuleIndex() const {
  return SysMLv2Parser::RuleExtend_expression;
}

void SysMLv2Parser::Extend_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExtend_expression(this);
}

void SysMLv2Parser::Extend_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExtend_expression(this);
}

SysMLv2Parser::Extend_expressionContext* SysMLv2Parser::extend_expression() {
  Extend_expressionContext *_localctx = _tracker.createInstance<Extend_expressionContext>(_ctx, getState());
  enterRule(_localctx, 880, SysMLv2Parser::RuleExtend_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4112);
    match(SysMLv2Parser::KEYWORD_ALL);
    setState(4113);
    type_reference_member();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_reference_memberContext ------------------------------------------------------------------

SysMLv2Parser::Type_reference_memberContext::Type_reference_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Type_referenceContext* SysMLv2Parser::Type_reference_memberContext::type_reference() {
  return getRuleContext<SysMLv2Parser::Type_referenceContext>(0);
}


size_t SysMLv2Parser::Type_reference_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleType_reference_member;
}

void SysMLv2Parser::Type_reference_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_reference_member(this);
}

void SysMLv2Parser::Type_reference_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_reference_member(this);
}

SysMLv2Parser::Type_reference_memberContext* SysMLv2Parser::type_reference_member() {
  Type_reference_memberContext *_localctx = _tracker.createInstance<Type_reference_memberContext>(_ctx, getState());
  enterRule(_localctx, 882, SysMLv2Parser::RuleType_reference_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4115);
    type_reference();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_result_memberContext ------------------------------------------------------------------

SysMLv2Parser::Type_result_memberContext::Type_result_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Type_referenceContext* SysMLv2Parser::Type_result_memberContext::type_reference() {
  return getRuleContext<SysMLv2Parser::Type_referenceContext>(0);
}


size_t SysMLv2Parser::Type_result_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleType_result_member;
}

void SysMLv2Parser::Type_result_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_result_member(this);
}

void SysMLv2Parser::Type_result_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_result_member(this);
}

SysMLv2Parser::Type_result_memberContext* SysMLv2Parser::type_result_member() {
  Type_result_memberContext *_localctx = _tracker.createInstance<Type_result_memberContext>(_ctx, getState());
  enterRule(_localctx, 884, SysMLv2Parser::RuleType_result_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4117);
    type_reference();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_referenceContext ------------------------------------------------------------------

SysMLv2Parser::Type_referenceContext::Type_referenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Reference_typingContext* SysMLv2Parser::Type_referenceContext::reference_typing() {
  return getRuleContext<SysMLv2Parser::Reference_typingContext>(0);
}


size_t SysMLv2Parser::Type_referenceContext::getRuleIndex() const {
  return SysMLv2Parser::RuleType_reference;
}

void SysMLv2Parser::Type_referenceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_reference(this);
}

void SysMLv2Parser::Type_referenceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_reference(this);
}

SysMLv2Parser::Type_referenceContext* SysMLv2Parser::type_reference() {
  Type_referenceContext *_localctx = _tracker.createInstance<Type_referenceContext>(_ctx, getState());
  enterRule(_localctx, 886, SysMLv2Parser::RuleType_reference);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4119);
    reference_typing();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Reference_typingContext ------------------------------------------------------------------

SysMLv2Parser::Reference_typingContext::Reference_typingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Qualified_nameContext* SysMLv2Parser::Reference_typingContext::qualified_name() {
  return getRuleContext<SysMLv2Parser::Qualified_nameContext>(0);
}


size_t SysMLv2Parser::Reference_typingContext::getRuleIndex() const {
  return SysMLv2Parser::RuleReference_typing;
}

void SysMLv2Parser::Reference_typingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReference_typing(this);
}

void SysMLv2Parser::Reference_typingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReference_typing(this);
}

SysMLv2Parser::Reference_typingContext* SysMLv2Parser::reference_typing() {
  Reference_typingContext *_localctx = _tracker.createInstance<Reference_typingContext>(_ctx, getState());
  enterRule(_localctx, 888, SysMLv2Parser::RuleReference_typing);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4121);
    qualified_name();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Primary_expressionsContext ------------------------------------------------------------------

SysMLv2Parser::Primary_expressionsContext::Primary_expressionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<SysMLv2Parser::Primary_expressionContext *> SysMLv2Parser::Primary_expressionsContext::primary_expression() {
  return getRuleContexts<SysMLv2Parser::Primary_expressionContext>();
}

SysMLv2Parser::Primary_expressionContext* SysMLv2Parser::Primary_expressionsContext::primary_expression(size_t i) {
  return getRuleContext<SysMLv2Parser::Primary_expressionContext>(i);
}


size_t SysMLv2Parser::Primary_expressionsContext::getRuleIndex() const {
  return SysMLv2Parser::RulePrimary_expressions;
}

void SysMLv2Parser::Primary_expressionsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimary_expressions(this);
}

void SysMLv2Parser::Primary_expressionsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimary_expressions(this);
}

SysMLv2Parser::Primary_expressionsContext* SysMLv2Parser::primary_expressions() {
  Primary_expressionsContext *_localctx = _tracker.createInstance<Primary_expressionsContext>(_ctx, getState());
  enterRule(_localctx, 890, SysMLv2Parser::RulePrimary_expressions);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4124); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(4123);
      primary_expression();
      setState(4126); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (((((_la - 118) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 118)) & 72057594574798849) != 0) || ((((_la - 192) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 192)) & 63221968963713) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Primary_expressionContext ------------------------------------------------------------------

SysMLv2Parser::Primary_expressionContext::Primary_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Feature_chain_expressionContext* SysMLv2Parser::Primary_expressionContext::feature_chain_expression() {
  return getRuleContext<SysMLv2Parser::Feature_chain_expressionContext>(0);
}

SysMLv2Parser::Non_feature_chain_primary_expressionContext* SysMLv2Parser::Primary_expressionContext::non_feature_chain_primary_expression() {
  return getRuleContext<SysMLv2Parser::Non_feature_chain_primary_expressionContext>(0);
}


size_t SysMLv2Parser::Primary_expressionContext::getRuleIndex() const {
  return SysMLv2Parser::RulePrimary_expression;
}

void SysMLv2Parser::Primary_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimary_expression(this);
}

void SysMLv2Parser::Primary_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimary_expression(this);
}

SysMLv2Parser::Primary_expressionContext* SysMLv2Parser::primary_expression() {
  Primary_expressionContext *_localctx = _tracker.createInstance<Primary_expressionContext>(_ctx, getState());
  enterRule(_localctx, 892, SysMLv2Parser::RulePrimary_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4130);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 422, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(4128);
      feature_chain_expression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(4129);
      non_feature_chain_primary_expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Primary_argument_valueContext ------------------------------------------------------------------

SysMLv2Parser::Primary_argument_valueContext::Primary_argument_valueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Primary_expressionContext* SysMLv2Parser::Primary_argument_valueContext::primary_expression() {
  return getRuleContext<SysMLv2Parser::Primary_expressionContext>(0);
}


size_t SysMLv2Parser::Primary_argument_valueContext::getRuleIndex() const {
  return SysMLv2Parser::RulePrimary_argument_value;
}

void SysMLv2Parser::Primary_argument_valueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimary_argument_value(this);
}

void SysMLv2Parser::Primary_argument_valueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimary_argument_value(this);
}

SysMLv2Parser::Primary_argument_valueContext* SysMLv2Parser::primary_argument_value() {
  Primary_argument_valueContext *_localctx = _tracker.createInstance<Primary_argument_valueContext>(_ctx, getState());
  enterRule(_localctx, 894, SysMLv2Parser::RulePrimary_argument_value);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4132);
    primary_expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Primary_argumentContext ------------------------------------------------------------------

SysMLv2Parser::Primary_argumentContext::Primary_argumentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Primary_argument_valueContext* SysMLv2Parser::Primary_argumentContext::primary_argument_value() {
  return getRuleContext<SysMLv2Parser::Primary_argument_valueContext>(0);
}


size_t SysMLv2Parser::Primary_argumentContext::getRuleIndex() const {
  return SysMLv2Parser::RulePrimary_argument;
}

void SysMLv2Parser::Primary_argumentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimary_argument(this);
}

void SysMLv2Parser::Primary_argumentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimary_argument(this);
}

SysMLv2Parser::Primary_argumentContext* SysMLv2Parser::primary_argument() {
  Primary_argumentContext *_localctx = _tracker.createInstance<Primary_argumentContext>(_ctx, getState());
  enterRule(_localctx, 896, SysMLv2Parser::RulePrimary_argument);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4134);
    primary_argument_value();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Primary_argument_memberContext ------------------------------------------------------------------

SysMLv2Parser::Primary_argument_memberContext::Primary_argument_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Primary_argumentContext* SysMLv2Parser::Primary_argument_memberContext::primary_argument() {
  return getRuleContext<SysMLv2Parser::Primary_argumentContext>(0);
}


size_t SysMLv2Parser::Primary_argument_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RulePrimary_argument_member;
}

void SysMLv2Parser::Primary_argument_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimary_argument_member(this);
}

void SysMLv2Parser::Primary_argument_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimary_argument_member(this);
}

SysMLv2Parser::Primary_argument_memberContext* SysMLv2Parser::primary_argument_member() {
  Primary_argument_memberContext *_localctx = _tracker.createInstance<Primary_argument_memberContext>(_ctx, getState());
  enterRule(_localctx, 898, SysMLv2Parser::RulePrimary_argument_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4136);
    primary_argument();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Non_feature_chain_primary_expressionContext ------------------------------------------------------------------

SysMLv2Parser::Non_feature_chain_primary_expressionContext::Non_feature_chain_primary_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Bracket_expressionContext* SysMLv2Parser::Non_feature_chain_primary_expressionContext::bracket_expression() {
  return getRuleContext<SysMLv2Parser::Bracket_expressionContext>(0);
}

SysMLv2Parser::Index_expressionContext* SysMLv2Parser::Non_feature_chain_primary_expressionContext::index_expression() {
  return getRuleContext<SysMLv2Parser::Index_expressionContext>(0);
}

SysMLv2Parser::Sequence_expressionContext* SysMLv2Parser::Non_feature_chain_primary_expressionContext::sequence_expression() {
  return getRuleContext<SysMLv2Parser::Sequence_expressionContext>(0);
}

SysMLv2Parser::Select_expressionContext* SysMLv2Parser::Non_feature_chain_primary_expressionContext::select_expression() {
  return getRuleContext<SysMLv2Parser::Select_expressionContext>(0);
}

SysMLv2Parser::Collect_expressionContext* SysMLv2Parser::Non_feature_chain_primary_expressionContext::collect_expression() {
  return getRuleContext<SysMLv2Parser::Collect_expressionContext>(0);
}

SysMLv2Parser::Function_operation_expressionContext* SysMLv2Parser::Non_feature_chain_primary_expressionContext::function_operation_expression() {
  return getRuleContext<SysMLv2Parser::Function_operation_expressionContext>(0);
}

SysMLv2Parser::Base_expressionContext* SysMLv2Parser::Non_feature_chain_primary_expressionContext::base_expression() {
  return getRuleContext<SysMLv2Parser::Base_expressionContext>(0);
}


size_t SysMLv2Parser::Non_feature_chain_primary_expressionContext::getRuleIndex() const {
  return SysMLv2Parser::RuleNon_feature_chain_primary_expression;
}

void SysMLv2Parser::Non_feature_chain_primary_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNon_feature_chain_primary_expression(this);
}

void SysMLv2Parser::Non_feature_chain_primary_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNon_feature_chain_primary_expression(this);
}

SysMLv2Parser::Non_feature_chain_primary_expressionContext* SysMLv2Parser::non_feature_chain_primary_expression() {
  Non_feature_chain_primary_expressionContext *_localctx = _tracker.createInstance<Non_feature_chain_primary_expressionContext>(_ctx, getState());
  enterRule(_localctx, 900, SysMLv2Parser::RuleNon_feature_chain_primary_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4145);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 423, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(4138);
      bracket_expression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(4139);
      index_expression();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(4140);
      sequence_expression();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(4141);
      select_expression();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(4142);
      collect_expression();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(4143);
      function_operation_expression();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(4144);
      base_expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Non_feature_chain_primary_argument_valueContext ------------------------------------------------------------------

SysMLv2Parser::Non_feature_chain_primary_argument_valueContext::Non_feature_chain_primary_argument_valueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Non_feature_chain_primary_expressionContext* SysMLv2Parser::Non_feature_chain_primary_argument_valueContext::non_feature_chain_primary_expression() {
  return getRuleContext<SysMLv2Parser::Non_feature_chain_primary_expressionContext>(0);
}


size_t SysMLv2Parser::Non_feature_chain_primary_argument_valueContext::getRuleIndex() const {
  return SysMLv2Parser::RuleNon_feature_chain_primary_argument_value;
}

void SysMLv2Parser::Non_feature_chain_primary_argument_valueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNon_feature_chain_primary_argument_value(this);
}

void SysMLv2Parser::Non_feature_chain_primary_argument_valueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNon_feature_chain_primary_argument_value(this);
}

SysMLv2Parser::Non_feature_chain_primary_argument_valueContext* SysMLv2Parser::non_feature_chain_primary_argument_value() {
  Non_feature_chain_primary_argument_valueContext *_localctx = _tracker.createInstance<Non_feature_chain_primary_argument_valueContext>(_ctx, getState());
  enterRule(_localctx, 902, SysMLv2Parser::RuleNon_feature_chain_primary_argument_value);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4147);
    non_feature_chain_primary_expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Non_feature_chain_primary_argumentContext ------------------------------------------------------------------

SysMLv2Parser::Non_feature_chain_primary_argumentContext::Non_feature_chain_primary_argumentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Primary_argumentContext* SysMLv2Parser::Non_feature_chain_primary_argumentContext::primary_argument() {
  return getRuleContext<SysMLv2Parser::Primary_argumentContext>(0);
}


size_t SysMLv2Parser::Non_feature_chain_primary_argumentContext::getRuleIndex() const {
  return SysMLv2Parser::RuleNon_feature_chain_primary_argument;
}

void SysMLv2Parser::Non_feature_chain_primary_argumentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNon_feature_chain_primary_argument(this);
}

void SysMLv2Parser::Non_feature_chain_primary_argumentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNon_feature_chain_primary_argument(this);
}

SysMLv2Parser::Non_feature_chain_primary_argumentContext* SysMLv2Parser::non_feature_chain_primary_argument() {
  Non_feature_chain_primary_argumentContext *_localctx = _tracker.createInstance<Non_feature_chain_primary_argumentContext>(_ctx, getState());
  enterRule(_localctx, 904, SysMLv2Parser::RuleNon_feature_chain_primary_argument);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4149);
    primary_argument();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Non_feature_chain_primary_argument_memberContext ------------------------------------------------------------------

SysMLv2Parser::Non_feature_chain_primary_argument_memberContext::Non_feature_chain_primary_argument_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Primary_argumentContext* SysMLv2Parser::Non_feature_chain_primary_argument_memberContext::primary_argument() {
  return getRuleContext<SysMLv2Parser::Primary_argumentContext>(0);
}


size_t SysMLv2Parser::Non_feature_chain_primary_argument_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleNon_feature_chain_primary_argument_member;
}

void SysMLv2Parser::Non_feature_chain_primary_argument_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNon_feature_chain_primary_argument_member(this);
}

void SysMLv2Parser::Non_feature_chain_primary_argument_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNon_feature_chain_primary_argument_member(this);
}

SysMLv2Parser::Non_feature_chain_primary_argument_memberContext* SysMLv2Parser::non_feature_chain_primary_argument_member() {
  Non_feature_chain_primary_argument_memberContext *_localctx = _tracker.createInstance<Non_feature_chain_primary_argument_memberContext>(_ctx, getState());
  enterRule(_localctx, 906, SysMLv2Parser::RuleNon_feature_chain_primary_argument_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4151);
    primary_argument();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Bracket_expressionContext ------------------------------------------------------------------

SysMLv2Parser::Bracket_expressionContext::Bracket_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Bracket_expressionContext::SYMBOL_SQUARE_BRACKET_OPEN() {
  return getToken(SysMLv2Parser::SYMBOL_SQUARE_BRACKET_OPEN, 0);
}

SysMLv2Parser::Sequence_expression_list_memberContext* SysMLv2Parser::Bracket_expressionContext::sequence_expression_list_member() {
  return getRuleContext<SysMLv2Parser::Sequence_expression_list_memberContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Bracket_expressionContext::SYMBOL_SQUARE_BRACKET_CLOSE() {
  return getToken(SysMLv2Parser::SYMBOL_SQUARE_BRACKET_CLOSE, 0);
}


size_t SysMLv2Parser::Bracket_expressionContext::getRuleIndex() const {
  return SysMLv2Parser::RuleBracket_expression;
}

void SysMLv2Parser::Bracket_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBracket_expression(this);
}

void SysMLv2Parser::Bracket_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBracket_expression(this);
}

SysMLv2Parser::Bracket_expressionContext* SysMLv2Parser::bracket_expression() {
  Bracket_expressionContext *_localctx = _tracker.createInstance<Bracket_expressionContext>(_ctx, getState());
  enterRule(_localctx, 908, SysMLv2Parser::RuleBracket_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4153);
    match(SysMLv2Parser::SYMBOL_SQUARE_BRACKET_OPEN);
    setState(4154);
    sequence_expression_list_member();
    setState(4155);
    match(SysMLv2Parser::SYMBOL_SQUARE_BRACKET_CLOSE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Index_expressionContext ------------------------------------------------------------------

SysMLv2Parser::Index_expressionContext::Index_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Index_expressionContext::SYMBOL_HASHTAG() {
  return getToken(SysMLv2Parser::SYMBOL_HASHTAG, 0);
}

tree::TerminalNode* SysMLv2Parser::Index_expressionContext::SYMBOL_ROUND_BRACKET_OPEN() {
  return getToken(SysMLv2Parser::SYMBOL_ROUND_BRACKET_OPEN, 0);
}

SysMLv2Parser::Sequence_expression_list_memberContext* SysMLv2Parser::Index_expressionContext::sequence_expression_list_member() {
  return getRuleContext<SysMLv2Parser::Sequence_expression_list_memberContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Index_expressionContext::SYMBOL_ROUND_BRACKET_CLOSE() {
  return getToken(SysMLv2Parser::SYMBOL_ROUND_BRACKET_CLOSE, 0);
}


size_t SysMLv2Parser::Index_expressionContext::getRuleIndex() const {
  return SysMLv2Parser::RuleIndex_expression;
}

void SysMLv2Parser::Index_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIndex_expression(this);
}

void SysMLv2Parser::Index_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIndex_expression(this);
}

SysMLv2Parser::Index_expressionContext* SysMLv2Parser::index_expression() {
  Index_expressionContext *_localctx = _tracker.createInstance<Index_expressionContext>(_ctx, getState());
  enterRule(_localctx, 910, SysMLv2Parser::RuleIndex_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4157);
    match(SysMLv2Parser::SYMBOL_HASHTAG);
    setState(4158);
    match(SysMLv2Parser::SYMBOL_ROUND_BRACKET_OPEN);
    setState(4159);
    sequence_expression_list_member();
    setState(4160);
    match(SysMLv2Parser::SYMBOL_ROUND_BRACKET_CLOSE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Sequence_expressionContext ------------------------------------------------------------------

SysMLv2Parser::Sequence_expressionContext::Sequence_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Sequence_expressionContext::SYMBOL_ROUND_BRACKET_OPEN() {
  return getToken(SysMLv2Parser::SYMBOL_ROUND_BRACKET_OPEN, 0);
}

SysMLv2Parser::Sequence_expression_listContext* SysMLv2Parser::Sequence_expressionContext::sequence_expression_list() {
  return getRuleContext<SysMLv2Parser::Sequence_expression_listContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Sequence_expressionContext::SYMBOL_ROUND_BRACKET_CLOSE() {
  return getToken(SysMLv2Parser::SYMBOL_ROUND_BRACKET_CLOSE, 0);
}


size_t SysMLv2Parser::Sequence_expressionContext::getRuleIndex() const {
  return SysMLv2Parser::RuleSequence_expression;
}

void SysMLv2Parser::Sequence_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSequence_expression(this);
}

void SysMLv2Parser::Sequence_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSequence_expression(this);
}

SysMLv2Parser::Sequence_expressionContext* SysMLv2Parser::sequence_expression() {
  Sequence_expressionContext *_localctx = _tracker.createInstance<Sequence_expressionContext>(_ctx, getState());
  enterRule(_localctx, 912, SysMLv2Parser::RuleSequence_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4162);
    match(SysMLv2Parser::SYMBOL_ROUND_BRACKET_OPEN);
    setState(4163);
    sequence_expression_list();
    setState(4164);
    match(SysMLv2Parser::SYMBOL_ROUND_BRACKET_CLOSE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Sequence_expression_listContext ------------------------------------------------------------------

SysMLv2Parser::Sequence_expression_listContext::Sequence_expression_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Owned_expressionsContext* SysMLv2Parser::Sequence_expression_listContext::owned_expressions() {
  return getRuleContext<SysMLv2Parser::Owned_expressionsContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Sequence_expression_listContext::SYMBOL_COMMA() {
  return getToken(SysMLv2Parser::SYMBOL_COMMA, 0);
}

SysMLv2Parser::Sequence_operator_expressionContext* SysMLv2Parser::Sequence_expression_listContext::sequence_operator_expression() {
  return getRuleContext<SysMLv2Parser::Sequence_operator_expressionContext>(0);
}


size_t SysMLv2Parser::Sequence_expression_listContext::getRuleIndex() const {
  return SysMLv2Parser::RuleSequence_expression_list;
}

void SysMLv2Parser::Sequence_expression_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSequence_expression_list(this);
}

void SysMLv2Parser::Sequence_expression_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSequence_expression_list(this);
}

SysMLv2Parser::Sequence_expression_listContext* SysMLv2Parser::sequence_expression_list() {
  Sequence_expression_listContext *_localctx = _tracker.createInstance<Sequence_expression_listContext>(_ctx, getState());
  enterRule(_localctx, 914, SysMLv2Parser::RuleSequence_expression_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4171);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 425, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(4166);
      owned_expressions();
      setState(4168);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == SysMLv2Parser::SYMBOL_COMMA) {
        setState(4167);
        match(SysMLv2Parser::SYMBOL_COMMA);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(4170);
      sequence_operator_expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Sequence_operator_expressionContext ------------------------------------------------------------------

SysMLv2Parser::Sequence_operator_expressionContext::Sequence_operator_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Owned_expression_memberContext* SysMLv2Parser::Sequence_operator_expressionContext::owned_expression_member() {
  return getRuleContext<SysMLv2Parser::Owned_expression_memberContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Sequence_operator_expressionContext::SYMBOL_COMMA() {
  return getToken(SysMLv2Parser::SYMBOL_COMMA, 0);
}

SysMLv2Parser::Sequence_expression_list_memberContext* SysMLv2Parser::Sequence_operator_expressionContext::sequence_expression_list_member() {
  return getRuleContext<SysMLv2Parser::Sequence_expression_list_memberContext>(0);
}


size_t SysMLv2Parser::Sequence_operator_expressionContext::getRuleIndex() const {
  return SysMLv2Parser::RuleSequence_operator_expression;
}

void SysMLv2Parser::Sequence_operator_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSequence_operator_expression(this);
}

void SysMLv2Parser::Sequence_operator_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSequence_operator_expression(this);
}

SysMLv2Parser::Sequence_operator_expressionContext* SysMLv2Parser::sequence_operator_expression() {
  Sequence_operator_expressionContext *_localctx = _tracker.createInstance<Sequence_operator_expressionContext>(_ctx, getState());
  enterRule(_localctx, 916, SysMLv2Parser::RuleSequence_operator_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4173);
    owned_expression_member();
    setState(4174);
    match(SysMLv2Parser::SYMBOL_COMMA);
    setState(4175);
    sequence_expression_list_member();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Sequence_expression_list_memberContext ------------------------------------------------------------------

SysMLv2Parser::Sequence_expression_list_memberContext::Sequence_expression_list_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Sequence_expression_listContext* SysMLv2Parser::Sequence_expression_list_memberContext::sequence_expression_list() {
  return getRuleContext<SysMLv2Parser::Sequence_expression_listContext>(0);
}


size_t SysMLv2Parser::Sequence_expression_list_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleSequence_expression_list_member;
}

void SysMLv2Parser::Sequence_expression_list_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSequence_expression_list_member(this);
}

void SysMLv2Parser::Sequence_expression_list_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSequence_expression_list_member(this);
}

SysMLv2Parser::Sequence_expression_list_memberContext* SysMLv2Parser::sequence_expression_list_member() {
  Sequence_expression_list_memberContext *_localctx = _tracker.createInstance<Sequence_expression_list_memberContext>(_ctx, getState());
  enterRule(_localctx, 918, SysMLv2Parser::RuleSequence_expression_list_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4177);
    sequence_expression_list();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Feature_chain_expressionContext ------------------------------------------------------------------

SysMLv2Parser::Feature_chain_expressionContext::Feature_chain_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Feature_chain_expressionContext::SYMBOL_DOT() {
  return getToken(SysMLv2Parser::SYMBOL_DOT, 0);
}

SysMLv2Parser::Feature_chain_memberContext* SysMLv2Parser::Feature_chain_expressionContext::feature_chain_member() {
  return getRuleContext<SysMLv2Parser::Feature_chain_memberContext>(0);
}


size_t SysMLv2Parser::Feature_chain_expressionContext::getRuleIndex() const {
  return SysMLv2Parser::RuleFeature_chain_expression;
}

void SysMLv2Parser::Feature_chain_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFeature_chain_expression(this);
}

void SysMLv2Parser::Feature_chain_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFeature_chain_expression(this);
}

SysMLv2Parser::Feature_chain_expressionContext* SysMLv2Parser::feature_chain_expression() {
  Feature_chain_expressionContext *_localctx = _tracker.createInstance<Feature_chain_expressionContext>(_ctx, getState());
  enterRule(_localctx, 920, SysMLv2Parser::RuleFeature_chain_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4179);
    match(SysMLv2Parser::SYMBOL_DOT);
    setState(4180);
    feature_chain_member();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Collect_expressionContext ------------------------------------------------------------------

SysMLv2Parser::Collect_expressionContext::Collect_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Collect_expressionContext::SYMBOL_DOT() {
  return getToken(SysMLv2Parser::SYMBOL_DOT, 0);
}

SysMLv2Parser::Body_expression_memberContext* SysMLv2Parser::Collect_expressionContext::body_expression_member() {
  return getRuleContext<SysMLv2Parser::Body_expression_memberContext>(0);
}


size_t SysMLv2Parser::Collect_expressionContext::getRuleIndex() const {
  return SysMLv2Parser::RuleCollect_expression;
}

void SysMLv2Parser::Collect_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCollect_expression(this);
}

void SysMLv2Parser::Collect_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCollect_expression(this);
}

SysMLv2Parser::Collect_expressionContext* SysMLv2Parser::collect_expression() {
  Collect_expressionContext *_localctx = _tracker.createInstance<Collect_expressionContext>(_ctx, getState());
  enterRule(_localctx, 922, SysMLv2Parser::RuleCollect_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4182);
    match(SysMLv2Parser::SYMBOL_DOT);
    setState(4183);
    body_expression_member();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Select_expressionContext ------------------------------------------------------------------

SysMLv2Parser::Select_expressionContext::Select_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Select_expressionContext::SYMBOL_DOT_QUESTION() {
  return getToken(SysMLv2Parser::SYMBOL_DOT_QUESTION, 0);
}

SysMLv2Parser::Body_expression_memberContext* SysMLv2Parser::Select_expressionContext::body_expression_member() {
  return getRuleContext<SysMLv2Parser::Body_expression_memberContext>(0);
}


size_t SysMLv2Parser::Select_expressionContext::getRuleIndex() const {
  return SysMLv2Parser::RuleSelect_expression;
}

void SysMLv2Parser::Select_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelect_expression(this);
}

void SysMLv2Parser::Select_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelect_expression(this);
}

SysMLv2Parser::Select_expressionContext* SysMLv2Parser::select_expression() {
  Select_expressionContext *_localctx = _tracker.createInstance<Select_expressionContext>(_ctx, getState());
  enterRule(_localctx, 924, SysMLv2Parser::RuleSelect_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4185);
    match(SysMLv2Parser::SYMBOL_DOT_QUESTION);
    setState(4186);
    body_expression_member();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Function_operation_expressionContext ------------------------------------------------------------------

SysMLv2Parser::Function_operation_expressionContext::Function_operation_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Function_operation_expressionContext::SYMBOL_ARROOW() {
  return getToken(SysMLv2Parser::SYMBOL_ARROOW, 0);
}

SysMLv2Parser::Reference_typingContext* SysMLv2Parser::Function_operation_expressionContext::reference_typing() {
  return getRuleContext<SysMLv2Parser::Reference_typingContext>(0);
}

SysMLv2Parser::Body_argument_memberContext* SysMLv2Parser::Function_operation_expressionContext::body_argument_member() {
  return getRuleContext<SysMLv2Parser::Body_argument_memberContext>(0);
}

SysMLv2Parser::Function_reference_argument_memberContext* SysMLv2Parser::Function_operation_expressionContext::function_reference_argument_member() {
  return getRuleContext<SysMLv2Parser::Function_reference_argument_memberContext>(0);
}

SysMLv2Parser::Argument_expressionContext* SysMLv2Parser::Function_operation_expressionContext::argument_expression() {
  return getRuleContext<SysMLv2Parser::Argument_expressionContext>(0);
}


size_t SysMLv2Parser::Function_operation_expressionContext::getRuleIndex() const {
  return SysMLv2Parser::RuleFunction_operation_expression;
}

void SysMLv2Parser::Function_operation_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunction_operation_expression(this);
}

void SysMLv2Parser::Function_operation_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunction_operation_expression(this);
}

SysMLv2Parser::Function_operation_expressionContext* SysMLv2Parser::function_operation_expression() {
  Function_operation_expressionContext *_localctx = _tracker.createInstance<Function_operation_expressionContext>(_ctx, getState());
  enterRule(_localctx, 926, SysMLv2Parser::RuleFunction_operation_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4188);
    match(SysMLv2Parser::SYMBOL_ARROOW);
    setState(4189);
    reference_typing();
    setState(4193);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 426, _ctx)) {
    case 1: {
      setState(4190);
      body_argument_member();
      break;
    }

    case 2: {
      setState(4191);
      function_reference_argument_member();
      break;
    }

    case 3: {
      setState(4192);
      argument_expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Body_argument_memberContext ------------------------------------------------------------------

SysMLv2Parser::Body_argument_memberContext::Body_argument_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Body_argumentContext* SysMLv2Parser::Body_argument_memberContext::body_argument() {
  return getRuleContext<SysMLv2Parser::Body_argumentContext>(0);
}


size_t SysMLv2Parser::Body_argument_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleBody_argument_member;
}

void SysMLv2Parser::Body_argument_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBody_argument_member(this);
}

void SysMLv2Parser::Body_argument_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBody_argument_member(this);
}

SysMLv2Parser::Body_argument_memberContext* SysMLv2Parser::body_argument_member() {
  Body_argument_memberContext *_localctx = _tracker.createInstance<Body_argument_memberContext>(_ctx, getState());
  enterRule(_localctx, 928, SysMLv2Parser::RuleBody_argument_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4195);
    body_argument();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Body_argumentContext ------------------------------------------------------------------

SysMLv2Parser::Body_argumentContext::Body_argumentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Body_argument_valueContext* SysMLv2Parser::Body_argumentContext::body_argument_value() {
  return getRuleContext<SysMLv2Parser::Body_argument_valueContext>(0);
}


size_t SysMLv2Parser::Body_argumentContext::getRuleIndex() const {
  return SysMLv2Parser::RuleBody_argument;
}

void SysMLv2Parser::Body_argumentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBody_argument(this);
}

void SysMLv2Parser::Body_argumentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBody_argument(this);
}

SysMLv2Parser::Body_argumentContext* SysMLv2Parser::body_argument() {
  Body_argumentContext *_localctx = _tracker.createInstance<Body_argumentContext>(_ctx, getState());
  enterRule(_localctx, 930, SysMLv2Parser::RuleBody_argument);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4197);
    body_argument_value();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Body_argument_valueContext ------------------------------------------------------------------

SysMLv2Parser::Body_argument_valueContext::Body_argument_valueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Body_expressionContext* SysMLv2Parser::Body_argument_valueContext::body_expression() {
  return getRuleContext<SysMLv2Parser::Body_expressionContext>(0);
}


size_t SysMLv2Parser::Body_argument_valueContext::getRuleIndex() const {
  return SysMLv2Parser::RuleBody_argument_value;
}

void SysMLv2Parser::Body_argument_valueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBody_argument_value(this);
}

void SysMLv2Parser::Body_argument_valueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBody_argument_value(this);
}

SysMLv2Parser::Body_argument_valueContext* SysMLv2Parser::body_argument_value() {
  Body_argument_valueContext *_localctx = _tracker.createInstance<Body_argument_valueContext>(_ctx, getState());
  enterRule(_localctx, 932, SysMLv2Parser::RuleBody_argument_value);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4199);
    body_expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Body_expression_memberContext ------------------------------------------------------------------

SysMLv2Parser::Body_expression_memberContext::Body_expression_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Body_expressionContext* SysMLv2Parser::Body_expression_memberContext::body_expression() {
  return getRuleContext<SysMLv2Parser::Body_expressionContext>(0);
}


size_t SysMLv2Parser::Body_expression_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleBody_expression_member;
}

void SysMLv2Parser::Body_expression_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBody_expression_member(this);
}

void SysMLv2Parser::Body_expression_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBody_expression_member(this);
}

SysMLv2Parser::Body_expression_memberContext* SysMLv2Parser::body_expression_member() {
  Body_expression_memberContext *_localctx = _tracker.createInstance<Body_expression_memberContext>(_ctx, getState());
  enterRule(_localctx, 934, SysMLv2Parser::RuleBody_expression_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4201);
    body_expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Function_reference_argument_memberContext ------------------------------------------------------------------

SysMLv2Parser::Function_reference_argument_memberContext::Function_reference_argument_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Function_reference_argumentContext* SysMLv2Parser::Function_reference_argument_memberContext::function_reference_argument() {
  return getRuleContext<SysMLv2Parser::Function_reference_argumentContext>(0);
}


size_t SysMLv2Parser::Function_reference_argument_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleFunction_reference_argument_member;
}

void SysMLv2Parser::Function_reference_argument_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunction_reference_argument_member(this);
}

void SysMLv2Parser::Function_reference_argument_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunction_reference_argument_member(this);
}

SysMLv2Parser::Function_reference_argument_memberContext* SysMLv2Parser::function_reference_argument_member() {
  Function_reference_argument_memberContext *_localctx = _tracker.createInstance<Function_reference_argument_memberContext>(_ctx, getState());
  enterRule(_localctx, 936, SysMLv2Parser::RuleFunction_reference_argument_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4203);
    function_reference_argument();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Function_reference_argumentContext ------------------------------------------------------------------

SysMLv2Parser::Function_reference_argumentContext::Function_reference_argumentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Function_reference_memberContext* SysMLv2Parser::Function_reference_argumentContext::function_reference_member() {
  return getRuleContext<SysMLv2Parser::Function_reference_memberContext>(0);
}


size_t SysMLv2Parser::Function_reference_argumentContext::getRuleIndex() const {
  return SysMLv2Parser::RuleFunction_reference_argument;
}

void SysMLv2Parser::Function_reference_argumentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunction_reference_argument(this);
}

void SysMLv2Parser::Function_reference_argumentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunction_reference_argument(this);
}

SysMLv2Parser::Function_reference_argumentContext* SysMLv2Parser::function_reference_argument() {
  Function_reference_argumentContext *_localctx = _tracker.createInstance<Function_reference_argumentContext>(_ctx, getState());
  enterRule(_localctx, 938, SysMLv2Parser::RuleFunction_reference_argument);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4205);
    function_reference_member();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Function_reference_arugment_valueContext ------------------------------------------------------------------

SysMLv2Parser::Function_reference_arugment_valueContext::Function_reference_arugment_valueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Function_reference_expressionContext* SysMLv2Parser::Function_reference_arugment_valueContext::function_reference_expression() {
  return getRuleContext<SysMLv2Parser::Function_reference_expressionContext>(0);
}


size_t SysMLv2Parser::Function_reference_arugment_valueContext::getRuleIndex() const {
  return SysMLv2Parser::RuleFunction_reference_arugment_value;
}

void SysMLv2Parser::Function_reference_arugment_valueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunction_reference_arugment_value(this);
}

void SysMLv2Parser::Function_reference_arugment_valueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunction_reference_arugment_value(this);
}

SysMLv2Parser::Function_reference_arugment_valueContext* SysMLv2Parser::function_reference_arugment_value() {
  Function_reference_arugment_valueContext *_localctx = _tracker.createInstance<Function_reference_arugment_valueContext>(_ctx, getState());
  enterRule(_localctx, 940, SysMLv2Parser::RuleFunction_reference_arugment_value);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4207);
    function_reference_expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Function_reference_expressionContext ------------------------------------------------------------------

SysMLv2Parser::Function_reference_expressionContext::Function_reference_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Reference_typingContext* SysMLv2Parser::Function_reference_expressionContext::reference_typing() {
  return getRuleContext<SysMLv2Parser::Reference_typingContext>(0);
}


size_t SysMLv2Parser::Function_reference_expressionContext::getRuleIndex() const {
  return SysMLv2Parser::RuleFunction_reference_expression;
}

void SysMLv2Parser::Function_reference_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunction_reference_expression(this);
}

void SysMLv2Parser::Function_reference_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunction_reference_expression(this);
}

SysMLv2Parser::Function_reference_expressionContext* SysMLv2Parser::function_reference_expression() {
  Function_reference_expressionContext *_localctx = _tracker.createInstance<Function_reference_expressionContext>(_ctx, getState());
  enterRule(_localctx, 942, SysMLv2Parser::RuleFunction_reference_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4209);
    reference_typing();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Function_reference_memberContext ------------------------------------------------------------------

SysMLv2Parser::Function_reference_memberContext::Function_reference_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Function_referenceContext* SysMLv2Parser::Function_reference_memberContext::function_reference() {
  return getRuleContext<SysMLv2Parser::Function_referenceContext>(0);
}


size_t SysMLv2Parser::Function_reference_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleFunction_reference_member;
}

void SysMLv2Parser::Function_reference_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunction_reference_member(this);
}

void SysMLv2Parser::Function_reference_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunction_reference_member(this);
}

SysMLv2Parser::Function_reference_memberContext* SysMLv2Parser::function_reference_member() {
  Function_reference_memberContext *_localctx = _tracker.createInstance<Function_reference_memberContext>(_ctx, getState());
  enterRule(_localctx, 944, SysMLv2Parser::RuleFunction_reference_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4211);
    function_reference();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Function_referenceContext ------------------------------------------------------------------

SysMLv2Parser::Function_referenceContext::Function_referenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Reference_typingContext* SysMLv2Parser::Function_referenceContext::reference_typing() {
  return getRuleContext<SysMLv2Parser::Reference_typingContext>(0);
}


size_t SysMLv2Parser::Function_referenceContext::getRuleIndex() const {
  return SysMLv2Parser::RuleFunction_reference;
}

void SysMLv2Parser::Function_referenceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunction_reference(this);
}

void SysMLv2Parser::Function_referenceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunction_reference(this);
}

SysMLv2Parser::Function_referenceContext* SysMLv2Parser::function_reference() {
  Function_referenceContext *_localctx = _tracker.createInstance<Function_referenceContext>(_ctx, getState());
  enterRule(_localctx, 946, SysMLv2Parser::RuleFunction_reference);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4213);
    reference_typing();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Base_expressionContext ------------------------------------------------------------------

SysMLv2Parser::Base_expressionContext::Base_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Null_expressionContext* SysMLv2Parser::Base_expressionContext::null_expression() {
  return getRuleContext<SysMLv2Parser::Null_expressionContext>(0);
}

SysMLv2Parser::Literal_expressionContext* SysMLv2Parser::Base_expressionContext::literal_expression() {
  return getRuleContext<SysMLv2Parser::Literal_expressionContext>(0);
}

SysMLv2Parser::Feature_reference_expressionContext* SysMLv2Parser::Base_expressionContext::feature_reference_expression() {
  return getRuleContext<SysMLv2Parser::Feature_reference_expressionContext>(0);
}

SysMLv2Parser::Metadata_access_expressionContext* SysMLv2Parser::Base_expressionContext::metadata_access_expression() {
  return getRuleContext<SysMLv2Parser::Metadata_access_expressionContext>(0);
}

SysMLv2Parser::Invocation_expressionContext* SysMLv2Parser::Base_expressionContext::invocation_expression() {
  return getRuleContext<SysMLv2Parser::Invocation_expressionContext>(0);
}

SysMLv2Parser::Body_expressionContext* SysMLv2Parser::Base_expressionContext::body_expression() {
  return getRuleContext<SysMLv2Parser::Body_expressionContext>(0);
}


size_t SysMLv2Parser::Base_expressionContext::getRuleIndex() const {
  return SysMLv2Parser::RuleBase_expression;
}

void SysMLv2Parser::Base_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBase_expression(this);
}

void SysMLv2Parser::Base_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBase_expression(this);
}

SysMLv2Parser::Base_expressionContext* SysMLv2Parser::base_expression() {
  Base_expressionContext *_localctx = _tracker.createInstance<Base_expressionContext>(_ctx, getState());
  enterRule(_localctx, 948, SysMLv2Parser::RuleBase_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4221);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 427, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(4215);
      null_expression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(4216);
      literal_expression();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(4217);
      feature_reference_expression();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(4218);
      metadata_access_expression();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(4219);
      invocation_expression();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(4220);
      body_expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Null_expressionContext ------------------------------------------------------------------

SysMLv2Parser::Null_expressionContext::Null_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Null_expressionContext::KEYWORD_NULL() {
  return getToken(SysMLv2Parser::KEYWORD_NULL, 0);
}

tree::TerminalNode* SysMLv2Parser::Null_expressionContext::SYMBOL_ROUND_BRACKET_OPEN() {
  return getToken(SysMLv2Parser::SYMBOL_ROUND_BRACKET_OPEN, 0);
}

tree::TerminalNode* SysMLv2Parser::Null_expressionContext::SYMBOL_ROUND_BRACKET_CLOSE() {
  return getToken(SysMLv2Parser::SYMBOL_ROUND_BRACKET_CLOSE, 0);
}


size_t SysMLv2Parser::Null_expressionContext::getRuleIndex() const {
  return SysMLv2Parser::RuleNull_expression;
}

void SysMLv2Parser::Null_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNull_expression(this);
}

void SysMLv2Parser::Null_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNull_expression(this);
}

SysMLv2Parser::Null_expressionContext* SysMLv2Parser::null_expression() {
  Null_expressionContext *_localctx = _tracker.createInstance<Null_expressionContext>(_ctx, getState());
  enterRule(_localctx, 950, SysMLv2Parser::RuleNull_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4226);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SysMLv2Parser::KEYWORD_NULL: {
        enterOuterAlt(_localctx, 1);
        setState(4223);
        match(SysMLv2Parser::KEYWORD_NULL);
        break;
      }

      case SysMLv2Parser::SYMBOL_ROUND_BRACKET_OPEN: {
        enterOuterAlt(_localctx, 2);
        setState(4224);
        match(SysMLv2Parser::SYMBOL_ROUND_BRACKET_OPEN);
        setState(4225);
        match(SysMLv2Parser::SYMBOL_ROUND_BRACKET_CLOSE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Feature_reference_expressionContext ------------------------------------------------------------------

SysMLv2Parser::Feature_reference_expressionContext::Feature_reference_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Feature_reference_memberContext* SysMLv2Parser::Feature_reference_expressionContext::feature_reference_member() {
  return getRuleContext<SysMLv2Parser::Feature_reference_memberContext>(0);
}


size_t SysMLv2Parser::Feature_reference_expressionContext::getRuleIndex() const {
  return SysMLv2Parser::RuleFeature_reference_expression;
}

void SysMLv2Parser::Feature_reference_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFeature_reference_expression(this);
}

void SysMLv2Parser::Feature_reference_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFeature_reference_expression(this);
}

SysMLv2Parser::Feature_reference_expressionContext* SysMLv2Parser::feature_reference_expression() {
  Feature_reference_expressionContext *_localctx = _tracker.createInstance<Feature_reference_expressionContext>(_ctx, getState());
  enterRule(_localctx, 952, SysMLv2Parser::RuleFeature_reference_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4228);
    feature_reference_member();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Feature_reference_memberContext ------------------------------------------------------------------

SysMLv2Parser::Feature_reference_memberContext::Feature_reference_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Feature_referenceContext* SysMLv2Parser::Feature_reference_memberContext::feature_reference() {
  return getRuleContext<SysMLv2Parser::Feature_referenceContext>(0);
}


size_t SysMLv2Parser::Feature_reference_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleFeature_reference_member;
}

void SysMLv2Parser::Feature_reference_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFeature_reference_member(this);
}

void SysMLv2Parser::Feature_reference_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFeature_reference_member(this);
}

SysMLv2Parser::Feature_reference_memberContext* SysMLv2Parser::feature_reference_member() {
  Feature_reference_memberContext *_localctx = _tracker.createInstance<Feature_reference_memberContext>(_ctx, getState());
  enterRule(_localctx, 954, SysMLv2Parser::RuleFeature_reference_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4230);
    feature_reference();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Feature_referenceContext ------------------------------------------------------------------

SysMLv2Parser::Feature_referenceContext::Feature_referenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Qualified_nameContext* SysMLv2Parser::Feature_referenceContext::qualified_name() {
  return getRuleContext<SysMLv2Parser::Qualified_nameContext>(0);
}


size_t SysMLv2Parser::Feature_referenceContext::getRuleIndex() const {
  return SysMLv2Parser::RuleFeature_reference;
}

void SysMLv2Parser::Feature_referenceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFeature_reference(this);
}

void SysMLv2Parser::Feature_referenceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFeature_reference(this);
}

SysMLv2Parser::Feature_referenceContext* SysMLv2Parser::feature_reference() {
  Feature_referenceContext *_localctx = _tracker.createInstance<Feature_referenceContext>(_ctx, getState());
  enterRule(_localctx, 956, SysMLv2Parser::RuleFeature_reference);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4232);
    qualified_name();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Metadata_access_expressionContext ------------------------------------------------------------------

SysMLv2Parser::Metadata_access_expressionContext::Metadata_access_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Qualified_nameContext* SysMLv2Parser::Metadata_access_expressionContext::qualified_name() {
  return getRuleContext<SysMLv2Parser::Qualified_nameContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Metadata_access_expressionContext::SYMBOL_DOT() {
  return getToken(SysMLv2Parser::SYMBOL_DOT, 0);
}

tree::TerminalNode* SysMLv2Parser::Metadata_access_expressionContext::KEYWORD_METADATA() {
  return getToken(SysMLv2Parser::KEYWORD_METADATA, 0);
}


size_t SysMLv2Parser::Metadata_access_expressionContext::getRuleIndex() const {
  return SysMLv2Parser::RuleMetadata_access_expression;
}

void SysMLv2Parser::Metadata_access_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMetadata_access_expression(this);
}

void SysMLv2Parser::Metadata_access_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMetadata_access_expression(this);
}

SysMLv2Parser::Metadata_access_expressionContext* SysMLv2Parser::metadata_access_expression() {
  Metadata_access_expressionContext *_localctx = _tracker.createInstance<Metadata_access_expressionContext>(_ctx, getState());
  enterRule(_localctx, 958, SysMLv2Parser::RuleMetadata_access_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4234);
    qualified_name();
    setState(4235);
    match(SysMLv2Parser::SYMBOL_DOT);
    setState(4236);
    match(SysMLv2Parser::KEYWORD_METADATA);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Invocation_expressionContext ------------------------------------------------------------------

SysMLv2Parser::Invocation_expressionContext::Invocation_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Internal_invocation_expressionContext* SysMLv2Parser::Invocation_expressionContext::internal_invocation_expression() {
  return getRuleContext<SysMLv2Parser::Internal_invocation_expressionContext>(0);
}


size_t SysMLv2Parser::Invocation_expressionContext::getRuleIndex() const {
  return SysMLv2Parser::RuleInvocation_expression;
}

void SysMLv2Parser::Invocation_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInvocation_expression(this);
}

void SysMLv2Parser::Invocation_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInvocation_expression(this);
}

SysMLv2Parser::Invocation_expressionContext* SysMLv2Parser::invocation_expression() {
  Invocation_expressionContext *_localctx = _tracker.createInstance<Invocation_expressionContext>(_ctx, getState());
  enterRule(_localctx, 960, SysMLv2Parser::RuleInvocation_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4238);
    internal_invocation_expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Internal_invocation_expressionContext ------------------------------------------------------------------

SysMLv2Parser::Internal_invocation_expressionContext::Internal_invocation_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Argument_listContext* SysMLv2Parser::Internal_invocation_expressionContext::argument_list() {
  return getRuleContext<SysMLv2Parser::Argument_listContext>(0);
}

SysMLv2Parser::Owned_feature_typingContext* SysMLv2Parser::Internal_invocation_expressionContext::owned_feature_typing() {
  return getRuleContext<SysMLv2Parser::Owned_feature_typingContext>(0);
}

SysMLv2Parser::Named_argument_listContext* SysMLv2Parser::Internal_invocation_expressionContext::named_argument_list() {
  return getRuleContext<SysMLv2Parser::Named_argument_listContext>(0);
}


size_t SysMLv2Parser::Internal_invocation_expressionContext::getRuleIndex() const {
  return SysMLv2Parser::RuleInternal_invocation_expression;
}

void SysMLv2Parser::Internal_invocation_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInternal_invocation_expression(this);
}

void SysMLv2Parser::Internal_invocation_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInternal_invocation_expression(this);
}

SysMLv2Parser::Internal_invocation_expressionContext* SysMLv2Parser::internal_invocation_expression() {
  Internal_invocation_expressionContext *_localctx = _tracker.createInstance<Internal_invocation_expressionContext>(_ctx, getState());
  enterRule(_localctx, 962, SysMLv2Parser::RuleInternal_invocation_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4242);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 429, _ctx)) {
    case 1: {
      setState(4240);
      owned_feature_typing();
      break;
    }

    case 2: {
      setState(4241);
      named_argument_list();
      break;
    }

    default:
      break;
    }
    setState(4244);
    argument_list();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Argument_listContext ------------------------------------------------------------------

SysMLv2Parser::Argument_listContext::Argument_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Argument_listContext::SYMBOL_ROUND_BRACKET_OPEN() {
  return getToken(SysMLv2Parser::SYMBOL_ROUND_BRACKET_OPEN, 0);
}

tree::TerminalNode* SysMLv2Parser::Argument_listContext::SYMBOL_ROUND_BRACKET_CLOSE() {
  return getToken(SysMLv2Parser::SYMBOL_ROUND_BRACKET_CLOSE, 0);
}

SysMLv2Parser::Owned_expressionsContext* SysMLv2Parser::Argument_listContext::owned_expressions() {
  return getRuleContext<SysMLv2Parser::Owned_expressionsContext>(0);
}

SysMLv2Parser::Positional_argument_listContext* SysMLv2Parser::Argument_listContext::positional_argument_list() {
  return getRuleContext<SysMLv2Parser::Positional_argument_listContext>(0);
}

SysMLv2Parser::Named_argument_listContext* SysMLv2Parser::Argument_listContext::named_argument_list() {
  return getRuleContext<SysMLv2Parser::Named_argument_listContext>(0);
}


size_t SysMLv2Parser::Argument_listContext::getRuleIndex() const {
  return SysMLv2Parser::RuleArgument_list;
}

void SysMLv2Parser::Argument_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArgument_list(this);
}

void SysMLv2Parser::Argument_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArgument_list(this);
}

SysMLv2Parser::Argument_listContext* SysMLv2Parser::argument_list() {
  Argument_listContext *_localctx = _tracker.createInstance<Argument_listContext>(_ctx, getState());
  enterRule(_localctx, 964, SysMLv2Parser::RuleArgument_list);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4246);
    match(SysMLv2Parser::SYMBOL_ROUND_BRACKET_OPEN);
    setState(4251);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 430, _ctx)) {
    case 1: {
      setState(4247);
      owned_expressions();
      setState(4248);
      positional_argument_list();
      break;
    }

    case 2: {
      setState(4250);
      named_argument_list();
      break;
    }

    default:
      break;
    }
    setState(4253);
    match(SysMLv2Parser::SYMBOL_ROUND_BRACKET_CLOSE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Positional_argument_listContext ------------------------------------------------------------------

SysMLv2Parser::Positional_argument_listContext::Positional_argument_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Argument_memberContext* SysMLv2Parser::Positional_argument_listContext::argument_member() {
  return getRuleContext<SysMLv2Parser::Argument_memberContext>(0);
}

std::vector<tree::TerminalNode *> SysMLv2Parser::Positional_argument_listContext::SYMBOL_COMMA() {
  return getTokens(SysMLv2Parser::SYMBOL_COMMA);
}

tree::TerminalNode* SysMLv2Parser::Positional_argument_listContext::SYMBOL_COMMA(size_t i) {
  return getToken(SysMLv2Parser::SYMBOL_COMMA, i);
}

std::vector<SysMLv2Parser::Owned_expressionsContext *> SysMLv2Parser::Positional_argument_listContext::owned_expressions() {
  return getRuleContexts<SysMLv2Parser::Owned_expressionsContext>();
}

SysMLv2Parser::Owned_expressionsContext* SysMLv2Parser::Positional_argument_listContext::owned_expressions(size_t i) {
  return getRuleContext<SysMLv2Parser::Owned_expressionsContext>(i);
}


size_t SysMLv2Parser::Positional_argument_listContext::getRuleIndex() const {
  return SysMLv2Parser::RulePositional_argument_list;
}

void SysMLv2Parser::Positional_argument_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPositional_argument_list(this);
}

void SysMLv2Parser::Positional_argument_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPositional_argument_list(this);
}

SysMLv2Parser::Positional_argument_listContext* SysMLv2Parser::positional_argument_list() {
  Positional_argument_listContext *_localctx = _tracker.createInstance<Positional_argument_listContext>(_ctx, getState());
  enterRule(_localctx, 966, SysMLv2Parser::RulePositional_argument_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4255);
    argument_member();
    setState(4260);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SysMLv2Parser::SYMBOL_COMMA) {
      setState(4256);
      match(SysMLv2Parser::SYMBOL_COMMA);
      setState(4257);
      owned_expressions();
      setState(4262);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Named_argument_listContext ------------------------------------------------------------------

SysMLv2Parser::Named_argument_listContext::Named_argument_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<SysMLv2Parser::Named_argument_memberContext *> SysMLv2Parser::Named_argument_listContext::named_argument_member() {
  return getRuleContexts<SysMLv2Parser::Named_argument_memberContext>();
}

SysMLv2Parser::Named_argument_memberContext* SysMLv2Parser::Named_argument_listContext::named_argument_member(size_t i) {
  return getRuleContext<SysMLv2Parser::Named_argument_memberContext>(i);
}

std::vector<tree::TerminalNode *> SysMLv2Parser::Named_argument_listContext::SYMBOL_COMMA() {
  return getTokens(SysMLv2Parser::SYMBOL_COMMA);
}

tree::TerminalNode* SysMLv2Parser::Named_argument_listContext::SYMBOL_COMMA(size_t i) {
  return getToken(SysMLv2Parser::SYMBOL_COMMA, i);
}


size_t SysMLv2Parser::Named_argument_listContext::getRuleIndex() const {
  return SysMLv2Parser::RuleNamed_argument_list;
}

void SysMLv2Parser::Named_argument_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamed_argument_list(this);
}

void SysMLv2Parser::Named_argument_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamed_argument_list(this);
}

SysMLv2Parser::Named_argument_listContext* SysMLv2Parser::named_argument_list() {
  Named_argument_listContext *_localctx = _tracker.createInstance<Named_argument_listContext>(_ctx, getState());
  enterRule(_localctx, 968, SysMLv2Parser::RuleNamed_argument_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4263);
    named_argument_member();
    setState(4268);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SysMLv2Parser::SYMBOL_COMMA) {
      setState(4264);
      match(SysMLv2Parser::SYMBOL_COMMA);
      setState(4265);
      named_argument_member();
      setState(4270);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Named_argument_memberContext ------------------------------------------------------------------

SysMLv2Parser::Named_argument_memberContext::Named_argument_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Named_argumentContext* SysMLv2Parser::Named_argument_memberContext::named_argument() {
  return getRuleContext<SysMLv2Parser::Named_argumentContext>(0);
}


size_t SysMLv2Parser::Named_argument_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleNamed_argument_member;
}

void SysMLv2Parser::Named_argument_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamed_argument_member(this);
}

void SysMLv2Parser::Named_argument_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamed_argument_member(this);
}

SysMLv2Parser::Named_argument_memberContext* SysMLv2Parser::named_argument_member() {
  Named_argument_memberContext *_localctx = _tracker.createInstance<Named_argument_memberContext>(_ctx, getState());
  enterRule(_localctx, 970, SysMLv2Parser::RuleNamed_argument_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4271);
    named_argument();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Named_argumentContext ------------------------------------------------------------------

SysMLv2Parser::Named_argumentContext::Named_argumentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Paramenter_redefinitionContext* SysMLv2Parser::Named_argumentContext::paramenter_redefinition() {
  return getRuleContext<SysMLv2Parser::Paramenter_redefinitionContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Named_argumentContext::SYMBOL_EQUALS() {
  return getToken(SysMLv2Parser::SYMBOL_EQUALS, 0);
}

SysMLv2Parser::Owned_expressionsContext* SysMLv2Parser::Named_argumentContext::owned_expressions() {
  return getRuleContext<SysMLv2Parser::Owned_expressionsContext>(0);
}


size_t SysMLv2Parser::Named_argumentContext::getRuleIndex() const {
  return SysMLv2Parser::RuleNamed_argument;
}

void SysMLv2Parser::Named_argumentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamed_argument(this);
}

void SysMLv2Parser::Named_argumentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamed_argument(this);
}

SysMLv2Parser::Named_argumentContext* SysMLv2Parser::named_argument() {
  Named_argumentContext *_localctx = _tracker.createInstance<Named_argumentContext>(_ctx, getState());
  enterRule(_localctx, 972, SysMLv2Parser::RuleNamed_argument);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4273);
    paramenter_redefinition();
    setState(4274);
    match(SysMLv2Parser::SYMBOL_EQUALS);
    setState(4275);
    owned_expressions();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Paramenter_redefinitionContext ------------------------------------------------------------------

SysMLv2Parser::Paramenter_redefinitionContext::Paramenter_redefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Qualified_nameContext* SysMLv2Parser::Paramenter_redefinitionContext::qualified_name() {
  return getRuleContext<SysMLv2Parser::Qualified_nameContext>(0);
}


size_t SysMLv2Parser::Paramenter_redefinitionContext::getRuleIndex() const {
  return SysMLv2Parser::RuleParamenter_redefinition;
}

void SysMLv2Parser::Paramenter_redefinitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParamenter_redefinition(this);
}

void SysMLv2Parser::Paramenter_redefinitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParamenter_redefinition(this);
}

SysMLv2Parser::Paramenter_redefinitionContext* SysMLv2Parser::paramenter_redefinition() {
  Paramenter_redefinitionContext *_localctx = _tracker.createInstance<Paramenter_redefinitionContext>(_ctx, getState());
  enterRule(_localctx, 974, SysMLv2Parser::RuleParamenter_redefinition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4277);
    qualified_name();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Body_expressionContext ------------------------------------------------------------------

SysMLv2Parser::Body_expressionContext::Body_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Expression_body_memberContext* SysMLv2Parser::Body_expressionContext::expression_body_member() {
  return getRuleContext<SysMLv2Parser::Expression_body_memberContext>(0);
}


size_t SysMLv2Parser::Body_expressionContext::getRuleIndex() const {
  return SysMLv2Parser::RuleBody_expression;
}

void SysMLv2Parser::Body_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBody_expression(this);
}

void SysMLv2Parser::Body_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBody_expression(this);
}

SysMLv2Parser::Body_expressionContext* SysMLv2Parser::body_expression() {
  Body_expressionContext *_localctx = _tracker.createInstance<Body_expressionContext>(_ctx, getState());
  enterRule(_localctx, 976, SysMLv2Parser::RuleBody_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4279);
    expression_body_member();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expression_body_memberContext ------------------------------------------------------------------

SysMLv2Parser::Expression_body_memberContext::Expression_body_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Expression_bodyContext* SysMLv2Parser::Expression_body_memberContext::expression_body() {
  return getRuleContext<SysMLv2Parser::Expression_bodyContext>(0);
}


size_t SysMLv2Parser::Expression_body_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleExpression_body_member;
}

void SysMLv2Parser::Expression_body_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpression_body_member(this);
}

void SysMLv2Parser::Expression_body_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpression_body_member(this);
}

SysMLv2Parser::Expression_body_memberContext* SysMLv2Parser::expression_body_member() {
  Expression_body_memberContext *_localctx = _tracker.createInstance<Expression_body_memberContext>(_ctx, getState());
  enterRule(_localctx, 978, SysMLv2Parser::RuleExpression_body_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4281);
    expression_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expression_bodyContext ------------------------------------------------------------------

SysMLv2Parser::Expression_bodyContext::Expression_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Expression_bodyContext::SYMBOL_ROUND_BRACKET_OPEN() {
  return getToken(SysMLv2Parser::SYMBOL_ROUND_BRACKET_OPEN, 0);
}

SysMLv2Parser::Function_body_partContext* SysMLv2Parser::Expression_bodyContext::function_body_part() {
  return getRuleContext<SysMLv2Parser::Function_body_partContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Expression_bodyContext::SYMBOL_ROUND_BRACKET_CLOSE() {
  return getToken(SysMLv2Parser::SYMBOL_ROUND_BRACKET_CLOSE, 0);
}


size_t SysMLv2Parser::Expression_bodyContext::getRuleIndex() const {
  return SysMLv2Parser::RuleExpression_body;
}

void SysMLv2Parser::Expression_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpression_body(this);
}

void SysMLv2Parser::Expression_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpression_body(this);
}

SysMLv2Parser::Expression_bodyContext* SysMLv2Parser::expression_body() {
  Expression_bodyContext *_localctx = _tracker.createInstance<Expression_bodyContext>(_ctx, getState());
  enterRule(_localctx, 980, SysMLv2Parser::RuleExpression_body);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4283);
    match(SysMLv2Parser::SYMBOL_ROUND_BRACKET_OPEN);
    setState(4284);
    function_body_part();
    setState(4285);
    match(SysMLv2Parser::SYMBOL_ROUND_BRACKET_CLOSE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Literal_expressionContext ------------------------------------------------------------------

SysMLv2Parser::Literal_expressionContext::Literal_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Literal_expressionContext::KEYWORD_TRUE() {
  return getToken(SysMLv2Parser::KEYWORD_TRUE, 0);
}

tree::TerminalNode* SysMLv2Parser::Literal_expressionContext::KEYWORD_FALSE() {
  return getToken(SysMLv2Parser::KEYWORD_FALSE, 0);
}

SysMLv2Parser::Literal_stringContext* SysMLv2Parser::Literal_expressionContext::literal_string() {
  return getRuleContext<SysMLv2Parser::Literal_stringContext>(0);
}

SysMLv2Parser::Literal_integerContext* SysMLv2Parser::Literal_expressionContext::literal_integer() {
  return getRuleContext<SysMLv2Parser::Literal_integerContext>(0);
}

SysMLv2Parser::Literal_realContext* SysMLv2Parser::Literal_expressionContext::literal_real() {
  return getRuleContext<SysMLv2Parser::Literal_realContext>(0);
}

SysMLv2Parser::Literal_infinityContext* SysMLv2Parser::Literal_expressionContext::literal_infinity() {
  return getRuleContext<SysMLv2Parser::Literal_infinityContext>(0);
}


size_t SysMLv2Parser::Literal_expressionContext::getRuleIndex() const {
  return SysMLv2Parser::RuleLiteral_expression;
}

void SysMLv2Parser::Literal_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLiteral_expression(this);
}

void SysMLv2Parser::Literal_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLiteral_expression(this);
}

SysMLv2Parser::Literal_expressionContext* SysMLv2Parser::literal_expression() {
  Literal_expressionContext *_localctx = _tracker.createInstance<Literal_expressionContext>(_ctx, getState());
  enterRule(_localctx, 982, SysMLv2Parser::RuleLiteral_expression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4293);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 433, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(4287);
      _la = _input->LA(1);
      if (!(_la == SysMLv2Parser::KEYWORD_FALSE

      || _la == SysMLv2Parser::KEYWORD_TRUE)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(4288);
      literal_string();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(4289);
      literal_integer();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(4290);
      literal_real();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(4291);
      literal_integer();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(4292);
      literal_infinity();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Literal_booleanContext ------------------------------------------------------------------

SysMLv2Parser::Literal_booleanContext::Literal_booleanContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Boolean_valueContext* SysMLv2Parser::Literal_booleanContext::boolean_value() {
  return getRuleContext<SysMLv2Parser::Boolean_valueContext>(0);
}


size_t SysMLv2Parser::Literal_booleanContext::getRuleIndex() const {
  return SysMLv2Parser::RuleLiteral_boolean;
}

void SysMLv2Parser::Literal_booleanContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLiteral_boolean(this);
}

void SysMLv2Parser::Literal_booleanContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLiteral_boolean(this);
}

SysMLv2Parser::Literal_booleanContext* SysMLv2Parser::literal_boolean() {
  Literal_booleanContext *_localctx = _tracker.createInstance<Literal_booleanContext>(_ctx, getState());
  enterRule(_localctx, 984, SysMLv2Parser::RuleLiteral_boolean);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4295);
    boolean_value();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Boolean_valueContext ------------------------------------------------------------------

SysMLv2Parser::Boolean_valueContext::Boolean_valueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Boolean_valueContext::KEYWORD_TRUE() {
  return getToken(SysMLv2Parser::KEYWORD_TRUE, 0);
}

tree::TerminalNode* SysMLv2Parser::Boolean_valueContext::KEYWORD_FALSE() {
  return getToken(SysMLv2Parser::KEYWORD_FALSE, 0);
}


size_t SysMLv2Parser::Boolean_valueContext::getRuleIndex() const {
  return SysMLv2Parser::RuleBoolean_value;
}

void SysMLv2Parser::Boolean_valueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBoolean_value(this);
}

void SysMLv2Parser::Boolean_valueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBoolean_value(this);
}

SysMLv2Parser::Boolean_valueContext* SysMLv2Parser::boolean_value() {
  Boolean_valueContext *_localctx = _tracker.createInstance<Boolean_valueContext>(_ctx, getState());
  enterRule(_localctx, 986, SysMLv2Parser::RuleBoolean_value);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4297);
    _la = _input->LA(1);
    if (!(_la == SysMLv2Parser::KEYWORD_FALSE

    || _la == SysMLv2Parser::KEYWORD_TRUE)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Literal_stringContext ------------------------------------------------------------------

SysMLv2Parser::Literal_stringContext::Literal_stringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Literal_stringContext::STRING_VALUE() {
  return getToken(SysMLv2Parser::STRING_VALUE, 0);
}


size_t SysMLv2Parser::Literal_stringContext::getRuleIndex() const {
  return SysMLv2Parser::RuleLiteral_string;
}

void SysMLv2Parser::Literal_stringContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLiteral_string(this);
}

void SysMLv2Parser::Literal_stringContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLiteral_string(this);
}

SysMLv2Parser::Literal_stringContext* SysMLv2Parser::literal_string() {
  Literal_stringContext *_localctx = _tracker.createInstance<Literal_stringContext>(_ctx, getState());
  enterRule(_localctx, 988, SysMLv2Parser::RuleLiteral_string);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4299);
    match(SysMLv2Parser::STRING_VALUE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Literal_integerContext ------------------------------------------------------------------

SysMLv2Parser::Literal_integerContext::Literal_integerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Literal_integerContext::DECIMAL_VALUE() {
  return getToken(SysMLv2Parser::DECIMAL_VALUE, 0);
}


size_t SysMLv2Parser::Literal_integerContext::getRuleIndex() const {
  return SysMLv2Parser::RuleLiteral_integer;
}

void SysMLv2Parser::Literal_integerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLiteral_integer(this);
}

void SysMLv2Parser::Literal_integerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLiteral_integer(this);
}

SysMLv2Parser::Literal_integerContext* SysMLv2Parser::literal_integer() {
  Literal_integerContext *_localctx = _tracker.createInstance<Literal_integerContext>(_ctx, getState());
  enterRule(_localctx, 990, SysMLv2Parser::RuleLiteral_integer);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4301);
    match(SysMLv2Parser::DECIMAL_VALUE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Literal_realContext ------------------------------------------------------------------

SysMLv2Parser::Literal_realContext::Literal_realContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Real_valueContext* SysMLv2Parser::Literal_realContext::real_value() {
  return getRuleContext<SysMLv2Parser::Real_valueContext>(0);
}


size_t SysMLv2Parser::Literal_realContext::getRuleIndex() const {
  return SysMLv2Parser::RuleLiteral_real;
}

void SysMLv2Parser::Literal_realContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLiteral_real(this);
}

void SysMLv2Parser::Literal_realContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLiteral_real(this);
}

SysMLv2Parser::Literal_realContext* SysMLv2Parser::literal_real() {
  Literal_realContext *_localctx = _tracker.createInstance<Literal_realContext>(_ctx, getState());
  enterRule(_localctx, 992, SysMLv2Parser::RuleLiteral_real);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4303);
    real_value();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Real_valueContext ------------------------------------------------------------------

SysMLv2Parser::Real_valueContext::Real_valueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Real_valueContext::SYMBOL_DOT() {
  return getToken(SysMLv2Parser::SYMBOL_DOT, 0);
}

std::vector<tree::TerminalNode *> SysMLv2Parser::Real_valueContext::DECIMAL_VALUE() {
  return getTokens(SysMLv2Parser::DECIMAL_VALUE);
}

tree::TerminalNode* SysMLv2Parser::Real_valueContext::DECIMAL_VALUE(size_t i) {
  return getToken(SysMLv2Parser::DECIMAL_VALUE, i);
}

tree::TerminalNode* SysMLv2Parser::Real_valueContext::EXPONENTIAL_VALUE() {
  return getToken(SysMLv2Parser::EXPONENTIAL_VALUE, 0);
}


size_t SysMLv2Parser::Real_valueContext::getRuleIndex() const {
  return SysMLv2Parser::RuleReal_value;
}

void SysMLv2Parser::Real_valueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReal_value(this);
}

void SysMLv2Parser::Real_valueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReal_value(this);
}

SysMLv2Parser::Real_valueContext* SysMLv2Parser::real_value() {
  Real_valueContext *_localctx = _tracker.createInstance<Real_valueContext>(_ctx, getState());
  enterRule(_localctx, 994, SysMLv2Parser::RuleReal_value);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4311);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SysMLv2Parser::SYMBOL_DOT:
      case SysMLv2Parser::DECIMAL_VALUE: {
        enterOuterAlt(_localctx, 1);
        setState(4306);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == SysMLv2Parser::DECIMAL_VALUE) {
          setState(4305);
          match(SysMLv2Parser::DECIMAL_VALUE);
        }
        setState(4308);
        match(SysMLv2Parser::SYMBOL_DOT);
        setState(4309);
        _la = _input->LA(1);
        if (!(_la == SysMLv2Parser::DECIMAL_VALUE

        || _la == SysMLv2Parser::EXPONENTIAL_VALUE)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case SysMLv2Parser::EXPONENTIAL_VALUE: {
        enterOuterAlt(_localctx, 2);
        setState(4310);
        match(SysMLv2Parser::EXPONENTIAL_VALUE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Literal_infinityContext ------------------------------------------------------------------

SysMLv2Parser::Literal_infinityContext::Literal_infinityContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Literal_infinityContext::SYMBOL_STAR() {
  return getToken(SysMLv2Parser::SYMBOL_STAR, 0);
}


size_t SysMLv2Parser::Literal_infinityContext::getRuleIndex() const {
  return SysMLv2Parser::RuleLiteral_infinity;
}

void SysMLv2Parser::Literal_infinityContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLiteral_infinity(this);
}

void SysMLv2Parser::Literal_infinityContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLiteral_infinity(this);
}

SysMLv2Parser::Literal_infinityContext* SysMLv2Parser::literal_infinity() {
  Literal_infinityContext *_localctx = _tracker.createInstance<Literal_infinityContext>(_ctx, getState());
  enterRule(_localctx, 996, SysMLv2Parser::RuleLiteral_infinity);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4313);
    match(SysMLv2Parser::SYMBOL_STAR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InteractionContext ------------------------------------------------------------------

SysMLv2Parser::InteractionContext::InteractionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Type_prefixContext* SysMLv2Parser::InteractionContext::type_prefix() {
  return getRuleContext<SysMLv2Parser::Type_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::InteractionContext::KEYWORD_INTERACTION() {
  return getToken(SysMLv2Parser::KEYWORD_INTERACTION, 0);
}

SysMLv2Parser::Classifier_declarationContext* SysMLv2Parser::InteractionContext::classifier_declaration() {
  return getRuleContext<SysMLv2Parser::Classifier_declarationContext>(0);
}

SysMLv2Parser::Type_bodyContext* SysMLv2Parser::InteractionContext::type_body() {
  return getRuleContext<SysMLv2Parser::Type_bodyContext>(0);
}


size_t SysMLv2Parser::InteractionContext::getRuleIndex() const {
  return SysMLv2Parser::RuleInteraction;
}

void SysMLv2Parser::InteractionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInteraction(this);
}

void SysMLv2Parser::InteractionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInteraction(this);
}

SysMLv2Parser::InteractionContext* SysMLv2Parser::interaction() {
  InteractionContext *_localctx = _tracker.createInstance<InteractionContext>(_ctx, getState());
  enterRule(_localctx, 998, SysMLv2Parser::RuleInteraction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4315);
    type_prefix();
    setState(4316);
    match(SysMLv2Parser::KEYWORD_INTERACTION);
    setState(4317);
    classifier_declaration();
    setState(4318);
    type_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Item_flowContext ------------------------------------------------------------------

SysMLv2Parser::Item_flowContext::Item_flowContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Feature_prefixContext* SysMLv2Parser::Item_flowContext::feature_prefix() {
  return getRuleContext<SysMLv2Parser::Feature_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Item_flowContext::KEYWORD_FLOW() {
  return getToken(SysMLv2Parser::KEYWORD_FLOW, 0);
}

SysMLv2Parser::Item_flow_declarationContext* SysMLv2Parser::Item_flowContext::item_flow_declaration() {
  return getRuleContext<SysMLv2Parser::Item_flow_declarationContext>(0);
}

SysMLv2Parser::Type_bodyContext* SysMLv2Parser::Item_flowContext::type_body() {
  return getRuleContext<SysMLv2Parser::Type_bodyContext>(0);
}


size_t SysMLv2Parser::Item_flowContext::getRuleIndex() const {
  return SysMLv2Parser::RuleItem_flow;
}

void SysMLv2Parser::Item_flowContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterItem_flow(this);
}

void SysMLv2Parser::Item_flowContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitItem_flow(this);
}

SysMLv2Parser::Item_flowContext* SysMLv2Parser::item_flow() {
  Item_flowContext *_localctx = _tracker.createInstance<Item_flowContext>(_ctx, getState());
  enterRule(_localctx, 1000, SysMLv2Parser::RuleItem_flow);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4320);
    feature_prefix();
    setState(4321);
    match(SysMLv2Parser::KEYWORD_FLOW);
    setState(4322);
    item_flow_declaration();
    setState(4323);
    type_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Succession_item_flowContext ------------------------------------------------------------------

SysMLv2Parser::Succession_item_flowContext::Succession_item_flowContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Feature_prefixContext* SysMLv2Parser::Succession_item_flowContext::feature_prefix() {
  return getRuleContext<SysMLv2Parser::Feature_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Succession_item_flowContext::KEYWORD_SUCCSESSION() {
  return getToken(SysMLv2Parser::KEYWORD_SUCCSESSION, 0);
}

tree::TerminalNode* SysMLv2Parser::Succession_item_flowContext::KEYWORD_FLOW() {
  return getToken(SysMLv2Parser::KEYWORD_FLOW, 0);
}

SysMLv2Parser::Item_flow_declarationContext* SysMLv2Parser::Succession_item_flowContext::item_flow_declaration() {
  return getRuleContext<SysMLv2Parser::Item_flow_declarationContext>(0);
}

SysMLv2Parser::Type_bodyContext* SysMLv2Parser::Succession_item_flowContext::type_body() {
  return getRuleContext<SysMLv2Parser::Type_bodyContext>(0);
}


size_t SysMLv2Parser::Succession_item_flowContext::getRuleIndex() const {
  return SysMLv2Parser::RuleSuccession_item_flow;
}

void SysMLv2Parser::Succession_item_flowContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSuccession_item_flow(this);
}

void SysMLv2Parser::Succession_item_flowContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSuccession_item_flow(this);
}

SysMLv2Parser::Succession_item_flowContext* SysMLv2Parser::succession_item_flow() {
  Succession_item_flowContext *_localctx = _tracker.createInstance<Succession_item_flowContext>(_ctx, getState());
  enterRule(_localctx, 1002, SysMLv2Parser::RuleSuccession_item_flow);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4325);
    feature_prefix();
    setState(4326);
    match(SysMLv2Parser::KEYWORD_SUCCSESSION);
    setState(4327);
    match(SysMLv2Parser::KEYWORD_FLOW);
    setState(4328);
    item_flow_declaration();
    setState(4329);
    type_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Item_flow_declarationContext ------------------------------------------------------------------

SysMLv2Parser::Item_flow_declarationContext::Item_flow_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Feature_declarationContext* SysMLv2Parser::Item_flow_declarationContext::feature_declaration() {
  return getRuleContext<SysMLv2Parser::Feature_declarationContext>(0);
}

std::vector<SysMLv2Parser::Item_flow_end_memberContext *> SysMLv2Parser::Item_flow_declarationContext::item_flow_end_member() {
  return getRuleContexts<SysMLv2Parser::Item_flow_end_memberContext>();
}

SysMLv2Parser::Item_flow_end_memberContext* SysMLv2Parser::Item_flow_declarationContext::item_flow_end_member(size_t i) {
  return getRuleContext<SysMLv2Parser::Item_flow_end_memberContext>(i);
}

tree::TerminalNode* SysMLv2Parser::Item_flow_declarationContext::KEYWORD_TO() {
  return getToken(SysMLv2Parser::KEYWORD_TO, 0);
}

SysMLv2Parser::Value_partContext* SysMLv2Parser::Item_flow_declarationContext::value_part() {
  return getRuleContext<SysMLv2Parser::Value_partContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Item_flow_declarationContext::KEYWORD_OF() {
  return getToken(SysMLv2Parser::KEYWORD_OF, 0);
}

SysMLv2Parser::Item_feature_memberContext* SysMLv2Parser::Item_flow_declarationContext::item_feature_member() {
  return getRuleContext<SysMLv2Parser::Item_feature_memberContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Item_flow_declarationContext::KEYWORD_FROM() {
  return getToken(SysMLv2Parser::KEYWORD_FROM, 0);
}

tree::TerminalNode* SysMLv2Parser::Item_flow_declarationContext::KEYWORD_ALL() {
  return getToken(SysMLv2Parser::KEYWORD_ALL, 0);
}


size_t SysMLv2Parser::Item_flow_declarationContext::getRuleIndex() const {
  return SysMLv2Parser::RuleItem_flow_declaration;
}

void SysMLv2Parser::Item_flow_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterItem_flow_declaration(this);
}

void SysMLv2Parser::Item_flow_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitItem_flow_declaration(this);
}

SysMLv2Parser::Item_flow_declarationContext* SysMLv2Parser::item_flow_declaration() {
  Item_flow_declarationContext *_localctx = _tracker.createInstance<Item_flow_declarationContext>(_ctx, getState());
  enterRule(_localctx, 1004, SysMLv2Parser::RuleItem_flow_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4353);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 440, _ctx)) {
    case 1: {
      setState(4331);
      feature_declaration();
      setState(4333);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == SysMLv2Parser::KEYWORD_DEFAULT || _la == SysMLv2Parser::SYMBOL_DEF_ASSIGN

      || _la == SysMLv2Parser::SYMBOL_EQUALS) {
        setState(4332);
        value_part();
      }
      setState(4337);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == SysMLv2Parser::KEYWORD_OF) {
        setState(4335);
        match(SysMLv2Parser::KEYWORD_OF);
        setState(4336);
        item_feature_member();
      }
      setState(4344);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == SysMLv2Parser::KEYWORD_FROM) {
        setState(4339);
        match(SysMLv2Parser::KEYWORD_FROM);
        setState(4340);
        item_flow_end_member();
        setState(4341);
        match(SysMLv2Parser::KEYWORD_TO);
        setState(4342);
        item_flow_end_member();
      }
      break;
    }

    case 2: {
      setState(4347);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == SysMLv2Parser::KEYWORD_ALL) {
        setState(4346);
        match(SysMLv2Parser::KEYWORD_ALL);
      }
      setState(4349);
      item_flow_end_member();
      setState(4350);
      match(SysMLv2Parser::KEYWORD_TO);
      setState(4351);
      item_flow_end_member();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Item_feature_memberContext ------------------------------------------------------------------

SysMLv2Parser::Item_feature_memberContext::Item_feature_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Item_featureContext* SysMLv2Parser::Item_feature_memberContext::item_feature() {
  return getRuleContext<SysMLv2Parser::Item_featureContext>(0);
}


size_t SysMLv2Parser::Item_feature_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleItem_feature_member;
}

void SysMLv2Parser::Item_feature_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterItem_feature_member(this);
}

void SysMLv2Parser::Item_feature_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitItem_feature_member(this);
}

SysMLv2Parser::Item_feature_memberContext* SysMLv2Parser::item_feature_member() {
  Item_feature_memberContext *_localctx = _tracker.createInstance<Item_feature_memberContext>(_ctx, getState());
  enterRule(_localctx, 1006, SysMLv2Parser::RuleItem_feature_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4355);
    item_feature();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Item_featureContext ------------------------------------------------------------------

SysMLv2Parser::Item_featureContext::Item_featureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::IdentificationContext* SysMLv2Parser::Item_featureContext::identification() {
  return getRuleContext<SysMLv2Parser::IdentificationContext>(0);
}

SysMLv2Parser::Item_feature_specilization_partContext* SysMLv2Parser::Item_featureContext::item_feature_specilization_part() {
  return getRuleContext<SysMLv2Parser::Item_feature_specilization_partContext>(0);
}

SysMLv2Parser::Value_partContext* SysMLv2Parser::Item_featureContext::value_part() {
  return getRuleContext<SysMLv2Parser::Value_partContext>(0);
}

SysMLv2Parser::Owned_feature_typingContext* SysMLv2Parser::Item_featureContext::owned_feature_typing() {
  return getRuleContext<SysMLv2Parser::Owned_feature_typingContext>(0);
}

SysMLv2Parser::Multiplicity_boundsContext* SysMLv2Parser::Item_featureContext::multiplicity_bounds() {
  return getRuleContext<SysMLv2Parser::Multiplicity_boundsContext>(0);
}


size_t SysMLv2Parser::Item_featureContext::getRuleIndex() const {
  return SysMLv2Parser::RuleItem_feature;
}

void SysMLv2Parser::Item_featureContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterItem_feature(this);
}

void SysMLv2Parser::Item_featureContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitItem_feature(this);
}

SysMLv2Parser::Item_featureContext* SysMLv2Parser::item_feature() {
  Item_featureContext *_localctx = _tracker.createInstance<Item_featureContext>(_ctx, getState());
  enterRule(_localctx, 1008, SysMLv2Parser::RuleItem_feature);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4370);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 444, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(4357);
      identification();
      setState(4358);
      item_feature_specilization_part();
      setState(4360);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == SysMLv2Parser::KEYWORD_DEFAULT || _la == SysMLv2Parser::SYMBOL_DEF_ASSIGN

      || _la == SysMLv2Parser::SYMBOL_EQUALS) {
        setState(4359);
        value_part();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(4362);
      owned_feature_typing();
      setState(4364);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == SysMLv2Parser::SYMBOL_SQUARE_BRACKET_OPEN) {
        setState(4363);
        multiplicity_bounds();
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(4366);
      multiplicity_bounds();
      setState(4368);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == SysMLv2Parser::NAME) {
        setState(4367);
        owned_feature_typing();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Item_feature_specilization_partContext ------------------------------------------------------------------

SysMLv2Parser::Item_feature_specilization_partContext::Item_feature_specilization_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Multiplicity_partContext* SysMLv2Parser::Item_feature_specilization_partContext::multiplicity_part() {
  return getRuleContext<SysMLv2Parser::Multiplicity_partContext>(0);
}

std::vector<SysMLv2Parser::Feature_specilizationContext *> SysMLv2Parser::Item_feature_specilization_partContext::feature_specilization() {
  return getRuleContexts<SysMLv2Parser::Feature_specilizationContext>();
}

SysMLv2Parser::Feature_specilizationContext* SysMLv2Parser::Item_feature_specilization_partContext::feature_specilization(size_t i) {
  return getRuleContext<SysMLv2Parser::Feature_specilizationContext>(i);
}


size_t SysMLv2Parser::Item_feature_specilization_partContext::getRuleIndex() const {
  return SysMLv2Parser::RuleItem_feature_specilization_part;
}

void SysMLv2Parser::Item_feature_specilization_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterItem_feature_specilization_part(this);
}

void SysMLv2Parser::Item_feature_specilization_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitItem_feature_specilization_part(this);
}

SysMLv2Parser::Item_feature_specilization_partContext* SysMLv2Parser::item_feature_specilization_part() {
  Item_feature_specilization_partContext *_localctx = _tracker.createInstance<Item_feature_specilization_partContext>(_ctx, getState());
  enterRule(_localctx, 1010, SysMLv2Parser::RuleItem_feature_specilization_part);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4375);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 83) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 83)) & 3377699720527901) != 0) || _la == SysMLv2Parser::KEYWORD_OUT) {
      setState(4372);
      feature_specilization();
      setState(4377);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }

    setState(4378);
    multiplicity_part();
    setState(4380);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 83) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 83)) & 3377699720527901) != 0) || _la == SysMLv2Parser::KEYWORD_OUT) {
      setState(4379);
      feature_specilization();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Item_flow_end_memberContext ------------------------------------------------------------------

SysMLv2Parser::Item_flow_end_memberContext::Item_flow_end_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Item_flow_endContext* SysMLv2Parser::Item_flow_end_memberContext::item_flow_end() {
  return getRuleContext<SysMLv2Parser::Item_flow_endContext>(0);
}


size_t SysMLv2Parser::Item_flow_end_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleItem_flow_end_member;
}

void SysMLv2Parser::Item_flow_end_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterItem_flow_end_member(this);
}

void SysMLv2Parser::Item_flow_end_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitItem_flow_end_member(this);
}

SysMLv2Parser::Item_flow_end_memberContext* SysMLv2Parser::item_flow_end_member() {
  Item_flow_end_memberContext *_localctx = _tracker.createInstance<Item_flow_end_memberContext>(_ctx, getState());
  enterRule(_localctx, 1012, SysMLv2Parser::RuleItem_flow_end_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4382);
    item_flow_end();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Item_flow_endContext ------------------------------------------------------------------

SysMLv2Parser::Item_flow_endContext::Item_flow_endContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Item_flow_feature_memberContext* SysMLv2Parser::Item_flow_endContext::item_flow_feature_member() {
  return getRuleContext<SysMLv2Parser::Item_flow_feature_memberContext>(0);
}

SysMLv2Parser::Owned_reference_subsettingContext* SysMLv2Parser::Item_flow_endContext::owned_reference_subsetting() {
  return getRuleContext<SysMLv2Parser::Owned_reference_subsettingContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Item_flow_endContext::SYMBOL_DOT() {
  return getToken(SysMLv2Parser::SYMBOL_DOT, 0);
}


size_t SysMLv2Parser::Item_flow_endContext::getRuleIndex() const {
  return SysMLv2Parser::RuleItem_flow_end;
}

void SysMLv2Parser::Item_flow_endContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterItem_flow_end(this);
}

void SysMLv2Parser::Item_flow_endContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitItem_flow_end(this);
}

SysMLv2Parser::Item_flow_endContext* SysMLv2Parser::item_flow_end() {
  Item_flow_endContext *_localctx = _tracker.createInstance<Item_flow_endContext>(_ctx, getState());
  enterRule(_localctx, 1014, SysMLv2Parser::RuleItem_flow_end);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4387);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 447, _ctx)) {
    case 1: {
      setState(4384);
      owned_reference_subsetting();
      setState(4385);
      match(SysMLv2Parser::SYMBOL_DOT);
      break;
    }

    default:
      break;
    }
    setState(4389);
    item_flow_feature_member();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Item_flow_feature_memberContext ------------------------------------------------------------------

SysMLv2Parser::Item_flow_feature_memberContext::Item_flow_feature_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Item_flow_featureContext* SysMLv2Parser::Item_flow_feature_memberContext::item_flow_feature() {
  return getRuleContext<SysMLv2Parser::Item_flow_featureContext>(0);
}


size_t SysMLv2Parser::Item_flow_feature_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleItem_flow_feature_member;
}

void SysMLv2Parser::Item_flow_feature_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterItem_flow_feature_member(this);
}

void SysMLv2Parser::Item_flow_feature_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitItem_flow_feature_member(this);
}

SysMLv2Parser::Item_flow_feature_memberContext* SysMLv2Parser::item_flow_feature_member() {
  Item_flow_feature_memberContext *_localctx = _tracker.createInstance<Item_flow_feature_memberContext>(_ctx, getState());
  enterRule(_localctx, 1016, SysMLv2Parser::RuleItem_flow_feature_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4391);
    item_flow_feature();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Item_flow_featureContext ------------------------------------------------------------------

SysMLv2Parser::Item_flow_featureContext::Item_flow_featureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Item_flow_redefinitionContext* SysMLv2Parser::Item_flow_featureContext::item_flow_redefinition() {
  return getRuleContext<SysMLv2Parser::Item_flow_redefinitionContext>(0);
}


size_t SysMLv2Parser::Item_flow_featureContext::getRuleIndex() const {
  return SysMLv2Parser::RuleItem_flow_feature;
}

void SysMLv2Parser::Item_flow_featureContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterItem_flow_feature(this);
}

void SysMLv2Parser::Item_flow_featureContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitItem_flow_feature(this);
}

SysMLv2Parser::Item_flow_featureContext* SysMLv2Parser::item_flow_feature() {
  Item_flow_featureContext *_localctx = _tracker.createInstance<Item_flow_featureContext>(_ctx, getState());
  enterRule(_localctx, 1018, SysMLv2Parser::RuleItem_flow_feature);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4393);
    item_flow_redefinition();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Item_flow_redefinitionContext ------------------------------------------------------------------

SysMLv2Parser::Item_flow_redefinitionContext::Item_flow_redefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Qualified_nameContext* SysMLv2Parser::Item_flow_redefinitionContext::qualified_name() {
  return getRuleContext<SysMLv2Parser::Qualified_nameContext>(0);
}


size_t SysMLv2Parser::Item_flow_redefinitionContext::getRuleIndex() const {
  return SysMLv2Parser::RuleItem_flow_redefinition;
}

void SysMLv2Parser::Item_flow_redefinitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterItem_flow_redefinition(this);
}

void SysMLv2Parser::Item_flow_redefinitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitItem_flow_redefinition(this);
}

SysMLv2Parser::Item_flow_redefinitionContext* SysMLv2Parser::item_flow_redefinition() {
  Item_flow_redefinitionContext *_localctx = _tracker.createInstance<Item_flow_redefinitionContext>(_ctx, getState());
  enterRule(_localctx, 1020, SysMLv2Parser::RuleItem_flow_redefinition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4395);
    qualified_name();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Value_partContext ------------------------------------------------------------------

SysMLv2Parser::Value_partContext::Value_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Feature_valueContext* SysMLv2Parser::Value_partContext::feature_value() {
  return getRuleContext<SysMLv2Parser::Feature_valueContext>(0);
}


size_t SysMLv2Parser::Value_partContext::getRuleIndex() const {
  return SysMLv2Parser::RuleValue_part;
}

void SysMLv2Parser::Value_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterValue_part(this);
}

void SysMLv2Parser::Value_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitValue_part(this);
}

SysMLv2Parser::Value_partContext* SysMLv2Parser::value_part() {
  Value_partContext *_localctx = _tracker.createInstance<Value_partContext>(_ctx, getState());
  enterRule(_localctx, 1022, SysMLv2Parser::RuleValue_part);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4397);
    feature_value();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Feature_valueContext ------------------------------------------------------------------

SysMLv2Parser::Feature_valueContext::Feature_valueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Owned_expressionContext* SysMLv2Parser::Feature_valueContext::owned_expression() {
  return getRuleContext<SysMLv2Parser::Owned_expressionContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Feature_valueContext::SYMBOL_EQUALS() {
  return getToken(SysMLv2Parser::SYMBOL_EQUALS, 0);
}

tree::TerminalNode* SysMLv2Parser::Feature_valueContext::SYMBOL_DEF_ASSIGN() {
  return getToken(SysMLv2Parser::SYMBOL_DEF_ASSIGN, 0);
}

tree::TerminalNode* SysMLv2Parser::Feature_valueContext::KEYWORD_DEFAULT() {
  return getToken(SysMLv2Parser::KEYWORD_DEFAULT, 0);
}


size_t SysMLv2Parser::Feature_valueContext::getRuleIndex() const {
  return SysMLv2Parser::RuleFeature_value;
}

void SysMLv2Parser::Feature_valueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFeature_value(this);
}

void SysMLv2Parser::Feature_valueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFeature_value(this);
}

SysMLv2Parser::Feature_valueContext* SysMLv2Parser::feature_value() {
  Feature_valueContext *_localctx = _tracker.createInstance<Feature_valueContext>(_ctx, getState());
  enterRule(_localctx, 1024, SysMLv2Parser::RuleFeature_value);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4405);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SysMLv2Parser::SYMBOL_EQUALS: {
        setState(4399);
        match(SysMLv2Parser::SYMBOL_EQUALS);
        break;
      }

      case SysMLv2Parser::SYMBOL_DEF_ASSIGN: {
        setState(4400);
        match(SysMLv2Parser::SYMBOL_DEF_ASSIGN);
        break;
      }

      case SysMLv2Parser::KEYWORD_DEFAULT: {
        setState(4401);
        match(SysMLv2Parser::KEYWORD_DEFAULT);
        setState(4403);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == SysMLv2Parser::SYMBOL_DEF_ASSIGN

        || _la == SysMLv2Parser::SYMBOL_EQUALS) {
          setState(4402);
          _la = _input->LA(1);
          if (!(_la == SysMLv2Parser::SYMBOL_DEF_ASSIGN

          || _la == SysMLv2Parser::SYMBOL_EQUALS)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(4407);
    owned_expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Feature_assignmentContext ------------------------------------------------------------------

SysMLv2Parser::Feature_assignmentContext::Feature_assignmentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Feature_assignmentContext::SYMBOL_ASSIGN() {
  return getToken(SysMLv2Parser::SYMBOL_ASSIGN, 0);
}

SysMLv2Parser::Owned_expressionContext* SysMLv2Parser::Feature_assignmentContext::owned_expression() {
  return getRuleContext<SysMLv2Parser::Owned_expressionContext>(0);
}


size_t SysMLv2Parser::Feature_assignmentContext::getRuleIndex() const {
  return SysMLv2Parser::RuleFeature_assignment;
}

void SysMLv2Parser::Feature_assignmentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFeature_assignment(this);
}

void SysMLv2Parser::Feature_assignmentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFeature_assignment(this);
}

SysMLv2Parser::Feature_assignmentContext* SysMLv2Parser::feature_assignment() {
  Feature_assignmentContext *_localctx = _tracker.createInstance<Feature_assignmentContext>(_ctx, getState());
  enterRule(_localctx, 1026, SysMLv2Parser::RuleFeature_assignment);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4409);
    match(SysMLv2Parser::SYMBOL_ASSIGN);
    setState(4410);
    owned_expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MultiplicityContext ------------------------------------------------------------------

SysMLv2Parser::MultiplicityContext::MultiplicityContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Multiplicity_subsetContext* SysMLv2Parser::MultiplicityContext::multiplicity_subset() {
  return getRuleContext<SysMLv2Parser::Multiplicity_subsetContext>(0);
}

SysMLv2Parser::Multiplicity_rangeContext* SysMLv2Parser::MultiplicityContext::multiplicity_range() {
  return getRuleContext<SysMLv2Parser::Multiplicity_rangeContext>(0);
}


size_t SysMLv2Parser::MultiplicityContext::getRuleIndex() const {
  return SysMLv2Parser::RuleMultiplicity;
}

void SysMLv2Parser::MultiplicityContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMultiplicity(this);
}

void SysMLv2Parser::MultiplicityContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMultiplicity(this);
}

SysMLv2Parser::MultiplicityContext* SysMLv2Parser::multiplicity() {
  MultiplicityContext *_localctx = _tracker.createInstance<MultiplicityContext>(_ctx, getState());
  enterRule(_localctx, 1028, SysMLv2Parser::RuleMultiplicity);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4414);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SysMLv2Parser::KEYWORD_MULTIPLICITY: {
        enterOuterAlt(_localctx, 1);
        setState(4412);
        multiplicity_subset();
        break;
      }

      case SysMLv2Parser::SYMBOL_SQUARE_BRACKET_OPEN: {
        enterOuterAlt(_localctx, 2);
        setState(4413);
        multiplicity_range();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Multiplicity_subsetContext ------------------------------------------------------------------

SysMLv2Parser::Multiplicity_subsetContext::Multiplicity_subsetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Multiplicity_subsetContext::KEYWORD_MULTIPLICITY() {
  return getToken(SysMLv2Parser::KEYWORD_MULTIPLICITY, 0);
}

SysMLv2Parser::IdentificationContext* SysMLv2Parser::Multiplicity_subsetContext::identification() {
  return getRuleContext<SysMLv2Parser::IdentificationContext>(0);
}

SysMLv2Parser::SubsetsContext* SysMLv2Parser::Multiplicity_subsetContext::subsets() {
  return getRuleContext<SysMLv2Parser::SubsetsContext>(0);
}

SysMLv2Parser::Type_bodyContext* SysMLv2Parser::Multiplicity_subsetContext::type_body() {
  return getRuleContext<SysMLv2Parser::Type_bodyContext>(0);
}


size_t SysMLv2Parser::Multiplicity_subsetContext::getRuleIndex() const {
  return SysMLv2Parser::RuleMultiplicity_subset;
}

void SysMLv2Parser::Multiplicity_subsetContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMultiplicity_subset(this);
}

void SysMLv2Parser::Multiplicity_subsetContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMultiplicity_subset(this);
}

SysMLv2Parser::Multiplicity_subsetContext* SysMLv2Parser::multiplicity_subset() {
  Multiplicity_subsetContext *_localctx = _tracker.createInstance<Multiplicity_subsetContext>(_ctx, getState());
  enterRule(_localctx, 1030, SysMLv2Parser::RuleMultiplicity_subset);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4416);
    match(SysMLv2Parser::KEYWORD_MULTIPLICITY);
    setState(4417);
    identification();
    setState(4418);
    subsets();
    setState(4419);
    type_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Owned_multiplicity_rangeContext ------------------------------------------------------------------

SysMLv2Parser::Owned_multiplicity_rangeContext::Owned_multiplicity_rangeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Multiplicity_boundsContext* SysMLv2Parser::Owned_multiplicity_rangeContext::multiplicity_bounds() {
  return getRuleContext<SysMLv2Parser::Multiplicity_boundsContext>(0);
}


size_t SysMLv2Parser::Owned_multiplicity_rangeContext::getRuleIndex() const {
  return SysMLv2Parser::RuleOwned_multiplicity_range;
}

void SysMLv2Parser::Owned_multiplicity_rangeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOwned_multiplicity_range(this);
}

void SysMLv2Parser::Owned_multiplicity_rangeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOwned_multiplicity_range(this);
}

SysMLv2Parser::Owned_multiplicity_rangeContext* SysMLv2Parser::owned_multiplicity_range() {
  Owned_multiplicity_rangeContext *_localctx = _tracker.createInstance<Owned_multiplicity_rangeContext>(_ctx, getState());
  enterRule(_localctx, 1032, SysMLv2Parser::RuleOwned_multiplicity_range);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4421);
    multiplicity_bounds();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Multiplicity_boundsContext ------------------------------------------------------------------

SysMLv2Parser::Multiplicity_boundsContext::Multiplicity_boundsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Multiplicity_boundsContext::SYMBOL_SQUARE_BRACKET_OPEN() {
  return getToken(SysMLv2Parser::SYMBOL_SQUARE_BRACKET_OPEN, 0);
}

std::vector<SysMLv2Parser::Multiplicity_expression_memberContext *> SysMLv2Parser::Multiplicity_boundsContext::multiplicity_expression_member() {
  return getRuleContexts<SysMLv2Parser::Multiplicity_expression_memberContext>();
}

SysMLv2Parser::Multiplicity_expression_memberContext* SysMLv2Parser::Multiplicity_boundsContext::multiplicity_expression_member(size_t i) {
  return getRuleContext<SysMLv2Parser::Multiplicity_expression_memberContext>(i);
}

tree::TerminalNode* SysMLv2Parser::Multiplicity_boundsContext::SYMBOL_SQUARE_BRACKET_CLOSE() {
  return getToken(SysMLv2Parser::SYMBOL_SQUARE_BRACKET_CLOSE, 0);
}

tree::TerminalNode* SysMLv2Parser::Multiplicity_boundsContext::SYMBOL_DDOT() {
  return getToken(SysMLv2Parser::SYMBOL_DDOT, 0);
}


size_t SysMLv2Parser::Multiplicity_boundsContext::getRuleIndex() const {
  return SysMLv2Parser::RuleMultiplicity_bounds;
}

void SysMLv2Parser::Multiplicity_boundsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMultiplicity_bounds(this);
}

void SysMLv2Parser::Multiplicity_boundsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMultiplicity_bounds(this);
}

SysMLv2Parser::Multiplicity_boundsContext* SysMLv2Parser::multiplicity_bounds() {
  Multiplicity_boundsContext *_localctx = _tracker.createInstance<Multiplicity_boundsContext>(_ctx, getState());
  enterRule(_localctx, 1034, SysMLv2Parser::RuleMultiplicity_bounds);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4423);
    match(SysMLv2Parser::SYMBOL_SQUARE_BRACKET_OPEN);
    setState(4427);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 451, _ctx)) {
    case 1: {
      setState(4424);
      multiplicity_expression_member();
      setState(4425);
      match(SysMLv2Parser::SYMBOL_DDOT);
      break;
    }

    default:
      break;
    }
    setState(4429);
    multiplicity_expression_member();
    setState(4430);
    match(SysMLv2Parser::SYMBOL_SQUARE_BRACKET_CLOSE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Multiplicity_expression_memberContext ------------------------------------------------------------------

SysMLv2Parser::Multiplicity_expression_memberContext::Multiplicity_expression_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Internal_multiplicity_expression_memberContext* SysMLv2Parser::Multiplicity_expression_memberContext::internal_multiplicity_expression_member() {
  return getRuleContext<SysMLv2Parser::Internal_multiplicity_expression_memberContext>(0);
}


size_t SysMLv2Parser::Multiplicity_expression_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleMultiplicity_expression_member;
}

void SysMLv2Parser::Multiplicity_expression_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMultiplicity_expression_member(this);
}

void SysMLv2Parser::Multiplicity_expression_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMultiplicity_expression_member(this);
}

SysMLv2Parser::Multiplicity_expression_memberContext* SysMLv2Parser::multiplicity_expression_member() {
  Multiplicity_expression_memberContext *_localctx = _tracker.createInstance<Multiplicity_expression_memberContext>(_ctx, getState());
  enterRule(_localctx, 1036, SysMLv2Parser::RuleMultiplicity_expression_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4432);
    internal_multiplicity_expression_member();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Internal_multiplicity_expression_memberContext ------------------------------------------------------------------

SysMLv2Parser::Internal_multiplicity_expression_memberContext::Internal_multiplicity_expression_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Literal_expressionContext* SysMLv2Parser::Internal_multiplicity_expression_memberContext::literal_expression() {
  return getRuleContext<SysMLv2Parser::Literal_expressionContext>(0);
}

SysMLv2Parser::Feature_reference_expressionContext* SysMLv2Parser::Internal_multiplicity_expression_memberContext::feature_reference_expression() {
  return getRuleContext<SysMLv2Parser::Feature_reference_expressionContext>(0);
}


size_t SysMLv2Parser::Internal_multiplicity_expression_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleInternal_multiplicity_expression_member;
}

void SysMLv2Parser::Internal_multiplicity_expression_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInternal_multiplicity_expression_member(this);
}

void SysMLv2Parser::Internal_multiplicity_expression_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInternal_multiplicity_expression_member(this);
}

SysMLv2Parser::Internal_multiplicity_expression_memberContext* SysMLv2Parser::internal_multiplicity_expression_member() {
  Internal_multiplicity_expression_memberContext *_localctx = _tracker.createInstance<Internal_multiplicity_expression_memberContext>(_ctx, getState());
  enterRule(_localctx, 1038, SysMLv2Parser::RuleInternal_multiplicity_expression_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4436);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SysMLv2Parser::KEYWORD_FALSE:
      case SysMLv2Parser::KEYWORD_TRUE:
      case SysMLv2Parser::SYMBOL_STAR:
      case SysMLv2Parser::SYMBOL_DOT:
      case SysMLv2Parser::DECIMAL_VALUE:
      case SysMLv2Parser::EXPONENTIAL_VALUE:
      case SysMLv2Parser::STRING_VALUE: {
        setState(4434);
        literal_expression();
        break;
      }

      case SysMLv2Parser::NAME: {
        setState(4435);
        feature_reference_expression();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MetaclassContext ------------------------------------------------------------------

SysMLv2Parser::MetaclassContext::MetaclassContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::MetaclassContext::KEYWORD_METACLASS() {
  return getToken(SysMLv2Parser::KEYWORD_METACLASS, 0);
}

SysMLv2Parser::Type_bodyContext* SysMLv2Parser::MetaclassContext::type_body() {
  return getRuleContext<SysMLv2Parser::Type_bodyContext>(0);
}

SysMLv2Parser::IdentificationContext* SysMLv2Parser::MetaclassContext::identification() {
  return getRuleContext<SysMLv2Parser::IdentificationContext>(0);
}

SysMLv2Parser::Classifier_declarationContext* SysMLv2Parser::MetaclassContext::classifier_declaration() {
  return getRuleContext<SysMLv2Parser::Classifier_declarationContext>(0);
}

SysMLv2Parser::Type_prefixContext* SysMLv2Parser::MetaclassContext::type_prefix() {
  return getRuleContext<SysMLv2Parser::Type_prefixContext>(0);
}

std::vector<tree::TerminalNode *> SysMLv2Parser::MetaclassContext::NAME() {
  return getTokens(SysMLv2Parser::NAME);
}

tree::TerminalNode* SysMLv2Parser::MetaclassContext::NAME(size_t i) {
  return getToken(SysMLv2Parser::NAME, i);
}

tree::TerminalNode* SysMLv2Parser::MetaclassContext::SPECIALIZES() {
  return getToken(SysMLv2Parser::SPECIALIZES, 0);
}


size_t SysMLv2Parser::MetaclassContext::getRuleIndex() const {
  return SysMLv2Parser::RuleMetaclass;
}

void SysMLv2Parser::MetaclassContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMetaclass(this);
}

void SysMLv2Parser::MetaclassContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMetaclass(this);
}

SysMLv2Parser::MetaclassContext* SysMLv2Parser::metaclass() {
  MetaclassContext *_localctx = _tracker.createInstance<MetaclassContext>(_ctx, getState());
  enterRule(_localctx, 1040, SysMLv2Parser::RuleMetaclass);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4439);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 453, _ctx)) {
    case 1: {
      setState(4438);
      type_prefix();
      break;
    }

    default:
      break;
    }
    setState(4441);
    match(SysMLv2Parser::KEYWORD_METACLASS);
    setState(4444);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 454, _ctx)) {
    case 1: {
      setState(4442);
      identification();
      break;
    }

    case 2: {
      setState(4443);
      classifier_declaration();
      break;
    }

    default:
      break;
    }
    setState(4447);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::NAME) {
      setState(4446);
      match(SysMLv2Parser::NAME);
    }
    setState(4451);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::SPECIALIZES) {
      setState(4449);
      match(SysMLv2Parser::SPECIALIZES);
      setState(4450);
      match(SysMLv2Parser::NAME);
    }
    setState(4453);
    type_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Prefix_metadata_featureContext ------------------------------------------------------------------

SysMLv2Parser::Prefix_metadata_featureContext::Prefix_metadata_featureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Owned_feature_typingContext* SysMLv2Parser::Prefix_metadata_featureContext::owned_feature_typing() {
  return getRuleContext<SysMLv2Parser::Owned_feature_typingContext>(0);
}


size_t SysMLv2Parser::Prefix_metadata_featureContext::getRuleIndex() const {
  return SysMLv2Parser::RulePrefix_metadata_feature;
}

void SysMLv2Parser::Prefix_metadata_featureContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrefix_metadata_feature(this);
}

void SysMLv2Parser::Prefix_metadata_featureContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrefix_metadata_feature(this);
}

SysMLv2Parser::Prefix_metadata_featureContext* SysMLv2Parser::prefix_metadata_feature() {
  Prefix_metadata_featureContext *_localctx = _tracker.createInstance<Prefix_metadata_featureContext>(_ctx, getState());
  enterRule(_localctx, 1042, SysMLv2Parser::RulePrefix_metadata_feature);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4455);
    owned_feature_typing();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Metadata_featureContext ------------------------------------------------------------------

SysMLv2Parser::Metadata_featureContext::Metadata_featureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Metadata_feature_declarationContext* SysMLv2Parser::Metadata_featureContext::metadata_feature_declaration() {
  return getRuleContext<SysMLv2Parser::Metadata_feature_declarationContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Metadata_featureContext::SYMBOL_AT() {
  return getToken(SysMLv2Parser::SYMBOL_AT, 0);
}

tree::TerminalNode* SysMLv2Parser::Metadata_featureContext::KEYWORD_METADATA() {
  return getToken(SysMLv2Parser::KEYWORD_METADATA, 0);
}

tree::TerminalNode* SysMLv2Parser::Metadata_featureContext::KEYWORD_ABOUT() {
  return getToken(SysMLv2Parser::KEYWORD_ABOUT, 0);
}

std::vector<SysMLv2Parser::AnnotationContext *> SysMLv2Parser::Metadata_featureContext::annotation() {
  return getRuleContexts<SysMLv2Parser::AnnotationContext>();
}

SysMLv2Parser::AnnotationContext* SysMLv2Parser::Metadata_featureContext::annotation(size_t i) {
  return getRuleContext<SysMLv2Parser::AnnotationContext>(i);
}

std::vector<SysMLv2Parser::Prefix_metadata_memberContext *> SysMLv2Parser::Metadata_featureContext::prefix_metadata_member() {
  return getRuleContexts<SysMLv2Parser::Prefix_metadata_memberContext>();
}

SysMLv2Parser::Prefix_metadata_memberContext* SysMLv2Parser::Metadata_featureContext::prefix_metadata_member(size_t i) {
  return getRuleContext<SysMLv2Parser::Prefix_metadata_memberContext>(i);
}

tree::TerminalNode* SysMLv2Parser::Metadata_featureContext::SYMBOL_COMMA() {
  return getToken(SysMLv2Parser::SYMBOL_COMMA, 0);
}


size_t SysMLv2Parser::Metadata_featureContext::getRuleIndex() const {
  return SysMLv2Parser::RuleMetadata_feature;
}

void SysMLv2Parser::Metadata_featureContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMetadata_feature(this);
}

void SysMLv2Parser::Metadata_featureContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMetadata_feature(this);
}

SysMLv2Parser::Metadata_featureContext* SysMLv2Parser::metadata_feature() {
  Metadata_featureContext *_localctx = _tracker.createInstance<Metadata_featureContext>(_ctx, getState());
  enterRule(_localctx, 1044, SysMLv2Parser::RuleMetadata_feature);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4460);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SysMLv2Parser::SYMBOL_HASHTAG) {
      setState(4457);
      prefix_metadata_member();
      setState(4462);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(4463);
    _la = _input->LA(1);
    if (!(_la == SysMLv2Parser::KEYWORD_METADATA

    || _la == SysMLv2Parser::SYMBOL_AT)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(4464);
    metadata_feature_declaration();

    setState(4465);
    match(SysMLv2Parser::KEYWORD_ABOUT);
    setState(4466);
    annotation();

    setState(4467);
    match(SysMLv2Parser::SYMBOL_COMMA);
    setState(4468);
    annotation();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Metadata_feature_declarationContext ------------------------------------------------------------------

SysMLv2Parser::Metadata_feature_declarationContext::Metadata_feature_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Owned_feature_typingContext* SysMLv2Parser::Metadata_feature_declarationContext::owned_feature_typing() {
  return getRuleContext<SysMLv2Parser::Owned_feature_typingContext>(0);
}

SysMLv2Parser::IdentificationContext* SysMLv2Parser::Metadata_feature_declarationContext::identification() {
  return getRuleContext<SysMLv2Parser::IdentificationContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Metadata_feature_declarationContext::SYMBOL_TYPED_BY() {
  return getToken(SysMLv2Parser::SYMBOL_TYPED_BY, 0);
}

tree::TerminalNode* SysMLv2Parser::Metadata_feature_declarationContext::KEYWORD_TYPED() {
  return getToken(SysMLv2Parser::KEYWORD_TYPED, 0);
}

tree::TerminalNode* SysMLv2Parser::Metadata_feature_declarationContext::KEYWORD_BY() {
  return getToken(SysMLv2Parser::KEYWORD_BY, 0);
}


size_t SysMLv2Parser::Metadata_feature_declarationContext::getRuleIndex() const {
  return SysMLv2Parser::RuleMetadata_feature_declaration;
}

void SysMLv2Parser::Metadata_feature_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMetadata_feature_declaration(this);
}

void SysMLv2Parser::Metadata_feature_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMetadata_feature_declaration(this);
}

SysMLv2Parser::Metadata_feature_declarationContext* SysMLv2Parser::metadata_feature_declaration() {
  Metadata_feature_declarationContext *_localctx = _tracker.createInstance<Metadata_feature_declarationContext>(_ctx, getState());
  enterRule(_localctx, 1046, SysMLv2Parser::RuleMetadata_feature_declaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4476);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 459, _ctx)) {
    case 1: {
      setState(4470);
      identification();
      setState(4474);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case SysMLv2Parser::SYMBOL_TYPED_BY: {
          setState(4471);
          match(SysMLv2Parser::SYMBOL_TYPED_BY);
          break;
        }

        case SysMLv2Parser::KEYWORD_TYPED: {
          setState(4472);
          match(SysMLv2Parser::KEYWORD_TYPED);
          setState(4473);
          match(SysMLv2Parser::KEYWORD_BY);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    default:
      break;
    }
    setState(4478);
    owned_feature_typing();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Metadata_body_elementContext ------------------------------------------------------------------

SysMLv2Parser::Metadata_body_elementContext::Metadata_body_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Non_feature_memberContext* SysMLv2Parser::Metadata_body_elementContext::non_feature_member() {
  return getRuleContext<SysMLv2Parser::Non_feature_memberContext>(0);
}

SysMLv2Parser::Metadata_body_feature_memberContext* SysMLv2Parser::Metadata_body_elementContext::metadata_body_feature_member() {
  return getRuleContext<SysMLv2Parser::Metadata_body_feature_memberContext>(0);
}

SysMLv2Parser::Alias_memberContext* SysMLv2Parser::Metadata_body_elementContext::alias_member() {
  return getRuleContext<SysMLv2Parser::Alias_memberContext>(0);
}

SysMLv2Parser::Import_declarationContext* SysMLv2Parser::Metadata_body_elementContext::import_declaration() {
  return getRuleContext<SysMLv2Parser::Import_declarationContext>(0);
}


size_t SysMLv2Parser::Metadata_body_elementContext::getRuleIndex() const {
  return SysMLv2Parser::RuleMetadata_body_element;
}

void SysMLv2Parser::Metadata_body_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMetadata_body_element(this);
}

void SysMLv2Parser::Metadata_body_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMetadata_body_element(this);
}

SysMLv2Parser::Metadata_body_elementContext* SysMLv2Parser::metadata_body_element() {
  Metadata_body_elementContext *_localctx = _tracker.createInstance<Metadata_body_elementContext>(_ctx, getState());
  enterRule(_localctx, 1048, SysMLv2Parser::RuleMetadata_body_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4484);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 460, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(4480);
      non_feature_member();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(4481);
      metadata_body_feature_member();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(4482);
      alias_member();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(4483);
      import_declaration();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Metadata_body_feature_memberContext ------------------------------------------------------------------

SysMLv2Parser::Metadata_body_feature_memberContext::Metadata_body_feature_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Metadata_body_featureContext* SysMLv2Parser::Metadata_body_feature_memberContext::metadata_body_feature() {
  return getRuleContext<SysMLv2Parser::Metadata_body_featureContext>(0);
}


size_t SysMLv2Parser::Metadata_body_feature_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleMetadata_body_feature_member;
}

void SysMLv2Parser::Metadata_body_feature_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMetadata_body_feature_member(this);
}

void SysMLv2Parser::Metadata_body_feature_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMetadata_body_feature_member(this);
}

SysMLv2Parser::Metadata_body_feature_memberContext* SysMLv2Parser::metadata_body_feature_member() {
  Metadata_body_feature_memberContext *_localctx = _tracker.createInstance<Metadata_body_feature_memberContext>(_ctx, getState());
  enterRule(_localctx, 1050, SysMLv2Parser::RuleMetadata_body_feature_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4486);
    metadata_body_feature();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Metadata_body_featureContext ------------------------------------------------------------------

SysMLv2Parser::Metadata_body_featureContext::Metadata_body_featureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Owned_redefinitionContext* SysMLv2Parser::Metadata_body_featureContext::owned_redefinition() {
  return getRuleContext<SysMLv2Parser::Owned_redefinitionContext>(0);
}

SysMLv2Parser::Metadata_bodyContext* SysMLv2Parser::Metadata_body_featureContext::metadata_body() {
  return getRuleContext<SysMLv2Parser::Metadata_bodyContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Metadata_body_featureContext::KEYWORD_FEATURE() {
  return getToken(SysMLv2Parser::KEYWORD_FEATURE, 0);
}

SysMLv2Parser::Feature_specialization_partContext* SysMLv2Parser::Metadata_body_featureContext::feature_specialization_part() {
  return getRuleContext<SysMLv2Parser::Feature_specialization_partContext>(0);
}

SysMLv2Parser::Value_partContext* SysMLv2Parser::Metadata_body_featureContext::value_part() {
  return getRuleContext<SysMLv2Parser::Value_partContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Metadata_body_featureContext::SYMBOL_REDEFINES() {
  return getToken(SysMLv2Parser::SYMBOL_REDEFINES, 0);
}

tree::TerminalNode* SysMLv2Parser::Metadata_body_featureContext::KEYWORD_REDEFINES() {
  return getToken(SysMLv2Parser::KEYWORD_REDEFINES, 0);
}


size_t SysMLv2Parser::Metadata_body_featureContext::getRuleIndex() const {
  return SysMLv2Parser::RuleMetadata_body_feature;
}

void SysMLv2Parser::Metadata_body_featureContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMetadata_body_feature(this);
}

void SysMLv2Parser::Metadata_body_featureContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMetadata_body_feature(this);
}

SysMLv2Parser::Metadata_body_featureContext* SysMLv2Parser::metadata_body_feature() {
  Metadata_body_featureContext *_localctx = _tracker.createInstance<Metadata_body_featureContext>(_ctx, getState());
  enterRule(_localctx, 1052, SysMLv2Parser::RuleMetadata_body_feature);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4489);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_FEATURE) {
      setState(4488);
      match(SysMLv2Parser::KEYWORD_FEATURE);
    }
    setState(4492);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_REDEFINES

    || _la == SysMLv2Parser::SYMBOL_REDEFINES) {
      setState(4491);
      _la = _input->LA(1);
      if (!(_la == SysMLv2Parser::KEYWORD_REDEFINES

      || _la == SysMLv2Parser::SYMBOL_REDEFINES)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(4494);
    owned_redefinition();
    setState(4496);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 83) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 83)) & 3377699720527901) != 0) || _la == SysMLv2Parser::KEYWORD_OUT

    || _la == SysMLv2Parser::SYMBOL_SQUARE_BRACKET_OPEN) {
      setState(4495);
      feature_specialization_part();
    }
    setState(4499);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_DEFAULT || _la == SysMLv2Parser::SYMBOL_DEF_ASSIGN

    || _la == SysMLv2Parser::SYMBOL_EQUALS) {
      setState(4498);
      value_part();
    }
    setState(4501);
    metadata_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Library_packageContext ------------------------------------------------------------------

SysMLv2Parser::Library_packageContext::Library_packageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Library_packageContext::KEYWORD_LIBRARY() {
  return getToken(SysMLv2Parser::KEYWORD_LIBRARY, 0);
}

SysMLv2Parser::Package_declarationContext* SysMLv2Parser::Library_packageContext::package_declaration() {
  return getRuleContext<SysMLv2Parser::Package_declarationContext>(0);
}

SysMLv2Parser::Package_bodyContext* SysMLv2Parser::Library_packageContext::package_body() {
  return getRuleContext<SysMLv2Parser::Package_bodyContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Library_packageContext::KEYWORD_STANDARD() {
  return getToken(SysMLv2Parser::KEYWORD_STANDARD, 0);
}

std::vector<SysMLv2Parser::Prefix_metadata_memberContext *> SysMLv2Parser::Library_packageContext::prefix_metadata_member() {
  return getRuleContexts<SysMLv2Parser::Prefix_metadata_memberContext>();
}

SysMLv2Parser::Prefix_metadata_memberContext* SysMLv2Parser::Library_packageContext::prefix_metadata_member(size_t i) {
  return getRuleContext<SysMLv2Parser::Prefix_metadata_memberContext>(i);
}


size_t SysMLv2Parser::Library_packageContext::getRuleIndex() const {
  return SysMLv2Parser::RuleLibrary_package;
}

void SysMLv2Parser::Library_packageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLibrary_package(this);
}

void SysMLv2Parser::Library_packageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLibrary_package(this);
}

SysMLv2Parser::Library_packageContext* SysMLv2Parser::library_package() {
  Library_packageContext *_localctx = _tracker.createInstance<Library_packageContext>(_ctx, getState());
  enterRule(_localctx, 1054, SysMLv2Parser::RuleLibrary_package);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4504);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SysMLv2Parser::KEYWORD_STANDARD) {
      setState(4503);
      match(SysMLv2Parser::KEYWORD_STANDARD);
    }
    setState(4506);
    match(SysMLv2Parser::KEYWORD_LIBRARY);
    setState(4510);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SysMLv2Parser::SYMBOL_HASHTAG) {
      setState(4507);
      prefix_metadata_member();
      setState(4512);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(4513);
    package_declaration();
    setState(4514);
    package_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Package_declarationContext ------------------------------------------------------------------

SysMLv2Parser::Package_declarationContext::Package_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SysMLv2Parser::Package_declarationContext::KEYWORD_PACKAGE() {
  return getToken(SysMLv2Parser::KEYWORD_PACKAGE, 0);
}

SysMLv2Parser::IdentificationContext* SysMLv2Parser::Package_declarationContext::identification() {
  return getRuleContext<SysMLv2Parser::IdentificationContext>(0);
}


size_t SysMLv2Parser::Package_declarationContext::getRuleIndex() const {
  return SysMLv2Parser::RulePackage_declaration;
}

void SysMLv2Parser::Package_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPackage_declaration(this);
}

void SysMLv2Parser::Package_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPackage_declaration(this);
}

SysMLv2Parser::Package_declarationContext* SysMLv2Parser::package_declaration() {
  Package_declarationContext *_localctx = _tracker.createInstance<Package_declarationContext>(_ctx, getState());
  enterRule(_localctx, 1056, SysMLv2Parser::RulePackage_declaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4516);
    match(SysMLv2Parser::KEYWORD_PACKAGE);
    setState(4517);
    identification();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Element_filter_memberContext ------------------------------------------------------------------

SysMLv2Parser::Element_filter_memberContext::Element_filter_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SysMLv2Parser::Member_prefixContext* SysMLv2Parser::Element_filter_memberContext::member_prefix() {
  return getRuleContext<SysMLv2Parser::Member_prefixContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Element_filter_memberContext::KEYWORD_FILTER() {
  return getToken(SysMLv2Parser::KEYWORD_FILTER, 0);
}

SysMLv2Parser::Owned_expressionContext* SysMLv2Parser::Element_filter_memberContext::owned_expression() {
  return getRuleContext<SysMLv2Parser::Owned_expressionContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Element_filter_memberContext::SYMBOL_STATEMENT_DELIMITER() {
  return getToken(SysMLv2Parser::SYMBOL_STATEMENT_DELIMITER, 0);
}


size_t SysMLv2Parser::Element_filter_memberContext::getRuleIndex() const {
  return SysMLv2Parser::RuleElement_filter_member;
}

void SysMLv2Parser::Element_filter_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElement_filter_member(this);
}

void SysMLv2Parser::Element_filter_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElement_filter_member(this);
}

SysMLv2Parser::Element_filter_memberContext* SysMLv2Parser::element_filter_member() {
  Element_filter_memberContext *_localctx = _tracker.createInstance<Element_filter_memberContext>(_ctx, getState());
  enterRule(_localctx, 1058, SysMLv2Parser::RuleElement_filter_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4519);
    member_prefix();
    setState(4520);
    match(SysMLv2Parser::KEYWORD_FILTER);
    setState(4521);
    owned_expression();
    setState(4522);
    match(SysMLv2Parser::SYMBOL_STATEMENT_DELIMITER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Meta_assignmentContext ------------------------------------------------------------------

SysMLv2Parser::Meta_assignmentContext::Meta_assignmentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<SysMLv2Parser::Qualified_nameContext *> SysMLv2Parser::Meta_assignmentContext::qualified_name() {
  return getRuleContexts<SysMLv2Parser::Qualified_nameContext>();
}

SysMLv2Parser::Qualified_nameContext* SysMLv2Parser::Meta_assignmentContext::qualified_name(size_t i) {
  return getRuleContext<SysMLv2Parser::Qualified_nameContext>(i);
}

tree::TerminalNode* SysMLv2Parser::Meta_assignmentContext::SYMBOL_ASSIGN() {
  return getToken(SysMLv2Parser::SYMBOL_ASSIGN, 0);
}

SysMLv2Parser::IdentificationContext* SysMLv2Parser::Meta_assignmentContext::identification() {
  return getRuleContext<SysMLv2Parser::IdentificationContext>(0);
}

tree::TerminalNode* SysMLv2Parser::Meta_assignmentContext::SYMBOL_STATEMENT_DELIMITER() {
  return getToken(SysMLv2Parser::SYMBOL_STATEMENT_DELIMITER, 0);
}


size_t SysMLv2Parser::Meta_assignmentContext::getRuleIndex() const {
  return SysMLv2Parser::RuleMeta_assignment;
}

void SysMLv2Parser::Meta_assignmentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMeta_assignment(this);
}

void SysMLv2Parser::Meta_assignmentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<SysMLv2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMeta_assignment(this);
}

SysMLv2Parser::Meta_assignmentContext* SysMLv2Parser::meta_assignment() {
  Meta_assignmentContext *_localctx = _tracker.createInstance<Meta_assignmentContext>(_ctx, getState());
  enterRule(_localctx, 1060, SysMLv2Parser::RuleMeta_assignment);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4524);
    qualified_name();
    setState(4525);
    match(SysMLv2Parser::SYMBOL_ASSIGN);
    setState(4526);
    identification();
    setState(4527);
    match(SysMLv2Parser::T__0);
    setState(4528);
    qualified_name();
    setState(4529);
    match(SysMLv2Parser::SYMBOL_STATEMENT_DELIMITER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

void SysMLv2Parser::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  sysmlv2ParserInitialize();
#else
  ::antlr4::internal::call_once(sysmlv2ParserOnceFlag, sysmlv2ParserInitialize);
#endif
}
