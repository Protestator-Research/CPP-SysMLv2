
// Generated from ./KerML.g4 by ANTLR 4.13.2

#pragma once


#include "antlr4-runtime.h"
#include "../../sysmlv2file_global.h"



class SYSMLV2FILE_EXPORT KerMLLexer : public antlr4::Lexer {
public:
  enum {
    T__0 = 1, T__1 = 2, T__2 = 3, T__3 = 4, TYPED_BY = 5, SPECIALIZES = 6, 
    SUBSETS = 7, REFERENCES = 8, REDEFINES = 9, CONJUNGATES = 10, KEYWORD_ABOUT = 11, 
    KEYWORD_ABSTRACT = 12, KEYWORD_ALIAS = 13, KEYWORD_ALL = 14, KEYWORD_AND = 15, 
    KEYWORD_AS = 16, KEYWORD_ASSOC = 17, KEYWORD_BEHAVIOR = 18, KEYWORD_BINDING = 19, 
    KEYWORD_BOOL = 20, KEYWORD_BY = 21, KEYWORD_CHAINS = 22, KEYWORD_CLASS = 23, 
    KEYWORD_CLASSIFIER = 24, KEYWORD_COMMENT = 25, KEYWORD_COMPOSITE = 26, 
    KEYWORD_CONJUGATE = 27, KEYWORD_CONJUGATES = 28, KEYWORD_CONJUGATION = 29, 
    KEYWORD_CONNECTOR = 30, KEYWORD_DATATYPE = 31, KEYWORD_DEFAULT = 32, 
    KEYWORD_DEPENDENCY = 33, KEYWORD_DERIVED = 34, KEYWORD_DIFFERENCES = 35, 
    KEYWORD_DISJOINING = 36, KEYWORD_DISJOINT = 37, KEYWORD_DOC = 38, KEYWORD_ELSE = 39, 
    KEYWORD_END = 40, KEYWORD_EXPR = 41, KEYWORD_FALSE = 42, KEYWORD_FEATURE = 43, 
    KEYWORD_FEATURED = 44, KEYWORD_FEATURING = 45, KEYWORD_FILTER = 46, 
    KEYWORD_FIRST = 47, KEYWORD_FLOW = 48, KEYWORD_FOR = 49, KEYWORD_FROM = 50, 
    KEYWORD_FUNCTION = 51, KEYWORD_HASTYPE = 52, KEYWORD_IF = 53, KEYWORD_INTERSECTS = 54, 
    KEYWORD_IMPLIES = 55, KEYWORD_IMPORT = 56, KEYWORD_IN = 57, KEYWORD_INOUT = 58, 
    KEYWORD_INTERACTION = 59, KEYWORD_INV = 60, KEYWORD_INVERSE = 61, KEYWORD_INVERTING = 62, 
    KEYWORD_ISTYPE = 63, KEYWORD_LANGUAGE = 64, KEYWORD_MEMBER = 65, KEYWORD_METACLASS = 66, 
    KEYWORD_METADATA = 67, KEYWORD_MULTIPLICITY = 68, KEYWORD_NAMESPACE = 69, 
    KEYWORD_NONUNIQUE = 70, KEYWORD_NOT = 71, KEYWORD_NULL = 72, KEYWORD_OF = 73, 
    KEYWORD_OR = 74, KEYWORD_ORDERED = 75, KEYWORD_OUT = 76, KEYWORD_PACKAGE = 77, 
    KEYWORD_PORTION = 78, KEYWORD_PREDICATE = 79, KEYWORD_PRIVATE = 80, 
    KEYWORD_PROTECTED = 81, KEYWORD_PUBLIC = 82, KEYWORD_READONLY = 83, 
    KEYWORD_REDEFINES = 84, KEYWORD_REDEFINITION = 85, KEYWORD_REFERENCES = 86, 
    KEYWORD_REP = 87, KEYWORD_RETURN = 88, KEYWORD_SPECILIZATION = 89, KEYWORD_SPECIALIZES = 90, 
    KEYWORD_STEP = 91, KEYWORD_STRUCT = 92, KEYWORD_SUBCLASSIFIER = 93, 
    KEYWORD_SUBSET = 94, KEYWORD_SUBSETS = 95, KEYWORD_SUBTYPE = 96, KEYWORD_SUCCSESSION = 97, 
    KEYWORD_THEN = 98, KEYWORD_TO = 99, KEYWORD_TRUE = 100, KEYWORD_TYPE = 101, 
    KEYWORD_TYPED = 102, KEYWORD_TYPING = 103, KEYWORD_UNIONS = 104, KEYWORD_XOR = 105, 
    KEYWORD_VAR = 106, SINGLE_LINE_NOTE = 107, MULTI_LINE_NOTE = 108, REGULAR_COMMENT = 109, 
    SYMBOL_COMMENT_BLOCK_START = 110, SYMBOL_NOTE_BLOCK_START = 111, SYMBOL_COMMENT_BLOCK_END = 112, 
    SYMBOL_STATEMENT_DELIMITER = 113, SYMBOL_STAR = 114, SYMBOL_NAMESPACE_SUBSET = 115, 
    SYMBOL_TYPED_BY = 116, SYMBOL_SPECIALIZES = 117, SYMBOL_REFERENCES = 118, 
    SYMBOL_REDEFINES = 119, SYMBOL_CONJUNGATES = 120, SYMBOL_ROUND_BRACKET_OPEN = 121, 
    SYMBOL_ROUND_BRACKET_CLOSE = 122, SYMBOL_CURLY_BRACKET_OPEN = 123, SYMBOL_CURLY_BRACKET_CLOSE = 124, 
    SYMBOL_SQUARE_BRACKET_OPEN = 125, SYMBOL_SQUARE_BRACKET_CLOSE = 126, 
    SYMBOL_COMMA = 127, SYMBOL_AT = 128, SYMBOL_HASHTAG = 129, SYMBOL_MOD = 130, 
    SYMBOL_AND = 131, SYMBOL_UPPER = 132, SYMBOL_VERTICAL_LINE = 133, SYMBOL_DOUBLE_STAR = 134, 
    SYMBOL_PLUS = 135, SYMBOL_MINUS = 136, SYMBOL_SLASH = 137, SYMBOL_ARROOW = 138, 
    SYMBOL_DOT = 139, SYMBOL_DDOT = 140, SYMBOL_SMALLER = 141, SYMBOL_SMALLER_EQUAL = 142, 
    SYMBOL_ASSIGN = 143, SYMBOL_DEF_ASSIGN = 144, SYMBOL_EQUALS = 145, SYMBOL_IFF_EQUALS = 146, 
    SYMBOL_NOT_EQUALS = 147, SYMBOL_IFF_NOT_EQUALS = 148, SYMBOL_GREATER = 149, 
    SYMBOL_GREATER_EQUALS = 150, SYMBOL_QUESTION = 151, SYMBOL_DQUESTION = 152, 
    SYMBOL_DOT_QUESTION = 153, NAME = 154, BASIC_NAME = 155, UNRESTRICTED_NAME = 156, 
    DECIMAL_VALUE = 157, EXPONENTIAL_VALUE = 158, STRING_VALUE = 159, WS = 160
  };

  explicit KerMLLexer(antlr4::CharStream *input);

  ~KerMLLexer() override;


  std::string getGrammarFileName() const override;

  const std::vector<std::string>& getRuleNames() const override;

  const std::vector<std::string>& getChannelNames() const override;

  const std::vector<std::string>& getModeNames() const override;

  const antlr4::dfa::Vocabulary& getVocabulary() const override;

  antlr4::atn::SerializedATNView getSerializedATN() const override;

  const antlr4::atn::ATN& getATN() const override;

  // By default the static state used to implement the lexer is lazily initialized during the first
  // call to the constructor. You can call this function if you wish to initialize the static state
  // ahead of time.
  static void initialize();

private:

  // Individual action functions triggered by action() above.

  // Individual semantic predicate functions triggered by sempred() above.

};

