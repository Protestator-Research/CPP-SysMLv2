
// Generated from SysMLv2.g4 by ANTLR 4.13.2

#pragma once


#include "antlr4-runtime.h"




class  SysMLv2Lexer : public antlr4::Lexer {
public:
  enum {
    T__0 = 1, DEFINED_BY = 2, CROSSES = 3, KEYWORD_ACCEPT = 4, KEYWORD_ACTION = 5, 
    KEYWORD_ACTOR = 6, KEYWORD_AFTER = 7, KEYWORD_ALIAS = 8, KEYWORD_ALLOCATE = 9, 
    KEYWORD_ALLOCATION = 10, KEYWORD_ANALYSIS = 11, KEYWORD_ASSIGN = 12, 
    KEYWORD_ASSERT = 13, KEYWORD_ASSUME = 14, KEYWORD_AT = 15, KEYWORD_ATTRIBUTE = 16, 
    KEYWORD_BIND = 17, KEYWORD_BLOCK = 18, KEYWORD_CALC = 19, KEYWORD_CASE = 20, 
    KEYWORD_CONCERN = 21, KEYWORD_CONNECT = 22, KEYWORD_CONNECTION = 23, 
    KEYWORD_CONSTRAINT = 24, KEYWORD_CROSSES = 25, KEYWORD_DECIDE = 26, 
    KEYWORD_DEF = 27, KEYWORD_DEFINED = 28, KEYWORD_DERIVED = 29, KEYWORD_DO = 30, 
    KEYWORD_ENTRY = 31, KEYWORD_ENUM = 32, KEYWORD_EVENT = 33, KEYWORD_EXHIBIT = 34, 
    KEYWORD_EXIT = 35, KEYWORD_EXPOSE = 36, KEYWORD_FORK = 37, KEYWORD_FRAME = 38, 
    KEYWORD_GUARD = 39, KEYWORD_INCLUDE = 40, KEYWORD_INDIVIDIAL = 41, KEYWORD_INTERFACE = 42, 
    KEYWORD_ITEM = 43, KEYWORD_JOIN = 44, KEYWORD_LOOP = 45, KEYWORD_MERGE = 46, 
    KEYWORD_MESSAGE = 47, KEYWORD_NONUNIQUE = 48, KEYWORD_OBJECTIVE = 49, 
    KEYWORD_OCCURRENCE = 50, KEYWORD_PARALLEL = 51, KEYWORD_PART = 52, KEYWORD_PERFORM = 53, 
    KEYWORD_PORT = 54, KEYWORD_REF = 55, KEYWORD_REFERENCES = 56, KEYWORD_RENDER = 57, 
    KEYWORD_RENDERING = 58, KEYWORD_REQUIRE = 59, KEYWORD_REQUIREMENT = 60, 
    KEYWORD_SATISFY = 61, KEYWORD_SEND = 62, KEYWORD_SNAPSHOT = 63, KEYWORD_STAKEHOLDER = 64, 
    KEYWORD_STATE = 65, KEYWORD_SUBJECT = 66, KEYWORD_TERMINATE = 67, KEYWORD_TIMESLICE = 68, 
    KEYWORD_TRANSISTION = 69, KEYWORD_TRIGGER = 70, KEYWORD_UNTIL = 71, 
    KEYWORD_USE = 72, KEYWORD_VARIANT = 73, KEYWORD_VARIATION = 74, KEYWORD_VERIFICATION = 75, 
    KEYWORD_VERIFY = 76, KEYWORD_VIA = 77, KEYWORD_VIEW = 78, KEYWORD_VIEWPOINT = 79, 
    KEYWORD_WHEN = 80, KEYWORD_WHILE = 81, SYMBOL_CROSSES = 82, TYPED_BY = 83, 
    SPECIALIZES = 84, SUBSETS = 85, REFERENCES = 86, REDEFINES = 87, CONJUNGATES = 88, 
    KEYWORD_ABOUT = 89, KEYWORD_ABSTRACT = 90, KEYWORD_ALL = 91, KEYWORD_AND = 92, 
    KEYWORD_AS = 93, KEYWORD_ASSOC = 94, KEYWORD_BEHAVIOR = 95, KEYWORD_BINDING = 96, 
    KEYWORD_BOOL = 97, KEYWORD_BY = 98, KEYWORD_CHAINS = 99, KEYWORD_CLASS = 100, 
    KEYWORD_CLASSIFIER = 101, KEYWORD_COMMENT = 102, KEYWORD_COMPOSITE = 103, 
    KEYWORD_CONJUGATE = 104, KEYWORD_CONJUGATES = 105, KEYWORD_CONJUGATION = 106, 
    KEYWORD_CONNECTOR = 107, KEYWORD_DATATYPE = 108, KEYWORD_DEFAULT = 109, 
    KEYWORD_DEPENDENCY = 110, KEYWORD_DIFFERENCES = 111, KEYWORD_DISJOINING = 112, 
    KEYWORD_DISJOINT = 113, KEYWORD_DOC = 114, KEYWORD_ELSE = 115, KEYWORD_END = 116, 
    KEYWORD_EXPR = 117, KEYWORD_FALSE = 118, KEYWORD_FEATURE = 119, KEYWORD_FEATURED = 120, 
    KEYWORD_FEATURING = 121, KEYWORD_FILTER = 122, KEYWORD_FIRST = 123, 
    KEYWORD_FLOW = 124, KEYWORD_FOR = 125, KEYWORD_FROM = 126, KEYWORD_FUNCTION = 127, 
    KEYWORD_HASTYPE = 128, KEYWORD_IF = 129, KEYWORD_INTERSECTS = 130, KEYWORD_IMPLIES = 131, 
    KEYWORD_IMPORT = 132, KEYWORD_IN = 133, KEYWORD_INOUT = 134, KEYWORD_INTERACTION = 135, 
    KEYWORD_INV = 136, KEYWORD_INVERSE = 137, KEYWORD_INVERTING = 138, KEYWORD_ISTYPE = 139, 
    KEYWORD_LANGUAGE = 140, KEYWORD_MEMBER = 141, KEYWORD_METACLASS = 142, 
    KEYWORD_METADATA = 143, KEYWORD_MULTIPLICITY = 144, KEYWORD_NAMESPACE = 145, 
    KEYWORD_NOT = 146, KEYWORD_NULL = 147, KEYWORD_OF = 148, KEYWORD_OR = 149, 
    KEYWORD_ORDERED = 150, KEYWORD_OUT = 151, KEYWORD_PACKAGE = 152, KEYWORD_PORTION = 153, 
    KEYWORD_PREDICATE = 154, KEYWORD_PRIVATE = 155, KEYWORD_PROTECTED = 156, 
    KEYWORD_PUBLIC = 157, KEYWORD_READONLY = 158, KEYWORD_REDEFINES = 159, 
    KEYWORD_REDEFINITION = 160, KEYWORD_REP = 161, KEYWORD_RETURN = 162, 
    KEYWORD_SPECILIZATION = 163, KEYWORD_SPECIALIZES = 164, KEYWORD_STEP = 165, 
    KEYWORD_STRUCT = 166, KEYWORD_SUBCLASSIFIER = 167, KEYWORD_SUBSET = 168, 
    KEYWORD_SUBSETS = 169, KEYWORD_SUBTYPE = 170, KEYWORD_SUCCSESSION = 171, 
    KEYWORD_THEN = 172, KEYWORD_TO = 173, KEYWORD_TRUE = 174, KEYWORD_TYPE = 175, 
    KEYWORD_TYPED = 176, KEYWORD_TYPING = 177, KEYWORD_UNIONS = 178, KEYWORD_XOR = 179, 
    KEYWORD_VAR = 180, KEYWORD_LOCALE = 181, KEYWORD_STANDARD = 182, KEYWORD_LIBRARY = 183, 
    KEYWORD_CONSTANT = 184, SINGLE_LINE_NOTE = 185, MULTI_LINE_NOTE = 186, 
    REGULAR_COMMENT = 187, SYMBOL_COMMENT_BLOCK_START = 188, SYMBOL_NOTE_BLOCK_START = 189, 
    SYMBOL_COMMENT_BLOCK_END = 190, SYMBOL_STATEMENT_DELIMITER = 191, SYMBOL_STAR = 192, 
    SYMBOL_NAMESPACE_SUBSET = 193, SYMBOL_TYPED_BY = 194, SYMBOL_SPECIALIZES = 195, 
    SYMBOL_REFERENCES = 196, SYMBOL_REDEFINES = 197, SYMBOL_CONJUNGATES = 198, 
    SYMBOL_ROUND_BRACKET_OPEN = 199, SYMBOL_ROUND_BRACKET_CLOSE = 200, SYMBOL_CURLY_BRACKET_OPEN = 201, 
    SYMBOL_CURLY_BRACKET_CLOSE = 202, SYMBOL_SQUARE_BRACKET_OPEN = 203, 
    SYMBOL_SQUARE_BRACKET_CLOSE = 204, SYMBOL_COMMA = 205, SYMBOL_AT = 206, 
    SYMBOL_HASHTAG = 207, SYMBOL_MOD = 208, SYMBOL_AND = 209, SYMBOL_UPPER = 210, 
    SYMBOL_VERTICAL_LINE = 211, SYMBOL_DOUBLE_STAR = 212, SYMBOL_PLUS = 213, 
    SYMBOL_MINUS = 214, SYMBOL_SLASH = 215, SYMBOL_ARROOW = 216, SYMBOL_DOT = 217, 
    SYMBOL_DDOT = 218, SYMBOL_SMALLER = 219, SYMBOL_SMALLER_EQUAL = 220, 
    SYMBOL_ASSIGN = 221, SYMBOL_DEF_ASSIGN = 222, SYMBOL_EQUALS = 223, SYMBOL_IFF_EQUALS = 224, 
    SYMBOL_NOT_EQUALS = 225, SYMBOL_IFF_NOT_EQUALS = 226, SYMBOL_GREATER = 227, 
    SYMBOL_GREATER_EQUALS = 228, SYMBOL_QUESTION = 229, SYMBOL_DQUESTION = 230, 
    SYMBOL_DOT_QUESTION = 231, NAME = 232, BASIC_NAME = 233, UNRESTRICTED_NAME = 234, 
    DECIMAL_VALUE = 235, EXPONENTIAL_VALUE = 236, STRING_VALUE = 237, WS = 238
  };

  explicit SysMLv2Lexer(antlr4::CharStream *input);

  ~SysMLv2Lexer() override;


  std::string getGrammarFileName() const override;

  const std::vector<std::string>& getRuleNames() const override;

  const std::vector<std::string>& getChannelNames() const override;

  const std::vector<std::string>& getModeNames() const override;

  const antlr4::dfa::Vocabulary& getVocabulary() const override;

  antlr4::atn::SerializedATNView getSerializedATN() const override;

  const antlr4::atn::ATN& getATN() const override;

  // By default the static state used to implement the lexer is lazily initialized during the first
  // call to the constructor. You can call this function if you wish to initialize the static state
  // ahead of time.
  static void initialize();

private:

  // Individual action functions triggered by action() above.

  // Individual semantic predicate functions triggered by sempred() above.

};

