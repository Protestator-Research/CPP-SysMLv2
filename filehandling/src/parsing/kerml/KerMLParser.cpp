
// Generated from ./KerML.g4 by ANTLR 4.13.2


#include "KerMLListener.h"

#include "KerMLParser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct KerMLParserStaticData final {
  KerMLParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  KerMLParserStaticData(const KerMLParserStaticData&) = delete;
  KerMLParserStaticData(KerMLParserStaticData&&) = delete;
  KerMLParserStaticData& operator=(const KerMLParserStaticData&) = delete;
  KerMLParserStaticData& operator=(KerMLParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag kermlParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
std::unique_ptr<KerMLParserStaticData> kermlParserStaticData = nullptr;

void kermlParserInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (kermlParserStaticData != nullptr) {
    return;
  }
#else
  assert(kermlParserStaticData == nullptr);
#endif
  auto staticData = std::make_unique<KerMLParserStaticData>(
    std::vector<std::string>{
      "start", "startRule", "elements", "identification", "relationship_body", 
      "relationship_onwed_elements", "relationship_owned_element", "owned_related_element", 
      "dependency", "annotation", "owned_annotation", "annotating_element", 
      "comment", "documentation", "textual_representation", "root_namespace", 
      "namespace", "namespace_declaration", "namespace_body", "namespace_body_elements", 
      "namespace_body_element", "member_prefix", "visibility_indicator", 
      "namespace_member", "non_feature_member", "namespace_feature_member", 
      "alias_member", "qualified_name", "namespace_import", "import_declaration", 
      "membership_import", "filter_package", "filter_package_member", "element", 
      "non_feature_element", "feature_element", "additional_options", "type", 
      "type_prefix", "type_declaration", "specialization_part", "conjugation_part", 
      "type_relationship_part", "disjoining_part", "unioning_part", "intersecting_part", 
      "differencing_part", "type_body", "type_body_elements", "type_body_element", 
      "specialization", "owned_specialization", "specific_type", "general_type", 
      "conjunction", "owned_conjugation", "disjoining", "owned_disjoining", 
      "unioning", "intersecting", "differencing", "feature_member", "type_feature_member", 
      "owned_feature_member", "classifier", "classifier_declaration", "superclassing_part", 
      "subclassification", "owned_subclassification", "feature", "feature_prefix", 
      "feature_direction", "feature_declaration", "feature_identification", 
      "feature_relationship_part", "chaining_part", "inverting_part", "type_featuring_part", 
      "feature_specialization_part", "multiplicity_part", "feature_specilization", 
      "typings", "typed_by", "subsettings", "subsets", "references", "redefinitions", 
      "redefines", "feature_typing", "owned_feature_typing", "subsetting", 
      "owned_subsetting", "owned_reference_subsetting", "redefinition", 
      "owned_redefinition", "owned_feature_chain", "feature_chain", "owned_feature_chaining", 
      "feature_inverting", "owned_feature_inverting", "type_featuring", 
      "owned_type_featuring", "data_type", "class", "structure", "association", 
      "association_structure", "connector", "connector_declaration", "binary_connector_declaration", 
      "nary_connector_declaration", "connector_end_member", "connector_end", 
      "binding_connector", "binding_connector_declaration", "succession", 
      "succession_declaration", "behavior", "step", "function", "function_body", 
      "function_body_part", "return_feature_member", "result_expression_member", 
      "expression", "predicate", "boolean_expression", "invariant", "owned_expression_reference_member", 
      "owned_expression_reference", "owned_expression_member", "owned_expressions", 
      "owned_expression", "conditional_expression", "conditional_binary_operator_expression", 
      "conditional_binary_operator", "binary_operator_expression", "binary_operator", 
      "unary_operator_expression", "unary_operator", "classification_expression", 
      "classification", "classification_test_operator", "cast_operator", 
      "metaclassification_expression", "argument_expression_member", "argument_expression", 
      "argument_expression_value", "metadata_argument_member", "metadata_argument", 
      "metadata_value", "metadata_reference", "metadataclassification_test_operator", 
      "meta_cast_operator", "extend_expression", "type_reference_member", 
      "type_result_member", "type_reference", "reference_typing", "primary_expressions", 
      "primary_expression", "non_feature_chain_primary_expression", "non_feature_chain_primary_argument_value", 
      "bracket_expression", "index_expression", "sequence_expression", "sequence_expression_list", 
      "sequence_operator_expression", "sequence_expression_list_member", 
      "feature_chain_expression", "collect_expression", "select_expression", 
      "function_operation_expression", "body_argument_member", "body_argument", 
      "body_argument_value", "body_expression_member", "function_reference_argument_member", 
      "function_reference_argument", "function_reference_arugment_value", 
      "function_reference_expression", "function_reference_member", "function_reference", 
      "feature_chain_member", "owned_feature_chain_member", "base_expression", 
      "null_expression", "feature_reference_expression", "feature_reference_member", 
      "feature_reference", "metadata_access_expression", "invocation_expression", 
      "internal_invocation_expression", "argument_list", "positional_argument_list", 
      "named_argument_list", "named_argument_member", "named_argument", 
      "paramenter_redefinition", "body_expression", "expression_body_member", 
      "expression_body", "literal_expression", "literal_boolean", "boolean_value", 
      "literal_string", "literal_integer", "literal_real", "real_value", 
      "literal_infinity", "interaction", "item_flow", "succession_item_flow", 
      "item_flow_declaration", "item_feature_member", "item_feature", "item_feature_specilization_part", 
      "item_flow_end_member", "item_flow_end", "item_flow_feature_member", 
      "item_flow_feature", "item_flow_redefinition", "value_part", "feature_value", 
      "feature_assignment", "multiplicity", "multiplicity_subset", "multiplicity_range", 
      "owned_multiplicity", "owned_multiplicity_range", "multiplicity_bounds", 
      "multiplicity_expression_member", "internal_multiplicity_expression_member", 
      "metaclass", "prefix_metadata_annotation", "prefix_metadata_member", 
      "prefix_metadata_feature", "metadata_feature", "metadata_feature_declaration", 
      "metadata_body", "metadata_body_element", "metadata_body_feature_member", 
      "metadata_body_feature", "package", "library_package", "package_declaration", 
      "package_body", "element_filter_member", "meta_assignment"
    },
    std::vector<std::string>{
      "", "'locale'", "'meta'", "'standard'", "'library'", "", "", "", "", 
      "", "", "'about'", "'abstract'", "'alias'", "'all'", "'and'", "'as'", 
      "'assoc'", "'behavior'", "'binding'", "'bool'", "'by'", "'chains'", 
      "'class'", "'classifier'", "'comment'", "'composite'", "'conjugate'", 
      "'conjugates'", "'conjugation'", "'connector'", "'datatype'", "'default'", 
      "'dependency'", "'derived'", "'differences'", "'disjoining'", "'disjoint'", 
      "'doc'", "'else'", "'end'", "'expr'", "'false'", "'feature'", "'featured'", 
      "'featuring'", "'filter'", "'first'", "'flow'", "'for'", "'from'", 
      "'function'", "'hastype'", "'if'", "'intersects'", "'implies'", "'import'", 
      "'in'", "'inout'", "'interaction'", "'inv'", "'inverse'", "'inverting'", 
      "'istype'", "'language'", "'member'", "'metaclass'", "'metadata'", 
      "'multiplicity'", "'namespace'", "'nonunique'", "'not'", "'null'", 
      "'of'", "'or'", "'ordered'", "'out'", "'package'", "'potion'", "'predicate'", 
      "'private'", "'protected'", "'public'", "'readonly'", "'redefines'", 
      "'redefinition'", "'references'", "'rep'", "'return'", "'specialization'", 
      "'specializes'", "'step'", "'struct'", "'subsclassifier'", "'subset'", 
      "'subsets'", "'subtype'", "'succession'", "'then'", "'to'", "'true'", 
      "'type'", "'typed'", "'typing'", "'unions'", "'xor'", "'var'", "", 
      "", "", "'/*'", "'//*'", "'*/'", "';'", "'*'", "'::'", "':'", "':>'", 
      "'::>'", "':>>'", "'~'", "'('", "')'", "'{'", "'}'", "'['", "']'", 
      "','", "'@'", "'#'", "'%'", "'&'", "'^'", "'|'", "'**'", "'+'", "'-'", 
      "'/'", "'->'", "'.'", "'..'", "'<'", "'<='", "'='", "':='", "'=='", 
      "'==='", "'!='", "'!=='", "'>'", "'>='", "'\\u003F'", "'\\u003F\\u003F'", 
      "'.\\u003F'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "TYPED_BY", "SPECIALIZES", "SUBSETS", "REFERENCES", 
      "REDEFINES", "CONJUNGATES", "KEYWORD_ABOUT", "KEYWORD_ABSTRACT", "KEYWORD_ALIAS", 
      "KEYWORD_ALL", "KEYWORD_AND", "KEYWORD_AS", "KEYWORD_ASSOC", "KEYWORD_BEHAVIOR", 
      "KEYWORD_BINDING", "KEYWORD_BOOL", "KEYWORD_BY", "KEYWORD_CHAINS", 
      "KEYWORD_CLASS", "KEYWORD_CLASSIFIER", "KEYWORD_COMMENT", "KEYWORD_COMPOSITE", 
      "KEYWORD_CONJUGATE", "KEYWORD_CONJUGATES", "KEYWORD_CONJUGATION", 
      "KEYWORD_CONNECTOR", "KEYWORD_DATATYPE", "KEYWORD_DEFAULT", "KEYWORD_DEPENDENCY", 
      "KEYWORD_DERIVED", "KEYWORD_DIFFERENCES", "KEYWORD_DISJOINING", "KEYWORD_DISJOINT", 
      "KEYWORD_DOC", "KEYWORD_ELSE", "KEYWORD_END", "KEYWORD_EXPR", "KEYWORD_FALSE", 
      "KEYWORD_FEATURE", "KEYWORD_FEATURED", "KEYWORD_FEATURING", "KEYWORD_FILTER", 
      "KEYWORD_FIRST", "KEYWORD_FLOW", "KEYWORD_FOR", "KEYWORD_FROM", "KEYWORD_FUNCTION", 
      "KEYWORD_HASTYPE", "KEYWORD_IF", "KEYWORD_INTERSECTS", "KEYWORD_IMPLIES", 
      "KEYWORD_IMPORT", "KEYWORD_IN", "KEYWORD_INOUT", "KEYWORD_INTERACTION", 
      "KEYWORD_INV", "KEYWORD_INVERSE", "KEYWORD_INVERTING", "KEYWORD_ISTYPE", 
      "KEYWORD_LANGUAGE", "KEYWORD_MEMBER", "KEYWORD_METACLASS", "KEYWORD_METADATA", 
      "KEYWORD_MULTIPLICITY", "KEYWORD_NAMESPACE", "KEYWORD_NONUNIQUE", 
      "KEYWORD_NOT", "KEYWORD_NULL", "KEYWORD_OF", "KEYWORD_OR", "KEYWORD_ORDERED", 
      "KEYWORD_OUT", "KEYWORD_PACKAGE", "KEYWORD_PORTION", "KEYWORD_PREDICATE", 
      "KEYWORD_PRIVATE", "KEYWORD_PROTECTED", "KEYWORD_PUBLIC", "KEYWORD_READONLY", 
      "KEYWORD_REDEFINES", "KEYWORD_REDEFINITION", "KEYWORD_REFERENCES", 
      "KEYWORD_REP", "KEYWORD_RETURN", "KEYWORD_SPECILIZATION", "KEYWORD_SPECIALIZES", 
      "KEYWORD_STEP", "KEYWORD_STRUCT", "KEYWORD_SUBCLASSIFIER", "KEYWORD_SUBSET", 
      "KEYWORD_SUBSETS", "KEYWORD_SUBTYPE", "KEYWORD_SUCCSESSION", "KEYWORD_THEN", 
      "KEYWORD_TO", "KEYWORD_TRUE", "KEYWORD_TYPE", "KEYWORD_TYPED", "KEYWORD_TYPING", 
      "KEYWORD_UNIONS", "KEYWORD_XOR", "KEYWORD_VAR", "SINGLE_LINE_NOTE", 
      "MULTI_LINE_NOTE", "REGULAR_COMMENT", "SYMBOL_COMMENT_BLOCK_START", 
      "SYMBOL_NOTE_BLOCK_START", "SYMBOL_COMMENT_BLOCK_END", "SYMBOL_STATEMENT_DELIMITER", 
      "SYMBOL_STAR", "SYMBOL_NAMESPACE_SUBSET", "SYMBOL_TYPED_BY", "SYMBOL_SPECIALIZES", 
      "SYMBOL_REFERENCES", "SYMBOL_REDEFINES", "SYMBOL_CONJUNGATES", "SYMBOL_ROUND_BRACKET_OPEN", 
      "SYMBOL_ROUND_BRACKET_CLOSE", "SYMBOL_CURLY_BRACKET_OPEN", "SYMBOL_CURLY_BRACKET_CLOSE", 
      "SYMBOL_SQUARE_BRACKET_OPEN", "SYMBOL_SQUARE_BRACKET_CLOSE", "SYMBOL_COMMA", 
      "SYMBOL_AT", "SYMBOL_HASHTAG", "SYMBOL_MOD", "SYMBOL_AND", "SYMBOL_UPPER", 
      "SYMBOL_VERTICAL_LINE", "SYMBOL_DOUBLE_STAR", "SYMBOL_PLUS", "SYMBOL_MINUS", 
      "SYMBOL_SLASH", "SYMBOL_ARROOW", "SYMBOL_DOT", "SYMBOL_DDOT", "SYMBOL_SMALLER", 
      "SYMBOL_SMALLER_EQUAL", "SYMBOL_ASSIGN", "SYMBOL_DEF_ASSIGN", "SYMBOL_EQUALS", 
      "SYMBOL_IFF_EQUALS", "SYMBOL_NOT_EQUALS", "SYMBOL_IFF_NOT_EQUALS", 
      "SYMBOL_GREATER", "SYMBOL_GREATER_EQUALS", "SYMBOL_QUESTION", "SYMBOL_DQUESTION", 
      "SYMBOL_DOT_QUESTION", "NAME", "BASIC_NAME", "UNRESTRICTED_NAME", 
      "DECIMAL_VALUE", "EXPONENTIAL_VALUE", "STRING_VALUE", "WS"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,160,2032,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
  	2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
  	7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,
  	7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,
  	7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,
  	7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,
  	7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,
  	7,122,2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,
  	7,128,2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,
  	7,134,2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,
  	7,140,2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,
  	7,146,2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,
  	7,152,2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,
  	7,158,2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
  	7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,
  	7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,
  	7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,
  	7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,
  	7,188,2,189,7,189,2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,
  	7,194,2,195,7,195,2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,
  	7,200,2,201,7,201,2,202,7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,
  	7,206,2,207,7,207,2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,
  	7,212,2,213,7,213,2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,
  	7,218,2,219,7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,
  	7,224,2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,
  	7,230,2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,2,236,
  	7,236,2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,241,7,241,2,242,
  	7,242,2,243,7,243,2,244,7,244,2,245,7,245,2,246,7,246,2,247,7,247,2,248,
  	7,248,1,0,1,0,1,0,1,1,1,1,1,2,5,2,505,8,2,10,2,12,2,508,9,2,1,3,1,3,1,
  	3,3,3,513,8,3,1,3,3,3,516,8,3,3,3,518,8,3,1,4,1,4,1,4,1,4,1,4,3,4,525,
  	8,4,1,5,5,5,528,8,5,10,5,12,5,531,9,5,1,6,1,6,3,6,535,8,6,1,7,1,7,3,7,
  	539,8,7,1,8,5,8,542,8,8,10,8,12,8,545,9,8,1,8,1,8,1,8,1,8,3,8,551,8,8,
  	1,8,1,8,1,8,5,8,556,8,8,10,8,12,8,559,9,8,1,8,1,8,1,8,1,8,5,8,565,8,8,
  	10,8,12,8,568,9,8,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,11,3,11,
  	580,8,11,1,12,1,12,1,12,1,12,1,12,1,12,5,12,588,8,12,10,12,12,12,591,
  	9,12,3,12,593,8,12,3,12,595,8,12,1,12,1,12,3,12,599,8,12,1,12,1,12,1,
  	13,1,13,1,13,1,13,3,13,607,8,13,1,13,1,13,1,14,1,14,3,14,613,8,14,1,14,
  	1,14,1,14,1,14,1,15,1,15,1,16,5,16,622,8,16,10,16,12,16,625,9,16,1,16,
  	1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,3,18,638,8,18,1,19,
  	1,19,1,20,1,20,1,20,3,20,645,8,20,1,21,3,21,648,8,21,1,22,1,22,1,23,1,
  	23,3,23,654,8,23,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,
  	26,3,26,667,8,26,1,26,3,26,670,8,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,
  	5,27,679,8,27,10,27,12,27,682,9,27,1,28,3,28,685,8,28,1,28,1,28,3,28,
  	689,8,28,1,28,1,28,3,28,693,8,28,1,29,1,29,3,29,697,8,29,1,30,1,30,3,
  	30,701,8,30,1,30,3,30,704,8,30,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,33,
  	1,33,1,33,1,33,3,33,717,8,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,
  	1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,
  	1,34,1,34,1,34,1,34,1,34,3,34,746,8,34,1,35,1,35,1,35,1,35,1,35,1,35,
  	1,35,1,35,1,35,1,35,3,35,758,8,35,1,36,1,36,1,37,1,37,1,37,1,37,1,37,
  	1,38,3,38,768,8,38,1,38,5,38,771,8,38,10,38,12,38,774,9,38,1,39,3,39,
  	777,8,39,1,39,1,39,3,39,781,8,39,1,39,1,39,4,39,785,8,39,11,39,12,39,
  	786,1,39,5,39,790,8,39,10,39,12,39,793,9,39,1,40,1,40,1,40,1,40,5,40,
  	799,8,40,10,40,12,40,802,9,40,1,41,1,41,1,41,1,42,1,42,1,42,1,42,3,42,
  	811,8,42,1,43,1,43,1,43,1,43,1,43,5,43,818,8,43,10,43,12,43,821,9,43,
  	1,44,1,44,1,44,1,44,5,44,827,8,44,10,44,12,44,830,9,44,1,45,1,45,1,45,
  	1,45,5,45,836,8,45,10,45,12,45,839,9,45,1,46,1,46,1,46,1,46,5,46,845,
  	8,46,10,46,12,46,848,9,46,1,47,1,47,1,47,1,47,1,47,3,47,855,8,47,1,48,
  	5,48,858,8,48,10,48,12,48,861,9,48,1,49,1,49,1,50,1,50,3,50,867,8,50,
  	1,50,1,50,1,50,1,50,1,50,1,50,1,51,1,51,1,52,1,52,3,52,879,8,52,1,53,
  	1,53,3,53,883,8,53,1,54,1,54,3,54,887,8,54,1,54,1,54,1,54,3,54,892,8,
  	54,1,54,1,54,1,54,3,54,897,8,54,1,54,1,54,1,55,1,55,3,55,903,8,55,1,56,
  	1,56,3,56,907,8,56,1,56,1,56,1,56,3,56,912,8,56,1,56,1,56,1,56,3,56,917,
  	8,56,1,56,1,56,1,57,1,57,3,57,923,8,57,1,58,1,58,3,58,927,8,58,1,59,1,
  	59,3,59,931,8,59,1,60,1,60,3,60,935,8,60,1,61,1,61,3,61,939,8,61,1,62,
  	1,62,1,62,1,62,1,63,1,63,1,63,1,64,3,64,949,8,64,1,64,1,64,1,64,1,64,
  	1,65,3,65,956,8,65,1,65,1,65,3,65,960,8,65,1,65,1,65,3,65,964,8,65,1,
  	65,5,65,967,8,65,10,65,12,65,970,9,65,1,66,1,66,1,66,1,66,5,66,976,8,
  	66,10,66,12,66,979,9,66,1,67,1,67,3,67,983,8,67,1,67,1,67,1,67,1,67,1,
  	67,1,67,1,68,1,68,1,69,3,69,994,8,69,1,69,1,69,1,69,1,69,3,69,1000,8,
  	69,1,69,3,69,1003,8,69,1,69,3,69,1006,8,69,1,69,3,69,1009,8,69,1,69,1,
  	69,1,70,3,70,1014,8,70,1,70,3,70,1017,8,70,1,70,3,70,1020,8,70,1,70,3,
  	70,1023,8,70,1,70,3,70,1026,8,70,1,70,3,70,1029,8,70,1,70,5,70,1032,8,
  	70,10,70,12,70,1035,9,70,1,71,1,71,1,72,3,72,1040,8,72,1,72,1,72,1,72,
  	3,72,1045,8,72,1,72,1,72,3,72,1049,8,72,1,72,5,72,1052,8,72,10,72,12,
  	72,1055,9,72,1,72,3,72,1058,8,72,1,73,1,73,1,73,1,73,3,73,1064,8,73,1,
  	73,3,73,1067,8,73,1,74,1,74,1,74,1,74,3,74,1073,8,74,1,75,1,75,1,75,3,
  	75,1078,8,75,1,76,1,76,1,76,1,76,1,77,1,77,1,77,1,77,1,77,5,77,1089,8,
  	77,10,77,12,77,1092,9,77,1,78,4,78,1095,8,78,11,78,12,78,1096,1,78,3,
  	78,1100,8,78,1,78,5,78,1103,8,78,10,78,12,78,1106,9,78,1,78,1,78,4,78,
  	1110,8,78,11,78,12,78,1111,3,78,1114,8,78,1,79,1,79,1,79,3,79,1119,8,
  	79,3,79,1121,8,79,1,79,3,79,1124,8,79,1,79,3,79,1127,8,79,3,79,1129,8,
  	79,1,80,1,80,1,80,1,80,3,80,1135,8,80,1,81,1,81,1,81,5,81,1140,8,81,10,
  	81,12,81,1143,9,81,1,82,1,82,1,82,1,83,1,83,1,83,1,83,5,83,1152,8,83,
  	10,83,12,83,1155,9,83,1,84,1,84,1,84,1,85,1,85,1,85,1,86,1,86,1,86,3,
  	86,1166,8,86,1,87,3,87,1169,8,87,1,87,1,87,1,87,1,88,1,88,3,88,1176,8,
  	88,1,88,3,88,1179,8,88,1,88,1,88,1,88,1,88,3,88,1185,8,88,1,88,1,88,1,
  	89,1,89,1,90,1,90,3,90,1193,8,90,1,90,3,90,1196,8,90,1,90,1,90,1,90,1,
  	90,3,90,1202,8,90,1,90,1,90,1,91,1,91,1,92,1,92,1,93,3,93,1211,8,93,1,
  	93,1,93,3,93,1215,8,93,1,93,1,93,3,93,1219,8,93,1,93,1,93,1,93,3,93,1224,
  	8,93,1,93,3,93,1227,8,93,1,93,3,93,1230,8,93,1,93,3,93,1233,8,93,1,93,
  	1,93,1,94,1,94,1,95,1,95,1,96,1,96,1,96,5,96,1244,8,96,10,96,12,96,1247,
  	9,96,1,97,1,97,1,98,1,98,3,98,1253,8,98,1,98,1,98,1,98,3,98,1258,8,98,
  	1,98,1,98,1,98,3,98,1263,8,98,1,98,1,98,1,99,1,99,3,99,1269,8,99,1,100,
  	1,100,1,100,1,100,3,100,1275,8,100,1,100,1,100,1,100,1,100,1,100,1,101,
  	1,101,1,102,1,102,1,102,1,102,1,102,1,103,1,103,1,103,1,103,1,103,1,104,
  	3,104,1295,8,104,1,104,1,104,1,104,1,104,1,105,1,105,1,105,1,105,1,105,
  	1,106,1,106,1,106,1,106,1,106,1,106,1,107,3,107,1313,8,107,1,107,1,107,
  	1,107,1,107,1,108,1,108,1,108,3,108,1322,8,108,1,109,3,109,1325,8,109,
  	1,109,1,109,1,109,1,109,1,109,1,110,1,110,1,110,1,110,1,110,1,110,5,110,
  	1338,8,110,10,110,12,110,1341,9,110,1,110,1,110,1,111,1,111,1,112,1,112,
  	3,112,1349,8,112,1,112,3,112,1352,8,112,1,112,1,112,1,113,1,113,1,113,
  	1,113,1,113,1,114,1,114,1,114,1,114,1,114,1,114,3,114,1367,8,114,1,114,
  	3,114,1370,8,114,1,114,3,114,1373,8,114,1,114,1,114,1,114,1,114,3,114,
  	1379,8,114,3,114,1381,8,114,1,115,1,115,1,115,1,115,1,115,1,116,1,116,
  	1,116,1,116,1,116,1,116,3,116,1394,8,116,1,116,3,116,1397,8,116,1,116,
  	3,116,1400,8,116,1,116,1,116,1,116,1,116,3,116,1406,8,116,3,116,1408,
  	8,116,1,117,1,117,1,117,1,117,1,117,1,118,1,118,1,118,1,118,3,118,1419,
  	8,118,1,118,1,118,1,119,1,119,1,119,1,119,1,119,1,120,1,120,1,120,1,120,
  	1,120,3,120,1433,8,120,1,121,1,121,4,121,1437,8,121,11,121,12,121,1438,
  	1,121,3,121,1442,8,121,1,122,1,122,1,122,1,122,1,123,1,123,1,123,1,124,
  	1,124,1,124,1,124,3,124,1455,8,124,1,124,1,124,1,125,1,125,1,125,1,125,
  	1,125,1,126,1,126,1,126,1,126,3,126,1468,8,126,1,126,1,126,1,127,1,127,
  	1,127,3,127,1475,8,127,1,127,1,127,3,127,1479,8,127,1,127,1,127,1,128,
  	1,128,1,129,1,129,1,130,1,130,1,131,4,131,1490,8,131,11,131,12,131,1491,
  	1,132,1,132,1,132,1,132,1,132,1,132,1,132,1,132,3,132,1502,8,132,1,133,
  	1,133,1,133,1,133,1,133,1,133,1,134,1,134,1,134,1,135,1,135,1,136,1,136,
  	1,136,1,137,1,137,1,138,1,138,1,138,1,139,1,139,1,140,1,140,1,140,1,140,
  	1,140,1,140,3,140,1531,8,140,1,141,1,141,1,141,1,141,1,141,1,141,3,141,
  	1539,8,141,1,142,1,142,1,143,1,143,1,144,1,144,1,144,1,144,1,144,1,144,
  	1,144,3,144,1552,8,144,1,145,1,145,1,146,1,146,1,147,1,147,1,148,1,148,
  	1,149,1,149,1,150,1,150,1,151,1,151,1,152,1,152,1,153,1,153,1,154,1,154,
  	1,154,1,155,1,155,1,156,1,156,1,157,1,157,1,158,1,158,1,159,4,159,1584,
  	8,159,11,159,12,159,1585,1,160,1,160,3,160,1590,8,160,1,161,1,161,1,161,
  	1,161,1,161,1,161,1,161,3,161,1599,8,161,1,162,1,162,1,163,1,163,1,163,
  	1,163,1,164,1,164,1,164,1,164,1,164,1,165,1,165,1,165,1,165,1,166,1,166,
  	3,166,1618,8,166,1,166,3,166,1621,8,166,1,167,1,167,1,167,1,167,1,168,
  	1,168,1,169,1,169,1,169,1,170,1,170,1,170,1,171,1,171,1,171,1,172,1,172,
  	1,172,1,172,1,172,3,172,1643,8,172,1,173,1,173,1,174,1,174,1,175,1,175,
  	1,176,1,176,1,177,1,177,1,178,1,178,1,179,1,179,1,180,1,180,1,181,1,181,
  	1,182,1,182,1,183,1,183,3,183,1667,8,183,1,184,1,184,1,185,1,185,1,185,
  	1,185,1,185,1,185,3,185,1677,8,185,1,186,1,186,1,186,3,186,1682,8,186,
  	1,187,1,187,1,188,1,188,1,189,1,189,1,190,1,190,1,190,1,190,1,191,1,191,
  	1,192,1,192,3,192,1698,8,192,1,192,1,192,1,193,1,193,1,193,1,193,1,193,
  	3,193,1707,8,193,1,193,1,193,1,194,1,194,5,194,1713,8,194,10,194,12,194,
  	1716,9,194,1,195,1,195,1,195,5,195,1721,8,195,10,195,12,195,1724,9,195,
  	1,196,1,196,1,197,1,197,1,197,1,197,1,198,1,198,1,199,1,199,1,200,1,200,
  	1,201,1,201,1,201,1,201,1,202,1,202,1,202,1,202,1,202,1,202,3,202,1748,
  	8,202,1,203,1,203,1,204,1,204,1,205,1,205,1,206,1,206,1,207,1,207,1,208,
  	3,208,1761,8,208,1,208,1,208,1,208,3,208,1766,8,208,1,209,1,209,1,210,
  	1,210,1,210,1,210,1,210,1,211,1,211,1,211,1,211,1,211,1,212,1,212,1,212,
  	1,212,1,212,1,212,1,213,1,213,3,213,1788,8,213,1,213,1,213,3,213,1792,
  	8,213,1,213,1,213,1,213,1,213,1,213,3,213,1799,8,213,1,213,3,213,1802,
  	8,213,1,213,1,213,1,213,1,213,3,213,1808,8,213,1,214,1,214,1,215,1,215,
  	1,215,3,215,1815,8,215,1,215,1,215,3,215,1819,8,215,1,215,1,215,3,215,
  	1823,8,215,3,215,1825,8,215,1,216,5,216,1828,8,216,10,216,12,216,1831,
  	9,216,1,216,1,216,3,216,1835,8,216,1,217,1,217,1,218,1,218,1,218,3,218,
  	1842,8,218,1,218,1,218,1,219,1,219,1,220,1,220,1,221,1,221,1,222,1,222,
  	1,223,1,223,1,223,1,223,3,223,1858,8,223,3,223,1860,8,223,1,223,1,223,
  	1,224,1,224,1,224,1,225,1,225,3,225,1869,8,225,1,226,1,226,1,226,1,226,
  	1,226,1,227,1,227,1,227,1,227,1,227,1,228,1,228,1,229,1,229,1,230,1,230,
  	1,230,1,230,3,230,1889,8,230,1,230,1,230,1,230,1,231,1,231,1,232,1,232,
  	3,232,1898,8,232,1,233,3,233,1901,8,233,1,233,1,233,1,233,3,233,1906,
  	8,233,1,233,3,233,1909,8,233,1,233,1,233,3,233,1913,8,233,1,233,1,233,
  	1,234,1,234,1,234,1,235,1,235,1,235,1,236,1,236,1,237,5,237,1926,8,237,
  	10,237,12,237,1929,9,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,
  	238,1,238,1,238,1,238,3,238,1942,8,238,3,238,1944,8,238,1,238,1,238,1,
  	239,1,239,1,239,5,239,1951,8,239,10,239,12,239,1954,9,239,1,239,3,239,
  	1957,8,239,1,240,1,240,1,240,1,240,3,240,1963,8,240,1,241,1,241,1,242,
  	3,242,1968,8,242,1,242,3,242,1971,8,242,1,242,1,242,3,242,1975,8,242,
  	1,242,3,242,1978,8,242,1,242,1,242,1,243,5,243,1983,8,243,10,243,12,243,
  	1986,9,243,1,243,1,243,1,243,1,244,3,244,1992,8,244,1,244,1,244,5,244,
  	1996,8,244,10,244,12,244,1999,9,244,1,244,1,244,1,244,1,245,1,245,1,245,
  	1,246,1,246,1,246,1,246,1,246,4,246,2012,8,246,11,246,12,246,2013,1,246,
  	1,246,3,246,2018,8,246,1,247,1,247,1,247,1,247,1,247,1,248,1,248,1,248,
  	1,248,1,248,1,248,1,248,1,248,0,0,249,0,2,4,6,8,10,12,14,16,18,20,22,
  	24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,
  	70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,
  	112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,
  	148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,
  	184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,
  	220,222,224,226,228,230,232,234,236,238,240,242,244,246,248,250,252,254,
  	256,258,260,262,264,266,268,270,272,274,276,278,280,282,284,286,288,290,
  	292,294,296,298,300,302,304,306,308,310,312,314,316,318,320,322,324,326,
  	328,330,332,334,336,338,340,342,344,346,348,350,352,354,356,358,360,362,
  	364,366,368,370,372,374,376,378,380,382,384,386,388,390,392,394,396,398,
  	400,402,404,406,408,410,412,414,416,418,420,422,424,426,428,430,432,434,
  	436,438,440,442,444,446,448,450,452,454,456,458,460,462,464,466,468,470,
  	472,474,476,478,480,482,484,486,488,490,492,494,496,0,13,1,0,80,82,2,
  	0,114,114,134,134,3,0,26,26,78,78,106,106,2,0,57,58,76,76,2,0,42,42,100,
  	100,4,0,15,15,55,55,74,74,152,152,5,0,105,105,114,114,130,137,140,142,
  	145,150,3,0,71,71,120,120,135,136,3,0,52,52,63,63,128,128,1,0,157,158,
  	1,0,144,145,2,0,67,67,128,128,2,0,84,84,119,119,2069,0,498,1,0,0,0,2,
  	501,1,0,0,0,4,506,1,0,0,0,6,517,1,0,0,0,8,524,1,0,0,0,10,529,1,0,0,0,
  	12,534,1,0,0,0,14,538,1,0,0,0,16,543,1,0,0,0,18,571,1,0,0,0,20,573,1,
  	0,0,0,22,579,1,0,0,0,24,594,1,0,0,0,26,602,1,0,0,0,28,612,1,0,0,0,30,
  	618,1,0,0,0,32,623,1,0,0,0,34,629,1,0,0,0,36,637,1,0,0,0,38,639,1,0,0,
  	0,40,644,1,0,0,0,42,647,1,0,0,0,44,649,1,0,0,0,46,653,1,0,0,0,48,655,
  	1,0,0,0,50,658,1,0,0,0,52,661,1,0,0,0,54,675,1,0,0,0,56,684,1,0,0,0,58,
  	696,1,0,0,0,60,698,1,0,0,0,62,705,1,0,0,0,64,708,1,0,0,0,66,716,1,0,0,
  	0,68,745,1,0,0,0,70,757,1,0,0,0,72,759,1,0,0,0,74,761,1,0,0,0,76,767,
  	1,0,0,0,78,776,1,0,0,0,80,794,1,0,0,0,82,803,1,0,0,0,84,810,1,0,0,0,86,
  	812,1,0,0,0,88,822,1,0,0,0,90,831,1,0,0,0,92,840,1,0,0,0,94,854,1,0,0,
  	0,96,859,1,0,0,0,98,862,1,0,0,0,100,866,1,0,0,0,102,874,1,0,0,0,104,878,
  	1,0,0,0,106,882,1,0,0,0,108,886,1,0,0,0,110,902,1,0,0,0,112,906,1,0,0,
  	0,114,922,1,0,0,0,116,926,1,0,0,0,118,930,1,0,0,0,120,934,1,0,0,0,122,
  	938,1,0,0,0,124,940,1,0,0,0,126,944,1,0,0,0,128,948,1,0,0,0,130,955,1,
  	0,0,0,132,971,1,0,0,0,134,982,1,0,0,0,136,990,1,0,0,0,138,993,1,0,0,0,
  	140,1013,1,0,0,0,142,1036,1,0,0,0,144,1039,1,0,0,0,146,1066,1,0,0,0,148,
  	1072,1,0,0,0,150,1074,1,0,0,0,152,1079,1,0,0,0,154,1083,1,0,0,0,156,1113,
  	1,0,0,0,158,1115,1,0,0,0,160,1134,1,0,0,0,162,1136,1,0,0,0,164,1144,1,
  	0,0,0,166,1147,1,0,0,0,168,1156,1,0,0,0,170,1159,1,0,0,0,172,1162,1,0,
  	0,0,174,1168,1,0,0,0,176,1175,1,0,0,0,178,1188,1,0,0,0,180,1192,1,0,0,
  	0,182,1205,1,0,0,0,184,1207,1,0,0,0,186,1210,1,0,0,0,188,1236,1,0,0,0,
  	190,1238,1,0,0,0,192,1240,1,0,0,0,194,1248,1,0,0,0,196,1252,1,0,0,0,198,
  	1268,1,0,0,0,200,1270,1,0,0,0,202,1281,1,0,0,0,204,1283,1,0,0,0,206,1288,
  	1,0,0,0,208,1294,1,0,0,0,210,1300,1,0,0,0,212,1305,1,0,0,0,214,1312,1,
  	0,0,0,216,1318,1,0,0,0,218,1324,1,0,0,0,220,1331,1,0,0,0,222,1344,1,0,
  	0,0,224,1348,1,0,0,0,226,1355,1,0,0,0,228,1380,1,0,0,0,230,1382,1,0,0,
  	0,232,1407,1,0,0,0,234,1409,1,0,0,0,236,1414,1,0,0,0,238,1422,1,0,0,0,
  	240,1432,1,0,0,0,242,1436,1,0,0,0,244,1443,1,0,0,0,246,1447,1,0,0,0,248,
  	1450,1,0,0,0,250,1458,1,0,0,0,252,1463,1,0,0,0,254,1471,1,0,0,0,256,1482,
  	1,0,0,0,258,1484,1,0,0,0,260,1486,1,0,0,0,262,1489,1,0,0,0,264,1501,1,
  	0,0,0,266,1503,1,0,0,0,268,1509,1,0,0,0,270,1512,1,0,0,0,272,1514,1,0,
  	0,0,274,1517,1,0,0,0,276,1519,1,0,0,0,278,1522,1,0,0,0,280,1530,1,0,0,
  	0,282,1538,1,0,0,0,284,1540,1,0,0,0,286,1542,1,0,0,0,288,1551,1,0,0,0,
  	290,1553,1,0,0,0,292,1555,1,0,0,0,294,1557,1,0,0,0,296,1559,1,0,0,0,298,
  	1561,1,0,0,0,300,1563,1,0,0,0,302,1565,1,0,0,0,304,1567,1,0,0,0,306,1569,
  	1,0,0,0,308,1571,1,0,0,0,310,1574,1,0,0,0,312,1576,1,0,0,0,314,1578,1,
  	0,0,0,316,1580,1,0,0,0,318,1583,1,0,0,0,320,1589,1,0,0,0,322,1598,1,0,
  	0,0,324,1600,1,0,0,0,326,1602,1,0,0,0,328,1606,1,0,0,0,330,1611,1,0,0,
  	0,332,1620,1,0,0,0,334,1622,1,0,0,0,336,1626,1,0,0,0,338,1628,1,0,0,0,
  	340,1631,1,0,0,0,342,1634,1,0,0,0,344,1637,1,0,0,0,346,1644,1,0,0,0,348,
  	1646,1,0,0,0,350,1648,1,0,0,0,352,1650,1,0,0,0,354,1652,1,0,0,0,356,1654,
  	1,0,0,0,358,1656,1,0,0,0,360,1658,1,0,0,0,362,1660,1,0,0,0,364,1662,1,
  	0,0,0,366,1666,1,0,0,0,368,1668,1,0,0,0,370,1676,1,0,0,0,372,1681,1,0,
  	0,0,374,1683,1,0,0,0,376,1685,1,0,0,0,378,1687,1,0,0,0,380,1689,1,0,0,
  	0,382,1693,1,0,0,0,384,1697,1,0,0,0,386,1701,1,0,0,0,388,1714,1,0,0,0,
  	390,1717,1,0,0,0,392,1725,1,0,0,0,394,1727,1,0,0,0,396,1731,1,0,0,0,398,
  	1733,1,0,0,0,400,1735,1,0,0,0,402,1737,1,0,0,0,404,1747,1,0,0,0,406,1749,
  	1,0,0,0,408,1751,1,0,0,0,410,1753,1,0,0,0,412,1755,1,0,0,0,414,1757,1,
  	0,0,0,416,1765,1,0,0,0,418,1767,1,0,0,0,420,1769,1,0,0,0,422,1774,1,0,
  	0,0,424,1779,1,0,0,0,426,1807,1,0,0,0,428,1809,1,0,0,0,430,1824,1,0,0,
  	0,432,1829,1,0,0,0,434,1836,1,0,0,0,436,1841,1,0,0,0,438,1845,1,0,0,0,
  	440,1847,1,0,0,0,442,1849,1,0,0,0,444,1851,1,0,0,0,446,1859,1,0,0,0,448,
  	1863,1,0,0,0,450,1868,1,0,0,0,452,1870,1,0,0,0,454,1875,1,0,0,0,456,1880,
  	1,0,0,0,458,1882,1,0,0,0,460,1884,1,0,0,0,462,1893,1,0,0,0,464,1897,1,
  	0,0,0,466,1900,1,0,0,0,468,1916,1,0,0,0,470,1919,1,0,0,0,472,1922,1,0,
  	0,0,474,1927,1,0,0,0,476,1943,1,0,0,0,478,1956,1,0,0,0,480,1962,1,0,0,
  	0,482,1964,1,0,0,0,484,1967,1,0,0,0,486,1984,1,0,0,0,488,1991,1,0,0,0,
  	490,2003,1,0,0,0,492,2017,1,0,0,0,494,2019,1,0,0,0,496,2024,1,0,0,0,498,
  	499,3,4,2,0,499,500,5,0,0,1,500,1,1,0,0,0,501,502,3,0,0,0,502,3,1,0,0,
  	0,503,505,3,66,33,0,504,503,1,0,0,0,505,508,1,0,0,0,506,504,1,0,0,0,506,
  	507,1,0,0,0,507,5,1,0,0,0,508,506,1,0,0,0,509,510,5,141,0,0,510,511,5,
  	154,0,0,511,513,5,149,0,0,512,509,1,0,0,0,512,513,1,0,0,0,513,518,1,0,
  	0,0,514,516,5,154,0,0,515,514,1,0,0,0,515,516,1,0,0,0,516,518,1,0,0,0,
  	517,512,1,0,0,0,517,515,1,0,0,0,518,7,1,0,0,0,519,525,5,113,0,0,520,521,
  	5,123,0,0,521,522,3,10,5,0,522,523,5,124,0,0,523,525,1,0,0,0,524,519,
  	1,0,0,0,524,520,1,0,0,0,525,9,1,0,0,0,526,528,3,12,6,0,527,526,1,0,0,
  	0,528,531,1,0,0,0,529,527,1,0,0,0,529,530,1,0,0,0,530,11,1,0,0,0,531,
  	529,1,0,0,0,532,535,3,14,7,0,533,535,3,20,10,0,534,532,1,0,0,0,534,533,
  	1,0,0,0,535,13,1,0,0,0,536,539,3,68,34,0,537,539,3,70,35,0,538,536,1,
  	0,0,0,538,537,1,0,0,0,539,15,1,0,0,0,540,542,3,468,234,0,541,540,1,0,
  	0,0,542,545,1,0,0,0,543,541,1,0,0,0,543,544,1,0,0,0,544,546,1,0,0,0,545,
  	543,1,0,0,0,546,550,5,33,0,0,547,548,3,6,3,0,548,549,5,50,0,0,549,551,
  	1,0,0,0,550,547,1,0,0,0,550,551,1,0,0,0,551,552,1,0,0,0,552,557,3,54,
  	27,0,553,554,5,127,0,0,554,556,3,54,27,0,555,553,1,0,0,0,556,559,1,0,
  	0,0,557,555,1,0,0,0,557,558,1,0,0,0,558,560,1,0,0,0,559,557,1,0,0,0,560,
  	561,5,99,0,0,561,566,3,54,27,0,562,563,5,127,0,0,563,565,3,54,27,0,564,
  	562,1,0,0,0,565,568,1,0,0,0,566,564,1,0,0,0,566,567,1,0,0,0,567,569,1,
  	0,0,0,568,566,1,0,0,0,569,570,3,8,4,0,570,17,1,0,0,0,571,572,3,54,27,
  	0,572,19,1,0,0,0,573,574,3,22,11,0,574,21,1,0,0,0,575,580,3,24,12,0,576,
  	580,3,26,13,0,577,580,3,28,14,0,578,580,3,474,237,0,579,575,1,0,0,0,579,
  	576,1,0,0,0,579,577,1,0,0,0,579,578,1,0,0,0,580,23,1,0,0,0,581,582,5,
  	25,0,0,582,592,3,6,3,0,583,584,5,11,0,0,584,589,3,18,9,0,585,586,5,127,
  	0,0,586,588,3,18,9,0,587,585,1,0,0,0,588,591,1,0,0,0,589,587,1,0,0,0,
  	589,590,1,0,0,0,590,593,1,0,0,0,591,589,1,0,0,0,592,583,1,0,0,0,592,593,
  	1,0,0,0,593,595,1,0,0,0,594,581,1,0,0,0,594,595,1,0,0,0,595,598,1,0,0,
  	0,596,597,5,1,0,0,597,599,5,159,0,0,598,596,1,0,0,0,598,599,1,0,0,0,599,
  	600,1,0,0,0,600,601,5,109,0,0,601,25,1,0,0,0,602,603,5,38,0,0,603,606,
  	3,6,3,0,604,605,5,1,0,0,605,607,5,159,0,0,606,604,1,0,0,0,606,607,1,0,
  	0,0,607,608,1,0,0,0,608,609,5,109,0,0,609,27,1,0,0,0,610,611,5,87,0,0,
  	611,613,3,6,3,0,612,610,1,0,0,0,612,613,1,0,0,0,613,614,1,0,0,0,614,615,
  	5,64,0,0,615,616,5,159,0,0,616,617,5,109,0,0,617,29,1,0,0,0,618,619,3,
  	38,19,0,619,31,1,0,0,0,620,622,3,470,235,0,621,620,1,0,0,0,622,625,1,
  	0,0,0,623,621,1,0,0,0,623,624,1,0,0,0,624,626,1,0,0,0,625,623,1,0,0,0,
  	626,627,3,34,17,0,627,628,3,36,18,0,628,33,1,0,0,0,629,630,5,69,0,0,630,
  	631,3,6,3,0,631,35,1,0,0,0,632,638,5,113,0,0,633,634,5,123,0,0,634,635,
  	3,40,20,0,635,636,5,124,0,0,636,638,1,0,0,0,637,632,1,0,0,0,637,633,1,
  	0,0,0,638,37,1,0,0,0,639,640,3,4,2,0,640,39,1,0,0,0,641,645,3,46,23,0,
  	642,645,3,52,26,0,643,645,3,56,28,0,644,641,1,0,0,0,644,642,1,0,0,0,644,
  	643,1,0,0,0,645,41,1,0,0,0,646,648,3,44,22,0,647,646,1,0,0,0,647,648,
  	1,0,0,0,648,43,1,0,0,0,649,650,7,0,0,0,650,45,1,0,0,0,651,654,3,48,24,
  	0,652,654,3,50,25,0,653,651,1,0,0,0,653,652,1,0,0,0,654,47,1,0,0,0,655,
  	656,3,42,21,0,656,657,3,68,34,0,657,49,1,0,0,0,658,659,3,42,21,0,659,
  	660,3,70,35,0,660,51,1,0,0,0,661,662,3,42,21,0,662,666,5,13,0,0,663,664,
  	5,141,0,0,664,665,5,154,0,0,665,667,5,149,0,0,666,663,1,0,0,0,666,667,
  	1,0,0,0,667,669,1,0,0,0,668,670,5,154,0,0,669,668,1,0,0,0,669,670,1,0,
  	0,0,670,671,1,0,0,0,671,672,5,49,0,0,672,673,3,54,27,0,673,674,3,8,4,
  	0,674,53,1,0,0,0,675,680,5,154,0,0,676,677,5,115,0,0,677,679,5,154,0,
  	0,678,676,1,0,0,0,679,682,1,0,0,0,680,678,1,0,0,0,680,681,1,0,0,0,681,
  	55,1,0,0,0,682,680,1,0,0,0,683,685,3,44,22,0,684,683,1,0,0,0,684,685,
  	1,0,0,0,685,686,1,0,0,0,686,688,5,56,0,0,687,689,5,14,0,0,688,687,1,0,
  	0,0,688,689,1,0,0,0,689,690,1,0,0,0,690,692,3,58,29,0,691,693,3,8,4,0,
  	692,691,1,0,0,0,692,693,1,0,0,0,693,57,1,0,0,0,694,697,3,60,30,0,695,
  	697,3,56,28,0,696,694,1,0,0,0,696,695,1,0,0,0,697,59,1,0,0,0,698,700,
  	3,54,27,0,699,701,5,115,0,0,700,699,1,0,0,0,700,701,1,0,0,0,701,703,1,
  	0,0,0,702,704,7,1,0,0,703,702,1,0,0,0,703,704,1,0,0,0,704,61,1,0,0,0,
  	705,706,3,58,29,0,706,707,3,64,32,0,707,63,1,0,0,0,708,709,5,125,0,0,
  	709,710,3,264,132,0,710,711,5,126,0,0,711,65,1,0,0,0,712,717,3,22,11,
  	0,713,717,3,68,34,0,714,717,3,70,35,0,715,717,3,72,36,0,716,712,1,0,0,
  	0,716,713,1,0,0,0,716,714,1,0,0,0,716,715,1,0,0,0,717,67,1,0,0,0,718,
  	746,3,16,8,0,719,746,3,74,37,0,720,746,3,128,64,0,721,746,3,204,102,0,
  	722,746,3,32,16,0,723,746,3,206,103,0,724,746,3,208,104,0,725,746,3,466,
  	233,0,726,746,3,210,105,0,727,746,3,212,106,0,728,746,3,420,210,0,729,
  	746,3,234,117,0,730,746,3,238,119,0,731,746,3,250,125,0,732,746,3,450,
  	225,0,733,746,3,486,243,0,734,746,3,488,244,0,735,746,3,100,50,0,736,
  	746,3,108,54,0,737,746,3,134,67,0,738,746,3,112,56,0,739,746,3,196,98,
  	0,740,746,3,176,88,0,741,746,3,180,90,0,742,746,3,186,93,0,743,746,3,
  	200,100,0,744,746,3,56,28,0,745,718,1,0,0,0,745,719,1,0,0,0,745,720,1,
  	0,0,0,745,721,1,0,0,0,745,722,1,0,0,0,745,723,1,0,0,0,745,724,1,0,0,0,
  	745,725,1,0,0,0,745,726,1,0,0,0,745,727,1,0,0,0,745,728,1,0,0,0,745,729,
  	1,0,0,0,745,730,1,0,0,0,745,731,1,0,0,0,745,732,1,0,0,0,745,733,1,0,0,
  	0,745,734,1,0,0,0,745,735,1,0,0,0,745,736,1,0,0,0,745,737,1,0,0,0,745,
  	738,1,0,0,0,745,739,1,0,0,0,745,740,1,0,0,0,745,741,1,0,0,0,745,742,1,
  	0,0,0,745,743,1,0,0,0,745,744,1,0,0,0,746,69,1,0,0,0,747,758,3,138,69,
  	0,748,758,3,236,118,0,749,758,3,248,124,0,750,758,3,252,126,0,751,758,
  	3,254,127,0,752,758,3,214,107,0,753,758,3,226,113,0,754,758,3,230,115,
  	0,755,758,3,422,211,0,756,758,3,424,212,0,757,747,1,0,0,0,757,748,1,0,
  	0,0,757,749,1,0,0,0,757,750,1,0,0,0,757,751,1,0,0,0,757,752,1,0,0,0,757,
  	753,1,0,0,0,757,754,1,0,0,0,757,755,1,0,0,0,757,756,1,0,0,0,758,71,1,
  	0,0,0,759,760,3,496,248,0,760,73,1,0,0,0,761,762,3,76,38,0,762,763,5,
  	101,0,0,763,764,3,78,39,0,764,765,3,94,47,0,765,75,1,0,0,0,766,768,5,
  	12,0,0,767,766,1,0,0,0,767,768,1,0,0,0,768,772,1,0,0,0,769,771,3,470,
  	235,0,770,769,1,0,0,0,771,774,1,0,0,0,772,770,1,0,0,0,772,773,1,0,0,0,
  	773,77,1,0,0,0,774,772,1,0,0,0,775,777,5,14,0,0,776,775,1,0,0,0,776,777,
  	1,0,0,0,777,778,1,0,0,0,778,780,3,6,3,0,779,781,3,460,230,0,780,779,1,
  	0,0,0,780,781,1,0,0,0,781,784,1,0,0,0,782,785,3,80,40,0,783,785,3,82,
  	41,0,784,782,1,0,0,0,784,783,1,0,0,0,785,786,1,0,0,0,786,784,1,0,0,0,
  	786,787,1,0,0,0,787,791,1,0,0,0,788,790,3,84,42,0,789,788,1,0,0,0,790,
  	793,1,0,0,0,791,789,1,0,0,0,791,792,1,0,0,0,792,79,1,0,0,0,793,791,1,
  	0,0,0,794,795,5,6,0,0,795,800,3,102,51,0,796,797,5,127,0,0,797,799,3,
  	102,51,0,798,796,1,0,0,0,799,802,1,0,0,0,800,798,1,0,0,0,800,801,1,0,
  	0,0,801,81,1,0,0,0,802,800,1,0,0,0,803,804,5,10,0,0,804,805,3,110,55,
  	0,805,83,1,0,0,0,806,811,3,86,43,0,807,811,3,88,44,0,808,811,3,90,45,
  	0,809,811,3,92,46,0,810,806,1,0,0,0,810,807,1,0,0,0,810,808,1,0,0,0,810,
  	809,1,0,0,0,811,85,1,0,0,0,812,813,5,37,0,0,813,814,5,50,0,0,814,819,
  	3,114,57,0,815,816,5,127,0,0,816,818,3,114,57,0,817,815,1,0,0,0,818,821,
  	1,0,0,0,819,817,1,0,0,0,819,820,1,0,0,0,820,87,1,0,0,0,821,819,1,0,0,
  	0,822,823,5,104,0,0,823,828,3,116,58,0,824,825,5,127,0,0,825,827,3,116,
  	58,0,826,824,1,0,0,0,827,830,1,0,0,0,828,826,1,0,0,0,828,829,1,0,0,0,
  	829,89,1,0,0,0,830,828,1,0,0,0,831,832,5,54,0,0,832,837,3,118,59,0,833,
  	834,5,127,0,0,834,836,3,118,59,0,835,833,1,0,0,0,836,839,1,0,0,0,837,
  	835,1,0,0,0,837,838,1,0,0,0,838,91,1,0,0,0,839,837,1,0,0,0,840,841,5,
  	35,0,0,841,846,3,120,60,0,842,843,5,127,0,0,843,845,3,120,60,0,844,842,
  	1,0,0,0,845,848,1,0,0,0,846,844,1,0,0,0,846,847,1,0,0,0,847,93,1,0,0,
  	0,848,846,1,0,0,0,849,855,5,113,0,0,850,851,5,123,0,0,851,852,3,96,48,
  	0,852,853,5,124,0,0,853,855,1,0,0,0,854,849,1,0,0,0,854,850,1,0,0,0,855,
  	95,1,0,0,0,856,858,3,66,33,0,857,856,1,0,0,0,858,861,1,0,0,0,859,857,
  	1,0,0,0,859,860,1,0,0,0,860,97,1,0,0,0,861,859,1,0,0,0,862,863,3,66,33,
  	0,863,99,1,0,0,0,864,865,5,89,0,0,865,867,3,6,3,0,866,864,1,0,0,0,866,
  	867,1,0,0,0,867,868,1,0,0,0,868,869,5,96,0,0,869,870,3,104,52,0,870,871,
  	5,6,0,0,871,872,3,106,53,0,872,873,3,8,4,0,873,101,1,0,0,0,874,875,3,
  	106,53,0,875,103,1,0,0,0,876,879,3,54,27,0,877,879,3,190,95,0,878,876,
  	1,0,0,0,878,877,1,0,0,0,879,105,1,0,0,0,880,883,3,54,27,0,881,883,3,190,
  	95,0,882,880,1,0,0,0,882,881,1,0,0,0,883,107,1,0,0,0,884,885,5,29,0,0,
  	885,887,3,6,3,0,886,884,1,0,0,0,886,887,1,0,0,0,887,888,1,0,0,0,888,891,
  	5,27,0,0,889,892,3,54,27,0,890,892,3,192,96,0,891,889,1,0,0,0,891,890,
  	1,0,0,0,892,893,1,0,0,0,893,896,5,10,0,0,894,897,3,54,27,0,895,897,3,
  	192,96,0,896,894,1,0,0,0,896,895,1,0,0,0,897,898,1,0,0,0,898,899,3,8,
  	4,0,899,109,1,0,0,0,900,903,3,54,27,0,901,903,3,192,96,0,902,900,1,0,
  	0,0,902,901,1,0,0,0,903,111,1,0,0,0,904,905,5,36,0,0,905,907,3,6,3,0,
  	906,904,1,0,0,0,906,907,1,0,0,0,907,908,1,0,0,0,908,911,5,37,0,0,909,
  	912,3,54,27,0,910,912,3,192,96,0,911,909,1,0,0,0,911,910,1,0,0,0,912,
  	913,1,0,0,0,913,916,5,50,0,0,914,917,3,54,27,0,915,917,3,192,96,0,916,
  	914,1,0,0,0,916,915,1,0,0,0,917,918,1,0,0,0,918,919,3,8,4,0,919,113,1,
  	0,0,0,920,923,3,54,27,0,921,923,3,192,96,0,922,920,1,0,0,0,922,921,1,
  	0,0,0,923,115,1,0,0,0,924,927,3,54,27,0,925,927,3,190,95,0,926,924,1,
  	0,0,0,926,925,1,0,0,0,927,117,1,0,0,0,928,931,3,54,27,0,929,931,3,190,
  	95,0,930,928,1,0,0,0,930,929,1,0,0,0,931,119,1,0,0,0,932,935,3,54,27,
  	0,933,935,3,190,95,0,934,932,1,0,0,0,934,933,1,0,0,0,935,121,1,0,0,0,
  	936,939,3,124,62,0,937,939,3,126,63,0,938,936,1,0,0,0,938,937,1,0,0,0,
  	939,123,1,0,0,0,940,941,3,42,21,0,941,942,5,65,0,0,942,943,3,70,35,0,
  	943,125,1,0,0,0,944,945,3,42,21,0,945,946,3,70,35,0,946,127,1,0,0,0,947,
  	949,3,76,38,0,948,947,1,0,0,0,948,949,1,0,0,0,949,950,1,0,0,0,950,951,
  	5,24,0,0,951,952,3,130,65,0,952,953,3,94,47,0,953,129,1,0,0,0,954,956,
  	5,14,0,0,955,954,1,0,0,0,955,956,1,0,0,0,956,957,1,0,0,0,957,959,3,6,
  	3,0,958,960,3,460,230,0,959,958,1,0,0,0,959,960,1,0,0,0,960,963,1,0,0,
  	0,961,964,3,132,66,0,962,964,3,82,41,0,963,961,1,0,0,0,963,962,1,0,0,
  	0,963,964,1,0,0,0,964,968,1,0,0,0,965,967,3,84,42,0,966,965,1,0,0,0,967,
  	970,1,0,0,0,968,966,1,0,0,0,968,969,1,0,0,0,969,131,1,0,0,0,970,968,1,
  	0,0,0,971,972,5,6,0,0,972,977,3,136,68,0,973,974,5,127,0,0,974,976,3,
  	136,68,0,975,973,1,0,0,0,976,979,1,0,0,0,977,975,1,0,0,0,977,978,1,0,
  	0,0,978,133,1,0,0,0,979,977,1,0,0,0,980,981,5,89,0,0,981,983,3,6,3,0,
  	982,980,1,0,0,0,982,983,1,0,0,0,983,984,1,0,0,0,984,985,5,93,0,0,985,
  	986,3,54,27,0,986,987,5,6,0,0,987,988,3,54,27,0,988,989,3,8,4,0,989,135,
  	1,0,0,0,990,991,3,54,27,0,991,137,1,0,0,0,992,994,3,140,70,0,993,992,
  	1,0,0,0,993,994,1,0,0,0,994,999,1,0,0,0,995,996,5,43,0,0,996,1000,3,144,
  	72,0,997,1000,5,43,0,0,998,1000,3,470,235,0,999,995,1,0,0,0,999,997,1,
  	0,0,0,999,998,1,0,0,0,1000,1002,1,0,0,0,1001,1003,3,168,84,0,1002,1001,
  	1,0,0,0,1002,1003,1,0,0,0,1003,1005,1,0,0,0,1004,1006,3,448,224,0,1005,
  	1004,1,0,0,0,1005,1006,1,0,0,0,1006,1008,1,0,0,0,1007,1009,3,446,223,
  	0,1008,1007,1,0,0,0,1008,1009,1,0,0,0,1009,1010,1,0,0,0,1010,1011,3,94,
  	47,0,1011,139,1,0,0,0,1012,1014,3,142,71,0,1013,1012,1,0,0,0,1013,1014,
  	1,0,0,0,1014,1016,1,0,0,0,1015,1017,5,12,0,0,1016,1015,1,0,0,0,1016,1017,
  	1,0,0,0,1017,1019,1,0,0,0,1018,1020,7,2,0,0,1019,1018,1,0,0,0,1019,1020,
  	1,0,0,0,1020,1022,1,0,0,0,1021,1023,5,83,0,0,1022,1021,1,0,0,0,1022,1023,
  	1,0,0,0,1023,1025,1,0,0,0,1024,1026,5,34,0,0,1025,1024,1,0,0,0,1025,1026,
  	1,0,0,0,1026,1028,1,0,0,0,1027,1029,5,40,0,0,1028,1027,1,0,0,0,1028,1029,
  	1,0,0,0,1029,1033,1,0,0,0,1030,1032,3,470,235,0,1031,1030,1,0,0,0,1032,
  	1035,1,0,0,0,1033,1031,1,0,0,0,1033,1034,1,0,0,0,1034,141,1,0,0,0,1035,
  	1033,1,0,0,0,1036,1037,7,3,0,0,1037,143,1,0,0,0,1038,1040,5,14,0,0,1039,
  	1038,1,0,0,0,1039,1040,1,0,0,0,1040,1048,1,0,0,0,1041,1044,3,146,73,0,
  	1042,1045,3,156,78,0,1043,1045,3,82,41,0,1044,1042,1,0,0,0,1044,1043,
  	1,0,0,0,1044,1045,1,0,0,0,1045,1049,1,0,0,0,1046,1049,3,156,78,0,1047,
  	1049,3,82,41,0,1048,1041,1,0,0,0,1048,1046,1,0,0,0,1048,1047,1,0,0,0,
  	1049,1053,1,0,0,0,1050,1052,3,148,74,0,1051,1050,1,0,0,0,1052,1055,1,
  	0,0,0,1053,1051,1,0,0,0,1053,1054,1,0,0,0,1054,1057,1,0,0,0,1055,1053,
  	1,0,0,0,1056,1058,3,94,47,0,1057,1056,1,0,0,0,1057,1058,1,0,0,0,1058,
  	145,1,0,0,0,1059,1060,5,141,0,0,1060,1061,5,154,0,0,1061,1063,5,149,0,
  	0,1062,1064,5,154,0,0,1063,1062,1,0,0,0,1063,1064,1,0,0,0,1064,1067,1,
  	0,0,0,1065,1067,5,154,0,0,1066,1059,1,0,0,0,1066,1065,1,0,0,0,1067,147,
  	1,0,0,0,1068,1073,3,84,42,0,1069,1073,3,150,75,0,1070,1073,3,152,76,0,
  	1071,1073,3,154,77,0,1072,1068,1,0,0,0,1072,1069,1,0,0,0,1072,1070,1,
  	0,0,0,1072,1071,1,0,0,0,1073,149,1,0,0,0,1074,1077,5,22,0,0,1075,1078,
  	3,194,97,0,1076,1078,3,192,96,0,1077,1075,1,0,0,0,1077,1076,1,0,0,0,1078,
  	151,1,0,0,0,1079,1080,5,61,0,0,1080,1081,5,73,0,0,1081,1082,3,198,99,
  	0,1082,153,1,0,0,0,1083,1084,5,44,0,0,1084,1085,5,21,0,0,1085,1090,3,
  	202,101,0,1086,1087,5,127,0,0,1087,1089,3,202,101,0,1088,1086,1,0,0,0,
  	1089,1092,1,0,0,0,1090,1088,1,0,0,0,1090,1091,1,0,0,0,1091,155,1,0,0,
  	0,1092,1090,1,0,0,0,1093,1095,3,160,80,0,1094,1093,1,0,0,0,1095,1096,
  	1,0,0,0,1096,1094,1,0,0,0,1096,1097,1,0,0,0,1097,1099,1,0,0,0,1098,1100,
  	3,158,79,0,1099,1098,1,0,0,0,1099,1100,1,0,0,0,1100,1104,1,0,0,0,1101,
  	1103,3,160,80,0,1102,1101,1,0,0,0,1103,1106,1,0,0,0,1104,1102,1,0,0,0,
  	1104,1105,1,0,0,0,1105,1114,1,0,0,0,1106,1104,1,0,0,0,1107,1109,3,158,
  	79,0,1108,1110,3,160,80,0,1109,1108,1,0,0,0,1110,1111,1,0,0,0,1111,1109,
  	1,0,0,0,1111,1112,1,0,0,0,1112,1114,1,0,0,0,1113,1094,1,0,0,0,1113,1107,
  	1,0,0,0,1114,157,1,0,0,0,1115,1128,3,460,230,0,1116,1118,5,75,0,0,1117,
  	1119,5,70,0,0,1118,1117,1,0,0,0,1118,1119,1,0,0,0,1119,1121,1,0,0,0,1120,
  	1116,1,0,0,0,1120,1121,1,0,0,0,1121,1129,1,0,0,0,1122,1124,5,70,0,0,1123,
  	1122,1,0,0,0,1123,1124,1,0,0,0,1124,1125,1,0,0,0,1125,1127,5,75,0,0,1126,
  	1123,1,0,0,0,1126,1127,1,0,0,0,1127,1129,1,0,0,0,1128,1120,1,0,0,0,1128,
  	1126,1,0,0,0,1129,159,1,0,0,0,1130,1135,3,162,81,0,1131,1135,3,166,83,
  	0,1132,1135,3,170,85,0,1133,1135,3,172,86,0,1134,1130,1,0,0,0,1134,1131,
  	1,0,0,0,1134,1132,1,0,0,0,1134,1133,1,0,0,0,1135,161,1,0,0,0,1136,1141,
  	3,164,82,0,1137,1138,5,127,0,0,1138,1140,3,178,89,0,1139,1137,1,0,0,0,
  	1140,1143,1,0,0,0,1141,1139,1,0,0,0,1141,1142,1,0,0,0,1142,163,1,0,0,
  	0,1143,1141,1,0,0,0,1144,1145,5,5,0,0,1145,1146,3,178,89,0,1146,165,1,
  	0,0,0,1147,1148,3,168,84,0,1148,1153,3,182,91,0,1149,1150,5,127,0,0,1150,
  	1152,3,182,91,0,1151,1149,1,0,0,0,1152,1155,1,0,0,0,1153,1151,1,0,0,0,
  	1153,1154,1,0,0,0,1154,167,1,0,0,0,1155,1153,1,0,0,0,1156,1157,5,7,0,
  	0,1157,1158,3,182,91,0,1158,169,1,0,0,0,1159,1160,5,8,0,0,1160,1161,3,
  	184,92,0,1161,171,1,0,0,0,1162,1165,3,174,87,0,1163,1164,5,127,0,0,1164,
  	1166,3,188,94,0,1165,1163,1,0,0,0,1165,1166,1,0,0,0,1166,173,1,0,0,0,
  	1167,1169,3,142,71,0,1168,1167,1,0,0,0,1168,1169,1,0,0,0,1169,1170,1,
  	0,0,0,1170,1171,5,9,0,0,1171,1172,3,188,94,0,1172,175,1,0,0,0,1173,1174,
  	5,89,0,0,1174,1176,3,6,3,0,1175,1173,1,0,0,0,1175,1176,1,0,0,0,1176,1178,
  	1,0,0,0,1177,1179,5,103,0,0,1178,1177,1,0,0,0,1178,1179,1,0,0,0,1179,
  	1180,1,0,0,0,1180,1181,3,54,27,0,1181,1182,5,5,0,0,1182,1184,3,106,53,
  	0,1183,1185,3,158,79,0,1184,1183,1,0,0,0,1184,1185,1,0,0,0,1185,1186,
  	1,0,0,0,1186,1187,3,8,4,0,1187,177,1,0,0,0,1188,1189,3,106,53,0,1189,
  	179,1,0,0,0,1190,1191,5,89,0,0,1191,1193,3,6,3,0,1192,1190,1,0,0,0,1192,
  	1193,1,0,0,0,1193,1195,1,0,0,0,1194,1196,5,94,0,0,1195,1194,1,0,0,0,1195,
  	1196,1,0,0,0,1196,1197,1,0,0,0,1197,1198,3,104,52,0,1198,1199,5,7,0,0,
  	1199,1201,3,106,53,0,1200,1202,3,158,79,0,1201,1200,1,0,0,0,1201,1202,
  	1,0,0,0,1202,1203,1,0,0,0,1203,1204,3,8,4,0,1204,181,1,0,0,0,1205,1206,
  	3,106,53,0,1206,183,1,0,0,0,1207,1208,3,106,53,0,1208,185,1,0,0,0,1209,
  	1211,3,142,71,0,1210,1209,1,0,0,0,1210,1211,1,0,0,0,1211,1214,1,0,0,0,
  	1212,1213,5,89,0,0,1213,1215,3,6,3,0,1214,1212,1,0,0,0,1214,1215,1,0,
  	0,0,1215,1218,1,0,0,0,1216,1217,5,85,0,0,1217,1219,3,104,52,0,1218,1216,
  	1,0,0,0,1218,1219,1,0,0,0,1219,1220,1,0,0,0,1220,1221,5,9,0,0,1221,1223,
  	3,54,27,0,1222,1224,3,164,82,0,1223,1222,1,0,0,0,1223,1224,1,0,0,0,1224,
  	1226,1,0,0,0,1225,1227,3,158,79,0,1226,1225,1,0,0,0,1226,1227,1,0,0,0,
  	1227,1229,1,0,0,0,1228,1230,3,168,84,0,1229,1228,1,0,0,0,1229,1230,1,
  	0,0,0,1230,1232,1,0,0,0,1231,1233,3,448,224,0,1232,1231,1,0,0,0,1232,
  	1233,1,0,0,0,1233,1234,1,0,0,0,1234,1235,3,8,4,0,1235,187,1,0,0,0,1236,
  	1237,3,106,53,0,1237,189,1,0,0,0,1238,1239,3,192,96,0,1239,191,1,0,0,
  	0,1240,1245,3,194,97,0,1241,1242,5,139,0,0,1242,1244,3,194,97,0,1243,
  	1241,1,0,0,0,1244,1247,1,0,0,0,1245,1243,1,0,0,0,1245,1246,1,0,0,0,1246,
  	193,1,0,0,0,1247,1245,1,0,0,0,1248,1249,3,54,27,0,1249,195,1,0,0,0,1250,
  	1251,5,62,0,0,1251,1253,3,6,3,0,1252,1250,1,0,0,0,1252,1253,1,0,0,0,1253,
  	1254,1,0,0,0,1254,1257,5,61,0,0,1255,1258,3,54,27,0,1256,1258,3,190,95,
  	0,1257,1255,1,0,0,0,1257,1256,1,0,0,0,1258,1259,1,0,0,0,1259,1262,5,73,
  	0,0,1260,1263,3,54,27,0,1261,1263,3,190,95,0,1262,1260,1,0,0,0,1262,1261,
  	1,0,0,0,1263,1264,1,0,0,0,1264,1265,3,8,4,0,1265,197,1,0,0,0,1266,1269,
  	3,54,27,0,1267,1269,3,190,95,0,1268,1266,1,0,0,0,1268,1267,1,0,0,0,1269,
  	199,1,0,0,0,1270,1274,5,45,0,0,1271,1272,3,6,3,0,1272,1273,5,73,0,0,1273,
  	1275,1,0,0,0,1274,1271,1,0,0,0,1274,1275,1,0,0,0,1275,1276,1,0,0,0,1276,
  	1277,3,54,27,0,1277,1278,5,21,0,0,1278,1279,3,54,27,0,1279,1280,3,8,4,
  	0,1280,201,1,0,0,0,1281,1282,3,54,27,0,1282,203,1,0,0,0,1283,1284,3,76,
  	38,0,1284,1285,5,31,0,0,1285,1286,3,130,65,0,1286,1287,3,94,47,0,1287,
  	205,1,0,0,0,1288,1289,3,76,38,0,1289,1290,5,23,0,0,1290,1291,3,130,65,
  	0,1291,1292,3,94,47,0,1292,207,1,0,0,0,1293,1295,3,76,38,0,1294,1293,
  	1,0,0,0,1294,1295,1,0,0,0,1295,1296,1,0,0,0,1296,1297,5,92,0,0,1297,1298,
  	3,130,65,0,1298,1299,3,94,47,0,1299,209,1,0,0,0,1300,1301,3,76,38,0,1301,
  	1302,5,17,0,0,1302,1303,3,130,65,0,1303,1304,3,94,47,0,1304,211,1,0,0,
  	0,1305,1306,3,76,38,0,1306,1307,5,17,0,0,1307,1308,5,92,0,0,1308,1309,
  	3,130,65,0,1309,1310,3,94,47,0,1310,213,1,0,0,0,1311,1313,3,76,38,0,1312,
  	1311,1,0,0,0,1312,1313,1,0,0,0,1313,1314,1,0,0,0,1314,1315,5,30,0,0,1315,
  	1316,3,216,108,0,1316,1317,3,94,47,0,1317,215,1,0,0,0,1318,1321,3,144,
  	72,0,1319,1322,3,218,109,0,1320,1322,3,220,110,0,1321,1319,1,0,0,0,1321,
  	1320,1,0,0,0,1322,217,1,0,0,0,1323,1325,5,14,0,0,1324,1323,1,0,0,0,1324,
  	1325,1,0,0,0,1325,1326,1,0,0,0,1326,1327,5,50,0,0,1327,1328,3,222,111,
  	0,1328,1329,5,99,0,0,1329,1330,3,222,111,0,1330,219,1,0,0,0,1331,1332,
  	5,121,0,0,1332,1333,3,222,111,0,1333,1334,5,127,0,0,1334,1339,3,222,111,
  	0,1335,1336,5,127,0,0,1336,1338,3,222,111,0,1337,1335,1,0,0,0,1338,1341,
  	1,0,0,0,1339,1337,1,0,0,0,1339,1340,1,0,0,0,1340,1342,1,0,0,0,1341,1339,
  	1,0,0,0,1342,1343,5,122,0,0,1343,221,1,0,0,0,1344,1345,3,224,112,0,1345,
  	223,1,0,0,0,1346,1347,5,154,0,0,1347,1349,5,8,0,0,1348,1346,1,0,0,0,1348,
  	1349,1,0,0,0,1349,1351,1,0,0,0,1350,1352,3,460,230,0,1351,1350,1,0,0,
  	0,1351,1352,1,0,0,0,1352,1353,1,0,0,0,1353,1354,3,184,92,0,1354,225,1,
  	0,0,0,1355,1356,3,140,70,0,1356,1357,5,19,0,0,1357,1358,3,228,114,0,1358,
  	1359,3,94,47,0,1359,227,1,0,0,0,1360,1366,3,144,72,0,1361,1362,5,73,0,
  	0,1362,1363,3,222,111,0,1363,1364,5,145,0,0,1364,1365,3,222,111,0,1365,
  	1367,1,0,0,0,1366,1361,1,0,0,0,1366,1367,1,0,0,0,1367,1381,1,0,0,0,1368,
  	1370,5,14,0,0,1369,1368,1,0,0,0,1369,1370,1,0,0,0,1370,1378,1,0,0,0,1371,
  	1373,5,73,0,0,1372,1371,1,0,0,0,1372,1373,1,0,0,0,1373,1374,1,0,0,0,1374,
  	1375,3,222,111,0,1375,1376,5,145,0,0,1376,1377,3,222,111,0,1377,1379,
  	1,0,0,0,1378,1372,1,0,0,0,1378,1379,1,0,0,0,1379,1381,1,0,0,0,1380,1360,
  	1,0,0,0,1380,1369,1,0,0,0,1381,229,1,0,0,0,1382,1383,3,140,70,0,1383,
  	1384,5,97,0,0,1384,1385,3,232,116,0,1385,1386,3,94,47,0,1386,231,1,0,
  	0,0,1387,1393,3,144,72,0,1388,1389,5,47,0,0,1389,1390,3,222,111,0,1390,
  	1391,5,98,0,0,1391,1392,3,222,111,0,1392,1394,1,0,0,0,1393,1388,1,0,0,
  	0,1393,1394,1,0,0,0,1394,1408,1,0,0,0,1395,1397,5,14,0,0,1396,1395,1,
  	0,0,0,1396,1397,1,0,0,0,1397,1405,1,0,0,0,1398,1400,5,47,0,0,1399,1398,
  	1,0,0,0,1399,1400,1,0,0,0,1400,1401,1,0,0,0,1401,1402,3,222,111,0,1402,
  	1403,5,98,0,0,1403,1404,3,222,111,0,1404,1406,1,0,0,0,1405,1399,1,0,0,
  	0,1405,1406,1,0,0,0,1406,1408,1,0,0,0,1407,1387,1,0,0,0,1407,1396,1,0,
  	0,0,1408,233,1,0,0,0,1409,1410,3,76,38,0,1410,1411,5,18,0,0,1411,1412,
  	3,130,65,0,1412,1413,3,94,47,0,1413,235,1,0,0,0,1414,1415,3,140,70,0,
  	1415,1416,5,91,0,0,1416,1418,3,144,72,0,1417,1419,3,444,222,0,1418,1417,
  	1,0,0,0,1418,1419,1,0,0,0,1419,1420,1,0,0,0,1420,1421,3,94,47,0,1421,
  	237,1,0,0,0,1422,1423,3,76,38,0,1423,1424,5,51,0,0,1424,1425,3,130,65,
  	0,1425,1426,3,240,120,0,1426,239,1,0,0,0,1427,1433,5,113,0,0,1428,1429,
  	5,123,0,0,1429,1430,3,242,121,0,1430,1431,5,124,0,0,1431,1433,1,0,0,0,
  	1432,1427,1,0,0,0,1432,1428,1,0,0,0,1433,241,1,0,0,0,1434,1437,3,98,49,
  	0,1435,1437,3,244,122,0,1436,1434,1,0,0,0,1436,1435,1,0,0,0,1437,1438,
  	1,0,0,0,1438,1436,1,0,0,0,1438,1439,1,0,0,0,1439,1441,1,0,0,0,1440,1442,
  	3,246,123,0,1441,1440,1,0,0,0,1441,1442,1,0,0,0,1442,243,1,0,0,0,1443,
  	1444,3,42,21,0,1444,1445,5,88,0,0,1445,1446,3,70,35,0,1446,245,1,0,0,
  	0,1447,1448,3,42,21,0,1448,1449,3,264,132,0,1449,247,1,0,0,0,1450,1451,
  	3,140,70,0,1451,1452,5,41,0,0,1452,1454,3,144,72,0,1453,1455,3,444,222,
  	0,1454,1453,1,0,0,0,1454,1455,1,0,0,0,1455,1456,1,0,0,0,1456,1457,3,240,
  	120,0,1457,249,1,0,0,0,1458,1459,3,76,38,0,1459,1460,5,79,0,0,1460,1461,
  	3,130,65,0,1461,1462,3,240,120,0,1462,251,1,0,0,0,1463,1464,3,140,70,
  	0,1464,1465,5,20,0,0,1465,1467,3,144,72,0,1466,1468,3,444,222,0,1467,
  	1466,1,0,0,0,1467,1468,1,0,0,0,1468,1469,1,0,0,0,1469,1470,3,240,120,
  	0,1470,253,1,0,0,0,1471,1472,3,140,70,0,1472,1474,5,60,0,0,1473,1475,
  	7,4,0,0,1474,1473,1,0,0,0,1474,1475,1,0,0,0,1475,1476,1,0,0,0,1476,1478,
  	3,144,72,0,1477,1479,3,444,222,0,1478,1477,1,0,0,0,1478,1479,1,0,0,0,
  	1479,1480,1,0,0,0,1480,1481,3,240,120,0,1481,255,1,0,0,0,1482,1483,3,
  	258,129,0,1483,257,1,0,0,0,1484,1485,3,260,130,0,1485,259,1,0,0,0,1486,
  	1487,3,262,131,0,1487,261,1,0,0,0,1488,1490,3,264,132,0,1489,1488,1,0,
  	0,0,1490,1491,1,0,0,0,1491,1489,1,0,0,0,1491,1492,1,0,0,0,1492,263,1,
  	0,0,0,1493,1502,3,266,133,0,1494,1502,3,268,134,0,1495,1502,3,272,136,
  	0,1496,1502,3,276,138,0,1497,1502,3,280,140,0,1498,1502,3,288,144,0,1499,
  	1502,3,308,154,0,1500,1502,3,320,160,0,1501,1493,1,0,0,0,1501,1494,1,
  	0,0,0,1501,1495,1,0,0,0,1501,1496,1,0,0,0,1501,1497,1,0,0,0,1501,1498,
  	1,0,0,0,1501,1499,1,0,0,0,1501,1500,1,0,0,0,1502,265,1,0,0,0,1503,1504,
  	5,53,0,0,1504,1505,5,151,0,0,1505,1506,3,290,145,0,1506,1507,5,39,0,0,
  	1507,1508,3,290,145,0,1508,267,1,0,0,0,1509,1510,3,270,135,0,1510,1511,
  	3,290,145,0,1511,269,1,0,0,0,1512,1513,7,5,0,0,1513,271,1,0,0,0,1514,
  	1515,3,274,137,0,1515,1516,3,262,131,0,1516,273,1,0,0,0,1517,1518,7,6,
  	0,0,1518,275,1,0,0,0,1519,1520,3,278,139,0,1520,1521,3,262,131,0,1521,
  	277,1,0,0,0,1522,1523,7,7,0,0,1523,279,1,0,0,0,1524,1525,3,284,142,0,
  	1525,1526,3,310,155,0,1526,1531,1,0,0,0,1527,1528,3,286,143,0,1528,1529,
  	3,312,156,0,1529,1531,1,0,0,0,1530,1524,1,0,0,0,1530,1527,1,0,0,0,1531,
  	281,1,0,0,0,1532,1533,3,284,142,0,1533,1534,3,310,155,0,1534,1539,1,0,
  	0,0,1535,1536,3,286,143,0,1536,1537,3,312,156,0,1537,1539,1,0,0,0,1538,
  	1532,1,0,0,0,1538,1535,1,0,0,0,1539,283,1,0,0,0,1540,1541,7,8,0,0,1541,
  	285,1,0,0,0,1542,1543,5,16,0,0,1543,287,1,0,0,0,1544,1545,3,296,148,0,
  	1545,1546,3,304,152,0,1546,1547,3,310,155,0,1547,1552,1,0,0,0,1548,1549,
  	3,306,153,0,1549,1550,3,312,156,0,1550,1552,1,0,0,0,1551,1544,1,0,0,0,
  	1551,1548,1,0,0,0,1552,289,1,0,0,0,1553,1554,3,292,146,0,1554,291,1,0,
  	0,0,1555,1556,3,294,147,0,1556,293,1,0,0,0,1557,1558,3,258,129,0,1558,
  	295,1,0,0,0,1559,1560,3,298,149,0,1560,297,1,0,0,0,1561,1562,3,300,150,
  	0,1562,299,1,0,0,0,1563,1564,3,302,151,0,1564,301,1,0,0,0,1565,1566,3,
  	54,27,0,1566,303,1,0,0,0,1567,1568,5,139,0,0,1568,305,1,0,0,0,1569,1570,
  	5,2,0,0,1570,307,1,0,0,0,1571,1572,5,14,0,0,1572,1573,3,310,155,0,1573,
  	309,1,0,0,0,1574,1575,3,314,157,0,1575,311,1,0,0,0,1576,1577,3,314,157,
  	0,1577,313,1,0,0,0,1578,1579,3,316,158,0,1579,315,1,0,0,0,1580,1581,3,
  	54,27,0,1581,317,1,0,0,0,1582,1584,3,320,160,0,1583,1582,1,0,0,0,1584,
  	1585,1,0,0,0,1585,1583,1,0,0,0,1585,1586,1,0,0,0,1586,319,1,0,0,0,1587,
  	1590,3,338,169,0,1588,1590,3,322,161,0,1589,1587,1,0,0,0,1589,1588,1,
  	0,0,0,1590,321,1,0,0,0,1591,1599,3,326,163,0,1592,1599,3,328,164,0,1593,
  	1599,3,330,165,0,1594,1599,3,342,171,0,1595,1599,3,340,170,0,1596,1599,
  	3,344,172,0,1597,1599,3,370,185,0,1598,1591,1,0,0,0,1598,1592,1,0,0,0,
  	1598,1593,1,0,0,0,1598,1594,1,0,0,0,1598,1595,1,0,0,0,1598,1596,1,0,0,
  	0,1598,1597,1,0,0,0,1599,323,1,0,0,0,1600,1601,3,322,161,0,1601,325,1,
  	0,0,0,1602,1603,5,125,0,0,1603,1604,3,336,168,0,1604,1605,5,126,0,0,1605,
  	327,1,0,0,0,1606,1607,5,129,0,0,1607,1608,5,121,0,0,1608,1609,3,336,168,
  	0,1609,1610,5,122,0,0,1610,329,1,0,0,0,1611,1612,5,121,0,0,1612,1613,
  	3,332,166,0,1613,1614,5,122,0,0,1614,331,1,0,0,0,1615,1617,3,262,131,
  	0,1616,1618,5,127,0,0,1617,1616,1,0,0,0,1617,1618,1,0,0,0,1618,1621,1,
  	0,0,0,1619,1621,3,334,167,0,1620,1615,1,0,0,0,1620,1619,1,0,0,0,1621,
  	333,1,0,0,0,1622,1623,3,260,130,0,1623,1624,5,127,0,0,1624,1625,3,336,
  	168,0,1625,335,1,0,0,0,1626,1627,3,332,166,0,1627,337,1,0,0,0,1628,1629,
  	5,139,0,0,1629,1630,3,366,183,0,1630,339,1,0,0,0,1631,1632,5,139,0,0,
  	1632,1633,3,352,176,0,1633,341,1,0,0,0,1634,1635,5,153,0,0,1635,1636,
  	3,352,176,0,1636,343,1,0,0,0,1637,1638,5,138,0,0,1638,1642,3,316,158,
  	0,1639,1643,3,346,173,0,1640,1643,3,354,177,0,1641,1643,3,292,146,0,1642,
  	1639,1,0,0,0,1642,1640,1,0,0,0,1642,1641,1,0,0,0,1643,345,1,0,0,0,1644,
  	1645,3,348,174,0,1645,347,1,0,0,0,1646,1647,3,350,175,0,1647,349,1,0,
  	0,0,1648,1649,3,398,199,0,1649,351,1,0,0,0,1650,1651,3,398,199,0,1651,
  	353,1,0,0,0,1652,1653,3,356,178,0,1653,355,1,0,0,0,1654,1655,3,362,181,
  	0,1655,357,1,0,0,0,1656,1657,3,360,180,0,1657,359,1,0,0,0,1658,1659,3,
  	316,158,0,1659,361,1,0,0,0,1660,1661,3,364,182,0,1661,363,1,0,0,0,1662,
  	1663,3,316,158,0,1663,365,1,0,0,0,1664,1667,3,376,188,0,1665,1667,3,368,
  	184,0,1666,1664,1,0,0,0,1666,1665,1,0,0,0,1667,367,1,0,0,0,1668,1669,
  	3,192,96,0,1669,369,1,0,0,0,1670,1677,3,372,186,0,1671,1677,3,404,202,
  	0,1672,1677,3,374,187,0,1673,1677,3,380,190,0,1674,1677,3,382,191,0,1675,
  	1677,3,398,199,0,1676,1670,1,0,0,0,1676,1671,1,0,0,0,1676,1672,1,0,0,
  	0,1676,1673,1,0,0,0,1676,1674,1,0,0,0,1676,1675,1,0,0,0,1677,371,1,0,
  	0,0,1678,1682,5,72,0,0,1679,1680,5,121,0,0,1680,1682,5,122,0,0,1681,1678,
  	1,0,0,0,1681,1679,1,0,0,0,1682,373,1,0,0,0,1683,1684,3,376,188,0,1684,
  	375,1,0,0,0,1685,1686,3,378,189,0,1686,377,1,0,0,0,1687,1688,3,54,27,
  	0,1688,379,1,0,0,0,1689,1690,3,54,27,0,1690,1691,5,139,0,0,1691,1692,
  	5,67,0,0,1692,381,1,0,0,0,1693,1694,3,384,192,0,1694,383,1,0,0,0,1695,
  	1698,3,178,89,0,1696,1698,3,390,195,0,1697,1695,1,0,0,0,1697,1696,1,0,
  	0,0,1698,1699,1,0,0,0,1699,1700,3,386,193,0,1700,385,1,0,0,0,1701,1706,
  	5,121,0,0,1702,1703,3,262,131,0,1703,1704,3,388,194,0,1704,1707,1,0,0,
  	0,1705,1707,3,390,195,0,1706,1702,1,0,0,0,1706,1705,1,0,0,0,1706,1707,
  	1,0,0,0,1707,1708,1,0,0,0,1708,1709,5,122,0,0,1709,387,1,0,0,0,1710,1711,
  	5,127,0,0,1711,1713,3,262,131,0,1712,1710,1,0,0,0,1713,1716,1,0,0,0,1714,
  	1712,1,0,0,0,1714,1715,1,0,0,0,1715,389,1,0,0,0,1716,1714,1,0,0,0,1717,
  	1722,3,392,196,0,1718,1719,5,127,0,0,1719,1721,3,392,196,0,1720,1718,
  	1,0,0,0,1721,1724,1,0,0,0,1722,1720,1,0,0,0,1722,1723,1,0,0,0,1723,391,
  	1,0,0,0,1724,1722,1,0,0,0,1725,1726,3,394,197,0,1726,393,1,0,0,0,1727,
  	1728,3,396,198,0,1728,1729,5,145,0,0,1729,1730,3,262,131,0,1730,395,1,
  	0,0,0,1731,1732,3,54,27,0,1732,397,1,0,0,0,1733,1734,3,400,200,0,1734,
  	399,1,0,0,0,1735,1736,3,402,201,0,1736,401,1,0,0,0,1737,1738,5,121,0,
  	0,1738,1739,3,242,121,0,1739,1740,5,122,0,0,1740,403,1,0,0,0,1741,1748,
  	7,4,0,0,1742,1748,3,410,205,0,1743,1748,3,412,206,0,1744,1748,3,414,207,
  	0,1745,1748,3,412,206,0,1746,1748,3,418,209,0,1747,1741,1,0,0,0,1747,
  	1742,1,0,0,0,1747,1743,1,0,0,0,1747,1744,1,0,0,0,1747,1745,1,0,0,0,1747,
  	1746,1,0,0,0,1748,405,1,0,0,0,1749,1750,3,408,204,0,1750,407,1,0,0,0,
  	1751,1752,7,4,0,0,1752,409,1,0,0,0,1753,1754,5,159,0,0,1754,411,1,0,0,
  	0,1755,1756,5,157,0,0,1756,413,1,0,0,0,1757,1758,3,416,208,0,1758,415,
  	1,0,0,0,1759,1761,5,157,0,0,1760,1759,1,0,0,0,1760,1761,1,0,0,0,1761,
  	1762,1,0,0,0,1762,1763,5,139,0,0,1763,1766,7,9,0,0,1764,1766,5,158,0,
  	0,1765,1760,1,0,0,0,1765,1764,1,0,0,0,1766,417,1,0,0,0,1767,1768,5,114,
  	0,0,1768,419,1,0,0,0,1769,1770,3,76,38,0,1770,1771,5,59,0,0,1771,1772,
  	3,130,65,0,1772,1773,3,94,47,0,1773,421,1,0,0,0,1774,1775,3,140,70,0,
  	1775,1776,5,48,0,0,1776,1777,3,426,213,0,1777,1778,3,94,47,0,1778,423,
  	1,0,0,0,1779,1780,3,140,70,0,1780,1781,5,97,0,0,1781,1782,5,48,0,0,1782,
  	1783,3,426,213,0,1783,1784,3,94,47,0,1784,425,1,0,0,0,1785,1787,3,144,
  	72,0,1786,1788,3,444,222,0,1787,1786,1,0,0,0,1787,1788,1,0,0,0,1788,1791,
  	1,0,0,0,1789,1790,5,73,0,0,1790,1792,3,428,214,0,1791,1789,1,0,0,0,1791,
  	1792,1,0,0,0,1792,1798,1,0,0,0,1793,1794,5,50,0,0,1794,1795,3,434,217,
  	0,1795,1796,5,99,0,0,1796,1797,3,434,217,0,1797,1799,1,0,0,0,1798,1793,
  	1,0,0,0,1798,1799,1,0,0,0,1799,1808,1,0,0,0,1800,1802,5,14,0,0,1801,1800,
  	1,0,0,0,1801,1802,1,0,0,0,1802,1803,1,0,0,0,1803,1804,3,434,217,0,1804,
  	1805,5,99,0,0,1805,1806,3,434,217,0,1806,1808,1,0,0,0,1807,1785,1,0,0,
  	0,1807,1801,1,0,0,0,1808,427,1,0,0,0,1809,1810,3,430,215,0,1810,429,1,
  	0,0,0,1811,1812,3,6,3,0,1812,1814,3,432,216,0,1813,1815,3,444,222,0,1814,
  	1813,1,0,0,0,1814,1815,1,0,0,0,1815,1825,1,0,0,0,1816,1818,3,178,89,0,
  	1817,1819,3,460,230,0,1818,1817,1,0,0,0,1818,1819,1,0,0,0,1819,1825,1,
  	0,0,0,1820,1822,3,460,230,0,1821,1823,3,178,89,0,1822,1821,1,0,0,0,1822,
  	1823,1,0,0,0,1823,1825,1,0,0,0,1824,1811,1,0,0,0,1824,1816,1,0,0,0,1824,
  	1820,1,0,0,0,1825,431,1,0,0,0,1826,1828,3,160,80,0,1827,1826,1,0,0,0,
  	1828,1831,1,0,0,0,1829,1827,1,0,0,0,1829,1830,1,0,0,0,1830,1832,1,0,0,
  	0,1831,1829,1,0,0,0,1832,1834,3,158,79,0,1833,1835,3,160,80,0,1834,1833,
  	1,0,0,0,1834,1835,1,0,0,0,1835,433,1,0,0,0,1836,1837,3,436,218,0,1837,
  	435,1,0,0,0,1838,1839,3,184,92,0,1839,1840,5,139,0,0,1840,1842,1,0,0,
  	0,1841,1838,1,0,0,0,1841,1842,1,0,0,0,1842,1843,1,0,0,0,1843,1844,3,438,
  	219,0,1844,437,1,0,0,0,1845,1846,3,440,220,0,1846,439,1,0,0,0,1847,1848,
  	3,442,221,0,1848,441,1,0,0,0,1849,1850,3,54,27,0,1850,443,1,0,0,0,1851,
  	1852,3,446,223,0,1852,445,1,0,0,0,1853,1860,5,145,0,0,1854,1860,5,144,
  	0,0,1855,1857,5,32,0,0,1856,1858,7,10,0,0,1857,1856,1,0,0,0,1857,1858,
  	1,0,0,0,1858,1860,1,0,0,0,1859,1853,1,0,0,0,1859,1854,1,0,0,0,1859,1855,
  	1,0,0,0,1860,1861,1,0,0,0,1861,1862,3,264,132,0,1862,447,1,0,0,0,1863,
  	1864,5,143,0,0,1864,1865,3,264,132,0,1865,449,1,0,0,0,1866,1869,3,452,
  	226,0,1867,1869,3,454,227,0,1868,1866,1,0,0,0,1868,1867,1,0,0,0,1869,
  	451,1,0,0,0,1870,1871,5,68,0,0,1871,1872,3,6,3,0,1872,1873,3,168,84,0,
  	1873,1874,3,94,47,0,1874,453,1,0,0,0,1875,1876,5,68,0,0,1876,1877,3,6,
  	3,0,1877,1878,3,460,230,0,1878,1879,3,94,47,0,1879,455,1,0,0,0,1880,1881,
  	3,460,230,0,1881,457,1,0,0,0,1882,1883,3,460,230,0,1883,459,1,0,0,0,1884,
  	1888,5,125,0,0,1885,1886,3,462,231,0,1886,1887,5,140,0,0,1887,1889,1,
  	0,0,0,1888,1885,1,0,0,0,1888,1889,1,0,0,0,1889,1890,1,0,0,0,1890,1891,
  	3,462,231,0,1891,1892,5,126,0,0,1892,461,1,0,0,0,1893,1894,3,464,232,
  	0,1894,463,1,0,0,0,1895,1898,3,404,202,0,1896,1898,3,374,187,0,1897,1895,
  	1,0,0,0,1897,1896,1,0,0,0,1898,465,1,0,0,0,1899,1901,3,76,38,0,1900,1899,
  	1,0,0,0,1900,1901,1,0,0,0,1901,1902,1,0,0,0,1902,1905,5,66,0,0,1903,1906,
  	3,6,3,0,1904,1906,3,130,65,0,1905,1903,1,0,0,0,1905,1904,1,0,0,0,1906,
  	1908,1,0,0,0,1907,1909,5,154,0,0,1908,1907,1,0,0,0,1908,1909,1,0,0,0,
  	1909,1912,1,0,0,0,1910,1911,5,6,0,0,1911,1913,5,154,0,0,1912,1910,1,0,
  	0,0,1912,1913,1,0,0,0,1913,1914,1,0,0,0,1914,1915,3,94,47,0,1915,467,
  	1,0,0,0,1916,1917,5,129,0,0,1917,1918,3,472,236,0,1918,469,1,0,0,0,1919,
  	1920,5,129,0,0,1920,1921,3,472,236,0,1921,471,1,0,0,0,1922,1923,3,178,
  	89,0,1923,473,1,0,0,0,1924,1926,3,470,235,0,1925,1924,1,0,0,0,1926,1929,
  	1,0,0,0,1927,1925,1,0,0,0,1927,1928,1,0,0,0,1928,1930,1,0,0,0,1929,1927,
  	1,0,0,0,1930,1931,7,11,0,0,1931,1932,3,476,238,0,1932,1933,5,11,0,0,1933,
  	1934,3,18,9,0,1934,1935,5,127,0,0,1935,1936,3,18,9,0,1936,475,1,0,0,0,
  	1937,1941,3,6,3,0,1938,1942,5,116,0,0,1939,1940,5,102,0,0,1940,1942,5,
  	21,0,0,1941,1938,1,0,0,0,1941,1939,1,0,0,0,1942,1944,1,0,0,0,1943,1937,
  	1,0,0,0,1943,1944,1,0,0,0,1944,1945,1,0,0,0,1945,1946,3,178,89,0,1946,
  	477,1,0,0,0,1947,1957,5,113,0,0,1948,1952,5,123,0,0,1949,1951,3,480,240,
  	0,1950,1949,1,0,0,0,1951,1954,1,0,0,0,1952,1950,1,0,0,0,1952,1953,1,0,
  	0,0,1953,1955,1,0,0,0,1954,1952,1,0,0,0,1955,1957,5,124,0,0,1956,1947,
  	1,0,0,0,1956,1948,1,0,0,0,1957,479,1,0,0,0,1958,1963,3,48,24,0,1959,1963,
  	3,482,241,0,1960,1963,3,52,26,0,1961,1963,3,58,29,0,1962,1958,1,0,0,0,
  	1962,1959,1,0,0,0,1962,1960,1,0,0,0,1962,1961,1,0,0,0,1963,481,1,0,0,
  	0,1964,1965,3,484,242,0,1965,483,1,0,0,0,1966,1968,5,43,0,0,1967,1966,
  	1,0,0,0,1967,1968,1,0,0,0,1968,1970,1,0,0,0,1969,1971,7,12,0,0,1970,1969,
  	1,0,0,0,1970,1971,1,0,0,0,1971,1972,1,0,0,0,1972,1974,3,188,94,0,1973,
  	1975,3,156,78,0,1974,1973,1,0,0,0,1974,1975,1,0,0,0,1975,1977,1,0,0,0,
  	1976,1978,3,444,222,0,1977,1976,1,0,0,0,1977,1978,1,0,0,0,1978,1979,1,
  	0,0,0,1979,1980,3,478,239,0,1980,485,1,0,0,0,1981,1983,3,470,235,0,1982,
  	1981,1,0,0,0,1983,1986,1,0,0,0,1984,1982,1,0,0,0,1984,1985,1,0,0,0,1985,
  	1987,1,0,0,0,1986,1984,1,0,0,0,1987,1988,3,490,245,0,1988,1989,3,492,
  	246,0,1989,487,1,0,0,0,1990,1992,5,3,0,0,1991,1990,1,0,0,0,1991,1992,
  	1,0,0,0,1992,1993,1,0,0,0,1993,1997,5,4,0,0,1994,1996,3,470,235,0,1995,
  	1994,1,0,0,0,1996,1999,1,0,0,0,1997,1995,1,0,0,0,1997,1998,1,0,0,0,1998,
  	2000,1,0,0,0,1999,1997,1,0,0,0,2000,2001,3,490,245,0,2001,2002,3,492,
  	246,0,2002,489,1,0,0,0,2003,2004,5,77,0,0,2004,2005,3,6,3,0,2005,491,
  	1,0,0,0,2006,2018,5,113,0,0,2007,2011,5,123,0,0,2008,2012,3,40,20,0,2009,
  	2012,3,494,247,0,2010,2012,3,66,33,0,2011,2008,1,0,0,0,2011,2009,1,0,
  	0,0,2011,2010,1,0,0,0,2012,2013,1,0,0,0,2013,2011,1,0,0,0,2013,2014,1,
  	0,0,0,2014,2015,1,0,0,0,2015,2016,5,124,0,0,2016,2018,1,0,0,0,2017,2006,
  	1,0,0,0,2017,2007,1,0,0,0,2018,493,1,0,0,0,2019,2020,3,42,21,0,2020,2021,
  	5,46,0,0,2021,2022,3,264,132,0,2022,2023,5,113,0,0,2023,495,1,0,0,0,2024,
  	2025,3,54,27,0,2025,2026,5,143,0,0,2026,2027,3,6,3,0,2027,2028,5,2,0,
  	0,2028,2029,3,54,27,0,2029,2030,5,113,0,0,2030,497,1,0,0,0,213,506,512,
  	515,517,524,529,534,538,543,550,557,566,579,589,592,594,598,606,612,623,
  	637,644,647,653,666,669,680,684,688,692,696,700,703,716,745,757,767,772,
  	776,780,784,786,791,800,810,819,828,837,846,854,859,866,878,882,886,891,
  	896,902,906,911,916,922,926,930,934,938,948,955,959,963,968,977,982,993,
  	999,1002,1005,1008,1013,1016,1019,1022,1025,1028,1033,1039,1044,1048,
  	1053,1057,1063,1066,1072,1077,1090,1096,1099,1104,1111,1113,1118,1120,
  	1123,1126,1128,1134,1141,1153,1165,1168,1175,1178,1184,1192,1195,1201,
  	1210,1214,1218,1223,1226,1229,1232,1245,1252,1257,1262,1268,1274,1294,
  	1312,1321,1324,1339,1348,1351,1366,1369,1372,1378,1380,1393,1396,1399,
  	1405,1407,1418,1432,1436,1438,1441,1454,1467,1474,1478,1491,1501,1530,
  	1538,1551,1585,1589,1598,1617,1620,1642,1666,1676,1681,1697,1706,1714,
  	1722,1747,1760,1765,1787,1791,1798,1801,1807,1814,1818,1822,1824,1829,
  	1834,1841,1857,1859,1868,1888,1897,1900,1905,1908,1912,1927,1941,1943,
  	1952,1956,1962,1967,1970,1974,1977,1984,1991,1997,2011,2013,2017
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  kermlParserStaticData = std::move(staticData);
}

}

KerMLParser::KerMLParser(TokenStream *input) : KerMLParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

KerMLParser::KerMLParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  KerMLParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *kermlParserStaticData->atn, kermlParserStaticData->decisionToDFA, kermlParserStaticData->sharedContextCache, options);
}

KerMLParser::~KerMLParser() {
  delete _interpreter;
}

const atn::ATN& KerMLParser::getATN() const {
  return *kermlParserStaticData->atn;
}

std::string KerMLParser::getGrammarFileName() const {
  return "KerML.g4";
}

const std::vector<std::string>& KerMLParser::getRuleNames() const {
  return kermlParserStaticData->ruleNames;
}

const dfa::Vocabulary& KerMLParser::getVocabulary() const {
  return kermlParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView KerMLParser::getSerializedATN() const {
  return kermlParserStaticData->serializedATN;
}


//----------------- StartContext ------------------------------------------------------------------

KerMLParser::StartContext::StartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::ElementsContext* KerMLParser::StartContext::elements() {
  return getRuleContext<KerMLParser::ElementsContext>(0);
}

tree::TerminalNode* KerMLParser::StartContext::EOF() {
  return getToken(KerMLParser::EOF, 0);
}


size_t KerMLParser::StartContext::getRuleIndex() const {
  return KerMLParser::RuleStart;
}

void KerMLParser::StartContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStart(this);
}

void KerMLParser::StartContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStart(this);
}

KerMLParser::StartContext* KerMLParser::start() {
  StartContext *_localctx = _tracker.createInstance<StartContext>(_ctx, getState());
  enterRule(_localctx, 0, KerMLParser::RuleStart);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(498);
    elements();
    setState(499);
    match(KerMLParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StartRuleContext ------------------------------------------------------------------

KerMLParser::StartRuleContext::StartRuleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::StartContext* KerMLParser::StartRuleContext::start() {
  return getRuleContext<KerMLParser::StartContext>(0);
}


size_t KerMLParser::StartRuleContext::getRuleIndex() const {
  return KerMLParser::RuleStartRule;
}

void KerMLParser::StartRuleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStartRule(this);
}

void KerMLParser::StartRuleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStartRule(this);
}

KerMLParser::StartRuleContext* KerMLParser::startRule() {
  StartRuleContext *_localctx = _tracker.createInstance<StartRuleContext>(_ctx, getState());
  enterRule(_localctx, 2, KerMLParser::RuleStartRule);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(501);
    start();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElementsContext ------------------------------------------------------------------

KerMLParser::ElementsContext::ElementsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<KerMLParser::ElementContext *> KerMLParser::ElementsContext::element() {
  return getRuleContexts<KerMLParser::ElementContext>();
}

KerMLParser::ElementContext* KerMLParser::ElementsContext::element(size_t i) {
  return getRuleContext<KerMLParser::ElementContext>(i);
}


size_t KerMLParser::ElementsContext::getRuleIndex() const {
  return KerMLParser::RuleElements;
}

void KerMLParser::ElementsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElements(this);
}

void KerMLParser::ElementsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElements(this);
}

KerMLParser::ElementsContext* KerMLParser::elements() {
  ElementsContext *_localctx = _tracker.createInstance<ElementsContext>(_ctx, getState());
  enterRule(_localctx, 4, KerMLParser::RuleElements);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(506);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 9153895507433493018) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 40284556619837) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 128)) & 67108867) != 0)) {
      setState(503);
      element();
      setState(508);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IdentificationContext ------------------------------------------------------------------

KerMLParser::IdentificationContext::IdentificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::IdentificationContext::SYMBOL_SMALLER() {
  return getToken(KerMLParser::SYMBOL_SMALLER, 0);
}

tree::TerminalNode* KerMLParser::IdentificationContext::NAME() {
  return getToken(KerMLParser::NAME, 0);
}

tree::TerminalNode* KerMLParser::IdentificationContext::SYMBOL_GREATER() {
  return getToken(KerMLParser::SYMBOL_GREATER, 0);
}


size_t KerMLParser::IdentificationContext::getRuleIndex() const {
  return KerMLParser::RuleIdentification;
}

void KerMLParser::IdentificationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIdentification(this);
}

void KerMLParser::IdentificationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIdentification(this);
}

KerMLParser::IdentificationContext* KerMLParser::identification() {
  IdentificationContext *_localctx = _tracker.createInstance<IdentificationContext>(_ctx, getState());
  enterRule(_localctx, 6, KerMLParser::RuleIdentification);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(517);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 3, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(512);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == KerMLParser::SYMBOL_SMALLER) {
        setState(509);
        match(KerMLParser::SYMBOL_SMALLER);
        setState(510);
        match(KerMLParser::NAME);
        setState(511);
        match(KerMLParser::SYMBOL_GREATER);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(515);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 2, _ctx)) {
      case 1: {
        setState(514);
        match(KerMLParser::NAME);
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Relationship_bodyContext ------------------------------------------------------------------

KerMLParser::Relationship_bodyContext::Relationship_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Relationship_bodyContext::SYMBOL_STATEMENT_DELIMITER() {
  return getToken(KerMLParser::SYMBOL_STATEMENT_DELIMITER, 0);
}

tree::TerminalNode* KerMLParser::Relationship_bodyContext::SYMBOL_CURLY_BRACKET_OPEN() {
  return getToken(KerMLParser::SYMBOL_CURLY_BRACKET_OPEN, 0);
}

KerMLParser::Relationship_onwed_elementsContext* KerMLParser::Relationship_bodyContext::relationship_onwed_elements() {
  return getRuleContext<KerMLParser::Relationship_onwed_elementsContext>(0);
}

tree::TerminalNode* KerMLParser::Relationship_bodyContext::SYMBOL_CURLY_BRACKET_CLOSE() {
  return getToken(KerMLParser::SYMBOL_CURLY_BRACKET_CLOSE, 0);
}


size_t KerMLParser::Relationship_bodyContext::getRuleIndex() const {
  return KerMLParser::RuleRelationship_body;
}

void KerMLParser::Relationship_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRelationship_body(this);
}

void KerMLParser::Relationship_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRelationship_body(this);
}

KerMLParser::Relationship_bodyContext* KerMLParser::relationship_body() {
  Relationship_bodyContext *_localctx = _tracker.createInstance<Relationship_bodyContext>(_ctx, getState());
  enterRule(_localctx, 8, KerMLParser::RuleRelationship_body);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(524);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case KerMLParser::SYMBOL_STATEMENT_DELIMITER: {
        enterOuterAlt(_localctx, 1);
        setState(519);
        match(KerMLParser::SYMBOL_STATEMENT_DELIMITER);
        break;
      }

      case KerMLParser::SYMBOL_CURLY_BRACKET_OPEN: {
        enterOuterAlt(_localctx, 2);
        setState(520);
        match(KerMLParser::SYMBOL_CURLY_BRACKET_OPEN);
        setState(521);
        relationship_onwed_elements();
        setState(522);
        match(KerMLParser::SYMBOL_CURLY_BRACKET_CLOSE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Relationship_onwed_elementsContext ------------------------------------------------------------------

KerMLParser::Relationship_onwed_elementsContext::Relationship_onwed_elementsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<KerMLParser::Relationship_owned_elementContext *> KerMLParser::Relationship_onwed_elementsContext::relationship_owned_element() {
  return getRuleContexts<KerMLParser::Relationship_owned_elementContext>();
}

KerMLParser::Relationship_owned_elementContext* KerMLParser::Relationship_onwed_elementsContext::relationship_owned_element(size_t i) {
  return getRuleContext<KerMLParser::Relationship_owned_elementContext>(i);
}


size_t KerMLParser::Relationship_onwed_elementsContext::getRuleIndex() const {
  return KerMLParser::RuleRelationship_onwed_elements;
}

void KerMLParser::Relationship_onwed_elementsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRelationship_onwed_elements(this);
}

void KerMLParser::Relationship_onwed_elementsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRelationship_onwed_elements(this);
}

KerMLParser::Relationship_onwed_elementsContext* KerMLParser::relationship_onwed_elements() {
  Relationship_onwed_elementsContext *_localctx = _tracker.createInstance<Relationship_onwed_elementsContext>(_ctx, getState());
  enterRule(_localctx, 10, KerMLParser::RuleRelationship_onwed_elements);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(529);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 9153895507433493018) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 40284556619837) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 128)) & 67108867) != 0)) {
      setState(526);
      relationship_owned_element();
      setState(531);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Relationship_owned_elementContext ------------------------------------------------------------------

KerMLParser::Relationship_owned_elementContext::Relationship_owned_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Owned_related_elementContext* KerMLParser::Relationship_owned_elementContext::owned_related_element() {
  return getRuleContext<KerMLParser::Owned_related_elementContext>(0);
}

KerMLParser::Owned_annotationContext* KerMLParser::Relationship_owned_elementContext::owned_annotation() {
  return getRuleContext<KerMLParser::Owned_annotationContext>(0);
}


size_t KerMLParser::Relationship_owned_elementContext::getRuleIndex() const {
  return KerMLParser::RuleRelationship_owned_element;
}

void KerMLParser::Relationship_owned_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRelationship_owned_element(this);
}

void KerMLParser::Relationship_owned_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRelationship_owned_element(this);
}

KerMLParser::Relationship_owned_elementContext* KerMLParser::relationship_owned_element() {
  Relationship_owned_elementContext *_localctx = _tracker.createInstance<Relationship_owned_elementContext>(_ctx, getState());
  enterRule(_localctx, 12, KerMLParser::RuleRelationship_owned_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(534);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 6, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(532);
      owned_related_element();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(533);
      owned_annotation();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Owned_related_elementContext ------------------------------------------------------------------

KerMLParser::Owned_related_elementContext::Owned_related_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Non_feature_elementContext* KerMLParser::Owned_related_elementContext::non_feature_element() {
  return getRuleContext<KerMLParser::Non_feature_elementContext>(0);
}

KerMLParser::Feature_elementContext* KerMLParser::Owned_related_elementContext::feature_element() {
  return getRuleContext<KerMLParser::Feature_elementContext>(0);
}


size_t KerMLParser::Owned_related_elementContext::getRuleIndex() const {
  return KerMLParser::RuleOwned_related_element;
}

void KerMLParser::Owned_related_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOwned_related_element(this);
}

void KerMLParser::Owned_related_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOwned_related_element(this);
}

KerMLParser::Owned_related_elementContext* KerMLParser::owned_related_element() {
  Owned_related_elementContext *_localctx = _tracker.createInstance<Owned_related_elementContext>(_ctx, getState());
  enterRule(_localctx, 14, KerMLParser::RuleOwned_related_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(538);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 7, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(536);
      non_feature_element();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(537);
      feature_element();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DependencyContext ------------------------------------------------------------------

KerMLParser::DependencyContext::DependencyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::DependencyContext::KEYWORD_DEPENDENCY() {
  return getToken(KerMLParser::KEYWORD_DEPENDENCY, 0);
}

std::vector<KerMLParser::Qualified_nameContext *> KerMLParser::DependencyContext::qualified_name() {
  return getRuleContexts<KerMLParser::Qualified_nameContext>();
}

KerMLParser::Qualified_nameContext* KerMLParser::DependencyContext::qualified_name(size_t i) {
  return getRuleContext<KerMLParser::Qualified_nameContext>(i);
}

tree::TerminalNode* KerMLParser::DependencyContext::KEYWORD_TO() {
  return getToken(KerMLParser::KEYWORD_TO, 0);
}

KerMLParser::Relationship_bodyContext* KerMLParser::DependencyContext::relationship_body() {
  return getRuleContext<KerMLParser::Relationship_bodyContext>(0);
}

std::vector<KerMLParser::Prefix_metadata_annotationContext *> KerMLParser::DependencyContext::prefix_metadata_annotation() {
  return getRuleContexts<KerMLParser::Prefix_metadata_annotationContext>();
}

KerMLParser::Prefix_metadata_annotationContext* KerMLParser::DependencyContext::prefix_metadata_annotation(size_t i) {
  return getRuleContext<KerMLParser::Prefix_metadata_annotationContext>(i);
}

KerMLParser::IdentificationContext* KerMLParser::DependencyContext::identification() {
  return getRuleContext<KerMLParser::IdentificationContext>(0);
}

tree::TerminalNode* KerMLParser::DependencyContext::KEYWORD_FROM() {
  return getToken(KerMLParser::KEYWORD_FROM, 0);
}

std::vector<tree::TerminalNode *> KerMLParser::DependencyContext::SYMBOL_COMMA() {
  return getTokens(KerMLParser::SYMBOL_COMMA);
}

tree::TerminalNode* KerMLParser::DependencyContext::SYMBOL_COMMA(size_t i) {
  return getToken(KerMLParser::SYMBOL_COMMA, i);
}


size_t KerMLParser::DependencyContext::getRuleIndex() const {
  return KerMLParser::RuleDependency;
}

void KerMLParser::DependencyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDependency(this);
}

void KerMLParser::DependencyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDependency(this);
}

KerMLParser::DependencyContext* KerMLParser::dependency() {
  DependencyContext *_localctx = _tracker.createInstance<DependencyContext>(_ctx, getState());
  enterRule(_localctx, 16, KerMLParser::RuleDependency);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(543);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == KerMLParser::SYMBOL_HASHTAG) {
      setState(540);
      prefix_metadata_annotation();
      setState(545);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(546);
    match(KerMLParser::KEYWORD_DEPENDENCY);
    setState(550);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 9, _ctx)) {
    case 1: {
      setState(547);
      identification();
      setState(548);
      match(KerMLParser::KEYWORD_FROM);
      break;
    }

    default:
      break;
    }
    setState(552);
    qualified_name();
    setState(557);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == KerMLParser::SYMBOL_COMMA) {
      setState(553);
      match(KerMLParser::SYMBOL_COMMA);
      setState(554);
      qualified_name();
      setState(559);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(560);
    match(KerMLParser::KEYWORD_TO);
    setState(561);
    qualified_name();
    setState(566);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == KerMLParser::SYMBOL_COMMA) {
      setState(562);
      match(KerMLParser::SYMBOL_COMMA);
      setState(563);
      qualified_name();
      setState(568);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(569);
    relationship_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnnotationContext ------------------------------------------------------------------

KerMLParser::AnnotationContext::AnnotationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Qualified_nameContext* KerMLParser::AnnotationContext::qualified_name() {
  return getRuleContext<KerMLParser::Qualified_nameContext>(0);
}


size_t KerMLParser::AnnotationContext::getRuleIndex() const {
  return KerMLParser::RuleAnnotation;
}

void KerMLParser::AnnotationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotation(this);
}

void KerMLParser::AnnotationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotation(this);
}

KerMLParser::AnnotationContext* KerMLParser::annotation() {
  AnnotationContext *_localctx = _tracker.createInstance<AnnotationContext>(_ctx, getState());
  enterRule(_localctx, 18, KerMLParser::RuleAnnotation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(571);
    qualified_name();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Owned_annotationContext ------------------------------------------------------------------

KerMLParser::Owned_annotationContext::Owned_annotationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Annotating_elementContext* KerMLParser::Owned_annotationContext::annotating_element() {
  return getRuleContext<KerMLParser::Annotating_elementContext>(0);
}


size_t KerMLParser::Owned_annotationContext::getRuleIndex() const {
  return KerMLParser::RuleOwned_annotation;
}

void KerMLParser::Owned_annotationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOwned_annotation(this);
}

void KerMLParser::Owned_annotationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOwned_annotation(this);
}

KerMLParser::Owned_annotationContext* KerMLParser::owned_annotation() {
  Owned_annotationContext *_localctx = _tracker.createInstance<Owned_annotationContext>(_ctx, getState());
  enterRule(_localctx, 20, KerMLParser::RuleOwned_annotation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(573);
    annotating_element();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Annotating_elementContext ------------------------------------------------------------------

KerMLParser::Annotating_elementContext::Annotating_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::CommentContext* KerMLParser::Annotating_elementContext::comment() {
  return getRuleContext<KerMLParser::CommentContext>(0);
}

KerMLParser::DocumentationContext* KerMLParser::Annotating_elementContext::documentation() {
  return getRuleContext<KerMLParser::DocumentationContext>(0);
}

KerMLParser::Textual_representationContext* KerMLParser::Annotating_elementContext::textual_representation() {
  return getRuleContext<KerMLParser::Textual_representationContext>(0);
}

KerMLParser::Metadata_featureContext* KerMLParser::Annotating_elementContext::metadata_feature() {
  return getRuleContext<KerMLParser::Metadata_featureContext>(0);
}


size_t KerMLParser::Annotating_elementContext::getRuleIndex() const {
  return KerMLParser::RuleAnnotating_element;
}

void KerMLParser::Annotating_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotating_element(this);
}

void KerMLParser::Annotating_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotating_element(this);
}

KerMLParser::Annotating_elementContext* KerMLParser::annotating_element() {
  Annotating_elementContext *_localctx = _tracker.createInstance<Annotating_elementContext>(_ctx, getState());
  enterRule(_localctx, 22, KerMLParser::RuleAnnotating_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(579);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case KerMLParser::T__0:
      case KerMLParser::KEYWORD_COMMENT:
      case KerMLParser::REGULAR_COMMENT: {
        enterOuterAlt(_localctx, 1);
        setState(575);
        comment();
        break;
      }

      case KerMLParser::KEYWORD_DOC: {
        enterOuterAlt(_localctx, 2);
        setState(576);
        documentation();
        break;
      }

      case KerMLParser::KEYWORD_LANGUAGE:
      case KerMLParser::KEYWORD_REP: {
        enterOuterAlt(_localctx, 3);
        setState(577);
        textual_representation();
        break;
      }

      case KerMLParser::KEYWORD_METADATA:
      case KerMLParser::SYMBOL_AT:
      case KerMLParser::SYMBOL_HASHTAG: {
        enterOuterAlt(_localctx, 4);
        setState(578);
        metadata_feature();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CommentContext ------------------------------------------------------------------

KerMLParser::CommentContext::CommentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::CommentContext::REGULAR_COMMENT() {
  return getToken(KerMLParser::REGULAR_COMMENT, 0);
}

tree::TerminalNode* KerMLParser::CommentContext::KEYWORD_COMMENT() {
  return getToken(KerMLParser::KEYWORD_COMMENT, 0);
}

KerMLParser::IdentificationContext* KerMLParser::CommentContext::identification() {
  return getRuleContext<KerMLParser::IdentificationContext>(0);
}

tree::TerminalNode* KerMLParser::CommentContext::STRING_VALUE() {
  return getToken(KerMLParser::STRING_VALUE, 0);
}

tree::TerminalNode* KerMLParser::CommentContext::KEYWORD_ABOUT() {
  return getToken(KerMLParser::KEYWORD_ABOUT, 0);
}

std::vector<KerMLParser::AnnotationContext *> KerMLParser::CommentContext::annotation() {
  return getRuleContexts<KerMLParser::AnnotationContext>();
}

KerMLParser::AnnotationContext* KerMLParser::CommentContext::annotation(size_t i) {
  return getRuleContext<KerMLParser::AnnotationContext>(i);
}

std::vector<tree::TerminalNode *> KerMLParser::CommentContext::SYMBOL_COMMA() {
  return getTokens(KerMLParser::SYMBOL_COMMA);
}

tree::TerminalNode* KerMLParser::CommentContext::SYMBOL_COMMA(size_t i) {
  return getToken(KerMLParser::SYMBOL_COMMA, i);
}


size_t KerMLParser::CommentContext::getRuleIndex() const {
  return KerMLParser::RuleComment;
}

void KerMLParser::CommentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComment(this);
}

void KerMLParser::CommentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComment(this);
}

KerMLParser::CommentContext* KerMLParser::comment() {
  CommentContext *_localctx = _tracker.createInstance<CommentContext>(_ctx, getState());
  enterRule(_localctx, 24, KerMLParser::RuleComment);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(594);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::KEYWORD_COMMENT) {
      setState(581);
      match(KerMLParser::KEYWORD_COMMENT);
      setState(582);
      identification();
      setState(592);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == KerMLParser::KEYWORD_ABOUT) {
        setState(583);
        match(KerMLParser::KEYWORD_ABOUT);
        setState(584);
        annotation();
        setState(589);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == KerMLParser::SYMBOL_COMMA) {
          setState(585);
          match(KerMLParser::SYMBOL_COMMA);
          setState(586);
          annotation();
          setState(591);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
      }
    }
    setState(598);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::T__0) {
      setState(596);
      match(KerMLParser::T__0);
      setState(597);
      match(KerMLParser::STRING_VALUE);
    }
    setState(600);
    match(KerMLParser::REGULAR_COMMENT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DocumentationContext ------------------------------------------------------------------

KerMLParser::DocumentationContext::DocumentationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::DocumentationContext::KEYWORD_DOC() {
  return getToken(KerMLParser::KEYWORD_DOC, 0);
}

KerMLParser::IdentificationContext* KerMLParser::DocumentationContext::identification() {
  return getRuleContext<KerMLParser::IdentificationContext>(0);
}

tree::TerminalNode* KerMLParser::DocumentationContext::REGULAR_COMMENT() {
  return getToken(KerMLParser::REGULAR_COMMENT, 0);
}

tree::TerminalNode* KerMLParser::DocumentationContext::STRING_VALUE() {
  return getToken(KerMLParser::STRING_VALUE, 0);
}


size_t KerMLParser::DocumentationContext::getRuleIndex() const {
  return KerMLParser::RuleDocumentation;
}

void KerMLParser::DocumentationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDocumentation(this);
}

void KerMLParser::DocumentationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDocumentation(this);
}

KerMLParser::DocumentationContext* KerMLParser::documentation() {
  DocumentationContext *_localctx = _tracker.createInstance<DocumentationContext>(_ctx, getState());
  enterRule(_localctx, 26, KerMLParser::RuleDocumentation);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(602);
    match(KerMLParser::KEYWORD_DOC);
    setState(603);
    identification();
    setState(606);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::T__0) {
      setState(604);
      match(KerMLParser::T__0);
      setState(605);
      match(KerMLParser::STRING_VALUE);
    }
    setState(608);
    match(KerMLParser::REGULAR_COMMENT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Textual_representationContext ------------------------------------------------------------------

KerMLParser::Textual_representationContext::Textual_representationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Textual_representationContext::KEYWORD_LANGUAGE() {
  return getToken(KerMLParser::KEYWORD_LANGUAGE, 0);
}

tree::TerminalNode* KerMLParser::Textual_representationContext::STRING_VALUE() {
  return getToken(KerMLParser::STRING_VALUE, 0);
}

tree::TerminalNode* KerMLParser::Textual_representationContext::REGULAR_COMMENT() {
  return getToken(KerMLParser::REGULAR_COMMENT, 0);
}

tree::TerminalNode* KerMLParser::Textual_representationContext::KEYWORD_REP() {
  return getToken(KerMLParser::KEYWORD_REP, 0);
}

KerMLParser::IdentificationContext* KerMLParser::Textual_representationContext::identification() {
  return getRuleContext<KerMLParser::IdentificationContext>(0);
}


size_t KerMLParser::Textual_representationContext::getRuleIndex() const {
  return KerMLParser::RuleTextual_representation;
}

void KerMLParser::Textual_representationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTextual_representation(this);
}

void KerMLParser::Textual_representationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTextual_representation(this);
}

KerMLParser::Textual_representationContext* KerMLParser::textual_representation() {
  Textual_representationContext *_localctx = _tracker.createInstance<Textual_representationContext>(_ctx, getState());
  enterRule(_localctx, 28, KerMLParser::RuleTextual_representation);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(612);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::KEYWORD_REP) {
      setState(610);
      match(KerMLParser::KEYWORD_REP);
      setState(611);
      identification();
    }
    setState(614);
    match(KerMLParser::KEYWORD_LANGUAGE);
    setState(615);
    match(KerMLParser::STRING_VALUE);
    setState(616);
    match(KerMLParser::REGULAR_COMMENT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Root_namespaceContext ------------------------------------------------------------------

KerMLParser::Root_namespaceContext::Root_namespaceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Namespace_body_elementsContext* KerMLParser::Root_namespaceContext::namespace_body_elements() {
  return getRuleContext<KerMLParser::Namespace_body_elementsContext>(0);
}


size_t KerMLParser::Root_namespaceContext::getRuleIndex() const {
  return KerMLParser::RuleRoot_namespace;
}

void KerMLParser::Root_namespaceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRoot_namespace(this);
}

void KerMLParser::Root_namespaceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRoot_namespace(this);
}

KerMLParser::Root_namespaceContext* KerMLParser::root_namespace() {
  Root_namespaceContext *_localctx = _tracker.createInstance<Root_namespaceContext>(_ctx, getState());
  enterRule(_localctx, 30, KerMLParser::RuleRoot_namespace);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(618);
    namespace_body_elements();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NamespaceContext ------------------------------------------------------------------

KerMLParser::NamespaceContext::NamespaceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Namespace_declarationContext* KerMLParser::NamespaceContext::namespace_declaration() {
  return getRuleContext<KerMLParser::Namespace_declarationContext>(0);
}

KerMLParser::Namespace_bodyContext* KerMLParser::NamespaceContext::namespace_body() {
  return getRuleContext<KerMLParser::Namespace_bodyContext>(0);
}

std::vector<KerMLParser::Prefix_metadata_memberContext *> KerMLParser::NamespaceContext::prefix_metadata_member() {
  return getRuleContexts<KerMLParser::Prefix_metadata_memberContext>();
}

KerMLParser::Prefix_metadata_memberContext* KerMLParser::NamespaceContext::prefix_metadata_member(size_t i) {
  return getRuleContext<KerMLParser::Prefix_metadata_memberContext>(i);
}


size_t KerMLParser::NamespaceContext::getRuleIndex() const {
  return KerMLParser::RuleNamespace;
}

void KerMLParser::NamespaceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamespace(this);
}

void KerMLParser::NamespaceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamespace(this);
}

KerMLParser::NamespaceContext* KerMLParser::namespace_() {
  NamespaceContext *_localctx = _tracker.createInstance<NamespaceContext>(_ctx, getState());
  enterRule(_localctx, 32, KerMLParser::RuleNamespace);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(623);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == KerMLParser::SYMBOL_HASHTAG) {
      setState(620);
      prefix_metadata_member();
      setState(625);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(626);
    namespace_declaration();
    setState(627);
    namespace_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Namespace_declarationContext ------------------------------------------------------------------

KerMLParser::Namespace_declarationContext::Namespace_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Namespace_declarationContext::KEYWORD_NAMESPACE() {
  return getToken(KerMLParser::KEYWORD_NAMESPACE, 0);
}

KerMLParser::IdentificationContext* KerMLParser::Namespace_declarationContext::identification() {
  return getRuleContext<KerMLParser::IdentificationContext>(0);
}


size_t KerMLParser::Namespace_declarationContext::getRuleIndex() const {
  return KerMLParser::RuleNamespace_declaration;
}

void KerMLParser::Namespace_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamespace_declaration(this);
}

void KerMLParser::Namespace_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamespace_declaration(this);
}

KerMLParser::Namespace_declarationContext* KerMLParser::namespace_declaration() {
  Namespace_declarationContext *_localctx = _tracker.createInstance<Namespace_declarationContext>(_ctx, getState());
  enterRule(_localctx, 34, KerMLParser::RuleNamespace_declaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(629);
    match(KerMLParser::KEYWORD_NAMESPACE);
    setState(630);
    identification();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Namespace_bodyContext ------------------------------------------------------------------

KerMLParser::Namespace_bodyContext::Namespace_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Namespace_bodyContext::SYMBOL_STATEMENT_DELIMITER() {
  return getToken(KerMLParser::SYMBOL_STATEMENT_DELIMITER, 0);
}

tree::TerminalNode* KerMLParser::Namespace_bodyContext::SYMBOL_CURLY_BRACKET_OPEN() {
  return getToken(KerMLParser::SYMBOL_CURLY_BRACKET_OPEN, 0);
}

KerMLParser::Namespace_body_elementContext* KerMLParser::Namespace_bodyContext::namespace_body_element() {
  return getRuleContext<KerMLParser::Namespace_body_elementContext>(0);
}

tree::TerminalNode* KerMLParser::Namespace_bodyContext::SYMBOL_CURLY_BRACKET_CLOSE() {
  return getToken(KerMLParser::SYMBOL_CURLY_BRACKET_CLOSE, 0);
}


size_t KerMLParser::Namespace_bodyContext::getRuleIndex() const {
  return KerMLParser::RuleNamespace_body;
}

void KerMLParser::Namespace_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamespace_body(this);
}

void KerMLParser::Namespace_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamespace_body(this);
}

KerMLParser::Namespace_bodyContext* KerMLParser::namespace_body() {
  Namespace_bodyContext *_localctx = _tracker.createInstance<Namespace_bodyContext>(_ctx, getState());
  enterRule(_localctx, 36, KerMLParser::RuleNamespace_body);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(637);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case KerMLParser::SYMBOL_STATEMENT_DELIMITER: {
        enterOuterAlt(_localctx, 1);
        setState(632);
        match(KerMLParser::SYMBOL_STATEMENT_DELIMITER);
        break;
      }

      case KerMLParser::SYMBOL_CURLY_BRACKET_OPEN: {
        enterOuterAlt(_localctx, 2);
        setState(633);
        match(KerMLParser::SYMBOL_CURLY_BRACKET_OPEN);
        setState(634);
        namespace_body_element();
        setState(635);
        match(KerMLParser::SYMBOL_CURLY_BRACKET_CLOSE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Namespace_body_elementsContext ------------------------------------------------------------------

KerMLParser::Namespace_body_elementsContext::Namespace_body_elementsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::ElementsContext* KerMLParser::Namespace_body_elementsContext::elements() {
  return getRuleContext<KerMLParser::ElementsContext>(0);
}


size_t KerMLParser::Namespace_body_elementsContext::getRuleIndex() const {
  return KerMLParser::RuleNamespace_body_elements;
}

void KerMLParser::Namespace_body_elementsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamespace_body_elements(this);
}

void KerMLParser::Namespace_body_elementsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamespace_body_elements(this);
}

KerMLParser::Namespace_body_elementsContext* KerMLParser::namespace_body_elements() {
  Namespace_body_elementsContext *_localctx = _tracker.createInstance<Namespace_body_elementsContext>(_ctx, getState());
  enterRule(_localctx, 38, KerMLParser::RuleNamespace_body_elements);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(639);
    elements();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Namespace_body_elementContext ------------------------------------------------------------------

KerMLParser::Namespace_body_elementContext::Namespace_body_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Namespace_memberContext* KerMLParser::Namespace_body_elementContext::namespace_member() {
  return getRuleContext<KerMLParser::Namespace_memberContext>(0);
}

KerMLParser::Alias_memberContext* KerMLParser::Namespace_body_elementContext::alias_member() {
  return getRuleContext<KerMLParser::Alias_memberContext>(0);
}

KerMLParser::Namespace_importContext* KerMLParser::Namespace_body_elementContext::namespace_import() {
  return getRuleContext<KerMLParser::Namespace_importContext>(0);
}


size_t KerMLParser::Namespace_body_elementContext::getRuleIndex() const {
  return KerMLParser::RuleNamespace_body_element;
}

void KerMLParser::Namespace_body_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamespace_body_element(this);
}

void KerMLParser::Namespace_body_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamespace_body_element(this);
}

KerMLParser::Namespace_body_elementContext* KerMLParser::namespace_body_element() {
  Namespace_body_elementContext *_localctx = _tracker.createInstance<Namespace_body_elementContext>(_ctx, getState());
  enterRule(_localctx, 40, KerMLParser::RuleNamespace_body_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(644);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 21, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(641);
      namespace_member();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(642);
      alias_member();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(643);
      namespace_import();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Member_prefixContext ------------------------------------------------------------------

KerMLParser::Member_prefixContext::Member_prefixContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Visibility_indicatorContext* KerMLParser::Member_prefixContext::visibility_indicator() {
  return getRuleContext<KerMLParser::Visibility_indicatorContext>(0);
}


size_t KerMLParser::Member_prefixContext::getRuleIndex() const {
  return KerMLParser::RuleMember_prefix;
}

void KerMLParser::Member_prefixContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMember_prefix(this);
}

void KerMLParser::Member_prefixContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMember_prefix(this);
}

KerMLParser::Member_prefixContext* KerMLParser::member_prefix() {
  Member_prefixContext *_localctx = _tracker.createInstance<Member_prefixContext>(_ctx, getState());
  enterRule(_localctx, 42, KerMLParser::RuleMember_prefix);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(647);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 22, _ctx)) {
    case 1: {
      setState(646);
      visibility_indicator();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Visibility_indicatorContext ------------------------------------------------------------------

KerMLParser::Visibility_indicatorContext::Visibility_indicatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Visibility_indicatorContext::KEYWORD_PUBLIC() {
  return getToken(KerMLParser::KEYWORD_PUBLIC, 0);
}

tree::TerminalNode* KerMLParser::Visibility_indicatorContext::KEYWORD_PRIVATE() {
  return getToken(KerMLParser::KEYWORD_PRIVATE, 0);
}

tree::TerminalNode* KerMLParser::Visibility_indicatorContext::KEYWORD_PROTECTED() {
  return getToken(KerMLParser::KEYWORD_PROTECTED, 0);
}


size_t KerMLParser::Visibility_indicatorContext::getRuleIndex() const {
  return KerMLParser::RuleVisibility_indicator;
}

void KerMLParser::Visibility_indicatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVisibility_indicator(this);
}

void KerMLParser::Visibility_indicatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVisibility_indicator(this);
}

KerMLParser::Visibility_indicatorContext* KerMLParser::visibility_indicator() {
  Visibility_indicatorContext *_localctx = _tracker.createInstance<Visibility_indicatorContext>(_ctx, getState());
  enterRule(_localctx, 44, KerMLParser::RuleVisibility_indicator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(649);
    _la = _input->LA(1);
    if (!(((((_la - 80) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 80)) & 7) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Namespace_memberContext ------------------------------------------------------------------

KerMLParser::Namespace_memberContext::Namespace_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Non_feature_memberContext* KerMLParser::Namespace_memberContext::non_feature_member() {
  return getRuleContext<KerMLParser::Non_feature_memberContext>(0);
}

KerMLParser::Namespace_feature_memberContext* KerMLParser::Namespace_memberContext::namespace_feature_member() {
  return getRuleContext<KerMLParser::Namespace_feature_memberContext>(0);
}


size_t KerMLParser::Namespace_memberContext::getRuleIndex() const {
  return KerMLParser::RuleNamespace_member;
}

void KerMLParser::Namespace_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamespace_member(this);
}

void KerMLParser::Namespace_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamespace_member(this);
}

KerMLParser::Namespace_memberContext* KerMLParser::namespace_member() {
  Namespace_memberContext *_localctx = _tracker.createInstance<Namespace_memberContext>(_ctx, getState());
  enterRule(_localctx, 46, KerMLParser::RuleNamespace_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(653);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 23, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(651);
      non_feature_member();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(652);
      namespace_feature_member();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Non_feature_memberContext ------------------------------------------------------------------

KerMLParser::Non_feature_memberContext::Non_feature_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Member_prefixContext* KerMLParser::Non_feature_memberContext::member_prefix() {
  return getRuleContext<KerMLParser::Member_prefixContext>(0);
}

KerMLParser::Non_feature_elementContext* KerMLParser::Non_feature_memberContext::non_feature_element() {
  return getRuleContext<KerMLParser::Non_feature_elementContext>(0);
}


size_t KerMLParser::Non_feature_memberContext::getRuleIndex() const {
  return KerMLParser::RuleNon_feature_member;
}

void KerMLParser::Non_feature_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNon_feature_member(this);
}

void KerMLParser::Non_feature_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNon_feature_member(this);
}

KerMLParser::Non_feature_memberContext* KerMLParser::non_feature_member() {
  Non_feature_memberContext *_localctx = _tracker.createInstance<Non_feature_memberContext>(_ctx, getState());
  enterRule(_localctx, 48, KerMLParser::RuleNon_feature_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(655);
    member_prefix();
    setState(656);
    non_feature_element();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Namespace_feature_memberContext ------------------------------------------------------------------

KerMLParser::Namespace_feature_memberContext::Namespace_feature_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Member_prefixContext* KerMLParser::Namespace_feature_memberContext::member_prefix() {
  return getRuleContext<KerMLParser::Member_prefixContext>(0);
}

KerMLParser::Feature_elementContext* KerMLParser::Namespace_feature_memberContext::feature_element() {
  return getRuleContext<KerMLParser::Feature_elementContext>(0);
}


size_t KerMLParser::Namespace_feature_memberContext::getRuleIndex() const {
  return KerMLParser::RuleNamespace_feature_member;
}

void KerMLParser::Namespace_feature_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamespace_feature_member(this);
}

void KerMLParser::Namespace_feature_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamespace_feature_member(this);
}

KerMLParser::Namespace_feature_memberContext* KerMLParser::namespace_feature_member() {
  Namespace_feature_memberContext *_localctx = _tracker.createInstance<Namespace_feature_memberContext>(_ctx, getState());
  enterRule(_localctx, 50, KerMLParser::RuleNamespace_feature_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(658);
    member_prefix();
    setState(659);
    feature_element();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alias_memberContext ------------------------------------------------------------------

KerMLParser::Alias_memberContext::Alias_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Member_prefixContext* KerMLParser::Alias_memberContext::member_prefix() {
  return getRuleContext<KerMLParser::Member_prefixContext>(0);
}

tree::TerminalNode* KerMLParser::Alias_memberContext::KEYWORD_ALIAS() {
  return getToken(KerMLParser::KEYWORD_ALIAS, 0);
}

tree::TerminalNode* KerMLParser::Alias_memberContext::KEYWORD_FOR() {
  return getToken(KerMLParser::KEYWORD_FOR, 0);
}

KerMLParser::Qualified_nameContext* KerMLParser::Alias_memberContext::qualified_name() {
  return getRuleContext<KerMLParser::Qualified_nameContext>(0);
}

KerMLParser::Relationship_bodyContext* KerMLParser::Alias_memberContext::relationship_body() {
  return getRuleContext<KerMLParser::Relationship_bodyContext>(0);
}

tree::TerminalNode* KerMLParser::Alias_memberContext::SYMBOL_SMALLER() {
  return getToken(KerMLParser::SYMBOL_SMALLER, 0);
}

std::vector<tree::TerminalNode *> KerMLParser::Alias_memberContext::NAME() {
  return getTokens(KerMLParser::NAME);
}

tree::TerminalNode* KerMLParser::Alias_memberContext::NAME(size_t i) {
  return getToken(KerMLParser::NAME, i);
}

tree::TerminalNode* KerMLParser::Alias_memberContext::SYMBOL_GREATER() {
  return getToken(KerMLParser::SYMBOL_GREATER, 0);
}


size_t KerMLParser::Alias_memberContext::getRuleIndex() const {
  return KerMLParser::RuleAlias_member;
}

void KerMLParser::Alias_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlias_member(this);
}

void KerMLParser::Alias_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlias_member(this);
}

KerMLParser::Alias_memberContext* KerMLParser::alias_member() {
  Alias_memberContext *_localctx = _tracker.createInstance<Alias_memberContext>(_ctx, getState());
  enterRule(_localctx, 52, KerMLParser::RuleAlias_member);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(661);
    member_prefix();
    setState(662);
    match(KerMLParser::KEYWORD_ALIAS);
    setState(666);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::SYMBOL_SMALLER) {
      setState(663);
      match(KerMLParser::SYMBOL_SMALLER);
      setState(664);
      match(KerMLParser::NAME);
      setState(665);
      match(KerMLParser::SYMBOL_GREATER);
    }
    setState(669);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::NAME) {
      setState(668);
      match(KerMLParser::NAME);
    }
    setState(671);
    match(KerMLParser::KEYWORD_FOR);
    setState(672);
    qualified_name();
    setState(673);
    relationship_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Qualified_nameContext ------------------------------------------------------------------

KerMLParser::Qualified_nameContext::Qualified_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> KerMLParser::Qualified_nameContext::NAME() {
  return getTokens(KerMLParser::NAME);
}

tree::TerminalNode* KerMLParser::Qualified_nameContext::NAME(size_t i) {
  return getToken(KerMLParser::NAME, i);
}

std::vector<tree::TerminalNode *> KerMLParser::Qualified_nameContext::SYMBOL_NAMESPACE_SUBSET() {
  return getTokens(KerMLParser::SYMBOL_NAMESPACE_SUBSET);
}

tree::TerminalNode* KerMLParser::Qualified_nameContext::SYMBOL_NAMESPACE_SUBSET(size_t i) {
  return getToken(KerMLParser::SYMBOL_NAMESPACE_SUBSET, i);
}


size_t KerMLParser::Qualified_nameContext::getRuleIndex() const {
  return KerMLParser::RuleQualified_name;
}

void KerMLParser::Qualified_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQualified_name(this);
}

void KerMLParser::Qualified_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQualified_name(this);
}

KerMLParser::Qualified_nameContext* KerMLParser::qualified_name() {
  Qualified_nameContext *_localctx = _tracker.createInstance<Qualified_nameContext>(_ctx, getState());
  enterRule(_localctx, 54, KerMLParser::RuleQualified_name);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(675);
    match(KerMLParser::NAME);
    setState(680);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 26, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(676);
        match(KerMLParser::SYMBOL_NAMESPACE_SUBSET);
        setState(677);
        match(KerMLParser::NAME); 
      }
      setState(682);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 26, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Namespace_importContext ------------------------------------------------------------------

KerMLParser::Namespace_importContext::Namespace_importContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Namespace_importContext::KEYWORD_IMPORT() {
  return getToken(KerMLParser::KEYWORD_IMPORT, 0);
}

KerMLParser::Import_declarationContext* KerMLParser::Namespace_importContext::import_declaration() {
  return getRuleContext<KerMLParser::Import_declarationContext>(0);
}

KerMLParser::Visibility_indicatorContext* KerMLParser::Namespace_importContext::visibility_indicator() {
  return getRuleContext<KerMLParser::Visibility_indicatorContext>(0);
}

tree::TerminalNode* KerMLParser::Namespace_importContext::KEYWORD_ALL() {
  return getToken(KerMLParser::KEYWORD_ALL, 0);
}

KerMLParser::Relationship_bodyContext* KerMLParser::Namespace_importContext::relationship_body() {
  return getRuleContext<KerMLParser::Relationship_bodyContext>(0);
}


size_t KerMLParser::Namespace_importContext::getRuleIndex() const {
  return KerMLParser::RuleNamespace_import;
}

void KerMLParser::Namespace_importContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamespace_import(this);
}

void KerMLParser::Namespace_importContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamespace_import(this);
}

KerMLParser::Namespace_importContext* KerMLParser::namespace_import() {
  Namespace_importContext *_localctx = _tracker.createInstance<Namespace_importContext>(_ctx, getState());
  enterRule(_localctx, 56, KerMLParser::RuleNamespace_import);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(684);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 80) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 80)) & 7) != 0)) {
      setState(683);
      visibility_indicator();
    }
    setState(686);
    match(KerMLParser::KEYWORD_IMPORT);
    setState(688);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::KEYWORD_ALL) {
      setState(687);
      match(KerMLParser::KEYWORD_ALL);
    }
    setState(690);
    import_declaration();
    setState(692);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 29, _ctx)) {
    case 1: {
      setState(691);
      relationship_body();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Import_declarationContext ------------------------------------------------------------------

KerMLParser::Import_declarationContext::Import_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Membership_importContext* KerMLParser::Import_declarationContext::membership_import() {
  return getRuleContext<KerMLParser::Membership_importContext>(0);
}

KerMLParser::Namespace_importContext* KerMLParser::Import_declarationContext::namespace_import() {
  return getRuleContext<KerMLParser::Namespace_importContext>(0);
}


size_t KerMLParser::Import_declarationContext::getRuleIndex() const {
  return KerMLParser::RuleImport_declaration;
}

void KerMLParser::Import_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImport_declaration(this);
}

void KerMLParser::Import_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImport_declaration(this);
}

KerMLParser::Import_declarationContext* KerMLParser::import_declaration() {
  Import_declarationContext *_localctx = _tracker.createInstance<Import_declarationContext>(_ctx, getState());
  enterRule(_localctx, 58, KerMLParser::RuleImport_declaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(696);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case KerMLParser::NAME: {
        enterOuterAlt(_localctx, 1);
        setState(694);
        membership_import();
        break;
      }

      case KerMLParser::KEYWORD_IMPORT:
      case KerMLParser::KEYWORD_PRIVATE:
      case KerMLParser::KEYWORD_PROTECTED:
      case KerMLParser::KEYWORD_PUBLIC: {
        enterOuterAlt(_localctx, 2);
        setState(695);
        namespace_import();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Membership_importContext ------------------------------------------------------------------

KerMLParser::Membership_importContext::Membership_importContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Qualified_nameContext* KerMLParser::Membership_importContext::qualified_name() {
  return getRuleContext<KerMLParser::Qualified_nameContext>(0);
}

tree::TerminalNode* KerMLParser::Membership_importContext::SYMBOL_NAMESPACE_SUBSET() {
  return getToken(KerMLParser::SYMBOL_NAMESPACE_SUBSET, 0);
}

tree::TerminalNode* KerMLParser::Membership_importContext::SYMBOL_DOUBLE_STAR() {
  return getToken(KerMLParser::SYMBOL_DOUBLE_STAR, 0);
}

tree::TerminalNode* KerMLParser::Membership_importContext::SYMBOL_STAR() {
  return getToken(KerMLParser::SYMBOL_STAR, 0);
}


size_t KerMLParser::Membership_importContext::getRuleIndex() const {
  return KerMLParser::RuleMembership_import;
}

void KerMLParser::Membership_importContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMembership_import(this);
}

void KerMLParser::Membership_importContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMembership_import(this);
}

KerMLParser::Membership_importContext* KerMLParser::membership_import() {
  Membership_importContext *_localctx = _tracker.createInstance<Membership_importContext>(_ctx, getState());
  enterRule(_localctx, 60, KerMLParser::RuleMembership_import);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(698);
    qualified_name();

    setState(700);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::SYMBOL_NAMESPACE_SUBSET) {
      setState(699);
      match(KerMLParser::SYMBOL_NAMESPACE_SUBSET);
    }
    setState(703);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 32, _ctx)) {
    case 1: {
      setState(702);
      _la = _input->LA(1);
      if (!(_la == KerMLParser::SYMBOL_STAR

      || _la == KerMLParser::SYMBOL_DOUBLE_STAR)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Filter_packageContext ------------------------------------------------------------------

KerMLParser::Filter_packageContext::Filter_packageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Import_declarationContext* KerMLParser::Filter_packageContext::import_declaration() {
  return getRuleContext<KerMLParser::Import_declarationContext>(0);
}

KerMLParser::Filter_package_memberContext* KerMLParser::Filter_packageContext::filter_package_member() {
  return getRuleContext<KerMLParser::Filter_package_memberContext>(0);
}


size_t KerMLParser::Filter_packageContext::getRuleIndex() const {
  return KerMLParser::RuleFilter_package;
}

void KerMLParser::Filter_packageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFilter_package(this);
}

void KerMLParser::Filter_packageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFilter_package(this);
}

KerMLParser::Filter_packageContext* KerMLParser::filter_package() {
  Filter_packageContext *_localctx = _tracker.createInstance<Filter_packageContext>(_ctx, getState());
  enterRule(_localctx, 62, KerMLParser::RuleFilter_package);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(705);
    import_declaration();
    setState(706);
    filter_package_member();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Filter_package_memberContext ------------------------------------------------------------------

KerMLParser::Filter_package_memberContext::Filter_package_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Filter_package_memberContext::SYMBOL_SQUARE_BRACKET_OPEN() {
  return getToken(KerMLParser::SYMBOL_SQUARE_BRACKET_OPEN, 0);
}

KerMLParser::Owned_expressionContext* KerMLParser::Filter_package_memberContext::owned_expression() {
  return getRuleContext<KerMLParser::Owned_expressionContext>(0);
}

tree::TerminalNode* KerMLParser::Filter_package_memberContext::SYMBOL_SQUARE_BRACKET_CLOSE() {
  return getToken(KerMLParser::SYMBOL_SQUARE_BRACKET_CLOSE, 0);
}


size_t KerMLParser::Filter_package_memberContext::getRuleIndex() const {
  return KerMLParser::RuleFilter_package_member;
}

void KerMLParser::Filter_package_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFilter_package_member(this);
}

void KerMLParser::Filter_package_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFilter_package_member(this);
}

KerMLParser::Filter_package_memberContext* KerMLParser::filter_package_member() {
  Filter_package_memberContext *_localctx = _tracker.createInstance<Filter_package_memberContext>(_ctx, getState());
  enterRule(_localctx, 64, KerMLParser::RuleFilter_package_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(708);
    match(KerMLParser::SYMBOL_SQUARE_BRACKET_OPEN);
    setState(709);
    owned_expression();
    setState(710);
    match(KerMLParser::SYMBOL_SQUARE_BRACKET_CLOSE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElementContext ------------------------------------------------------------------

KerMLParser::ElementContext::ElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Annotating_elementContext* KerMLParser::ElementContext::annotating_element() {
  return getRuleContext<KerMLParser::Annotating_elementContext>(0);
}

KerMLParser::Non_feature_elementContext* KerMLParser::ElementContext::non_feature_element() {
  return getRuleContext<KerMLParser::Non_feature_elementContext>(0);
}

KerMLParser::Feature_elementContext* KerMLParser::ElementContext::feature_element() {
  return getRuleContext<KerMLParser::Feature_elementContext>(0);
}

KerMLParser::Additional_optionsContext* KerMLParser::ElementContext::additional_options() {
  return getRuleContext<KerMLParser::Additional_optionsContext>(0);
}


size_t KerMLParser::ElementContext::getRuleIndex() const {
  return KerMLParser::RuleElement;
}

void KerMLParser::ElementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElement(this);
}

void KerMLParser::ElementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElement(this);
}

KerMLParser::ElementContext* KerMLParser::element() {
  ElementContext *_localctx = _tracker.createInstance<ElementContext>(_ctx, getState());
  enterRule(_localctx, 66, KerMLParser::RuleElement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(716);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 33, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(712);
      annotating_element();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(713);
      non_feature_element();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(714);
      feature_element();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(715);
      additional_options();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Non_feature_elementContext ------------------------------------------------------------------

KerMLParser::Non_feature_elementContext::Non_feature_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::DependencyContext* KerMLParser::Non_feature_elementContext::dependency() {
  return getRuleContext<KerMLParser::DependencyContext>(0);
}

KerMLParser::TypeContext* KerMLParser::Non_feature_elementContext::type() {
  return getRuleContext<KerMLParser::TypeContext>(0);
}

KerMLParser::ClassifierContext* KerMLParser::Non_feature_elementContext::classifier() {
  return getRuleContext<KerMLParser::ClassifierContext>(0);
}

KerMLParser::Data_typeContext* KerMLParser::Non_feature_elementContext::data_type() {
  return getRuleContext<KerMLParser::Data_typeContext>(0);
}

KerMLParser::NamespaceContext* KerMLParser::Non_feature_elementContext::namespace_() {
  return getRuleContext<KerMLParser::NamespaceContext>(0);
}

KerMLParser::ClassContext* KerMLParser::Non_feature_elementContext::class_() {
  return getRuleContext<KerMLParser::ClassContext>(0);
}

KerMLParser::StructureContext* KerMLParser::Non_feature_elementContext::structure() {
  return getRuleContext<KerMLParser::StructureContext>(0);
}

KerMLParser::MetaclassContext* KerMLParser::Non_feature_elementContext::metaclass() {
  return getRuleContext<KerMLParser::MetaclassContext>(0);
}

KerMLParser::AssociationContext* KerMLParser::Non_feature_elementContext::association() {
  return getRuleContext<KerMLParser::AssociationContext>(0);
}

KerMLParser::Association_structureContext* KerMLParser::Non_feature_elementContext::association_structure() {
  return getRuleContext<KerMLParser::Association_structureContext>(0);
}

KerMLParser::InteractionContext* KerMLParser::Non_feature_elementContext::interaction() {
  return getRuleContext<KerMLParser::InteractionContext>(0);
}

KerMLParser::BehaviorContext* KerMLParser::Non_feature_elementContext::behavior() {
  return getRuleContext<KerMLParser::BehaviorContext>(0);
}

KerMLParser::FunctionContext* KerMLParser::Non_feature_elementContext::function() {
  return getRuleContext<KerMLParser::FunctionContext>(0);
}

KerMLParser::PredicateContext* KerMLParser::Non_feature_elementContext::predicate() {
  return getRuleContext<KerMLParser::PredicateContext>(0);
}

KerMLParser::MultiplicityContext* KerMLParser::Non_feature_elementContext::multiplicity() {
  return getRuleContext<KerMLParser::MultiplicityContext>(0);
}

KerMLParser::PackageContext* KerMLParser::Non_feature_elementContext::package() {
  return getRuleContext<KerMLParser::PackageContext>(0);
}

KerMLParser::Library_packageContext* KerMLParser::Non_feature_elementContext::library_package() {
  return getRuleContext<KerMLParser::Library_packageContext>(0);
}

KerMLParser::SpecializationContext* KerMLParser::Non_feature_elementContext::specialization() {
  return getRuleContext<KerMLParser::SpecializationContext>(0);
}

KerMLParser::ConjunctionContext* KerMLParser::Non_feature_elementContext::conjunction() {
  return getRuleContext<KerMLParser::ConjunctionContext>(0);
}

KerMLParser::SubclassificationContext* KerMLParser::Non_feature_elementContext::subclassification() {
  return getRuleContext<KerMLParser::SubclassificationContext>(0);
}

KerMLParser::DisjoiningContext* KerMLParser::Non_feature_elementContext::disjoining() {
  return getRuleContext<KerMLParser::DisjoiningContext>(0);
}

KerMLParser::Feature_invertingContext* KerMLParser::Non_feature_elementContext::feature_inverting() {
  return getRuleContext<KerMLParser::Feature_invertingContext>(0);
}

KerMLParser::Feature_typingContext* KerMLParser::Non_feature_elementContext::feature_typing() {
  return getRuleContext<KerMLParser::Feature_typingContext>(0);
}

KerMLParser::SubsettingContext* KerMLParser::Non_feature_elementContext::subsetting() {
  return getRuleContext<KerMLParser::SubsettingContext>(0);
}

KerMLParser::RedefinitionContext* KerMLParser::Non_feature_elementContext::redefinition() {
  return getRuleContext<KerMLParser::RedefinitionContext>(0);
}

KerMLParser::Type_featuringContext* KerMLParser::Non_feature_elementContext::type_featuring() {
  return getRuleContext<KerMLParser::Type_featuringContext>(0);
}

KerMLParser::Namespace_importContext* KerMLParser::Non_feature_elementContext::namespace_import() {
  return getRuleContext<KerMLParser::Namespace_importContext>(0);
}


size_t KerMLParser::Non_feature_elementContext::getRuleIndex() const {
  return KerMLParser::RuleNon_feature_element;
}

void KerMLParser::Non_feature_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNon_feature_element(this);
}

void KerMLParser::Non_feature_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNon_feature_element(this);
}

KerMLParser::Non_feature_elementContext* KerMLParser::non_feature_element() {
  Non_feature_elementContext *_localctx = _tracker.createInstance<Non_feature_elementContext>(_ctx, getState());
  enterRule(_localctx, 68, KerMLParser::RuleNon_feature_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(745);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 34, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(718);
      dependency();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(719);
      type();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(720);
      classifier();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(721);
      data_type();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(722);
      namespace_();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(723);
      class_();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(724);
      structure();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(725);
      metaclass();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(726);
      association();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(727);
      association_structure();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(728);
      interaction();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(729);
      behavior();
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(730);
      function();
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(731);
      predicate();
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(732);
      multiplicity();
      break;
    }

    case 16: {
      enterOuterAlt(_localctx, 16);
      setState(733);
      package();
      break;
    }

    case 17: {
      enterOuterAlt(_localctx, 17);
      setState(734);
      library_package();
      break;
    }

    case 18: {
      enterOuterAlt(_localctx, 18);
      setState(735);
      specialization();
      break;
    }

    case 19: {
      enterOuterAlt(_localctx, 19);
      setState(736);
      conjunction();
      break;
    }

    case 20: {
      enterOuterAlt(_localctx, 20);
      setState(737);
      subclassification();
      break;
    }

    case 21: {
      enterOuterAlt(_localctx, 21);
      setState(738);
      disjoining();
      break;
    }

    case 22: {
      enterOuterAlt(_localctx, 22);
      setState(739);
      feature_inverting();
      break;
    }

    case 23: {
      enterOuterAlt(_localctx, 23);
      setState(740);
      feature_typing();
      break;
    }

    case 24: {
      enterOuterAlt(_localctx, 24);
      setState(741);
      subsetting();
      break;
    }

    case 25: {
      enterOuterAlt(_localctx, 25);
      setState(742);
      redefinition();
      break;
    }

    case 26: {
      enterOuterAlt(_localctx, 26);
      setState(743);
      type_featuring();
      break;
    }

    case 27: {
      enterOuterAlt(_localctx, 27);
      setState(744);
      namespace_import();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Feature_elementContext ------------------------------------------------------------------

KerMLParser::Feature_elementContext::Feature_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::FeatureContext* KerMLParser::Feature_elementContext::feature() {
  return getRuleContext<KerMLParser::FeatureContext>(0);
}

KerMLParser::StepContext* KerMLParser::Feature_elementContext::step() {
  return getRuleContext<KerMLParser::StepContext>(0);
}

KerMLParser::ExpressionContext* KerMLParser::Feature_elementContext::expression() {
  return getRuleContext<KerMLParser::ExpressionContext>(0);
}

KerMLParser::Boolean_expressionContext* KerMLParser::Feature_elementContext::boolean_expression() {
  return getRuleContext<KerMLParser::Boolean_expressionContext>(0);
}

KerMLParser::InvariantContext* KerMLParser::Feature_elementContext::invariant() {
  return getRuleContext<KerMLParser::InvariantContext>(0);
}

KerMLParser::ConnectorContext* KerMLParser::Feature_elementContext::connector() {
  return getRuleContext<KerMLParser::ConnectorContext>(0);
}

KerMLParser::Binding_connectorContext* KerMLParser::Feature_elementContext::binding_connector() {
  return getRuleContext<KerMLParser::Binding_connectorContext>(0);
}

KerMLParser::SuccessionContext* KerMLParser::Feature_elementContext::succession() {
  return getRuleContext<KerMLParser::SuccessionContext>(0);
}

KerMLParser::Item_flowContext* KerMLParser::Feature_elementContext::item_flow() {
  return getRuleContext<KerMLParser::Item_flowContext>(0);
}

KerMLParser::Succession_item_flowContext* KerMLParser::Feature_elementContext::succession_item_flow() {
  return getRuleContext<KerMLParser::Succession_item_flowContext>(0);
}


size_t KerMLParser::Feature_elementContext::getRuleIndex() const {
  return KerMLParser::RuleFeature_element;
}

void KerMLParser::Feature_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFeature_element(this);
}

void KerMLParser::Feature_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFeature_element(this);
}

KerMLParser::Feature_elementContext* KerMLParser::feature_element() {
  Feature_elementContext *_localctx = _tracker.createInstance<Feature_elementContext>(_ctx, getState());
  enterRule(_localctx, 70, KerMLParser::RuleFeature_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(757);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 35, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(747);
      feature();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(748);
      step();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(749);
      expression();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(750);
      boolean_expression();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(751);
      invariant();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(752);
      connector();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(753);
      binding_connector();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(754);
      succession();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(755);
      item_flow();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(756);
      succession_item_flow();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Additional_optionsContext ------------------------------------------------------------------

KerMLParser::Additional_optionsContext::Additional_optionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Meta_assignmentContext* KerMLParser::Additional_optionsContext::meta_assignment() {
  return getRuleContext<KerMLParser::Meta_assignmentContext>(0);
}


size_t KerMLParser::Additional_optionsContext::getRuleIndex() const {
  return KerMLParser::RuleAdditional_options;
}

void KerMLParser::Additional_optionsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAdditional_options(this);
}

void KerMLParser::Additional_optionsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAdditional_options(this);
}

KerMLParser::Additional_optionsContext* KerMLParser::additional_options() {
  Additional_optionsContext *_localctx = _tracker.createInstance<Additional_optionsContext>(_ctx, getState());
  enterRule(_localctx, 72, KerMLParser::RuleAdditional_options);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(759);
    meta_assignment();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeContext ------------------------------------------------------------------

KerMLParser::TypeContext::TypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Type_prefixContext* KerMLParser::TypeContext::type_prefix() {
  return getRuleContext<KerMLParser::Type_prefixContext>(0);
}

tree::TerminalNode* KerMLParser::TypeContext::KEYWORD_TYPE() {
  return getToken(KerMLParser::KEYWORD_TYPE, 0);
}

KerMLParser::Type_declarationContext* KerMLParser::TypeContext::type_declaration() {
  return getRuleContext<KerMLParser::Type_declarationContext>(0);
}

KerMLParser::Type_bodyContext* KerMLParser::TypeContext::type_body() {
  return getRuleContext<KerMLParser::Type_bodyContext>(0);
}


size_t KerMLParser::TypeContext::getRuleIndex() const {
  return KerMLParser::RuleType;
}

void KerMLParser::TypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType(this);
}

void KerMLParser::TypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType(this);
}

KerMLParser::TypeContext* KerMLParser::type() {
  TypeContext *_localctx = _tracker.createInstance<TypeContext>(_ctx, getState());
  enterRule(_localctx, 74, KerMLParser::RuleType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(761);
    type_prefix();
    setState(762);
    match(KerMLParser::KEYWORD_TYPE);
    setState(763);
    type_declaration();
    setState(764);
    type_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_prefixContext ------------------------------------------------------------------

KerMLParser::Type_prefixContext::Type_prefixContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Type_prefixContext::KEYWORD_ABSTRACT() {
  return getToken(KerMLParser::KEYWORD_ABSTRACT, 0);
}

std::vector<KerMLParser::Prefix_metadata_memberContext *> KerMLParser::Type_prefixContext::prefix_metadata_member() {
  return getRuleContexts<KerMLParser::Prefix_metadata_memberContext>();
}

KerMLParser::Prefix_metadata_memberContext* KerMLParser::Type_prefixContext::prefix_metadata_member(size_t i) {
  return getRuleContext<KerMLParser::Prefix_metadata_memberContext>(i);
}


size_t KerMLParser::Type_prefixContext::getRuleIndex() const {
  return KerMLParser::RuleType_prefix;
}

void KerMLParser::Type_prefixContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_prefix(this);
}

void KerMLParser::Type_prefixContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_prefix(this);
}

KerMLParser::Type_prefixContext* KerMLParser::type_prefix() {
  Type_prefixContext *_localctx = _tracker.createInstance<Type_prefixContext>(_ctx, getState());
  enterRule(_localctx, 76, KerMLParser::RuleType_prefix);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(767);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::KEYWORD_ABSTRACT) {
      setState(766);
      match(KerMLParser::KEYWORD_ABSTRACT);
    }
    setState(772);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == KerMLParser::SYMBOL_HASHTAG) {
      setState(769);
      prefix_metadata_member();
      setState(774);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_declarationContext ------------------------------------------------------------------

KerMLParser::Type_declarationContext::Type_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::IdentificationContext* KerMLParser::Type_declarationContext::identification() {
  return getRuleContext<KerMLParser::IdentificationContext>(0);
}

tree::TerminalNode* KerMLParser::Type_declarationContext::KEYWORD_ALL() {
  return getToken(KerMLParser::KEYWORD_ALL, 0);
}

KerMLParser::Multiplicity_boundsContext* KerMLParser::Type_declarationContext::multiplicity_bounds() {
  return getRuleContext<KerMLParser::Multiplicity_boundsContext>(0);
}

std::vector<KerMLParser::Specialization_partContext *> KerMLParser::Type_declarationContext::specialization_part() {
  return getRuleContexts<KerMLParser::Specialization_partContext>();
}

KerMLParser::Specialization_partContext* KerMLParser::Type_declarationContext::specialization_part(size_t i) {
  return getRuleContext<KerMLParser::Specialization_partContext>(i);
}

std::vector<KerMLParser::Conjugation_partContext *> KerMLParser::Type_declarationContext::conjugation_part() {
  return getRuleContexts<KerMLParser::Conjugation_partContext>();
}

KerMLParser::Conjugation_partContext* KerMLParser::Type_declarationContext::conjugation_part(size_t i) {
  return getRuleContext<KerMLParser::Conjugation_partContext>(i);
}

std::vector<KerMLParser::Type_relationship_partContext *> KerMLParser::Type_declarationContext::type_relationship_part() {
  return getRuleContexts<KerMLParser::Type_relationship_partContext>();
}

KerMLParser::Type_relationship_partContext* KerMLParser::Type_declarationContext::type_relationship_part(size_t i) {
  return getRuleContext<KerMLParser::Type_relationship_partContext>(i);
}


size_t KerMLParser::Type_declarationContext::getRuleIndex() const {
  return KerMLParser::RuleType_declaration;
}

void KerMLParser::Type_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_declaration(this);
}

void KerMLParser::Type_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_declaration(this);
}

KerMLParser::Type_declarationContext* KerMLParser::type_declaration() {
  Type_declarationContext *_localctx = _tracker.createInstance<Type_declarationContext>(_ctx, getState());
  enterRule(_localctx, 78, KerMLParser::RuleType_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(776);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::KEYWORD_ALL) {
      setState(775);
      match(KerMLParser::KEYWORD_ALL);
    }
    setState(778);
    identification();
    setState(780);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::SYMBOL_SQUARE_BRACKET_OPEN) {
      setState(779);
      multiplicity_bounds();
    }
    setState(784); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(784);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case KerMLParser::SPECIALIZES: {
          setState(782);
          specialization_part();
          break;
        }

        case KerMLParser::CONJUNGATES: {
          setState(783);
          conjugation_part();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(786); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == KerMLParser::SPECIALIZES

    || _la == KerMLParser::CONJUNGATES);
    setState(791);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 18014570308173824) != 0) || _la == KerMLParser::KEYWORD_UNIONS) {
      setState(788);
      type_relationship_part();
      setState(793);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Specialization_partContext ------------------------------------------------------------------

KerMLParser::Specialization_partContext::Specialization_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Specialization_partContext::SPECIALIZES() {
  return getToken(KerMLParser::SPECIALIZES, 0);
}

std::vector<KerMLParser::Owned_specializationContext *> KerMLParser::Specialization_partContext::owned_specialization() {
  return getRuleContexts<KerMLParser::Owned_specializationContext>();
}

KerMLParser::Owned_specializationContext* KerMLParser::Specialization_partContext::owned_specialization(size_t i) {
  return getRuleContext<KerMLParser::Owned_specializationContext>(i);
}

std::vector<tree::TerminalNode *> KerMLParser::Specialization_partContext::SYMBOL_COMMA() {
  return getTokens(KerMLParser::SYMBOL_COMMA);
}

tree::TerminalNode* KerMLParser::Specialization_partContext::SYMBOL_COMMA(size_t i) {
  return getToken(KerMLParser::SYMBOL_COMMA, i);
}


size_t KerMLParser::Specialization_partContext::getRuleIndex() const {
  return KerMLParser::RuleSpecialization_part;
}

void KerMLParser::Specialization_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSpecialization_part(this);
}

void KerMLParser::Specialization_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSpecialization_part(this);
}

KerMLParser::Specialization_partContext* KerMLParser::specialization_part() {
  Specialization_partContext *_localctx = _tracker.createInstance<Specialization_partContext>(_ctx, getState());
  enterRule(_localctx, 80, KerMLParser::RuleSpecialization_part);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(794);
    match(KerMLParser::SPECIALIZES);
    setState(795);
    owned_specialization();
    setState(800);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == KerMLParser::SYMBOL_COMMA) {
      setState(796);
      match(KerMLParser::SYMBOL_COMMA);
      setState(797);
      owned_specialization();
      setState(802);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Conjugation_partContext ------------------------------------------------------------------

KerMLParser::Conjugation_partContext::Conjugation_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Conjugation_partContext::CONJUNGATES() {
  return getToken(KerMLParser::CONJUNGATES, 0);
}

KerMLParser::Owned_conjugationContext* KerMLParser::Conjugation_partContext::owned_conjugation() {
  return getRuleContext<KerMLParser::Owned_conjugationContext>(0);
}


size_t KerMLParser::Conjugation_partContext::getRuleIndex() const {
  return KerMLParser::RuleConjugation_part;
}

void KerMLParser::Conjugation_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConjugation_part(this);
}

void KerMLParser::Conjugation_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConjugation_part(this);
}

KerMLParser::Conjugation_partContext* KerMLParser::conjugation_part() {
  Conjugation_partContext *_localctx = _tracker.createInstance<Conjugation_partContext>(_ctx, getState());
  enterRule(_localctx, 82, KerMLParser::RuleConjugation_part);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(803);
    match(KerMLParser::CONJUNGATES);
    setState(804);
    owned_conjugation();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_relationship_partContext ------------------------------------------------------------------

KerMLParser::Type_relationship_partContext::Type_relationship_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Disjoining_partContext* KerMLParser::Type_relationship_partContext::disjoining_part() {
  return getRuleContext<KerMLParser::Disjoining_partContext>(0);
}

KerMLParser::Unioning_partContext* KerMLParser::Type_relationship_partContext::unioning_part() {
  return getRuleContext<KerMLParser::Unioning_partContext>(0);
}

KerMLParser::Intersecting_partContext* KerMLParser::Type_relationship_partContext::intersecting_part() {
  return getRuleContext<KerMLParser::Intersecting_partContext>(0);
}

KerMLParser::Differencing_partContext* KerMLParser::Type_relationship_partContext::differencing_part() {
  return getRuleContext<KerMLParser::Differencing_partContext>(0);
}


size_t KerMLParser::Type_relationship_partContext::getRuleIndex() const {
  return KerMLParser::RuleType_relationship_part;
}

void KerMLParser::Type_relationship_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_relationship_part(this);
}

void KerMLParser::Type_relationship_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_relationship_part(this);
}

KerMLParser::Type_relationship_partContext* KerMLParser::type_relationship_part() {
  Type_relationship_partContext *_localctx = _tracker.createInstance<Type_relationship_partContext>(_ctx, getState());
  enterRule(_localctx, 84, KerMLParser::RuleType_relationship_part);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(810);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case KerMLParser::KEYWORD_DISJOINT: {
        enterOuterAlt(_localctx, 1);
        setState(806);
        disjoining_part();
        break;
      }

      case KerMLParser::KEYWORD_UNIONS: {
        enterOuterAlt(_localctx, 2);
        setState(807);
        unioning_part();
        break;
      }

      case KerMLParser::KEYWORD_INTERSECTS: {
        enterOuterAlt(_localctx, 3);
        setState(808);
        intersecting_part();
        break;
      }

      case KerMLParser::KEYWORD_DIFFERENCES: {
        enterOuterAlt(_localctx, 4);
        setState(809);
        differencing_part();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Disjoining_partContext ------------------------------------------------------------------

KerMLParser::Disjoining_partContext::Disjoining_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Disjoining_partContext::KEYWORD_DISJOINT() {
  return getToken(KerMLParser::KEYWORD_DISJOINT, 0);
}

tree::TerminalNode* KerMLParser::Disjoining_partContext::KEYWORD_FROM() {
  return getToken(KerMLParser::KEYWORD_FROM, 0);
}

std::vector<KerMLParser::Owned_disjoiningContext *> KerMLParser::Disjoining_partContext::owned_disjoining() {
  return getRuleContexts<KerMLParser::Owned_disjoiningContext>();
}

KerMLParser::Owned_disjoiningContext* KerMLParser::Disjoining_partContext::owned_disjoining(size_t i) {
  return getRuleContext<KerMLParser::Owned_disjoiningContext>(i);
}

std::vector<tree::TerminalNode *> KerMLParser::Disjoining_partContext::SYMBOL_COMMA() {
  return getTokens(KerMLParser::SYMBOL_COMMA);
}

tree::TerminalNode* KerMLParser::Disjoining_partContext::SYMBOL_COMMA(size_t i) {
  return getToken(KerMLParser::SYMBOL_COMMA, i);
}


size_t KerMLParser::Disjoining_partContext::getRuleIndex() const {
  return KerMLParser::RuleDisjoining_part;
}

void KerMLParser::Disjoining_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDisjoining_part(this);
}

void KerMLParser::Disjoining_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDisjoining_part(this);
}

KerMLParser::Disjoining_partContext* KerMLParser::disjoining_part() {
  Disjoining_partContext *_localctx = _tracker.createInstance<Disjoining_partContext>(_ctx, getState());
  enterRule(_localctx, 86, KerMLParser::RuleDisjoining_part);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(812);
    match(KerMLParser::KEYWORD_DISJOINT);
    setState(813);
    match(KerMLParser::KEYWORD_FROM);
    setState(814);
    owned_disjoining();
    setState(819);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == KerMLParser::SYMBOL_COMMA) {
      setState(815);
      match(KerMLParser::SYMBOL_COMMA);
      setState(816);
      owned_disjoining();
      setState(821);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Unioning_partContext ------------------------------------------------------------------

KerMLParser::Unioning_partContext::Unioning_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Unioning_partContext::KEYWORD_UNIONS() {
  return getToken(KerMLParser::KEYWORD_UNIONS, 0);
}

std::vector<KerMLParser::UnioningContext *> KerMLParser::Unioning_partContext::unioning() {
  return getRuleContexts<KerMLParser::UnioningContext>();
}

KerMLParser::UnioningContext* KerMLParser::Unioning_partContext::unioning(size_t i) {
  return getRuleContext<KerMLParser::UnioningContext>(i);
}

std::vector<tree::TerminalNode *> KerMLParser::Unioning_partContext::SYMBOL_COMMA() {
  return getTokens(KerMLParser::SYMBOL_COMMA);
}

tree::TerminalNode* KerMLParser::Unioning_partContext::SYMBOL_COMMA(size_t i) {
  return getToken(KerMLParser::SYMBOL_COMMA, i);
}


size_t KerMLParser::Unioning_partContext::getRuleIndex() const {
  return KerMLParser::RuleUnioning_part;
}

void KerMLParser::Unioning_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnioning_part(this);
}

void KerMLParser::Unioning_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnioning_part(this);
}

KerMLParser::Unioning_partContext* KerMLParser::unioning_part() {
  Unioning_partContext *_localctx = _tracker.createInstance<Unioning_partContext>(_ctx, getState());
  enterRule(_localctx, 88, KerMLParser::RuleUnioning_part);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(822);
    match(KerMLParser::KEYWORD_UNIONS);
    setState(823);
    unioning();
    setState(828);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == KerMLParser::SYMBOL_COMMA) {
      setState(824);
      match(KerMLParser::SYMBOL_COMMA);
      setState(825);
      unioning();
      setState(830);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Intersecting_partContext ------------------------------------------------------------------

KerMLParser::Intersecting_partContext::Intersecting_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Intersecting_partContext::KEYWORD_INTERSECTS() {
  return getToken(KerMLParser::KEYWORD_INTERSECTS, 0);
}

std::vector<KerMLParser::IntersectingContext *> KerMLParser::Intersecting_partContext::intersecting() {
  return getRuleContexts<KerMLParser::IntersectingContext>();
}

KerMLParser::IntersectingContext* KerMLParser::Intersecting_partContext::intersecting(size_t i) {
  return getRuleContext<KerMLParser::IntersectingContext>(i);
}

std::vector<tree::TerminalNode *> KerMLParser::Intersecting_partContext::SYMBOL_COMMA() {
  return getTokens(KerMLParser::SYMBOL_COMMA);
}

tree::TerminalNode* KerMLParser::Intersecting_partContext::SYMBOL_COMMA(size_t i) {
  return getToken(KerMLParser::SYMBOL_COMMA, i);
}


size_t KerMLParser::Intersecting_partContext::getRuleIndex() const {
  return KerMLParser::RuleIntersecting_part;
}

void KerMLParser::Intersecting_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIntersecting_part(this);
}

void KerMLParser::Intersecting_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIntersecting_part(this);
}

KerMLParser::Intersecting_partContext* KerMLParser::intersecting_part() {
  Intersecting_partContext *_localctx = _tracker.createInstance<Intersecting_partContext>(_ctx, getState());
  enterRule(_localctx, 90, KerMLParser::RuleIntersecting_part);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(831);
    match(KerMLParser::KEYWORD_INTERSECTS);
    setState(832);
    intersecting();
    setState(837);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == KerMLParser::SYMBOL_COMMA) {
      setState(833);
      match(KerMLParser::SYMBOL_COMMA);
      setState(834);
      intersecting();
      setState(839);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Differencing_partContext ------------------------------------------------------------------

KerMLParser::Differencing_partContext::Differencing_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Differencing_partContext::KEYWORD_DIFFERENCES() {
  return getToken(KerMLParser::KEYWORD_DIFFERENCES, 0);
}

std::vector<KerMLParser::DifferencingContext *> KerMLParser::Differencing_partContext::differencing() {
  return getRuleContexts<KerMLParser::DifferencingContext>();
}

KerMLParser::DifferencingContext* KerMLParser::Differencing_partContext::differencing(size_t i) {
  return getRuleContext<KerMLParser::DifferencingContext>(i);
}

std::vector<tree::TerminalNode *> KerMLParser::Differencing_partContext::SYMBOL_COMMA() {
  return getTokens(KerMLParser::SYMBOL_COMMA);
}

tree::TerminalNode* KerMLParser::Differencing_partContext::SYMBOL_COMMA(size_t i) {
  return getToken(KerMLParser::SYMBOL_COMMA, i);
}


size_t KerMLParser::Differencing_partContext::getRuleIndex() const {
  return KerMLParser::RuleDifferencing_part;
}

void KerMLParser::Differencing_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDifferencing_part(this);
}

void KerMLParser::Differencing_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDifferencing_part(this);
}

KerMLParser::Differencing_partContext* KerMLParser::differencing_part() {
  Differencing_partContext *_localctx = _tracker.createInstance<Differencing_partContext>(_ctx, getState());
  enterRule(_localctx, 92, KerMLParser::RuleDifferencing_part);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(840);
    match(KerMLParser::KEYWORD_DIFFERENCES);
    setState(841);
    differencing();
    setState(846);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == KerMLParser::SYMBOL_COMMA) {
      setState(842);
      match(KerMLParser::SYMBOL_COMMA);
      setState(843);
      differencing();
      setState(848);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_bodyContext ------------------------------------------------------------------

KerMLParser::Type_bodyContext::Type_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Type_bodyContext::SYMBOL_STATEMENT_DELIMITER() {
  return getToken(KerMLParser::SYMBOL_STATEMENT_DELIMITER, 0);
}

tree::TerminalNode* KerMLParser::Type_bodyContext::SYMBOL_CURLY_BRACKET_OPEN() {
  return getToken(KerMLParser::SYMBOL_CURLY_BRACKET_OPEN, 0);
}

KerMLParser::Type_body_elementsContext* KerMLParser::Type_bodyContext::type_body_elements() {
  return getRuleContext<KerMLParser::Type_body_elementsContext>(0);
}

tree::TerminalNode* KerMLParser::Type_bodyContext::SYMBOL_CURLY_BRACKET_CLOSE() {
  return getToken(KerMLParser::SYMBOL_CURLY_BRACKET_CLOSE, 0);
}


size_t KerMLParser::Type_bodyContext::getRuleIndex() const {
  return KerMLParser::RuleType_body;
}

void KerMLParser::Type_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_body(this);
}

void KerMLParser::Type_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_body(this);
}

KerMLParser::Type_bodyContext* KerMLParser::type_body() {
  Type_bodyContext *_localctx = _tracker.createInstance<Type_bodyContext>(_ctx, getState());
  enterRule(_localctx, 94, KerMLParser::RuleType_body);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(854);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case KerMLParser::SYMBOL_STATEMENT_DELIMITER: {
        enterOuterAlt(_localctx, 1);
        setState(849);
        match(KerMLParser::SYMBOL_STATEMENT_DELIMITER);
        break;
      }

      case KerMLParser::SYMBOL_CURLY_BRACKET_OPEN: {
        enterOuterAlt(_localctx, 2);
        setState(850);
        match(KerMLParser::SYMBOL_CURLY_BRACKET_OPEN);
        setState(851);
        type_body_elements();
        setState(852);
        match(KerMLParser::SYMBOL_CURLY_BRACKET_CLOSE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_body_elementsContext ------------------------------------------------------------------

KerMLParser::Type_body_elementsContext::Type_body_elementsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<KerMLParser::ElementContext *> KerMLParser::Type_body_elementsContext::element() {
  return getRuleContexts<KerMLParser::ElementContext>();
}

KerMLParser::ElementContext* KerMLParser::Type_body_elementsContext::element(size_t i) {
  return getRuleContext<KerMLParser::ElementContext>(i);
}


size_t KerMLParser::Type_body_elementsContext::getRuleIndex() const {
  return KerMLParser::RuleType_body_elements;
}

void KerMLParser::Type_body_elementsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_body_elements(this);
}

void KerMLParser::Type_body_elementsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_body_elements(this);
}

KerMLParser::Type_body_elementsContext* KerMLParser::type_body_elements() {
  Type_body_elementsContext *_localctx = _tracker.createInstance<Type_body_elementsContext>(_ctx, getState());
  enterRule(_localctx, 96, KerMLParser::RuleType_body_elements);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(859);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 9153895507433493018) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 40284556619837) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 128)) & 67108867) != 0)) {
      setState(856);
      element();
      setState(861);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_body_elementContext ------------------------------------------------------------------

KerMLParser::Type_body_elementContext::Type_body_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::ElementContext* KerMLParser::Type_body_elementContext::element() {
  return getRuleContext<KerMLParser::ElementContext>(0);
}


size_t KerMLParser::Type_body_elementContext::getRuleIndex() const {
  return KerMLParser::RuleType_body_element;
}

void KerMLParser::Type_body_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_body_element(this);
}

void KerMLParser::Type_body_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_body_element(this);
}

KerMLParser::Type_body_elementContext* KerMLParser::type_body_element() {
  Type_body_elementContext *_localctx = _tracker.createInstance<Type_body_elementContext>(_ctx, getState());
  enterRule(_localctx, 98, KerMLParser::RuleType_body_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(862);
    element();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SpecializationContext ------------------------------------------------------------------

KerMLParser::SpecializationContext::SpecializationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::SpecializationContext::KEYWORD_SUBTYPE() {
  return getToken(KerMLParser::KEYWORD_SUBTYPE, 0);
}

KerMLParser::Specific_typeContext* KerMLParser::SpecializationContext::specific_type() {
  return getRuleContext<KerMLParser::Specific_typeContext>(0);
}

tree::TerminalNode* KerMLParser::SpecializationContext::SPECIALIZES() {
  return getToken(KerMLParser::SPECIALIZES, 0);
}

KerMLParser::General_typeContext* KerMLParser::SpecializationContext::general_type() {
  return getRuleContext<KerMLParser::General_typeContext>(0);
}

KerMLParser::Relationship_bodyContext* KerMLParser::SpecializationContext::relationship_body() {
  return getRuleContext<KerMLParser::Relationship_bodyContext>(0);
}

tree::TerminalNode* KerMLParser::SpecializationContext::KEYWORD_SPECILIZATION() {
  return getToken(KerMLParser::KEYWORD_SPECILIZATION, 0);
}

KerMLParser::IdentificationContext* KerMLParser::SpecializationContext::identification() {
  return getRuleContext<KerMLParser::IdentificationContext>(0);
}


size_t KerMLParser::SpecializationContext::getRuleIndex() const {
  return KerMLParser::RuleSpecialization;
}

void KerMLParser::SpecializationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSpecialization(this);
}

void KerMLParser::SpecializationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSpecialization(this);
}

KerMLParser::SpecializationContext* KerMLParser::specialization() {
  SpecializationContext *_localctx = _tracker.createInstance<SpecializationContext>(_ctx, getState());
  enterRule(_localctx, 100, KerMLParser::RuleSpecialization);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(866);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::KEYWORD_SPECILIZATION) {
      setState(864);
      match(KerMLParser::KEYWORD_SPECILIZATION);
      setState(865);
      identification();
    }
    setState(868);
    match(KerMLParser::KEYWORD_SUBTYPE);
    setState(869);
    specific_type();
    setState(870);
    match(KerMLParser::SPECIALIZES);
    setState(871);
    general_type();
    setState(872);
    relationship_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Owned_specializationContext ------------------------------------------------------------------

KerMLParser::Owned_specializationContext::Owned_specializationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::General_typeContext* KerMLParser::Owned_specializationContext::general_type() {
  return getRuleContext<KerMLParser::General_typeContext>(0);
}


size_t KerMLParser::Owned_specializationContext::getRuleIndex() const {
  return KerMLParser::RuleOwned_specialization;
}

void KerMLParser::Owned_specializationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOwned_specialization(this);
}

void KerMLParser::Owned_specializationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOwned_specialization(this);
}

KerMLParser::Owned_specializationContext* KerMLParser::owned_specialization() {
  Owned_specializationContext *_localctx = _tracker.createInstance<Owned_specializationContext>(_ctx, getState());
  enterRule(_localctx, 102, KerMLParser::RuleOwned_specialization);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(874);
    general_type();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Specific_typeContext ------------------------------------------------------------------

KerMLParser::Specific_typeContext::Specific_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Qualified_nameContext* KerMLParser::Specific_typeContext::qualified_name() {
  return getRuleContext<KerMLParser::Qualified_nameContext>(0);
}

KerMLParser::Owned_feature_chainContext* KerMLParser::Specific_typeContext::owned_feature_chain() {
  return getRuleContext<KerMLParser::Owned_feature_chainContext>(0);
}


size_t KerMLParser::Specific_typeContext::getRuleIndex() const {
  return KerMLParser::RuleSpecific_type;
}

void KerMLParser::Specific_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSpecific_type(this);
}

void KerMLParser::Specific_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSpecific_type(this);
}

KerMLParser::Specific_typeContext* KerMLParser::specific_type() {
  Specific_typeContext *_localctx = _tracker.createInstance<Specific_typeContext>(_ctx, getState());
  enterRule(_localctx, 104, KerMLParser::RuleSpecific_type);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(878);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 52, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(876);
      qualified_name();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(877);
      owned_feature_chain();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- General_typeContext ------------------------------------------------------------------

KerMLParser::General_typeContext::General_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Qualified_nameContext* KerMLParser::General_typeContext::qualified_name() {
  return getRuleContext<KerMLParser::Qualified_nameContext>(0);
}

KerMLParser::Owned_feature_chainContext* KerMLParser::General_typeContext::owned_feature_chain() {
  return getRuleContext<KerMLParser::Owned_feature_chainContext>(0);
}


size_t KerMLParser::General_typeContext::getRuleIndex() const {
  return KerMLParser::RuleGeneral_type;
}

void KerMLParser::General_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGeneral_type(this);
}

void KerMLParser::General_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGeneral_type(this);
}

KerMLParser::General_typeContext* KerMLParser::general_type() {
  General_typeContext *_localctx = _tracker.createInstance<General_typeContext>(_ctx, getState());
  enterRule(_localctx, 106, KerMLParser::RuleGeneral_type);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(882);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 53, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(880);
      qualified_name();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(881);
      owned_feature_chain();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConjunctionContext ------------------------------------------------------------------

KerMLParser::ConjunctionContext::ConjunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::ConjunctionContext::KEYWORD_CONJUGATE() {
  return getToken(KerMLParser::KEYWORD_CONJUGATE, 0);
}

tree::TerminalNode* KerMLParser::ConjunctionContext::CONJUNGATES() {
  return getToken(KerMLParser::CONJUNGATES, 0);
}

KerMLParser::Relationship_bodyContext* KerMLParser::ConjunctionContext::relationship_body() {
  return getRuleContext<KerMLParser::Relationship_bodyContext>(0);
}

std::vector<KerMLParser::Qualified_nameContext *> KerMLParser::ConjunctionContext::qualified_name() {
  return getRuleContexts<KerMLParser::Qualified_nameContext>();
}

KerMLParser::Qualified_nameContext* KerMLParser::ConjunctionContext::qualified_name(size_t i) {
  return getRuleContext<KerMLParser::Qualified_nameContext>(i);
}

std::vector<KerMLParser::Feature_chainContext *> KerMLParser::ConjunctionContext::feature_chain() {
  return getRuleContexts<KerMLParser::Feature_chainContext>();
}

KerMLParser::Feature_chainContext* KerMLParser::ConjunctionContext::feature_chain(size_t i) {
  return getRuleContext<KerMLParser::Feature_chainContext>(i);
}

tree::TerminalNode* KerMLParser::ConjunctionContext::KEYWORD_CONJUGATION() {
  return getToken(KerMLParser::KEYWORD_CONJUGATION, 0);
}

KerMLParser::IdentificationContext* KerMLParser::ConjunctionContext::identification() {
  return getRuleContext<KerMLParser::IdentificationContext>(0);
}


size_t KerMLParser::ConjunctionContext::getRuleIndex() const {
  return KerMLParser::RuleConjunction;
}

void KerMLParser::ConjunctionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConjunction(this);
}

void KerMLParser::ConjunctionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConjunction(this);
}

KerMLParser::ConjunctionContext* KerMLParser::conjunction() {
  ConjunctionContext *_localctx = _tracker.createInstance<ConjunctionContext>(_ctx, getState());
  enterRule(_localctx, 108, KerMLParser::RuleConjunction);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(886);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::KEYWORD_CONJUGATION) {
      setState(884);
      match(KerMLParser::KEYWORD_CONJUGATION);
      setState(885);
      identification();
    }
    setState(888);
    match(KerMLParser::KEYWORD_CONJUGATE);
    setState(891);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 55, _ctx)) {
    case 1: {
      setState(889);
      qualified_name();
      break;
    }

    case 2: {
      setState(890);
      feature_chain();
      break;
    }

    default:
      break;
    }
    setState(893);
    match(KerMLParser::CONJUNGATES);
    setState(896);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 56, _ctx)) {
    case 1: {
      setState(894);
      qualified_name();
      break;
    }

    case 2: {
      setState(895);
      feature_chain();
      break;
    }

    default:
      break;
    }
    setState(898);
    relationship_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Owned_conjugationContext ------------------------------------------------------------------

KerMLParser::Owned_conjugationContext::Owned_conjugationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Qualified_nameContext* KerMLParser::Owned_conjugationContext::qualified_name() {
  return getRuleContext<KerMLParser::Qualified_nameContext>(0);
}

KerMLParser::Feature_chainContext* KerMLParser::Owned_conjugationContext::feature_chain() {
  return getRuleContext<KerMLParser::Feature_chainContext>(0);
}


size_t KerMLParser::Owned_conjugationContext::getRuleIndex() const {
  return KerMLParser::RuleOwned_conjugation;
}

void KerMLParser::Owned_conjugationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOwned_conjugation(this);
}

void KerMLParser::Owned_conjugationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOwned_conjugation(this);
}

KerMLParser::Owned_conjugationContext* KerMLParser::owned_conjugation() {
  Owned_conjugationContext *_localctx = _tracker.createInstance<Owned_conjugationContext>(_ctx, getState());
  enterRule(_localctx, 110, KerMLParser::RuleOwned_conjugation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(902);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 57, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(900);
      qualified_name();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(901);
      feature_chain();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DisjoiningContext ------------------------------------------------------------------

KerMLParser::DisjoiningContext::DisjoiningContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::DisjoiningContext::KEYWORD_DISJOINT() {
  return getToken(KerMLParser::KEYWORD_DISJOINT, 0);
}

tree::TerminalNode* KerMLParser::DisjoiningContext::KEYWORD_FROM() {
  return getToken(KerMLParser::KEYWORD_FROM, 0);
}

KerMLParser::Relationship_bodyContext* KerMLParser::DisjoiningContext::relationship_body() {
  return getRuleContext<KerMLParser::Relationship_bodyContext>(0);
}

std::vector<KerMLParser::Qualified_nameContext *> KerMLParser::DisjoiningContext::qualified_name() {
  return getRuleContexts<KerMLParser::Qualified_nameContext>();
}

KerMLParser::Qualified_nameContext* KerMLParser::DisjoiningContext::qualified_name(size_t i) {
  return getRuleContext<KerMLParser::Qualified_nameContext>(i);
}

std::vector<KerMLParser::Feature_chainContext *> KerMLParser::DisjoiningContext::feature_chain() {
  return getRuleContexts<KerMLParser::Feature_chainContext>();
}

KerMLParser::Feature_chainContext* KerMLParser::DisjoiningContext::feature_chain(size_t i) {
  return getRuleContext<KerMLParser::Feature_chainContext>(i);
}

tree::TerminalNode* KerMLParser::DisjoiningContext::KEYWORD_DISJOINING() {
  return getToken(KerMLParser::KEYWORD_DISJOINING, 0);
}

KerMLParser::IdentificationContext* KerMLParser::DisjoiningContext::identification() {
  return getRuleContext<KerMLParser::IdentificationContext>(0);
}


size_t KerMLParser::DisjoiningContext::getRuleIndex() const {
  return KerMLParser::RuleDisjoining;
}

void KerMLParser::DisjoiningContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDisjoining(this);
}

void KerMLParser::DisjoiningContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDisjoining(this);
}

KerMLParser::DisjoiningContext* KerMLParser::disjoining() {
  DisjoiningContext *_localctx = _tracker.createInstance<DisjoiningContext>(_ctx, getState());
  enterRule(_localctx, 112, KerMLParser::RuleDisjoining);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(906);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::KEYWORD_DISJOINING) {
      setState(904);
      match(KerMLParser::KEYWORD_DISJOINING);
      setState(905);
      identification();
    }
    setState(908);
    match(KerMLParser::KEYWORD_DISJOINT);
    setState(911);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 59, _ctx)) {
    case 1: {
      setState(909);
      qualified_name();
      break;
    }

    case 2: {
      setState(910);
      feature_chain();
      break;
    }

    default:
      break;
    }
    setState(913);
    match(KerMLParser::KEYWORD_FROM);
    setState(916);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 60, _ctx)) {
    case 1: {
      setState(914);
      qualified_name();
      break;
    }

    case 2: {
      setState(915);
      feature_chain();
      break;
    }

    default:
      break;
    }
    setState(918);
    relationship_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Owned_disjoiningContext ------------------------------------------------------------------

KerMLParser::Owned_disjoiningContext::Owned_disjoiningContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Qualified_nameContext* KerMLParser::Owned_disjoiningContext::qualified_name() {
  return getRuleContext<KerMLParser::Qualified_nameContext>(0);
}

KerMLParser::Feature_chainContext* KerMLParser::Owned_disjoiningContext::feature_chain() {
  return getRuleContext<KerMLParser::Feature_chainContext>(0);
}


size_t KerMLParser::Owned_disjoiningContext::getRuleIndex() const {
  return KerMLParser::RuleOwned_disjoining;
}

void KerMLParser::Owned_disjoiningContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOwned_disjoining(this);
}

void KerMLParser::Owned_disjoiningContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOwned_disjoining(this);
}

KerMLParser::Owned_disjoiningContext* KerMLParser::owned_disjoining() {
  Owned_disjoiningContext *_localctx = _tracker.createInstance<Owned_disjoiningContext>(_ctx, getState());
  enterRule(_localctx, 114, KerMLParser::RuleOwned_disjoining);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(922);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 61, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(920);
      qualified_name();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(921);
      feature_chain();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnioningContext ------------------------------------------------------------------

KerMLParser::UnioningContext::UnioningContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Qualified_nameContext* KerMLParser::UnioningContext::qualified_name() {
  return getRuleContext<KerMLParser::Qualified_nameContext>(0);
}

KerMLParser::Owned_feature_chainContext* KerMLParser::UnioningContext::owned_feature_chain() {
  return getRuleContext<KerMLParser::Owned_feature_chainContext>(0);
}


size_t KerMLParser::UnioningContext::getRuleIndex() const {
  return KerMLParser::RuleUnioning;
}

void KerMLParser::UnioningContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnioning(this);
}

void KerMLParser::UnioningContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnioning(this);
}

KerMLParser::UnioningContext* KerMLParser::unioning() {
  UnioningContext *_localctx = _tracker.createInstance<UnioningContext>(_ctx, getState());
  enterRule(_localctx, 116, KerMLParser::RuleUnioning);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(926);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 62, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(924);
      qualified_name();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(925);
      owned_feature_chain();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IntersectingContext ------------------------------------------------------------------

KerMLParser::IntersectingContext::IntersectingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Qualified_nameContext* KerMLParser::IntersectingContext::qualified_name() {
  return getRuleContext<KerMLParser::Qualified_nameContext>(0);
}

KerMLParser::Owned_feature_chainContext* KerMLParser::IntersectingContext::owned_feature_chain() {
  return getRuleContext<KerMLParser::Owned_feature_chainContext>(0);
}


size_t KerMLParser::IntersectingContext::getRuleIndex() const {
  return KerMLParser::RuleIntersecting;
}

void KerMLParser::IntersectingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIntersecting(this);
}

void KerMLParser::IntersectingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIntersecting(this);
}

KerMLParser::IntersectingContext* KerMLParser::intersecting() {
  IntersectingContext *_localctx = _tracker.createInstance<IntersectingContext>(_ctx, getState());
  enterRule(_localctx, 118, KerMLParser::RuleIntersecting);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(930);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 63, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(928);
      qualified_name();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(929);
      owned_feature_chain();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DifferencingContext ------------------------------------------------------------------

KerMLParser::DifferencingContext::DifferencingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Qualified_nameContext* KerMLParser::DifferencingContext::qualified_name() {
  return getRuleContext<KerMLParser::Qualified_nameContext>(0);
}

KerMLParser::Owned_feature_chainContext* KerMLParser::DifferencingContext::owned_feature_chain() {
  return getRuleContext<KerMLParser::Owned_feature_chainContext>(0);
}


size_t KerMLParser::DifferencingContext::getRuleIndex() const {
  return KerMLParser::RuleDifferencing;
}

void KerMLParser::DifferencingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDifferencing(this);
}

void KerMLParser::DifferencingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDifferencing(this);
}

KerMLParser::DifferencingContext* KerMLParser::differencing() {
  DifferencingContext *_localctx = _tracker.createInstance<DifferencingContext>(_ctx, getState());
  enterRule(_localctx, 120, KerMLParser::RuleDifferencing);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(934);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 64, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(932);
      qualified_name();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(933);
      owned_feature_chain();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Feature_memberContext ------------------------------------------------------------------

KerMLParser::Feature_memberContext::Feature_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Type_feature_memberContext* KerMLParser::Feature_memberContext::type_feature_member() {
  return getRuleContext<KerMLParser::Type_feature_memberContext>(0);
}

KerMLParser::Owned_feature_memberContext* KerMLParser::Feature_memberContext::owned_feature_member() {
  return getRuleContext<KerMLParser::Owned_feature_memberContext>(0);
}


size_t KerMLParser::Feature_memberContext::getRuleIndex() const {
  return KerMLParser::RuleFeature_member;
}

void KerMLParser::Feature_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFeature_member(this);
}

void KerMLParser::Feature_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFeature_member(this);
}

KerMLParser::Feature_memberContext* KerMLParser::feature_member() {
  Feature_memberContext *_localctx = _tracker.createInstance<Feature_memberContext>(_ctx, getState());
  enterRule(_localctx, 122, KerMLParser::RuleFeature_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(938);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 65, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(936);
      type_feature_member();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(937);
      owned_feature_member();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_feature_memberContext ------------------------------------------------------------------

KerMLParser::Type_feature_memberContext::Type_feature_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Member_prefixContext* KerMLParser::Type_feature_memberContext::member_prefix() {
  return getRuleContext<KerMLParser::Member_prefixContext>(0);
}

tree::TerminalNode* KerMLParser::Type_feature_memberContext::KEYWORD_MEMBER() {
  return getToken(KerMLParser::KEYWORD_MEMBER, 0);
}

KerMLParser::Feature_elementContext* KerMLParser::Type_feature_memberContext::feature_element() {
  return getRuleContext<KerMLParser::Feature_elementContext>(0);
}


size_t KerMLParser::Type_feature_memberContext::getRuleIndex() const {
  return KerMLParser::RuleType_feature_member;
}

void KerMLParser::Type_feature_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_feature_member(this);
}

void KerMLParser::Type_feature_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_feature_member(this);
}

KerMLParser::Type_feature_memberContext* KerMLParser::type_feature_member() {
  Type_feature_memberContext *_localctx = _tracker.createInstance<Type_feature_memberContext>(_ctx, getState());
  enterRule(_localctx, 124, KerMLParser::RuleType_feature_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(940);
    member_prefix();
    setState(941);
    match(KerMLParser::KEYWORD_MEMBER);
    setState(942);
    feature_element();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Owned_feature_memberContext ------------------------------------------------------------------

KerMLParser::Owned_feature_memberContext::Owned_feature_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Member_prefixContext* KerMLParser::Owned_feature_memberContext::member_prefix() {
  return getRuleContext<KerMLParser::Member_prefixContext>(0);
}

KerMLParser::Feature_elementContext* KerMLParser::Owned_feature_memberContext::feature_element() {
  return getRuleContext<KerMLParser::Feature_elementContext>(0);
}


size_t KerMLParser::Owned_feature_memberContext::getRuleIndex() const {
  return KerMLParser::RuleOwned_feature_member;
}

void KerMLParser::Owned_feature_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOwned_feature_member(this);
}

void KerMLParser::Owned_feature_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOwned_feature_member(this);
}

KerMLParser::Owned_feature_memberContext* KerMLParser::owned_feature_member() {
  Owned_feature_memberContext *_localctx = _tracker.createInstance<Owned_feature_memberContext>(_ctx, getState());
  enterRule(_localctx, 126, KerMLParser::RuleOwned_feature_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(944);
    member_prefix();
    setState(945);
    feature_element();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassifierContext ------------------------------------------------------------------

KerMLParser::ClassifierContext::ClassifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::ClassifierContext::KEYWORD_CLASSIFIER() {
  return getToken(KerMLParser::KEYWORD_CLASSIFIER, 0);
}

KerMLParser::Classifier_declarationContext* KerMLParser::ClassifierContext::classifier_declaration() {
  return getRuleContext<KerMLParser::Classifier_declarationContext>(0);
}

KerMLParser::Type_bodyContext* KerMLParser::ClassifierContext::type_body() {
  return getRuleContext<KerMLParser::Type_bodyContext>(0);
}

KerMLParser::Type_prefixContext* KerMLParser::ClassifierContext::type_prefix() {
  return getRuleContext<KerMLParser::Type_prefixContext>(0);
}


size_t KerMLParser::ClassifierContext::getRuleIndex() const {
  return KerMLParser::RuleClassifier;
}

void KerMLParser::ClassifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassifier(this);
}

void KerMLParser::ClassifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassifier(this);
}

KerMLParser::ClassifierContext* KerMLParser::classifier() {
  ClassifierContext *_localctx = _tracker.createInstance<ClassifierContext>(_ctx, getState());
  enterRule(_localctx, 128, KerMLParser::RuleClassifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(948);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 66, _ctx)) {
    case 1: {
      setState(947);
      type_prefix();
      break;
    }

    default:
      break;
    }
    setState(950);
    match(KerMLParser::KEYWORD_CLASSIFIER);
    setState(951);
    classifier_declaration();
    setState(952);
    type_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Classifier_declarationContext ------------------------------------------------------------------

KerMLParser::Classifier_declarationContext::Classifier_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::IdentificationContext* KerMLParser::Classifier_declarationContext::identification() {
  return getRuleContext<KerMLParser::IdentificationContext>(0);
}

tree::TerminalNode* KerMLParser::Classifier_declarationContext::KEYWORD_ALL() {
  return getToken(KerMLParser::KEYWORD_ALL, 0);
}

KerMLParser::Multiplicity_boundsContext* KerMLParser::Classifier_declarationContext::multiplicity_bounds() {
  return getRuleContext<KerMLParser::Multiplicity_boundsContext>(0);
}

KerMLParser::Superclassing_partContext* KerMLParser::Classifier_declarationContext::superclassing_part() {
  return getRuleContext<KerMLParser::Superclassing_partContext>(0);
}

KerMLParser::Conjugation_partContext* KerMLParser::Classifier_declarationContext::conjugation_part() {
  return getRuleContext<KerMLParser::Conjugation_partContext>(0);
}

std::vector<KerMLParser::Type_relationship_partContext *> KerMLParser::Classifier_declarationContext::type_relationship_part() {
  return getRuleContexts<KerMLParser::Type_relationship_partContext>();
}

KerMLParser::Type_relationship_partContext* KerMLParser::Classifier_declarationContext::type_relationship_part(size_t i) {
  return getRuleContext<KerMLParser::Type_relationship_partContext>(i);
}


size_t KerMLParser::Classifier_declarationContext::getRuleIndex() const {
  return KerMLParser::RuleClassifier_declaration;
}

void KerMLParser::Classifier_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassifier_declaration(this);
}

void KerMLParser::Classifier_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassifier_declaration(this);
}

KerMLParser::Classifier_declarationContext* KerMLParser::classifier_declaration() {
  Classifier_declarationContext *_localctx = _tracker.createInstance<Classifier_declarationContext>(_ctx, getState());
  enterRule(_localctx, 130, KerMLParser::RuleClassifier_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(955);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::KEYWORD_ALL) {
      setState(954);
      match(KerMLParser::KEYWORD_ALL);
    }
    setState(957);
    identification();
    setState(959);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::SYMBOL_SQUARE_BRACKET_OPEN) {
      setState(958);
      multiplicity_bounds();
    }
    setState(963);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 69, _ctx)) {
    case 1: {
      setState(961);
      superclassing_part();
      break;
    }

    case 2: {
      setState(962);
      conjugation_part();
      break;
    }

    default:
      break;
    }
    setState(968);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 18014570308173824) != 0) || _la == KerMLParser::KEYWORD_UNIONS) {
      setState(965);
      type_relationship_part();
      setState(970);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Superclassing_partContext ------------------------------------------------------------------

KerMLParser::Superclassing_partContext::Superclassing_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Superclassing_partContext::SPECIALIZES() {
  return getToken(KerMLParser::SPECIALIZES, 0);
}

std::vector<KerMLParser::Owned_subclassificationContext *> KerMLParser::Superclassing_partContext::owned_subclassification() {
  return getRuleContexts<KerMLParser::Owned_subclassificationContext>();
}

KerMLParser::Owned_subclassificationContext* KerMLParser::Superclassing_partContext::owned_subclassification(size_t i) {
  return getRuleContext<KerMLParser::Owned_subclassificationContext>(i);
}

std::vector<tree::TerminalNode *> KerMLParser::Superclassing_partContext::SYMBOL_COMMA() {
  return getTokens(KerMLParser::SYMBOL_COMMA);
}

tree::TerminalNode* KerMLParser::Superclassing_partContext::SYMBOL_COMMA(size_t i) {
  return getToken(KerMLParser::SYMBOL_COMMA, i);
}


size_t KerMLParser::Superclassing_partContext::getRuleIndex() const {
  return KerMLParser::RuleSuperclassing_part;
}

void KerMLParser::Superclassing_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSuperclassing_part(this);
}

void KerMLParser::Superclassing_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSuperclassing_part(this);
}

KerMLParser::Superclassing_partContext* KerMLParser::superclassing_part() {
  Superclassing_partContext *_localctx = _tracker.createInstance<Superclassing_partContext>(_ctx, getState());
  enterRule(_localctx, 132, KerMLParser::RuleSuperclassing_part);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(971);
    match(KerMLParser::SPECIALIZES);
    setState(972);
    owned_subclassification();
    setState(977);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == KerMLParser::SYMBOL_COMMA) {
      setState(973);
      match(KerMLParser::SYMBOL_COMMA);
      setState(974);
      owned_subclassification();
      setState(979);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubclassificationContext ------------------------------------------------------------------

KerMLParser::SubclassificationContext::SubclassificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::SubclassificationContext::KEYWORD_SUBCLASSIFIER() {
  return getToken(KerMLParser::KEYWORD_SUBCLASSIFIER, 0);
}

std::vector<KerMLParser::Qualified_nameContext *> KerMLParser::SubclassificationContext::qualified_name() {
  return getRuleContexts<KerMLParser::Qualified_nameContext>();
}

KerMLParser::Qualified_nameContext* KerMLParser::SubclassificationContext::qualified_name(size_t i) {
  return getRuleContext<KerMLParser::Qualified_nameContext>(i);
}

tree::TerminalNode* KerMLParser::SubclassificationContext::SPECIALIZES() {
  return getToken(KerMLParser::SPECIALIZES, 0);
}

KerMLParser::Relationship_bodyContext* KerMLParser::SubclassificationContext::relationship_body() {
  return getRuleContext<KerMLParser::Relationship_bodyContext>(0);
}

tree::TerminalNode* KerMLParser::SubclassificationContext::KEYWORD_SPECILIZATION() {
  return getToken(KerMLParser::KEYWORD_SPECILIZATION, 0);
}

KerMLParser::IdentificationContext* KerMLParser::SubclassificationContext::identification() {
  return getRuleContext<KerMLParser::IdentificationContext>(0);
}


size_t KerMLParser::SubclassificationContext::getRuleIndex() const {
  return KerMLParser::RuleSubclassification;
}

void KerMLParser::SubclassificationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubclassification(this);
}

void KerMLParser::SubclassificationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubclassification(this);
}

KerMLParser::SubclassificationContext* KerMLParser::subclassification() {
  SubclassificationContext *_localctx = _tracker.createInstance<SubclassificationContext>(_ctx, getState());
  enterRule(_localctx, 134, KerMLParser::RuleSubclassification);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(982);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::KEYWORD_SPECILIZATION) {
      setState(980);
      match(KerMLParser::KEYWORD_SPECILIZATION);
      setState(981);
      identification();
    }
    setState(984);
    match(KerMLParser::KEYWORD_SUBCLASSIFIER);
    setState(985);
    qualified_name();
    setState(986);
    match(KerMLParser::SPECIALIZES);
    setState(987);
    qualified_name();
    setState(988);
    relationship_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Owned_subclassificationContext ------------------------------------------------------------------

KerMLParser::Owned_subclassificationContext::Owned_subclassificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Qualified_nameContext* KerMLParser::Owned_subclassificationContext::qualified_name() {
  return getRuleContext<KerMLParser::Qualified_nameContext>(0);
}


size_t KerMLParser::Owned_subclassificationContext::getRuleIndex() const {
  return KerMLParser::RuleOwned_subclassification;
}

void KerMLParser::Owned_subclassificationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOwned_subclassification(this);
}

void KerMLParser::Owned_subclassificationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOwned_subclassification(this);
}

KerMLParser::Owned_subclassificationContext* KerMLParser::owned_subclassification() {
  Owned_subclassificationContext *_localctx = _tracker.createInstance<Owned_subclassificationContext>(_ctx, getState());
  enterRule(_localctx, 136, KerMLParser::RuleOwned_subclassification);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(990);
    qualified_name();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FeatureContext ------------------------------------------------------------------

KerMLParser::FeatureContext::FeatureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Type_bodyContext* KerMLParser::FeatureContext::type_body() {
  return getRuleContext<KerMLParser::Type_bodyContext>(0);
}

tree::TerminalNode* KerMLParser::FeatureContext::KEYWORD_FEATURE() {
  return getToken(KerMLParser::KEYWORD_FEATURE, 0);
}

KerMLParser::Prefix_metadata_memberContext* KerMLParser::FeatureContext::prefix_metadata_member() {
  return getRuleContext<KerMLParser::Prefix_metadata_memberContext>(0);
}

KerMLParser::Feature_prefixContext* KerMLParser::FeatureContext::feature_prefix() {
  return getRuleContext<KerMLParser::Feature_prefixContext>(0);
}

KerMLParser::SubsetsContext* KerMLParser::FeatureContext::subsets() {
  return getRuleContext<KerMLParser::SubsetsContext>(0);
}

KerMLParser::Feature_assignmentContext* KerMLParser::FeatureContext::feature_assignment() {
  return getRuleContext<KerMLParser::Feature_assignmentContext>(0);
}

KerMLParser::Feature_valueContext* KerMLParser::FeatureContext::feature_value() {
  return getRuleContext<KerMLParser::Feature_valueContext>(0);
}

KerMLParser::Feature_declarationContext* KerMLParser::FeatureContext::feature_declaration() {
  return getRuleContext<KerMLParser::Feature_declarationContext>(0);
}


size_t KerMLParser::FeatureContext::getRuleIndex() const {
  return KerMLParser::RuleFeature;
}

void KerMLParser::FeatureContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFeature(this);
}

void KerMLParser::FeatureContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFeature(this);
}

KerMLParser::FeatureContext* KerMLParser::feature() {
  FeatureContext *_localctx = _tracker.createInstance<FeatureContext>(_ctx, getState());
  enterRule(_localctx, 138, KerMLParser::RuleFeature);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(993);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 73, _ctx)) {
    case 1: {
      setState(992);
      feature_prefix();
      break;
    }

    default:
      break;
    }
    setState(999);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 74, _ctx)) {
    case 1: {
      setState(995);
      match(KerMLParser::KEYWORD_FEATURE);
      setState(996);
      feature_declaration();
      break;
    }

    case 2: {
      setState(997);
      match(KerMLParser::KEYWORD_FEATURE);
      break;
    }

    case 3: {
      setState(998);
      prefix_metadata_member();
      break;
    }

    default:
      break;
    }
    setState(1002);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::SUBSETS) {
      setState(1001);
      subsets();
    }
    setState(1005);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::SYMBOL_ASSIGN) {
      setState(1004);
      feature_assignment();
    }
    setState(1008);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::KEYWORD_DEFAULT || _la == KerMLParser::SYMBOL_DEF_ASSIGN

    || _la == KerMLParser::SYMBOL_EQUALS) {
      setState(1007);
      feature_value();
    }
    setState(1010);
    type_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Feature_prefixContext ------------------------------------------------------------------

KerMLParser::Feature_prefixContext::Feature_prefixContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Feature_directionContext* KerMLParser::Feature_prefixContext::feature_direction() {
  return getRuleContext<KerMLParser::Feature_directionContext>(0);
}

tree::TerminalNode* KerMLParser::Feature_prefixContext::KEYWORD_ABSTRACT() {
  return getToken(KerMLParser::KEYWORD_ABSTRACT, 0);
}

tree::TerminalNode* KerMLParser::Feature_prefixContext::KEYWORD_READONLY() {
  return getToken(KerMLParser::KEYWORD_READONLY, 0);
}

tree::TerminalNode* KerMLParser::Feature_prefixContext::KEYWORD_DERIVED() {
  return getToken(KerMLParser::KEYWORD_DERIVED, 0);
}

tree::TerminalNode* KerMLParser::Feature_prefixContext::KEYWORD_END() {
  return getToken(KerMLParser::KEYWORD_END, 0);
}

std::vector<KerMLParser::Prefix_metadata_memberContext *> KerMLParser::Feature_prefixContext::prefix_metadata_member() {
  return getRuleContexts<KerMLParser::Prefix_metadata_memberContext>();
}

KerMLParser::Prefix_metadata_memberContext* KerMLParser::Feature_prefixContext::prefix_metadata_member(size_t i) {
  return getRuleContext<KerMLParser::Prefix_metadata_memberContext>(i);
}

tree::TerminalNode* KerMLParser::Feature_prefixContext::KEYWORD_VAR() {
  return getToken(KerMLParser::KEYWORD_VAR, 0);
}

tree::TerminalNode* KerMLParser::Feature_prefixContext::KEYWORD_COMPOSITE() {
  return getToken(KerMLParser::KEYWORD_COMPOSITE, 0);
}

tree::TerminalNode* KerMLParser::Feature_prefixContext::KEYWORD_PORTION() {
  return getToken(KerMLParser::KEYWORD_PORTION, 0);
}


size_t KerMLParser::Feature_prefixContext::getRuleIndex() const {
  return KerMLParser::RuleFeature_prefix;
}

void KerMLParser::Feature_prefixContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFeature_prefix(this);
}

void KerMLParser::Feature_prefixContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFeature_prefix(this);
}

KerMLParser::Feature_prefixContext* KerMLParser::feature_prefix() {
  Feature_prefixContext *_localctx = _tracker.createInstance<Feature_prefixContext>(_ctx, getState());
  enterRule(_localctx, 140, KerMLParser::RuleFeature_prefix);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1013);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 57) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 57)) & 524291) != 0)) {
      setState(1012);
      feature_direction();
    }
    setState(1016);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::KEYWORD_ABSTRACT) {
      setState(1015);
      match(KerMLParser::KEYWORD_ABSTRACT);
    }
    setState(1019);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::KEYWORD_COMPOSITE || _la == KerMLParser::KEYWORD_PORTION

    || _la == KerMLParser::KEYWORD_VAR) {
      setState(1018);
      _la = _input->LA(1);
      if (!(_la == KerMLParser::KEYWORD_COMPOSITE || _la == KerMLParser::KEYWORD_PORTION

      || _la == KerMLParser::KEYWORD_VAR)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(1022);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::KEYWORD_READONLY) {
      setState(1021);
      match(KerMLParser::KEYWORD_READONLY);
    }
    setState(1025);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::KEYWORD_DERIVED) {
      setState(1024);
      match(KerMLParser::KEYWORD_DERIVED);
    }
    setState(1028);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::KEYWORD_END) {
      setState(1027);
      match(KerMLParser::KEYWORD_END);
    }
    setState(1033);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 84, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1030);
        prefix_metadata_member(); 
      }
      setState(1035);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 84, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Feature_directionContext ------------------------------------------------------------------

KerMLParser::Feature_directionContext::Feature_directionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Feature_directionContext::KEYWORD_IN() {
  return getToken(KerMLParser::KEYWORD_IN, 0);
}

tree::TerminalNode* KerMLParser::Feature_directionContext::KEYWORD_OUT() {
  return getToken(KerMLParser::KEYWORD_OUT, 0);
}

tree::TerminalNode* KerMLParser::Feature_directionContext::KEYWORD_INOUT() {
  return getToken(KerMLParser::KEYWORD_INOUT, 0);
}


size_t KerMLParser::Feature_directionContext::getRuleIndex() const {
  return KerMLParser::RuleFeature_direction;
}

void KerMLParser::Feature_directionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFeature_direction(this);
}

void KerMLParser::Feature_directionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFeature_direction(this);
}

KerMLParser::Feature_directionContext* KerMLParser::feature_direction() {
  Feature_directionContext *_localctx = _tracker.createInstance<Feature_directionContext>(_ctx, getState());
  enterRule(_localctx, 142, KerMLParser::RuleFeature_direction);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1036);
    _la = _input->LA(1);
    if (!(((((_la - 57) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 57)) & 524291) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Feature_declarationContext ------------------------------------------------------------------

KerMLParser::Feature_declarationContext::Feature_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Feature_identificationContext* KerMLParser::Feature_declarationContext::feature_identification() {
  return getRuleContext<KerMLParser::Feature_identificationContext>(0);
}

KerMLParser::Feature_specialization_partContext* KerMLParser::Feature_declarationContext::feature_specialization_part() {
  return getRuleContext<KerMLParser::Feature_specialization_partContext>(0);
}

KerMLParser::Conjugation_partContext* KerMLParser::Feature_declarationContext::conjugation_part() {
  return getRuleContext<KerMLParser::Conjugation_partContext>(0);
}

tree::TerminalNode* KerMLParser::Feature_declarationContext::KEYWORD_ALL() {
  return getToken(KerMLParser::KEYWORD_ALL, 0);
}

std::vector<KerMLParser::Feature_relationship_partContext *> KerMLParser::Feature_declarationContext::feature_relationship_part() {
  return getRuleContexts<KerMLParser::Feature_relationship_partContext>();
}

KerMLParser::Feature_relationship_partContext* KerMLParser::Feature_declarationContext::feature_relationship_part(size_t i) {
  return getRuleContext<KerMLParser::Feature_relationship_partContext>(i);
}

KerMLParser::Type_bodyContext* KerMLParser::Feature_declarationContext::type_body() {
  return getRuleContext<KerMLParser::Type_bodyContext>(0);
}


size_t KerMLParser::Feature_declarationContext::getRuleIndex() const {
  return KerMLParser::RuleFeature_declaration;
}

void KerMLParser::Feature_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFeature_declaration(this);
}

void KerMLParser::Feature_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFeature_declaration(this);
}

KerMLParser::Feature_declarationContext* KerMLParser::feature_declaration() {
  Feature_declarationContext *_localctx = _tracker.createInstance<Feature_declarationContext>(_ctx, getState());
  enterRule(_localctx, 144, KerMLParser::RuleFeature_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1039);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::KEYWORD_ALL) {
      setState(1038);
      match(KerMLParser::KEYWORD_ALL);
    }
    setState(1048);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case KerMLParser::SYMBOL_SMALLER:
      case KerMLParser::NAME: {
        setState(1041);
        feature_identification();
        setState(1044);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 86, _ctx)) {
        case 1: {
          setState(1042);
          feature_specialization_part();
          break;
        }

        case 2: {
          setState(1043);
          conjugation_part();
          break;
        }

        default:
          break;
        }
        break;
      }

      case KerMLParser::TYPED_BY:
      case KerMLParser::SUBSETS:
      case KerMLParser::REFERENCES:
      case KerMLParser::REDEFINES:
      case KerMLParser::KEYWORD_IN:
      case KerMLParser::KEYWORD_INOUT:
      case KerMLParser::KEYWORD_OUT:
      case KerMLParser::SYMBOL_SQUARE_BRACKET_OPEN: {
        setState(1046);
        feature_specialization_part();
        break;
      }

      case KerMLParser::CONJUNGATES: {
        setState(1047);
        conjugation_part();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(1053);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 2323875171712106496) != 0) || _la == KerMLParser::KEYWORD_UNIONS) {
      setState(1050);
      feature_relationship_part();
      setState(1055);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1057);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 89, _ctx)) {
    case 1: {
      setState(1056);
      type_body();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Feature_identificationContext ------------------------------------------------------------------

KerMLParser::Feature_identificationContext::Feature_identificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Feature_identificationContext::SYMBOL_SMALLER() {
  return getToken(KerMLParser::SYMBOL_SMALLER, 0);
}

std::vector<tree::TerminalNode *> KerMLParser::Feature_identificationContext::NAME() {
  return getTokens(KerMLParser::NAME);
}

tree::TerminalNode* KerMLParser::Feature_identificationContext::NAME(size_t i) {
  return getToken(KerMLParser::NAME, i);
}

tree::TerminalNode* KerMLParser::Feature_identificationContext::SYMBOL_GREATER() {
  return getToken(KerMLParser::SYMBOL_GREATER, 0);
}


size_t KerMLParser::Feature_identificationContext::getRuleIndex() const {
  return KerMLParser::RuleFeature_identification;
}

void KerMLParser::Feature_identificationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFeature_identification(this);
}

void KerMLParser::Feature_identificationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFeature_identification(this);
}

KerMLParser::Feature_identificationContext* KerMLParser::feature_identification() {
  Feature_identificationContext *_localctx = _tracker.createInstance<Feature_identificationContext>(_ctx, getState());
  enterRule(_localctx, 146, KerMLParser::RuleFeature_identification);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1066);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case KerMLParser::SYMBOL_SMALLER: {
        enterOuterAlt(_localctx, 1);
        setState(1059);
        match(KerMLParser::SYMBOL_SMALLER);
        setState(1060);
        match(KerMLParser::NAME);
        setState(1061);
        match(KerMLParser::SYMBOL_GREATER);
        setState(1063);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == KerMLParser::NAME) {
          setState(1062);
          match(KerMLParser::NAME);
        }
        break;
      }

      case KerMLParser::NAME: {
        enterOuterAlt(_localctx, 2);
        setState(1065);
        match(KerMLParser::NAME);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Feature_relationship_partContext ------------------------------------------------------------------

KerMLParser::Feature_relationship_partContext::Feature_relationship_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Type_relationship_partContext* KerMLParser::Feature_relationship_partContext::type_relationship_part() {
  return getRuleContext<KerMLParser::Type_relationship_partContext>(0);
}

KerMLParser::Chaining_partContext* KerMLParser::Feature_relationship_partContext::chaining_part() {
  return getRuleContext<KerMLParser::Chaining_partContext>(0);
}

KerMLParser::Inverting_partContext* KerMLParser::Feature_relationship_partContext::inverting_part() {
  return getRuleContext<KerMLParser::Inverting_partContext>(0);
}

KerMLParser::Type_featuring_partContext* KerMLParser::Feature_relationship_partContext::type_featuring_part() {
  return getRuleContext<KerMLParser::Type_featuring_partContext>(0);
}


size_t KerMLParser::Feature_relationship_partContext::getRuleIndex() const {
  return KerMLParser::RuleFeature_relationship_part;
}

void KerMLParser::Feature_relationship_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFeature_relationship_part(this);
}

void KerMLParser::Feature_relationship_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFeature_relationship_part(this);
}

KerMLParser::Feature_relationship_partContext* KerMLParser::feature_relationship_part() {
  Feature_relationship_partContext *_localctx = _tracker.createInstance<Feature_relationship_partContext>(_ctx, getState());
  enterRule(_localctx, 148, KerMLParser::RuleFeature_relationship_part);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1072);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case KerMLParser::KEYWORD_DIFFERENCES:
      case KerMLParser::KEYWORD_DISJOINT:
      case KerMLParser::KEYWORD_INTERSECTS:
      case KerMLParser::KEYWORD_UNIONS: {
        enterOuterAlt(_localctx, 1);
        setState(1068);
        type_relationship_part();
        break;
      }

      case KerMLParser::KEYWORD_CHAINS: {
        enterOuterAlt(_localctx, 2);
        setState(1069);
        chaining_part();
        break;
      }

      case KerMLParser::KEYWORD_INVERSE: {
        enterOuterAlt(_localctx, 3);
        setState(1070);
        inverting_part();
        break;
      }

      case KerMLParser::KEYWORD_FEATURED: {
        enterOuterAlt(_localctx, 4);
        setState(1071);
        type_featuring_part();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Chaining_partContext ------------------------------------------------------------------

KerMLParser::Chaining_partContext::Chaining_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Chaining_partContext::KEYWORD_CHAINS() {
  return getToken(KerMLParser::KEYWORD_CHAINS, 0);
}

KerMLParser::Owned_feature_chainingContext* KerMLParser::Chaining_partContext::owned_feature_chaining() {
  return getRuleContext<KerMLParser::Owned_feature_chainingContext>(0);
}

KerMLParser::Feature_chainContext* KerMLParser::Chaining_partContext::feature_chain() {
  return getRuleContext<KerMLParser::Feature_chainContext>(0);
}


size_t KerMLParser::Chaining_partContext::getRuleIndex() const {
  return KerMLParser::RuleChaining_part;
}

void KerMLParser::Chaining_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterChaining_part(this);
}

void KerMLParser::Chaining_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitChaining_part(this);
}

KerMLParser::Chaining_partContext* KerMLParser::chaining_part() {
  Chaining_partContext *_localctx = _tracker.createInstance<Chaining_partContext>(_ctx, getState());
  enterRule(_localctx, 150, KerMLParser::RuleChaining_part);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1074);
    match(KerMLParser::KEYWORD_CHAINS);
    setState(1077);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 93, _ctx)) {
    case 1: {
      setState(1075);
      owned_feature_chaining();
      break;
    }

    case 2: {
      setState(1076);
      feature_chain();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Inverting_partContext ------------------------------------------------------------------

KerMLParser::Inverting_partContext::Inverting_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Inverting_partContext::KEYWORD_INVERSE() {
  return getToken(KerMLParser::KEYWORD_INVERSE, 0);
}

tree::TerminalNode* KerMLParser::Inverting_partContext::KEYWORD_OF() {
  return getToken(KerMLParser::KEYWORD_OF, 0);
}

KerMLParser::Owned_feature_invertingContext* KerMLParser::Inverting_partContext::owned_feature_inverting() {
  return getRuleContext<KerMLParser::Owned_feature_invertingContext>(0);
}


size_t KerMLParser::Inverting_partContext::getRuleIndex() const {
  return KerMLParser::RuleInverting_part;
}

void KerMLParser::Inverting_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInverting_part(this);
}

void KerMLParser::Inverting_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInverting_part(this);
}

KerMLParser::Inverting_partContext* KerMLParser::inverting_part() {
  Inverting_partContext *_localctx = _tracker.createInstance<Inverting_partContext>(_ctx, getState());
  enterRule(_localctx, 152, KerMLParser::RuleInverting_part);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1079);
    match(KerMLParser::KEYWORD_INVERSE);
    setState(1080);
    match(KerMLParser::KEYWORD_OF);
    setState(1081);
    owned_feature_inverting();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_featuring_partContext ------------------------------------------------------------------

KerMLParser::Type_featuring_partContext::Type_featuring_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Type_featuring_partContext::KEYWORD_FEATURED() {
  return getToken(KerMLParser::KEYWORD_FEATURED, 0);
}

tree::TerminalNode* KerMLParser::Type_featuring_partContext::KEYWORD_BY() {
  return getToken(KerMLParser::KEYWORD_BY, 0);
}

std::vector<KerMLParser::Owned_type_featuringContext *> KerMLParser::Type_featuring_partContext::owned_type_featuring() {
  return getRuleContexts<KerMLParser::Owned_type_featuringContext>();
}

KerMLParser::Owned_type_featuringContext* KerMLParser::Type_featuring_partContext::owned_type_featuring(size_t i) {
  return getRuleContext<KerMLParser::Owned_type_featuringContext>(i);
}

std::vector<tree::TerminalNode *> KerMLParser::Type_featuring_partContext::SYMBOL_COMMA() {
  return getTokens(KerMLParser::SYMBOL_COMMA);
}

tree::TerminalNode* KerMLParser::Type_featuring_partContext::SYMBOL_COMMA(size_t i) {
  return getToken(KerMLParser::SYMBOL_COMMA, i);
}


size_t KerMLParser::Type_featuring_partContext::getRuleIndex() const {
  return KerMLParser::RuleType_featuring_part;
}

void KerMLParser::Type_featuring_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_featuring_part(this);
}

void KerMLParser::Type_featuring_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_featuring_part(this);
}

KerMLParser::Type_featuring_partContext* KerMLParser::type_featuring_part() {
  Type_featuring_partContext *_localctx = _tracker.createInstance<Type_featuring_partContext>(_ctx, getState());
  enterRule(_localctx, 154, KerMLParser::RuleType_featuring_part);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1083);
    match(KerMLParser::KEYWORD_FEATURED);
    setState(1084);
    match(KerMLParser::KEYWORD_BY);
    setState(1085);
    owned_type_featuring();
    setState(1090);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == KerMLParser::SYMBOL_COMMA) {
      setState(1086);
      match(KerMLParser::SYMBOL_COMMA);
      setState(1087);
      owned_type_featuring();
      setState(1092);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Feature_specialization_partContext ------------------------------------------------------------------

KerMLParser::Feature_specialization_partContext::Feature_specialization_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<KerMLParser::Feature_specilizationContext *> KerMLParser::Feature_specialization_partContext::feature_specilization() {
  return getRuleContexts<KerMLParser::Feature_specilizationContext>();
}

KerMLParser::Feature_specilizationContext* KerMLParser::Feature_specialization_partContext::feature_specilization(size_t i) {
  return getRuleContext<KerMLParser::Feature_specilizationContext>(i);
}

KerMLParser::Multiplicity_partContext* KerMLParser::Feature_specialization_partContext::multiplicity_part() {
  return getRuleContext<KerMLParser::Multiplicity_partContext>(0);
}


size_t KerMLParser::Feature_specialization_partContext::getRuleIndex() const {
  return KerMLParser::RuleFeature_specialization_part;
}

void KerMLParser::Feature_specialization_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFeature_specialization_part(this);
}

void KerMLParser::Feature_specialization_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFeature_specialization_part(this);
}

KerMLParser::Feature_specialization_partContext* KerMLParser::feature_specialization_part() {
  Feature_specialization_partContext *_localctx = _tracker.createInstance<Feature_specialization_partContext>(_ctx, getState());
  enterRule(_localctx, 156, KerMLParser::RuleFeature_specialization_part);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1113);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case KerMLParser::TYPED_BY:
      case KerMLParser::SUBSETS:
      case KerMLParser::REFERENCES:
      case KerMLParser::REDEFINES:
      case KerMLParser::KEYWORD_IN:
      case KerMLParser::KEYWORD_INOUT:
      case KerMLParser::KEYWORD_OUT: {
        enterOuterAlt(_localctx, 1);
        setState(1094); 
        _errHandler->sync(this);
        alt = 1;
        do {
          switch (alt) {
            case 1: {
                  setState(1093);
                  feature_specilization();
                  break;
                }

          default:
            throw NoViableAltException(this);
          }
          setState(1096); 
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 95, _ctx);
        } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
        setState(1099);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == KerMLParser::SYMBOL_SQUARE_BRACKET_OPEN) {
          setState(1098);
          multiplicity_part();
        }
        setState(1104);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 97, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(1101);
            feature_specilization(); 
          }
          setState(1106);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 97, _ctx);
        }
        break;
      }

      case KerMLParser::SYMBOL_SQUARE_BRACKET_OPEN: {
        enterOuterAlt(_localctx, 2);
        setState(1107);
        multiplicity_part();
        setState(1109); 
        _errHandler->sync(this);
        alt = 1;
        do {
          switch (alt) {
            case 1: {
                  setState(1108);
                  feature_specilization();
                  break;
                }

          default:
            throw NoViableAltException(this);
          }
          setState(1111); 
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 98, _ctx);
        } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Multiplicity_partContext ------------------------------------------------------------------

KerMLParser::Multiplicity_partContext::Multiplicity_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Multiplicity_boundsContext* KerMLParser::Multiplicity_partContext::multiplicity_bounds() {
  return getRuleContext<KerMLParser::Multiplicity_boundsContext>(0);
}

tree::TerminalNode* KerMLParser::Multiplicity_partContext::KEYWORD_ORDERED() {
  return getToken(KerMLParser::KEYWORD_ORDERED, 0);
}

tree::TerminalNode* KerMLParser::Multiplicity_partContext::KEYWORD_NONUNIQUE() {
  return getToken(KerMLParser::KEYWORD_NONUNIQUE, 0);
}


size_t KerMLParser::Multiplicity_partContext::getRuleIndex() const {
  return KerMLParser::RuleMultiplicity_part;
}

void KerMLParser::Multiplicity_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMultiplicity_part(this);
}

void KerMLParser::Multiplicity_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMultiplicity_part(this);
}

KerMLParser::Multiplicity_partContext* KerMLParser::multiplicity_part() {
  Multiplicity_partContext *_localctx = _tracker.createInstance<Multiplicity_partContext>(_ctx, getState());
  enterRule(_localctx, 158, KerMLParser::RuleMultiplicity_part);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1115);
    multiplicity_bounds();
    setState(1128);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 104, _ctx)) {
    case 1: {
      setState(1120);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == KerMLParser::KEYWORD_ORDERED) {
        setState(1116);
        match(KerMLParser::KEYWORD_ORDERED);
        setState(1118);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == KerMLParser::KEYWORD_NONUNIQUE) {
          setState(1117);
          match(KerMLParser::KEYWORD_NONUNIQUE);
        }
      }
      break;
    }

    case 2: {
      setState(1126);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == KerMLParser::KEYWORD_NONUNIQUE

      || _la == KerMLParser::KEYWORD_ORDERED) {
        setState(1123);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == KerMLParser::KEYWORD_NONUNIQUE) {
          setState(1122);
          match(KerMLParser::KEYWORD_NONUNIQUE);
        }
        setState(1125);
        match(KerMLParser::KEYWORD_ORDERED);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Feature_specilizationContext ------------------------------------------------------------------

KerMLParser::Feature_specilizationContext::Feature_specilizationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::TypingsContext* KerMLParser::Feature_specilizationContext::typings() {
  return getRuleContext<KerMLParser::TypingsContext>(0);
}

KerMLParser::SubsettingsContext* KerMLParser::Feature_specilizationContext::subsettings() {
  return getRuleContext<KerMLParser::SubsettingsContext>(0);
}

KerMLParser::ReferencesContext* KerMLParser::Feature_specilizationContext::references() {
  return getRuleContext<KerMLParser::ReferencesContext>(0);
}

KerMLParser::RedefinitionsContext* KerMLParser::Feature_specilizationContext::redefinitions() {
  return getRuleContext<KerMLParser::RedefinitionsContext>(0);
}


size_t KerMLParser::Feature_specilizationContext::getRuleIndex() const {
  return KerMLParser::RuleFeature_specilization;
}

void KerMLParser::Feature_specilizationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFeature_specilization(this);
}

void KerMLParser::Feature_specilizationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFeature_specilization(this);
}

KerMLParser::Feature_specilizationContext* KerMLParser::feature_specilization() {
  Feature_specilizationContext *_localctx = _tracker.createInstance<Feature_specilizationContext>(_ctx, getState());
  enterRule(_localctx, 160, KerMLParser::RuleFeature_specilization);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1134);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case KerMLParser::TYPED_BY: {
        enterOuterAlt(_localctx, 1);
        setState(1130);
        typings();
        break;
      }

      case KerMLParser::SUBSETS: {
        enterOuterAlt(_localctx, 2);
        setState(1131);
        subsettings();
        break;
      }

      case KerMLParser::REFERENCES: {
        enterOuterAlt(_localctx, 3);
        setState(1132);
        references();
        break;
      }

      case KerMLParser::REDEFINES:
      case KerMLParser::KEYWORD_IN:
      case KerMLParser::KEYWORD_INOUT:
      case KerMLParser::KEYWORD_OUT: {
        enterOuterAlt(_localctx, 4);
        setState(1133);
        redefinitions();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypingsContext ------------------------------------------------------------------

KerMLParser::TypingsContext::TypingsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Typed_byContext* KerMLParser::TypingsContext::typed_by() {
  return getRuleContext<KerMLParser::Typed_byContext>(0);
}

std::vector<tree::TerminalNode *> KerMLParser::TypingsContext::SYMBOL_COMMA() {
  return getTokens(KerMLParser::SYMBOL_COMMA);
}

tree::TerminalNode* KerMLParser::TypingsContext::SYMBOL_COMMA(size_t i) {
  return getToken(KerMLParser::SYMBOL_COMMA, i);
}

std::vector<KerMLParser::Owned_feature_typingContext *> KerMLParser::TypingsContext::owned_feature_typing() {
  return getRuleContexts<KerMLParser::Owned_feature_typingContext>();
}

KerMLParser::Owned_feature_typingContext* KerMLParser::TypingsContext::owned_feature_typing(size_t i) {
  return getRuleContext<KerMLParser::Owned_feature_typingContext>(i);
}


size_t KerMLParser::TypingsContext::getRuleIndex() const {
  return KerMLParser::RuleTypings;
}

void KerMLParser::TypingsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypings(this);
}

void KerMLParser::TypingsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypings(this);
}

KerMLParser::TypingsContext* KerMLParser::typings() {
  TypingsContext *_localctx = _tracker.createInstance<TypingsContext>(_ctx, getState());
  enterRule(_localctx, 162, KerMLParser::RuleTypings);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1136);
    typed_by();
    setState(1141);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == KerMLParser::SYMBOL_COMMA) {
      setState(1137);
      match(KerMLParser::SYMBOL_COMMA);
      setState(1138);
      owned_feature_typing();
      setState(1143);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Typed_byContext ------------------------------------------------------------------

KerMLParser::Typed_byContext::Typed_byContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Typed_byContext::TYPED_BY() {
  return getToken(KerMLParser::TYPED_BY, 0);
}

KerMLParser::Owned_feature_typingContext* KerMLParser::Typed_byContext::owned_feature_typing() {
  return getRuleContext<KerMLParser::Owned_feature_typingContext>(0);
}


size_t KerMLParser::Typed_byContext::getRuleIndex() const {
  return KerMLParser::RuleTyped_by;
}

void KerMLParser::Typed_byContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTyped_by(this);
}

void KerMLParser::Typed_byContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTyped_by(this);
}

KerMLParser::Typed_byContext* KerMLParser::typed_by() {
  Typed_byContext *_localctx = _tracker.createInstance<Typed_byContext>(_ctx, getState());
  enterRule(_localctx, 164, KerMLParser::RuleTyped_by);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1144);
    match(KerMLParser::TYPED_BY);
    setState(1145);
    owned_feature_typing();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubsettingsContext ------------------------------------------------------------------

KerMLParser::SubsettingsContext::SubsettingsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::SubsetsContext* KerMLParser::SubsettingsContext::subsets() {
  return getRuleContext<KerMLParser::SubsetsContext>(0);
}

std::vector<KerMLParser::Owned_subsettingContext *> KerMLParser::SubsettingsContext::owned_subsetting() {
  return getRuleContexts<KerMLParser::Owned_subsettingContext>();
}

KerMLParser::Owned_subsettingContext* KerMLParser::SubsettingsContext::owned_subsetting(size_t i) {
  return getRuleContext<KerMLParser::Owned_subsettingContext>(i);
}

std::vector<tree::TerminalNode *> KerMLParser::SubsettingsContext::SYMBOL_COMMA() {
  return getTokens(KerMLParser::SYMBOL_COMMA);
}

tree::TerminalNode* KerMLParser::SubsettingsContext::SYMBOL_COMMA(size_t i) {
  return getToken(KerMLParser::SYMBOL_COMMA, i);
}


size_t KerMLParser::SubsettingsContext::getRuleIndex() const {
  return KerMLParser::RuleSubsettings;
}

void KerMLParser::SubsettingsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubsettings(this);
}

void KerMLParser::SubsettingsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubsettings(this);
}

KerMLParser::SubsettingsContext* KerMLParser::subsettings() {
  SubsettingsContext *_localctx = _tracker.createInstance<SubsettingsContext>(_ctx, getState());
  enterRule(_localctx, 166, KerMLParser::RuleSubsettings);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1147);
    subsets();
    setState(1148);
    owned_subsetting();
    setState(1153);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == KerMLParser::SYMBOL_COMMA) {
      setState(1149);
      match(KerMLParser::SYMBOL_COMMA);
      setState(1150);
      owned_subsetting();
      setState(1155);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubsetsContext ------------------------------------------------------------------

KerMLParser::SubsetsContext::SubsetsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::SubsetsContext::SUBSETS() {
  return getToken(KerMLParser::SUBSETS, 0);
}

KerMLParser::Owned_subsettingContext* KerMLParser::SubsetsContext::owned_subsetting() {
  return getRuleContext<KerMLParser::Owned_subsettingContext>(0);
}


size_t KerMLParser::SubsetsContext::getRuleIndex() const {
  return KerMLParser::RuleSubsets;
}

void KerMLParser::SubsetsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubsets(this);
}

void KerMLParser::SubsetsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubsets(this);
}

KerMLParser::SubsetsContext* KerMLParser::subsets() {
  SubsetsContext *_localctx = _tracker.createInstance<SubsetsContext>(_ctx, getState());
  enterRule(_localctx, 168, KerMLParser::RuleSubsets);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1156);
    match(KerMLParser::SUBSETS);
    setState(1157);
    owned_subsetting();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReferencesContext ------------------------------------------------------------------

KerMLParser::ReferencesContext::ReferencesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::ReferencesContext::REFERENCES() {
  return getToken(KerMLParser::REFERENCES, 0);
}

KerMLParser::Owned_reference_subsettingContext* KerMLParser::ReferencesContext::owned_reference_subsetting() {
  return getRuleContext<KerMLParser::Owned_reference_subsettingContext>(0);
}


size_t KerMLParser::ReferencesContext::getRuleIndex() const {
  return KerMLParser::RuleReferences;
}

void KerMLParser::ReferencesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReferences(this);
}

void KerMLParser::ReferencesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReferences(this);
}

KerMLParser::ReferencesContext* KerMLParser::references() {
  ReferencesContext *_localctx = _tracker.createInstance<ReferencesContext>(_ctx, getState());
  enterRule(_localctx, 170, KerMLParser::RuleReferences);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1159);
    match(KerMLParser::REFERENCES);
    setState(1160);
    owned_reference_subsetting();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RedefinitionsContext ------------------------------------------------------------------

KerMLParser::RedefinitionsContext::RedefinitionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::RedefinesContext* KerMLParser::RedefinitionsContext::redefines() {
  return getRuleContext<KerMLParser::RedefinesContext>(0);
}

tree::TerminalNode* KerMLParser::RedefinitionsContext::SYMBOL_COMMA() {
  return getToken(KerMLParser::SYMBOL_COMMA, 0);
}

KerMLParser::Owned_redefinitionContext* KerMLParser::RedefinitionsContext::owned_redefinition() {
  return getRuleContext<KerMLParser::Owned_redefinitionContext>(0);
}


size_t KerMLParser::RedefinitionsContext::getRuleIndex() const {
  return KerMLParser::RuleRedefinitions;
}

void KerMLParser::RedefinitionsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRedefinitions(this);
}

void KerMLParser::RedefinitionsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRedefinitions(this);
}

KerMLParser::RedefinitionsContext* KerMLParser::redefinitions() {
  RedefinitionsContext *_localctx = _tracker.createInstance<RedefinitionsContext>(_ctx, getState());
  enterRule(_localctx, 172, KerMLParser::RuleRedefinitions);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1162);
    redefines();
    setState(1165);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::SYMBOL_COMMA) {
      setState(1163);
      match(KerMLParser::SYMBOL_COMMA);
      setState(1164);
      owned_redefinition();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RedefinesContext ------------------------------------------------------------------

KerMLParser::RedefinesContext::RedefinesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::RedefinesContext::REDEFINES() {
  return getToken(KerMLParser::REDEFINES, 0);
}

KerMLParser::Owned_redefinitionContext* KerMLParser::RedefinesContext::owned_redefinition() {
  return getRuleContext<KerMLParser::Owned_redefinitionContext>(0);
}

KerMLParser::Feature_directionContext* KerMLParser::RedefinesContext::feature_direction() {
  return getRuleContext<KerMLParser::Feature_directionContext>(0);
}


size_t KerMLParser::RedefinesContext::getRuleIndex() const {
  return KerMLParser::RuleRedefines;
}

void KerMLParser::RedefinesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRedefines(this);
}

void KerMLParser::RedefinesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRedefines(this);
}

KerMLParser::RedefinesContext* KerMLParser::redefines() {
  RedefinesContext *_localctx = _tracker.createInstance<RedefinesContext>(_ctx, getState());
  enterRule(_localctx, 174, KerMLParser::RuleRedefines);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1168);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 57) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 57)) & 524291) != 0)) {
      setState(1167);
      feature_direction();
    }
    setState(1170);
    match(KerMLParser::REDEFINES);
    setState(1171);
    owned_redefinition();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Feature_typingContext ------------------------------------------------------------------

KerMLParser::Feature_typingContext::Feature_typingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Qualified_nameContext* KerMLParser::Feature_typingContext::qualified_name() {
  return getRuleContext<KerMLParser::Qualified_nameContext>(0);
}

tree::TerminalNode* KerMLParser::Feature_typingContext::TYPED_BY() {
  return getToken(KerMLParser::TYPED_BY, 0);
}

KerMLParser::General_typeContext* KerMLParser::Feature_typingContext::general_type() {
  return getRuleContext<KerMLParser::General_typeContext>(0);
}

KerMLParser::Relationship_bodyContext* KerMLParser::Feature_typingContext::relationship_body() {
  return getRuleContext<KerMLParser::Relationship_bodyContext>(0);
}

tree::TerminalNode* KerMLParser::Feature_typingContext::KEYWORD_SPECILIZATION() {
  return getToken(KerMLParser::KEYWORD_SPECILIZATION, 0);
}

KerMLParser::IdentificationContext* KerMLParser::Feature_typingContext::identification() {
  return getRuleContext<KerMLParser::IdentificationContext>(0);
}

tree::TerminalNode* KerMLParser::Feature_typingContext::KEYWORD_TYPING() {
  return getToken(KerMLParser::KEYWORD_TYPING, 0);
}

KerMLParser::Multiplicity_partContext* KerMLParser::Feature_typingContext::multiplicity_part() {
  return getRuleContext<KerMLParser::Multiplicity_partContext>(0);
}


size_t KerMLParser::Feature_typingContext::getRuleIndex() const {
  return KerMLParser::RuleFeature_typing;
}

void KerMLParser::Feature_typingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFeature_typing(this);
}

void KerMLParser::Feature_typingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFeature_typing(this);
}

KerMLParser::Feature_typingContext* KerMLParser::feature_typing() {
  Feature_typingContext *_localctx = _tracker.createInstance<Feature_typingContext>(_ctx, getState());
  enterRule(_localctx, 176, KerMLParser::RuleFeature_typing);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1175);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::KEYWORD_SPECILIZATION) {
      setState(1173);
      match(KerMLParser::KEYWORD_SPECILIZATION);
      setState(1174);
      identification();
    }
    setState(1178);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::KEYWORD_TYPING) {
      setState(1177);
      match(KerMLParser::KEYWORD_TYPING);
    }
    setState(1180);
    qualified_name();
    setState(1181);
    match(KerMLParser::TYPED_BY);
    setState(1182);
    general_type();
    setState(1184);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::SYMBOL_SQUARE_BRACKET_OPEN) {
      setState(1183);
      multiplicity_part();
    }
    setState(1186);
    relationship_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Owned_feature_typingContext ------------------------------------------------------------------

KerMLParser::Owned_feature_typingContext::Owned_feature_typingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::General_typeContext* KerMLParser::Owned_feature_typingContext::general_type() {
  return getRuleContext<KerMLParser::General_typeContext>(0);
}


size_t KerMLParser::Owned_feature_typingContext::getRuleIndex() const {
  return KerMLParser::RuleOwned_feature_typing;
}

void KerMLParser::Owned_feature_typingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOwned_feature_typing(this);
}

void KerMLParser::Owned_feature_typingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOwned_feature_typing(this);
}

KerMLParser::Owned_feature_typingContext* KerMLParser::owned_feature_typing() {
  Owned_feature_typingContext *_localctx = _tracker.createInstance<Owned_feature_typingContext>(_ctx, getState());
  enterRule(_localctx, 178, KerMLParser::RuleOwned_feature_typing);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1188);
    general_type();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubsettingContext ------------------------------------------------------------------

KerMLParser::SubsettingContext::SubsettingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Specific_typeContext* KerMLParser::SubsettingContext::specific_type() {
  return getRuleContext<KerMLParser::Specific_typeContext>(0);
}

tree::TerminalNode* KerMLParser::SubsettingContext::SUBSETS() {
  return getToken(KerMLParser::SUBSETS, 0);
}

KerMLParser::General_typeContext* KerMLParser::SubsettingContext::general_type() {
  return getRuleContext<KerMLParser::General_typeContext>(0);
}

KerMLParser::Relationship_bodyContext* KerMLParser::SubsettingContext::relationship_body() {
  return getRuleContext<KerMLParser::Relationship_bodyContext>(0);
}

tree::TerminalNode* KerMLParser::SubsettingContext::KEYWORD_SPECILIZATION() {
  return getToken(KerMLParser::KEYWORD_SPECILIZATION, 0);
}

KerMLParser::IdentificationContext* KerMLParser::SubsettingContext::identification() {
  return getRuleContext<KerMLParser::IdentificationContext>(0);
}

tree::TerminalNode* KerMLParser::SubsettingContext::KEYWORD_SUBSET() {
  return getToken(KerMLParser::KEYWORD_SUBSET, 0);
}

KerMLParser::Multiplicity_partContext* KerMLParser::SubsettingContext::multiplicity_part() {
  return getRuleContext<KerMLParser::Multiplicity_partContext>(0);
}


size_t KerMLParser::SubsettingContext::getRuleIndex() const {
  return KerMLParser::RuleSubsetting;
}

void KerMLParser::SubsettingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubsetting(this);
}

void KerMLParser::SubsettingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubsetting(this);
}

KerMLParser::SubsettingContext* KerMLParser::subsetting() {
  SubsettingContext *_localctx = _tracker.createInstance<SubsettingContext>(_ctx, getState());
  enterRule(_localctx, 180, KerMLParser::RuleSubsetting);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1192);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::KEYWORD_SPECILIZATION) {
      setState(1190);
      match(KerMLParser::KEYWORD_SPECILIZATION);
      setState(1191);
      identification();
    }
    setState(1195);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::KEYWORD_SUBSET) {
      setState(1194);
      match(KerMLParser::KEYWORD_SUBSET);
    }
    setState(1197);
    specific_type();
    setState(1198);
    match(KerMLParser::SUBSETS);
    setState(1199);
    general_type();
    setState(1201);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::SYMBOL_SQUARE_BRACKET_OPEN) {
      setState(1200);
      multiplicity_part();
    }
    setState(1203);
    relationship_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Owned_subsettingContext ------------------------------------------------------------------

KerMLParser::Owned_subsettingContext::Owned_subsettingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::General_typeContext* KerMLParser::Owned_subsettingContext::general_type() {
  return getRuleContext<KerMLParser::General_typeContext>(0);
}


size_t KerMLParser::Owned_subsettingContext::getRuleIndex() const {
  return KerMLParser::RuleOwned_subsetting;
}

void KerMLParser::Owned_subsettingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOwned_subsetting(this);
}

void KerMLParser::Owned_subsettingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOwned_subsetting(this);
}

KerMLParser::Owned_subsettingContext* KerMLParser::owned_subsetting() {
  Owned_subsettingContext *_localctx = _tracker.createInstance<Owned_subsettingContext>(_ctx, getState());
  enterRule(_localctx, 182, KerMLParser::RuleOwned_subsetting);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1205);
    general_type();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Owned_reference_subsettingContext ------------------------------------------------------------------

KerMLParser::Owned_reference_subsettingContext::Owned_reference_subsettingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::General_typeContext* KerMLParser::Owned_reference_subsettingContext::general_type() {
  return getRuleContext<KerMLParser::General_typeContext>(0);
}


size_t KerMLParser::Owned_reference_subsettingContext::getRuleIndex() const {
  return KerMLParser::RuleOwned_reference_subsetting;
}

void KerMLParser::Owned_reference_subsettingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOwned_reference_subsetting(this);
}

void KerMLParser::Owned_reference_subsettingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOwned_reference_subsetting(this);
}

KerMLParser::Owned_reference_subsettingContext* KerMLParser::owned_reference_subsetting() {
  Owned_reference_subsettingContext *_localctx = _tracker.createInstance<Owned_reference_subsettingContext>(_ctx, getState());
  enterRule(_localctx, 184, KerMLParser::RuleOwned_reference_subsetting);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1207);
    general_type();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RedefinitionContext ------------------------------------------------------------------

KerMLParser::RedefinitionContext::RedefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::RedefinitionContext::REDEFINES() {
  return getToken(KerMLParser::REDEFINES, 0);
}

KerMLParser::Qualified_nameContext* KerMLParser::RedefinitionContext::qualified_name() {
  return getRuleContext<KerMLParser::Qualified_nameContext>(0);
}

KerMLParser::Relationship_bodyContext* KerMLParser::RedefinitionContext::relationship_body() {
  return getRuleContext<KerMLParser::Relationship_bodyContext>(0);
}

KerMLParser::Feature_directionContext* KerMLParser::RedefinitionContext::feature_direction() {
  return getRuleContext<KerMLParser::Feature_directionContext>(0);
}

tree::TerminalNode* KerMLParser::RedefinitionContext::KEYWORD_SPECILIZATION() {
  return getToken(KerMLParser::KEYWORD_SPECILIZATION, 0);
}

KerMLParser::IdentificationContext* KerMLParser::RedefinitionContext::identification() {
  return getRuleContext<KerMLParser::IdentificationContext>(0);
}

tree::TerminalNode* KerMLParser::RedefinitionContext::KEYWORD_REDEFINITION() {
  return getToken(KerMLParser::KEYWORD_REDEFINITION, 0);
}

KerMLParser::Specific_typeContext* KerMLParser::RedefinitionContext::specific_type() {
  return getRuleContext<KerMLParser::Specific_typeContext>(0);
}

KerMLParser::Typed_byContext* KerMLParser::RedefinitionContext::typed_by() {
  return getRuleContext<KerMLParser::Typed_byContext>(0);
}

KerMLParser::Multiplicity_partContext* KerMLParser::RedefinitionContext::multiplicity_part() {
  return getRuleContext<KerMLParser::Multiplicity_partContext>(0);
}

KerMLParser::SubsetsContext* KerMLParser::RedefinitionContext::subsets() {
  return getRuleContext<KerMLParser::SubsetsContext>(0);
}

KerMLParser::Feature_assignmentContext* KerMLParser::RedefinitionContext::feature_assignment() {
  return getRuleContext<KerMLParser::Feature_assignmentContext>(0);
}


size_t KerMLParser::RedefinitionContext::getRuleIndex() const {
  return KerMLParser::RuleRedefinition;
}

void KerMLParser::RedefinitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRedefinition(this);
}

void KerMLParser::RedefinitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRedefinition(this);
}

KerMLParser::RedefinitionContext* KerMLParser::redefinition() {
  RedefinitionContext *_localctx = _tracker.createInstance<RedefinitionContext>(_ctx, getState());
  enterRule(_localctx, 186, KerMLParser::RuleRedefinition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1210);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 57) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 57)) & 524291) != 0)) {
      setState(1209);
      feature_direction();
    }
    setState(1214);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::KEYWORD_SPECILIZATION) {
      setState(1212);
      match(KerMLParser::KEYWORD_SPECILIZATION);
      setState(1213);
      identification();
    }
    setState(1218);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::KEYWORD_REDEFINITION) {
      setState(1216);
      match(KerMLParser::KEYWORD_REDEFINITION);
      setState(1217);
      specific_type();
    }
    setState(1220);
    match(KerMLParser::REDEFINES);
    setState(1221);
    qualified_name();
    setState(1223);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::TYPED_BY) {
      setState(1222);
      typed_by();
    }
    setState(1226);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::SYMBOL_SQUARE_BRACKET_OPEN) {
      setState(1225);
      multiplicity_part();
    }
    setState(1229);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::SUBSETS) {
      setState(1228);
      subsets();
    }
    setState(1232);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::SYMBOL_ASSIGN) {
      setState(1231);
      feature_assignment();
    }
    setState(1234);
    relationship_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Owned_redefinitionContext ------------------------------------------------------------------

KerMLParser::Owned_redefinitionContext::Owned_redefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::General_typeContext* KerMLParser::Owned_redefinitionContext::general_type() {
  return getRuleContext<KerMLParser::General_typeContext>(0);
}


size_t KerMLParser::Owned_redefinitionContext::getRuleIndex() const {
  return KerMLParser::RuleOwned_redefinition;
}

void KerMLParser::Owned_redefinitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOwned_redefinition(this);
}

void KerMLParser::Owned_redefinitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOwned_redefinition(this);
}

KerMLParser::Owned_redefinitionContext* KerMLParser::owned_redefinition() {
  Owned_redefinitionContext *_localctx = _tracker.createInstance<Owned_redefinitionContext>(_ctx, getState());
  enterRule(_localctx, 188, KerMLParser::RuleOwned_redefinition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1236);
    general_type();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Owned_feature_chainContext ------------------------------------------------------------------

KerMLParser::Owned_feature_chainContext::Owned_feature_chainContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Feature_chainContext* KerMLParser::Owned_feature_chainContext::feature_chain() {
  return getRuleContext<KerMLParser::Feature_chainContext>(0);
}


size_t KerMLParser::Owned_feature_chainContext::getRuleIndex() const {
  return KerMLParser::RuleOwned_feature_chain;
}

void KerMLParser::Owned_feature_chainContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOwned_feature_chain(this);
}

void KerMLParser::Owned_feature_chainContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOwned_feature_chain(this);
}

KerMLParser::Owned_feature_chainContext* KerMLParser::owned_feature_chain() {
  Owned_feature_chainContext *_localctx = _tracker.createInstance<Owned_feature_chainContext>(_ctx, getState());
  enterRule(_localctx, 190, KerMLParser::RuleOwned_feature_chain);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1238);
    feature_chain();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Feature_chainContext ------------------------------------------------------------------

KerMLParser::Feature_chainContext::Feature_chainContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<KerMLParser::Owned_feature_chainingContext *> KerMLParser::Feature_chainContext::owned_feature_chaining() {
  return getRuleContexts<KerMLParser::Owned_feature_chainingContext>();
}

KerMLParser::Owned_feature_chainingContext* KerMLParser::Feature_chainContext::owned_feature_chaining(size_t i) {
  return getRuleContext<KerMLParser::Owned_feature_chainingContext>(i);
}

std::vector<tree::TerminalNode *> KerMLParser::Feature_chainContext::SYMBOL_DOT() {
  return getTokens(KerMLParser::SYMBOL_DOT);
}

tree::TerminalNode* KerMLParser::Feature_chainContext::SYMBOL_DOT(size_t i) {
  return getToken(KerMLParser::SYMBOL_DOT, i);
}


size_t KerMLParser::Feature_chainContext::getRuleIndex() const {
  return KerMLParser::RuleFeature_chain;
}

void KerMLParser::Feature_chainContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFeature_chain(this);
}

void KerMLParser::Feature_chainContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFeature_chain(this);
}

KerMLParser::Feature_chainContext* KerMLParser::feature_chain() {
  Feature_chainContext *_localctx = _tracker.createInstance<Feature_chainContext>(_ctx, getState());
  enterRule(_localctx, 192, KerMLParser::RuleFeature_chain);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1240);
    owned_feature_chaining();
    setState(1245);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 123, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1241);
        match(KerMLParser::SYMBOL_DOT);
        setState(1242);
        owned_feature_chaining(); 
      }
      setState(1247);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 123, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Owned_feature_chainingContext ------------------------------------------------------------------

KerMLParser::Owned_feature_chainingContext::Owned_feature_chainingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Qualified_nameContext* KerMLParser::Owned_feature_chainingContext::qualified_name() {
  return getRuleContext<KerMLParser::Qualified_nameContext>(0);
}


size_t KerMLParser::Owned_feature_chainingContext::getRuleIndex() const {
  return KerMLParser::RuleOwned_feature_chaining;
}

void KerMLParser::Owned_feature_chainingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOwned_feature_chaining(this);
}

void KerMLParser::Owned_feature_chainingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOwned_feature_chaining(this);
}

KerMLParser::Owned_feature_chainingContext* KerMLParser::owned_feature_chaining() {
  Owned_feature_chainingContext *_localctx = _tracker.createInstance<Owned_feature_chainingContext>(_ctx, getState());
  enterRule(_localctx, 194, KerMLParser::RuleOwned_feature_chaining);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1248);
    qualified_name();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Feature_invertingContext ------------------------------------------------------------------

KerMLParser::Feature_invertingContext::Feature_invertingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Feature_invertingContext::KEYWORD_INVERSE() {
  return getToken(KerMLParser::KEYWORD_INVERSE, 0);
}

tree::TerminalNode* KerMLParser::Feature_invertingContext::KEYWORD_OF() {
  return getToken(KerMLParser::KEYWORD_OF, 0);
}

KerMLParser::Relationship_bodyContext* KerMLParser::Feature_invertingContext::relationship_body() {
  return getRuleContext<KerMLParser::Relationship_bodyContext>(0);
}

std::vector<KerMLParser::Qualified_nameContext *> KerMLParser::Feature_invertingContext::qualified_name() {
  return getRuleContexts<KerMLParser::Qualified_nameContext>();
}

KerMLParser::Qualified_nameContext* KerMLParser::Feature_invertingContext::qualified_name(size_t i) {
  return getRuleContext<KerMLParser::Qualified_nameContext>(i);
}

std::vector<KerMLParser::Owned_feature_chainContext *> KerMLParser::Feature_invertingContext::owned_feature_chain() {
  return getRuleContexts<KerMLParser::Owned_feature_chainContext>();
}

KerMLParser::Owned_feature_chainContext* KerMLParser::Feature_invertingContext::owned_feature_chain(size_t i) {
  return getRuleContext<KerMLParser::Owned_feature_chainContext>(i);
}

tree::TerminalNode* KerMLParser::Feature_invertingContext::KEYWORD_INVERTING() {
  return getToken(KerMLParser::KEYWORD_INVERTING, 0);
}

KerMLParser::IdentificationContext* KerMLParser::Feature_invertingContext::identification() {
  return getRuleContext<KerMLParser::IdentificationContext>(0);
}


size_t KerMLParser::Feature_invertingContext::getRuleIndex() const {
  return KerMLParser::RuleFeature_inverting;
}

void KerMLParser::Feature_invertingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFeature_inverting(this);
}

void KerMLParser::Feature_invertingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFeature_inverting(this);
}

KerMLParser::Feature_invertingContext* KerMLParser::feature_inverting() {
  Feature_invertingContext *_localctx = _tracker.createInstance<Feature_invertingContext>(_ctx, getState());
  enterRule(_localctx, 196, KerMLParser::RuleFeature_inverting);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1252);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::KEYWORD_INVERTING) {
      setState(1250);
      match(KerMLParser::KEYWORD_INVERTING);
      setState(1251);
      identification();
    }
    setState(1254);
    match(KerMLParser::KEYWORD_INVERSE);
    setState(1257);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 125, _ctx)) {
    case 1: {
      setState(1255);
      qualified_name();
      break;
    }

    case 2: {
      setState(1256);
      owned_feature_chain();
      break;
    }

    default:
      break;
    }
    setState(1259);
    match(KerMLParser::KEYWORD_OF);
    setState(1262);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 126, _ctx)) {
    case 1: {
      setState(1260);
      qualified_name();
      break;
    }

    case 2: {
      setState(1261);
      owned_feature_chain();
      break;
    }

    default:
      break;
    }
    setState(1264);
    relationship_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Owned_feature_invertingContext ------------------------------------------------------------------

KerMLParser::Owned_feature_invertingContext::Owned_feature_invertingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Qualified_nameContext* KerMLParser::Owned_feature_invertingContext::qualified_name() {
  return getRuleContext<KerMLParser::Qualified_nameContext>(0);
}

KerMLParser::Owned_feature_chainContext* KerMLParser::Owned_feature_invertingContext::owned_feature_chain() {
  return getRuleContext<KerMLParser::Owned_feature_chainContext>(0);
}


size_t KerMLParser::Owned_feature_invertingContext::getRuleIndex() const {
  return KerMLParser::RuleOwned_feature_inverting;
}

void KerMLParser::Owned_feature_invertingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOwned_feature_inverting(this);
}

void KerMLParser::Owned_feature_invertingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOwned_feature_inverting(this);
}

KerMLParser::Owned_feature_invertingContext* KerMLParser::owned_feature_inverting() {
  Owned_feature_invertingContext *_localctx = _tracker.createInstance<Owned_feature_invertingContext>(_ctx, getState());
  enterRule(_localctx, 198, KerMLParser::RuleOwned_feature_inverting);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1268);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 127, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1266);
      qualified_name();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1267);
      owned_feature_chain();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_featuringContext ------------------------------------------------------------------

KerMLParser::Type_featuringContext::Type_featuringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Type_featuringContext::KEYWORD_FEATURING() {
  return getToken(KerMLParser::KEYWORD_FEATURING, 0);
}

std::vector<KerMLParser::Qualified_nameContext *> KerMLParser::Type_featuringContext::qualified_name() {
  return getRuleContexts<KerMLParser::Qualified_nameContext>();
}

KerMLParser::Qualified_nameContext* KerMLParser::Type_featuringContext::qualified_name(size_t i) {
  return getRuleContext<KerMLParser::Qualified_nameContext>(i);
}

tree::TerminalNode* KerMLParser::Type_featuringContext::KEYWORD_BY() {
  return getToken(KerMLParser::KEYWORD_BY, 0);
}

KerMLParser::Relationship_bodyContext* KerMLParser::Type_featuringContext::relationship_body() {
  return getRuleContext<KerMLParser::Relationship_bodyContext>(0);
}

KerMLParser::IdentificationContext* KerMLParser::Type_featuringContext::identification() {
  return getRuleContext<KerMLParser::IdentificationContext>(0);
}

tree::TerminalNode* KerMLParser::Type_featuringContext::KEYWORD_OF() {
  return getToken(KerMLParser::KEYWORD_OF, 0);
}


size_t KerMLParser::Type_featuringContext::getRuleIndex() const {
  return KerMLParser::RuleType_featuring;
}

void KerMLParser::Type_featuringContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_featuring(this);
}

void KerMLParser::Type_featuringContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_featuring(this);
}

KerMLParser::Type_featuringContext* KerMLParser::type_featuring() {
  Type_featuringContext *_localctx = _tracker.createInstance<Type_featuringContext>(_ctx, getState());
  enterRule(_localctx, 200, KerMLParser::RuleType_featuring);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1270);
    match(KerMLParser::KEYWORD_FEATURING);
    setState(1274);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 128, _ctx)) {
    case 1: {
      setState(1271);
      identification();
      setState(1272);
      match(KerMLParser::KEYWORD_OF);
      break;
    }

    default:
      break;
    }
    setState(1276);
    qualified_name();
    setState(1277);
    match(KerMLParser::KEYWORD_BY);
    setState(1278);
    qualified_name();
    setState(1279);
    relationship_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Owned_type_featuringContext ------------------------------------------------------------------

KerMLParser::Owned_type_featuringContext::Owned_type_featuringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Qualified_nameContext* KerMLParser::Owned_type_featuringContext::qualified_name() {
  return getRuleContext<KerMLParser::Qualified_nameContext>(0);
}


size_t KerMLParser::Owned_type_featuringContext::getRuleIndex() const {
  return KerMLParser::RuleOwned_type_featuring;
}

void KerMLParser::Owned_type_featuringContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOwned_type_featuring(this);
}

void KerMLParser::Owned_type_featuringContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOwned_type_featuring(this);
}

KerMLParser::Owned_type_featuringContext* KerMLParser::owned_type_featuring() {
  Owned_type_featuringContext *_localctx = _tracker.createInstance<Owned_type_featuringContext>(_ctx, getState());
  enterRule(_localctx, 202, KerMLParser::RuleOwned_type_featuring);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1281);
    qualified_name();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Data_typeContext ------------------------------------------------------------------

KerMLParser::Data_typeContext::Data_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Type_prefixContext* KerMLParser::Data_typeContext::type_prefix() {
  return getRuleContext<KerMLParser::Type_prefixContext>(0);
}

tree::TerminalNode* KerMLParser::Data_typeContext::KEYWORD_DATATYPE() {
  return getToken(KerMLParser::KEYWORD_DATATYPE, 0);
}

KerMLParser::Classifier_declarationContext* KerMLParser::Data_typeContext::classifier_declaration() {
  return getRuleContext<KerMLParser::Classifier_declarationContext>(0);
}

KerMLParser::Type_bodyContext* KerMLParser::Data_typeContext::type_body() {
  return getRuleContext<KerMLParser::Type_bodyContext>(0);
}


size_t KerMLParser::Data_typeContext::getRuleIndex() const {
  return KerMLParser::RuleData_type;
}

void KerMLParser::Data_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterData_type(this);
}

void KerMLParser::Data_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitData_type(this);
}

KerMLParser::Data_typeContext* KerMLParser::data_type() {
  Data_typeContext *_localctx = _tracker.createInstance<Data_typeContext>(_ctx, getState());
  enterRule(_localctx, 204, KerMLParser::RuleData_type);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1283);
    type_prefix();
    setState(1284);
    match(KerMLParser::KEYWORD_DATATYPE);
    setState(1285);
    classifier_declaration();
    setState(1286);
    type_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassContext ------------------------------------------------------------------

KerMLParser::ClassContext::ClassContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Type_prefixContext* KerMLParser::ClassContext::type_prefix() {
  return getRuleContext<KerMLParser::Type_prefixContext>(0);
}

tree::TerminalNode* KerMLParser::ClassContext::KEYWORD_CLASS() {
  return getToken(KerMLParser::KEYWORD_CLASS, 0);
}

KerMLParser::Classifier_declarationContext* KerMLParser::ClassContext::classifier_declaration() {
  return getRuleContext<KerMLParser::Classifier_declarationContext>(0);
}

KerMLParser::Type_bodyContext* KerMLParser::ClassContext::type_body() {
  return getRuleContext<KerMLParser::Type_bodyContext>(0);
}


size_t KerMLParser::ClassContext::getRuleIndex() const {
  return KerMLParser::RuleClass;
}

void KerMLParser::ClassContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClass(this);
}

void KerMLParser::ClassContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClass(this);
}

KerMLParser::ClassContext* KerMLParser::class_() {
  ClassContext *_localctx = _tracker.createInstance<ClassContext>(_ctx, getState());
  enterRule(_localctx, 206, KerMLParser::RuleClass);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1288);
    type_prefix();
    setState(1289);
    match(KerMLParser::KEYWORD_CLASS);
    setState(1290);
    classifier_declaration();
    setState(1291);
    type_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StructureContext ------------------------------------------------------------------

KerMLParser::StructureContext::StructureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::StructureContext::KEYWORD_STRUCT() {
  return getToken(KerMLParser::KEYWORD_STRUCT, 0);
}

KerMLParser::Classifier_declarationContext* KerMLParser::StructureContext::classifier_declaration() {
  return getRuleContext<KerMLParser::Classifier_declarationContext>(0);
}

KerMLParser::Type_bodyContext* KerMLParser::StructureContext::type_body() {
  return getRuleContext<KerMLParser::Type_bodyContext>(0);
}

KerMLParser::Type_prefixContext* KerMLParser::StructureContext::type_prefix() {
  return getRuleContext<KerMLParser::Type_prefixContext>(0);
}


size_t KerMLParser::StructureContext::getRuleIndex() const {
  return KerMLParser::RuleStructure;
}

void KerMLParser::StructureContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStructure(this);
}

void KerMLParser::StructureContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStructure(this);
}

KerMLParser::StructureContext* KerMLParser::structure() {
  StructureContext *_localctx = _tracker.createInstance<StructureContext>(_ctx, getState());
  enterRule(_localctx, 208, KerMLParser::RuleStructure);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1294);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 129, _ctx)) {
    case 1: {
      setState(1293);
      type_prefix();
      break;
    }

    default:
      break;
    }
    setState(1296);
    match(KerMLParser::KEYWORD_STRUCT);
    setState(1297);
    classifier_declaration();
    setState(1298);
    type_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssociationContext ------------------------------------------------------------------

KerMLParser::AssociationContext::AssociationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Type_prefixContext* KerMLParser::AssociationContext::type_prefix() {
  return getRuleContext<KerMLParser::Type_prefixContext>(0);
}

tree::TerminalNode* KerMLParser::AssociationContext::KEYWORD_ASSOC() {
  return getToken(KerMLParser::KEYWORD_ASSOC, 0);
}

KerMLParser::Classifier_declarationContext* KerMLParser::AssociationContext::classifier_declaration() {
  return getRuleContext<KerMLParser::Classifier_declarationContext>(0);
}

KerMLParser::Type_bodyContext* KerMLParser::AssociationContext::type_body() {
  return getRuleContext<KerMLParser::Type_bodyContext>(0);
}


size_t KerMLParser::AssociationContext::getRuleIndex() const {
  return KerMLParser::RuleAssociation;
}

void KerMLParser::AssociationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssociation(this);
}

void KerMLParser::AssociationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssociation(this);
}

KerMLParser::AssociationContext* KerMLParser::association() {
  AssociationContext *_localctx = _tracker.createInstance<AssociationContext>(_ctx, getState());
  enterRule(_localctx, 210, KerMLParser::RuleAssociation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1300);
    type_prefix();
    setState(1301);
    match(KerMLParser::KEYWORD_ASSOC);
    setState(1302);
    classifier_declaration();
    setState(1303);
    type_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Association_structureContext ------------------------------------------------------------------

KerMLParser::Association_structureContext::Association_structureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Type_prefixContext* KerMLParser::Association_structureContext::type_prefix() {
  return getRuleContext<KerMLParser::Type_prefixContext>(0);
}

tree::TerminalNode* KerMLParser::Association_structureContext::KEYWORD_ASSOC() {
  return getToken(KerMLParser::KEYWORD_ASSOC, 0);
}

tree::TerminalNode* KerMLParser::Association_structureContext::KEYWORD_STRUCT() {
  return getToken(KerMLParser::KEYWORD_STRUCT, 0);
}

KerMLParser::Classifier_declarationContext* KerMLParser::Association_structureContext::classifier_declaration() {
  return getRuleContext<KerMLParser::Classifier_declarationContext>(0);
}

KerMLParser::Type_bodyContext* KerMLParser::Association_structureContext::type_body() {
  return getRuleContext<KerMLParser::Type_bodyContext>(0);
}


size_t KerMLParser::Association_structureContext::getRuleIndex() const {
  return KerMLParser::RuleAssociation_structure;
}

void KerMLParser::Association_structureContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssociation_structure(this);
}

void KerMLParser::Association_structureContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssociation_structure(this);
}

KerMLParser::Association_structureContext* KerMLParser::association_structure() {
  Association_structureContext *_localctx = _tracker.createInstance<Association_structureContext>(_ctx, getState());
  enterRule(_localctx, 212, KerMLParser::RuleAssociation_structure);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1305);
    type_prefix();
    setState(1306);
    match(KerMLParser::KEYWORD_ASSOC);
    setState(1307);
    match(KerMLParser::KEYWORD_STRUCT);
    setState(1308);
    classifier_declaration();
    setState(1309);
    type_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConnectorContext ------------------------------------------------------------------

KerMLParser::ConnectorContext::ConnectorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::ConnectorContext::KEYWORD_CONNECTOR() {
  return getToken(KerMLParser::KEYWORD_CONNECTOR, 0);
}

KerMLParser::Connector_declarationContext* KerMLParser::ConnectorContext::connector_declaration() {
  return getRuleContext<KerMLParser::Connector_declarationContext>(0);
}

KerMLParser::Type_bodyContext* KerMLParser::ConnectorContext::type_body() {
  return getRuleContext<KerMLParser::Type_bodyContext>(0);
}

KerMLParser::Type_prefixContext* KerMLParser::ConnectorContext::type_prefix() {
  return getRuleContext<KerMLParser::Type_prefixContext>(0);
}


size_t KerMLParser::ConnectorContext::getRuleIndex() const {
  return KerMLParser::RuleConnector;
}

void KerMLParser::ConnectorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConnector(this);
}

void KerMLParser::ConnectorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConnector(this);
}

KerMLParser::ConnectorContext* KerMLParser::connector() {
  ConnectorContext *_localctx = _tracker.createInstance<ConnectorContext>(_ctx, getState());
  enterRule(_localctx, 214, KerMLParser::RuleConnector);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1312);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 130, _ctx)) {
    case 1: {
      setState(1311);
      type_prefix();
      break;
    }

    default:
      break;
    }
    setState(1314);
    match(KerMLParser::KEYWORD_CONNECTOR);
    setState(1315);
    connector_declaration();
    setState(1316);
    type_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Connector_declarationContext ------------------------------------------------------------------

KerMLParser::Connector_declarationContext::Connector_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Feature_declarationContext* KerMLParser::Connector_declarationContext::feature_declaration() {
  return getRuleContext<KerMLParser::Feature_declarationContext>(0);
}

KerMLParser::Binary_connector_declarationContext* KerMLParser::Connector_declarationContext::binary_connector_declaration() {
  return getRuleContext<KerMLParser::Binary_connector_declarationContext>(0);
}

KerMLParser::Nary_connector_declarationContext* KerMLParser::Connector_declarationContext::nary_connector_declaration() {
  return getRuleContext<KerMLParser::Nary_connector_declarationContext>(0);
}


size_t KerMLParser::Connector_declarationContext::getRuleIndex() const {
  return KerMLParser::RuleConnector_declaration;
}

void KerMLParser::Connector_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConnector_declaration(this);
}

void KerMLParser::Connector_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConnector_declaration(this);
}

KerMLParser::Connector_declarationContext* KerMLParser::connector_declaration() {
  Connector_declarationContext *_localctx = _tracker.createInstance<Connector_declarationContext>(_ctx, getState());
  enterRule(_localctx, 216, KerMLParser::RuleConnector_declaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1318);
    feature_declaration();
    setState(1321);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case KerMLParser::KEYWORD_ALL:
      case KerMLParser::KEYWORD_FROM: {
        setState(1319);
        binary_connector_declaration();
        break;
      }

      case KerMLParser::SYMBOL_ROUND_BRACKET_OPEN: {
        setState(1320);
        nary_connector_declaration();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Binary_connector_declarationContext ------------------------------------------------------------------

KerMLParser::Binary_connector_declarationContext::Binary_connector_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Binary_connector_declarationContext::KEYWORD_FROM() {
  return getToken(KerMLParser::KEYWORD_FROM, 0);
}

std::vector<KerMLParser::Connector_end_memberContext *> KerMLParser::Binary_connector_declarationContext::connector_end_member() {
  return getRuleContexts<KerMLParser::Connector_end_memberContext>();
}

KerMLParser::Connector_end_memberContext* KerMLParser::Binary_connector_declarationContext::connector_end_member(size_t i) {
  return getRuleContext<KerMLParser::Connector_end_memberContext>(i);
}

tree::TerminalNode* KerMLParser::Binary_connector_declarationContext::KEYWORD_TO() {
  return getToken(KerMLParser::KEYWORD_TO, 0);
}

tree::TerminalNode* KerMLParser::Binary_connector_declarationContext::KEYWORD_ALL() {
  return getToken(KerMLParser::KEYWORD_ALL, 0);
}


size_t KerMLParser::Binary_connector_declarationContext::getRuleIndex() const {
  return KerMLParser::RuleBinary_connector_declaration;
}

void KerMLParser::Binary_connector_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBinary_connector_declaration(this);
}

void KerMLParser::Binary_connector_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBinary_connector_declaration(this);
}

KerMLParser::Binary_connector_declarationContext* KerMLParser::binary_connector_declaration() {
  Binary_connector_declarationContext *_localctx = _tracker.createInstance<Binary_connector_declarationContext>(_ctx, getState());
  enterRule(_localctx, 218, KerMLParser::RuleBinary_connector_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1324);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::KEYWORD_ALL) {
      setState(1323);
      match(KerMLParser::KEYWORD_ALL);
    }
    setState(1326);
    match(KerMLParser::KEYWORD_FROM);
    setState(1327);
    connector_end_member();
    setState(1328);
    match(KerMLParser::KEYWORD_TO);
    setState(1329);
    connector_end_member();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Nary_connector_declarationContext ------------------------------------------------------------------

KerMLParser::Nary_connector_declarationContext::Nary_connector_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Nary_connector_declarationContext::SYMBOL_ROUND_BRACKET_OPEN() {
  return getToken(KerMLParser::SYMBOL_ROUND_BRACKET_OPEN, 0);
}

std::vector<KerMLParser::Connector_end_memberContext *> KerMLParser::Nary_connector_declarationContext::connector_end_member() {
  return getRuleContexts<KerMLParser::Connector_end_memberContext>();
}

KerMLParser::Connector_end_memberContext* KerMLParser::Nary_connector_declarationContext::connector_end_member(size_t i) {
  return getRuleContext<KerMLParser::Connector_end_memberContext>(i);
}

std::vector<tree::TerminalNode *> KerMLParser::Nary_connector_declarationContext::SYMBOL_COMMA() {
  return getTokens(KerMLParser::SYMBOL_COMMA);
}

tree::TerminalNode* KerMLParser::Nary_connector_declarationContext::SYMBOL_COMMA(size_t i) {
  return getToken(KerMLParser::SYMBOL_COMMA, i);
}

tree::TerminalNode* KerMLParser::Nary_connector_declarationContext::SYMBOL_ROUND_BRACKET_CLOSE() {
  return getToken(KerMLParser::SYMBOL_ROUND_BRACKET_CLOSE, 0);
}


size_t KerMLParser::Nary_connector_declarationContext::getRuleIndex() const {
  return KerMLParser::RuleNary_connector_declaration;
}

void KerMLParser::Nary_connector_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNary_connector_declaration(this);
}

void KerMLParser::Nary_connector_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNary_connector_declaration(this);
}

KerMLParser::Nary_connector_declarationContext* KerMLParser::nary_connector_declaration() {
  Nary_connector_declarationContext *_localctx = _tracker.createInstance<Nary_connector_declarationContext>(_ctx, getState());
  enterRule(_localctx, 220, KerMLParser::RuleNary_connector_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1331);
    match(KerMLParser::SYMBOL_ROUND_BRACKET_OPEN);
    setState(1332);
    connector_end_member();
    setState(1333);
    match(KerMLParser::SYMBOL_COMMA);
    setState(1334);
    connector_end_member();
    setState(1339);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == KerMLParser::SYMBOL_COMMA) {
      setState(1335);
      match(KerMLParser::SYMBOL_COMMA);
      setState(1336);
      connector_end_member();
      setState(1341);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1342);
    match(KerMLParser::SYMBOL_ROUND_BRACKET_CLOSE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Connector_end_memberContext ------------------------------------------------------------------

KerMLParser::Connector_end_memberContext::Connector_end_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Connector_endContext* KerMLParser::Connector_end_memberContext::connector_end() {
  return getRuleContext<KerMLParser::Connector_endContext>(0);
}


size_t KerMLParser::Connector_end_memberContext::getRuleIndex() const {
  return KerMLParser::RuleConnector_end_member;
}

void KerMLParser::Connector_end_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConnector_end_member(this);
}

void KerMLParser::Connector_end_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConnector_end_member(this);
}

KerMLParser::Connector_end_memberContext* KerMLParser::connector_end_member() {
  Connector_end_memberContext *_localctx = _tracker.createInstance<Connector_end_memberContext>(_ctx, getState());
  enterRule(_localctx, 222, KerMLParser::RuleConnector_end_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1344);
    connector_end();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Connector_endContext ------------------------------------------------------------------

KerMLParser::Connector_endContext::Connector_endContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Owned_reference_subsettingContext* KerMLParser::Connector_endContext::owned_reference_subsetting() {
  return getRuleContext<KerMLParser::Owned_reference_subsettingContext>(0);
}

tree::TerminalNode* KerMLParser::Connector_endContext::NAME() {
  return getToken(KerMLParser::NAME, 0);
}

tree::TerminalNode* KerMLParser::Connector_endContext::REFERENCES() {
  return getToken(KerMLParser::REFERENCES, 0);
}

KerMLParser::Multiplicity_boundsContext* KerMLParser::Connector_endContext::multiplicity_bounds() {
  return getRuleContext<KerMLParser::Multiplicity_boundsContext>(0);
}


size_t KerMLParser::Connector_endContext::getRuleIndex() const {
  return KerMLParser::RuleConnector_end;
}

void KerMLParser::Connector_endContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConnector_end(this);
}

void KerMLParser::Connector_endContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConnector_end(this);
}

KerMLParser::Connector_endContext* KerMLParser::connector_end() {
  Connector_endContext *_localctx = _tracker.createInstance<Connector_endContext>(_ctx, getState());
  enterRule(_localctx, 224, KerMLParser::RuleConnector_end);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1348);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 134, _ctx)) {
    case 1: {
      setState(1346);
      match(KerMLParser::NAME);
      setState(1347);
      match(KerMLParser::REFERENCES);
      break;
    }

    default:
      break;
    }
    setState(1351);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::SYMBOL_SQUARE_BRACKET_OPEN) {
      setState(1350);
      multiplicity_bounds();
    }
    setState(1353);
    owned_reference_subsetting();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Binding_connectorContext ------------------------------------------------------------------

KerMLParser::Binding_connectorContext::Binding_connectorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Feature_prefixContext* KerMLParser::Binding_connectorContext::feature_prefix() {
  return getRuleContext<KerMLParser::Feature_prefixContext>(0);
}

tree::TerminalNode* KerMLParser::Binding_connectorContext::KEYWORD_BINDING() {
  return getToken(KerMLParser::KEYWORD_BINDING, 0);
}

KerMLParser::Binding_connector_declarationContext* KerMLParser::Binding_connectorContext::binding_connector_declaration() {
  return getRuleContext<KerMLParser::Binding_connector_declarationContext>(0);
}

KerMLParser::Type_bodyContext* KerMLParser::Binding_connectorContext::type_body() {
  return getRuleContext<KerMLParser::Type_bodyContext>(0);
}


size_t KerMLParser::Binding_connectorContext::getRuleIndex() const {
  return KerMLParser::RuleBinding_connector;
}

void KerMLParser::Binding_connectorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBinding_connector(this);
}

void KerMLParser::Binding_connectorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBinding_connector(this);
}

KerMLParser::Binding_connectorContext* KerMLParser::binding_connector() {
  Binding_connectorContext *_localctx = _tracker.createInstance<Binding_connectorContext>(_ctx, getState());
  enterRule(_localctx, 226, KerMLParser::RuleBinding_connector);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1355);
    feature_prefix();
    setState(1356);
    match(KerMLParser::KEYWORD_BINDING);
    setState(1357);
    binding_connector_declaration();
    setState(1358);
    type_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Binding_connector_declarationContext ------------------------------------------------------------------

KerMLParser::Binding_connector_declarationContext::Binding_connector_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Feature_declarationContext* KerMLParser::Binding_connector_declarationContext::feature_declaration() {
  return getRuleContext<KerMLParser::Feature_declarationContext>(0);
}

tree::TerminalNode* KerMLParser::Binding_connector_declarationContext::KEYWORD_OF() {
  return getToken(KerMLParser::KEYWORD_OF, 0);
}

std::vector<KerMLParser::Connector_end_memberContext *> KerMLParser::Binding_connector_declarationContext::connector_end_member() {
  return getRuleContexts<KerMLParser::Connector_end_memberContext>();
}

KerMLParser::Connector_end_memberContext* KerMLParser::Binding_connector_declarationContext::connector_end_member(size_t i) {
  return getRuleContext<KerMLParser::Connector_end_memberContext>(i);
}

tree::TerminalNode* KerMLParser::Binding_connector_declarationContext::SYMBOL_EQUALS() {
  return getToken(KerMLParser::SYMBOL_EQUALS, 0);
}

tree::TerminalNode* KerMLParser::Binding_connector_declarationContext::KEYWORD_ALL() {
  return getToken(KerMLParser::KEYWORD_ALL, 0);
}


size_t KerMLParser::Binding_connector_declarationContext::getRuleIndex() const {
  return KerMLParser::RuleBinding_connector_declaration;
}

void KerMLParser::Binding_connector_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBinding_connector_declaration(this);
}

void KerMLParser::Binding_connector_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBinding_connector_declaration(this);
}

KerMLParser::Binding_connector_declarationContext* KerMLParser::binding_connector_declaration() {
  Binding_connector_declarationContext *_localctx = _tracker.createInstance<Binding_connector_declarationContext>(_ctx, getState());
  enterRule(_localctx, 228, KerMLParser::RuleBinding_connector_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1380);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 140, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1360);
      feature_declaration();
      setState(1366);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == KerMLParser::KEYWORD_OF) {
        setState(1361);
        match(KerMLParser::KEYWORD_OF);
        setState(1362);
        connector_end_member();
        setState(1363);
        match(KerMLParser::SYMBOL_EQUALS);
        setState(1364);
        connector_end_member();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1369);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == KerMLParser::KEYWORD_ALL) {
        setState(1368);
        match(KerMLParser::KEYWORD_ALL);
      }
      setState(1378);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == KerMLParser::KEYWORD_OF

      || _la == KerMLParser::SYMBOL_SQUARE_BRACKET_OPEN || _la == KerMLParser::NAME) {
        setState(1372);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == KerMLParser::KEYWORD_OF) {
          setState(1371);
          match(KerMLParser::KEYWORD_OF);
        }
        setState(1374);
        connector_end_member();
        setState(1375);
        match(KerMLParser::SYMBOL_EQUALS);
        setState(1376);
        connector_end_member();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SuccessionContext ------------------------------------------------------------------

KerMLParser::SuccessionContext::SuccessionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Feature_prefixContext* KerMLParser::SuccessionContext::feature_prefix() {
  return getRuleContext<KerMLParser::Feature_prefixContext>(0);
}

tree::TerminalNode* KerMLParser::SuccessionContext::KEYWORD_SUCCSESSION() {
  return getToken(KerMLParser::KEYWORD_SUCCSESSION, 0);
}

KerMLParser::Succession_declarationContext* KerMLParser::SuccessionContext::succession_declaration() {
  return getRuleContext<KerMLParser::Succession_declarationContext>(0);
}

KerMLParser::Type_bodyContext* KerMLParser::SuccessionContext::type_body() {
  return getRuleContext<KerMLParser::Type_bodyContext>(0);
}


size_t KerMLParser::SuccessionContext::getRuleIndex() const {
  return KerMLParser::RuleSuccession;
}

void KerMLParser::SuccessionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSuccession(this);
}

void KerMLParser::SuccessionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSuccession(this);
}

KerMLParser::SuccessionContext* KerMLParser::succession() {
  SuccessionContext *_localctx = _tracker.createInstance<SuccessionContext>(_ctx, getState());
  enterRule(_localctx, 230, KerMLParser::RuleSuccession);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1382);
    feature_prefix();
    setState(1383);
    match(KerMLParser::KEYWORD_SUCCSESSION);
    setState(1384);
    succession_declaration();
    setState(1385);
    type_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Succession_declarationContext ------------------------------------------------------------------

KerMLParser::Succession_declarationContext::Succession_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Feature_declarationContext* KerMLParser::Succession_declarationContext::feature_declaration() {
  return getRuleContext<KerMLParser::Feature_declarationContext>(0);
}

tree::TerminalNode* KerMLParser::Succession_declarationContext::KEYWORD_FIRST() {
  return getToken(KerMLParser::KEYWORD_FIRST, 0);
}

std::vector<KerMLParser::Connector_end_memberContext *> KerMLParser::Succession_declarationContext::connector_end_member() {
  return getRuleContexts<KerMLParser::Connector_end_memberContext>();
}

KerMLParser::Connector_end_memberContext* KerMLParser::Succession_declarationContext::connector_end_member(size_t i) {
  return getRuleContext<KerMLParser::Connector_end_memberContext>(i);
}

tree::TerminalNode* KerMLParser::Succession_declarationContext::KEYWORD_THEN() {
  return getToken(KerMLParser::KEYWORD_THEN, 0);
}

tree::TerminalNode* KerMLParser::Succession_declarationContext::KEYWORD_ALL() {
  return getToken(KerMLParser::KEYWORD_ALL, 0);
}


size_t KerMLParser::Succession_declarationContext::getRuleIndex() const {
  return KerMLParser::RuleSuccession_declaration;
}

void KerMLParser::Succession_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSuccession_declaration(this);
}

void KerMLParser::Succession_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSuccession_declaration(this);
}

KerMLParser::Succession_declarationContext* KerMLParser::succession_declaration() {
  Succession_declarationContext *_localctx = _tracker.createInstance<Succession_declarationContext>(_ctx, getState());
  enterRule(_localctx, 232, KerMLParser::RuleSuccession_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1407);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 145, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1387);
      feature_declaration();
      setState(1393);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == KerMLParser::KEYWORD_FIRST) {
        setState(1388);
        match(KerMLParser::KEYWORD_FIRST);
        setState(1389);
        connector_end_member();
        setState(1390);
        match(KerMLParser::KEYWORD_THEN);
        setState(1391);
        connector_end_member();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1396);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == KerMLParser::KEYWORD_ALL) {
        setState(1395);
        match(KerMLParser::KEYWORD_ALL);
      }
      setState(1405);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == KerMLParser::KEYWORD_FIRST || _la == KerMLParser::SYMBOL_SQUARE_BRACKET_OPEN

      || _la == KerMLParser::NAME) {
        setState(1399);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == KerMLParser::KEYWORD_FIRST) {
          setState(1398);
          match(KerMLParser::KEYWORD_FIRST);
        }
        setState(1401);
        connector_end_member();
        setState(1402);
        match(KerMLParser::KEYWORD_THEN);
        setState(1403);
        connector_end_member();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BehaviorContext ------------------------------------------------------------------

KerMLParser::BehaviorContext::BehaviorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Type_prefixContext* KerMLParser::BehaviorContext::type_prefix() {
  return getRuleContext<KerMLParser::Type_prefixContext>(0);
}

tree::TerminalNode* KerMLParser::BehaviorContext::KEYWORD_BEHAVIOR() {
  return getToken(KerMLParser::KEYWORD_BEHAVIOR, 0);
}

KerMLParser::Classifier_declarationContext* KerMLParser::BehaviorContext::classifier_declaration() {
  return getRuleContext<KerMLParser::Classifier_declarationContext>(0);
}

KerMLParser::Type_bodyContext* KerMLParser::BehaviorContext::type_body() {
  return getRuleContext<KerMLParser::Type_bodyContext>(0);
}


size_t KerMLParser::BehaviorContext::getRuleIndex() const {
  return KerMLParser::RuleBehavior;
}

void KerMLParser::BehaviorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBehavior(this);
}

void KerMLParser::BehaviorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBehavior(this);
}

KerMLParser::BehaviorContext* KerMLParser::behavior() {
  BehaviorContext *_localctx = _tracker.createInstance<BehaviorContext>(_ctx, getState());
  enterRule(_localctx, 234, KerMLParser::RuleBehavior);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1409);
    type_prefix();
    setState(1410);
    match(KerMLParser::KEYWORD_BEHAVIOR);
    setState(1411);
    classifier_declaration();
    setState(1412);
    type_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StepContext ------------------------------------------------------------------

KerMLParser::StepContext::StepContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Feature_prefixContext* KerMLParser::StepContext::feature_prefix() {
  return getRuleContext<KerMLParser::Feature_prefixContext>(0);
}

tree::TerminalNode* KerMLParser::StepContext::KEYWORD_STEP() {
  return getToken(KerMLParser::KEYWORD_STEP, 0);
}

KerMLParser::Feature_declarationContext* KerMLParser::StepContext::feature_declaration() {
  return getRuleContext<KerMLParser::Feature_declarationContext>(0);
}

KerMLParser::Type_bodyContext* KerMLParser::StepContext::type_body() {
  return getRuleContext<KerMLParser::Type_bodyContext>(0);
}

KerMLParser::Value_partContext* KerMLParser::StepContext::value_part() {
  return getRuleContext<KerMLParser::Value_partContext>(0);
}


size_t KerMLParser::StepContext::getRuleIndex() const {
  return KerMLParser::RuleStep;
}

void KerMLParser::StepContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStep(this);
}

void KerMLParser::StepContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStep(this);
}

KerMLParser::StepContext* KerMLParser::step() {
  StepContext *_localctx = _tracker.createInstance<StepContext>(_ctx, getState());
  enterRule(_localctx, 236, KerMLParser::RuleStep);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1414);
    feature_prefix();
    setState(1415);
    match(KerMLParser::KEYWORD_STEP);
    setState(1416);
    feature_declaration();
    setState(1418);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::KEYWORD_DEFAULT || _la == KerMLParser::SYMBOL_DEF_ASSIGN

    || _la == KerMLParser::SYMBOL_EQUALS) {
      setState(1417);
      value_part();
    }
    setState(1420);
    type_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionContext ------------------------------------------------------------------

KerMLParser::FunctionContext::FunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Type_prefixContext* KerMLParser::FunctionContext::type_prefix() {
  return getRuleContext<KerMLParser::Type_prefixContext>(0);
}

tree::TerminalNode* KerMLParser::FunctionContext::KEYWORD_FUNCTION() {
  return getToken(KerMLParser::KEYWORD_FUNCTION, 0);
}

KerMLParser::Classifier_declarationContext* KerMLParser::FunctionContext::classifier_declaration() {
  return getRuleContext<KerMLParser::Classifier_declarationContext>(0);
}

KerMLParser::Function_bodyContext* KerMLParser::FunctionContext::function_body() {
  return getRuleContext<KerMLParser::Function_bodyContext>(0);
}


size_t KerMLParser::FunctionContext::getRuleIndex() const {
  return KerMLParser::RuleFunction;
}

void KerMLParser::FunctionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunction(this);
}

void KerMLParser::FunctionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunction(this);
}

KerMLParser::FunctionContext* KerMLParser::function() {
  FunctionContext *_localctx = _tracker.createInstance<FunctionContext>(_ctx, getState());
  enterRule(_localctx, 238, KerMLParser::RuleFunction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1422);
    type_prefix();
    setState(1423);
    match(KerMLParser::KEYWORD_FUNCTION);
    setState(1424);
    classifier_declaration();
    setState(1425);
    function_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Function_bodyContext ------------------------------------------------------------------

KerMLParser::Function_bodyContext::Function_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Function_bodyContext::SYMBOL_STATEMENT_DELIMITER() {
  return getToken(KerMLParser::SYMBOL_STATEMENT_DELIMITER, 0);
}

tree::TerminalNode* KerMLParser::Function_bodyContext::SYMBOL_CURLY_BRACKET_OPEN() {
  return getToken(KerMLParser::SYMBOL_CURLY_BRACKET_OPEN, 0);
}

KerMLParser::Function_body_partContext* KerMLParser::Function_bodyContext::function_body_part() {
  return getRuleContext<KerMLParser::Function_body_partContext>(0);
}

tree::TerminalNode* KerMLParser::Function_bodyContext::SYMBOL_CURLY_BRACKET_CLOSE() {
  return getToken(KerMLParser::SYMBOL_CURLY_BRACKET_CLOSE, 0);
}


size_t KerMLParser::Function_bodyContext::getRuleIndex() const {
  return KerMLParser::RuleFunction_body;
}

void KerMLParser::Function_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunction_body(this);
}

void KerMLParser::Function_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunction_body(this);
}

KerMLParser::Function_bodyContext* KerMLParser::function_body() {
  Function_bodyContext *_localctx = _tracker.createInstance<Function_bodyContext>(_ctx, getState());
  enterRule(_localctx, 240, KerMLParser::RuleFunction_body);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1432);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case KerMLParser::SYMBOL_STATEMENT_DELIMITER: {
        enterOuterAlt(_localctx, 1);
        setState(1427);
        match(KerMLParser::SYMBOL_STATEMENT_DELIMITER);
        break;
      }

      case KerMLParser::SYMBOL_CURLY_BRACKET_OPEN: {
        enterOuterAlt(_localctx, 2);
        setState(1428);
        match(KerMLParser::SYMBOL_CURLY_BRACKET_OPEN);
        setState(1429);
        function_body_part();
        setState(1430);
        match(KerMLParser::SYMBOL_CURLY_BRACKET_CLOSE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Function_body_partContext ------------------------------------------------------------------

KerMLParser::Function_body_partContext::Function_body_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<KerMLParser::Type_body_elementContext *> KerMLParser::Function_body_partContext::type_body_element() {
  return getRuleContexts<KerMLParser::Type_body_elementContext>();
}

KerMLParser::Type_body_elementContext* KerMLParser::Function_body_partContext::type_body_element(size_t i) {
  return getRuleContext<KerMLParser::Type_body_elementContext>(i);
}

std::vector<KerMLParser::Return_feature_memberContext *> KerMLParser::Function_body_partContext::return_feature_member() {
  return getRuleContexts<KerMLParser::Return_feature_memberContext>();
}

KerMLParser::Return_feature_memberContext* KerMLParser::Function_body_partContext::return_feature_member(size_t i) {
  return getRuleContext<KerMLParser::Return_feature_memberContext>(i);
}

KerMLParser::Result_expression_memberContext* KerMLParser::Function_body_partContext::result_expression_member() {
  return getRuleContext<KerMLParser::Result_expression_memberContext>(0);
}


size_t KerMLParser::Function_body_partContext::getRuleIndex() const {
  return KerMLParser::RuleFunction_body_part;
}

void KerMLParser::Function_body_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunction_body_part(this);
}

void KerMLParser::Function_body_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunction_body_part(this);
}

KerMLParser::Function_body_partContext* KerMLParser::function_body_part() {
  Function_body_partContext *_localctx = _tracker.createInstance<Function_body_partContext>(_ctx, getState());
  enterRule(_localctx, 242, KerMLParser::RuleFunction_body_part);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1436); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(1436);
              _errHandler->sync(this);
              switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 148, _ctx)) {
              case 1: {
                setState(1434);
                type_body_element();
                break;
              }

              case 2: {
                setState(1435);
                return_feature_member();
                break;
              }

              default:
                break;
              }
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(1438); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 149, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
    setState(1441);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -9173828042907074556) != 0) || ((((_la - 71) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 71)) & -124403125896344053) != 0) || ((((_la - 135) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 135)) & 30342399) != 0)) {
      setState(1440);
      result_expression_member();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Return_feature_memberContext ------------------------------------------------------------------

KerMLParser::Return_feature_memberContext::Return_feature_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Member_prefixContext* KerMLParser::Return_feature_memberContext::member_prefix() {
  return getRuleContext<KerMLParser::Member_prefixContext>(0);
}

tree::TerminalNode* KerMLParser::Return_feature_memberContext::KEYWORD_RETURN() {
  return getToken(KerMLParser::KEYWORD_RETURN, 0);
}

KerMLParser::Feature_elementContext* KerMLParser::Return_feature_memberContext::feature_element() {
  return getRuleContext<KerMLParser::Feature_elementContext>(0);
}


size_t KerMLParser::Return_feature_memberContext::getRuleIndex() const {
  return KerMLParser::RuleReturn_feature_member;
}

void KerMLParser::Return_feature_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReturn_feature_member(this);
}

void KerMLParser::Return_feature_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReturn_feature_member(this);
}

KerMLParser::Return_feature_memberContext* KerMLParser::return_feature_member() {
  Return_feature_memberContext *_localctx = _tracker.createInstance<Return_feature_memberContext>(_ctx, getState());
  enterRule(_localctx, 244, KerMLParser::RuleReturn_feature_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1443);
    member_prefix();
    setState(1444);
    match(KerMLParser::KEYWORD_RETURN);
    setState(1445);
    feature_element();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Result_expression_memberContext ------------------------------------------------------------------

KerMLParser::Result_expression_memberContext::Result_expression_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Member_prefixContext* KerMLParser::Result_expression_memberContext::member_prefix() {
  return getRuleContext<KerMLParser::Member_prefixContext>(0);
}

KerMLParser::Owned_expressionContext* KerMLParser::Result_expression_memberContext::owned_expression() {
  return getRuleContext<KerMLParser::Owned_expressionContext>(0);
}


size_t KerMLParser::Result_expression_memberContext::getRuleIndex() const {
  return KerMLParser::RuleResult_expression_member;
}

void KerMLParser::Result_expression_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterResult_expression_member(this);
}

void KerMLParser::Result_expression_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitResult_expression_member(this);
}

KerMLParser::Result_expression_memberContext* KerMLParser::result_expression_member() {
  Result_expression_memberContext *_localctx = _tracker.createInstance<Result_expression_memberContext>(_ctx, getState());
  enterRule(_localctx, 246, KerMLParser::RuleResult_expression_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1447);
    member_prefix();
    setState(1448);
    owned_expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionContext ------------------------------------------------------------------

KerMLParser::ExpressionContext::ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Feature_prefixContext* KerMLParser::ExpressionContext::feature_prefix() {
  return getRuleContext<KerMLParser::Feature_prefixContext>(0);
}

tree::TerminalNode* KerMLParser::ExpressionContext::KEYWORD_EXPR() {
  return getToken(KerMLParser::KEYWORD_EXPR, 0);
}

KerMLParser::Feature_declarationContext* KerMLParser::ExpressionContext::feature_declaration() {
  return getRuleContext<KerMLParser::Feature_declarationContext>(0);
}

KerMLParser::Function_bodyContext* KerMLParser::ExpressionContext::function_body() {
  return getRuleContext<KerMLParser::Function_bodyContext>(0);
}

KerMLParser::Value_partContext* KerMLParser::ExpressionContext::value_part() {
  return getRuleContext<KerMLParser::Value_partContext>(0);
}


size_t KerMLParser::ExpressionContext::getRuleIndex() const {
  return KerMLParser::RuleExpression;
}

void KerMLParser::ExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpression(this);
}

void KerMLParser::ExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpression(this);
}

KerMLParser::ExpressionContext* KerMLParser::expression() {
  ExpressionContext *_localctx = _tracker.createInstance<ExpressionContext>(_ctx, getState());
  enterRule(_localctx, 248, KerMLParser::RuleExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1450);
    feature_prefix();
    setState(1451);
    match(KerMLParser::KEYWORD_EXPR);
    setState(1452);
    feature_declaration();
    setState(1454);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::KEYWORD_DEFAULT || _la == KerMLParser::SYMBOL_DEF_ASSIGN

    || _la == KerMLParser::SYMBOL_EQUALS) {
      setState(1453);
      value_part();
    }
    setState(1456);
    function_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PredicateContext ------------------------------------------------------------------

KerMLParser::PredicateContext::PredicateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Type_prefixContext* KerMLParser::PredicateContext::type_prefix() {
  return getRuleContext<KerMLParser::Type_prefixContext>(0);
}

tree::TerminalNode* KerMLParser::PredicateContext::KEYWORD_PREDICATE() {
  return getToken(KerMLParser::KEYWORD_PREDICATE, 0);
}

KerMLParser::Classifier_declarationContext* KerMLParser::PredicateContext::classifier_declaration() {
  return getRuleContext<KerMLParser::Classifier_declarationContext>(0);
}

KerMLParser::Function_bodyContext* KerMLParser::PredicateContext::function_body() {
  return getRuleContext<KerMLParser::Function_bodyContext>(0);
}


size_t KerMLParser::PredicateContext::getRuleIndex() const {
  return KerMLParser::RulePredicate;
}

void KerMLParser::PredicateContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPredicate(this);
}

void KerMLParser::PredicateContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPredicate(this);
}

KerMLParser::PredicateContext* KerMLParser::predicate() {
  PredicateContext *_localctx = _tracker.createInstance<PredicateContext>(_ctx, getState());
  enterRule(_localctx, 250, KerMLParser::RulePredicate);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1458);
    type_prefix();
    setState(1459);
    match(KerMLParser::KEYWORD_PREDICATE);
    setState(1460);
    classifier_declaration();
    setState(1461);
    function_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Boolean_expressionContext ------------------------------------------------------------------

KerMLParser::Boolean_expressionContext::Boolean_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Feature_prefixContext* KerMLParser::Boolean_expressionContext::feature_prefix() {
  return getRuleContext<KerMLParser::Feature_prefixContext>(0);
}

tree::TerminalNode* KerMLParser::Boolean_expressionContext::KEYWORD_BOOL() {
  return getToken(KerMLParser::KEYWORD_BOOL, 0);
}

KerMLParser::Feature_declarationContext* KerMLParser::Boolean_expressionContext::feature_declaration() {
  return getRuleContext<KerMLParser::Feature_declarationContext>(0);
}

KerMLParser::Function_bodyContext* KerMLParser::Boolean_expressionContext::function_body() {
  return getRuleContext<KerMLParser::Function_bodyContext>(0);
}

KerMLParser::Value_partContext* KerMLParser::Boolean_expressionContext::value_part() {
  return getRuleContext<KerMLParser::Value_partContext>(0);
}


size_t KerMLParser::Boolean_expressionContext::getRuleIndex() const {
  return KerMLParser::RuleBoolean_expression;
}

void KerMLParser::Boolean_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBoolean_expression(this);
}

void KerMLParser::Boolean_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBoolean_expression(this);
}

KerMLParser::Boolean_expressionContext* KerMLParser::boolean_expression() {
  Boolean_expressionContext *_localctx = _tracker.createInstance<Boolean_expressionContext>(_ctx, getState());
  enterRule(_localctx, 252, KerMLParser::RuleBoolean_expression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1463);
    feature_prefix();
    setState(1464);
    match(KerMLParser::KEYWORD_BOOL);
    setState(1465);
    feature_declaration();
    setState(1467);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::KEYWORD_DEFAULT || _la == KerMLParser::SYMBOL_DEF_ASSIGN

    || _la == KerMLParser::SYMBOL_EQUALS) {
      setState(1466);
      value_part();
    }
    setState(1469);
    function_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InvariantContext ------------------------------------------------------------------

KerMLParser::InvariantContext::InvariantContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Feature_prefixContext* KerMLParser::InvariantContext::feature_prefix() {
  return getRuleContext<KerMLParser::Feature_prefixContext>(0);
}

tree::TerminalNode* KerMLParser::InvariantContext::KEYWORD_INV() {
  return getToken(KerMLParser::KEYWORD_INV, 0);
}

KerMLParser::Feature_declarationContext* KerMLParser::InvariantContext::feature_declaration() {
  return getRuleContext<KerMLParser::Feature_declarationContext>(0);
}

KerMLParser::Function_bodyContext* KerMLParser::InvariantContext::function_body() {
  return getRuleContext<KerMLParser::Function_bodyContext>(0);
}

KerMLParser::Value_partContext* KerMLParser::InvariantContext::value_part() {
  return getRuleContext<KerMLParser::Value_partContext>(0);
}

tree::TerminalNode* KerMLParser::InvariantContext::KEYWORD_TRUE() {
  return getToken(KerMLParser::KEYWORD_TRUE, 0);
}

tree::TerminalNode* KerMLParser::InvariantContext::KEYWORD_FALSE() {
  return getToken(KerMLParser::KEYWORD_FALSE, 0);
}


size_t KerMLParser::InvariantContext::getRuleIndex() const {
  return KerMLParser::RuleInvariant;
}

void KerMLParser::InvariantContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInvariant(this);
}

void KerMLParser::InvariantContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInvariant(this);
}

KerMLParser::InvariantContext* KerMLParser::invariant() {
  InvariantContext *_localctx = _tracker.createInstance<InvariantContext>(_ctx, getState());
  enterRule(_localctx, 254, KerMLParser::RuleInvariant);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1471);
    feature_prefix();
    setState(1472);
    match(KerMLParser::KEYWORD_INV);
    setState(1474);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::KEYWORD_FALSE

    || _la == KerMLParser::KEYWORD_TRUE) {
      setState(1473);
      _la = _input->LA(1);
      if (!(_la == KerMLParser::KEYWORD_FALSE

      || _la == KerMLParser::KEYWORD_TRUE)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(1476);
    feature_declaration();
    setState(1478);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::KEYWORD_DEFAULT || _la == KerMLParser::SYMBOL_DEF_ASSIGN

    || _la == KerMLParser::SYMBOL_EQUALS) {
      setState(1477);
      value_part();
    }
    setState(1480);
    function_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Owned_expression_reference_memberContext ------------------------------------------------------------------

KerMLParser::Owned_expression_reference_memberContext::Owned_expression_reference_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Owned_expression_referenceContext* KerMLParser::Owned_expression_reference_memberContext::owned_expression_reference() {
  return getRuleContext<KerMLParser::Owned_expression_referenceContext>(0);
}


size_t KerMLParser::Owned_expression_reference_memberContext::getRuleIndex() const {
  return KerMLParser::RuleOwned_expression_reference_member;
}

void KerMLParser::Owned_expression_reference_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOwned_expression_reference_member(this);
}

void KerMLParser::Owned_expression_reference_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOwned_expression_reference_member(this);
}

KerMLParser::Owned_expression_reference_memberContext* KerMLParser::owned_expression_reference_member() {
  Owned_expression_reference_memberContext *_localctx = _tracker.createInstance<Owned_expression_reference_memberContext>(_ctx, getState());
  enterRule(_localctx, 256, KerMLParser::RuleOwned_expression_reference_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1482);
    owned_expression_reference();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Owned_expression_referenceContext ------------------------------------------------------------------

KerMLParser::Owned_expression_referenceContext::Owned_expression_referenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Owned_expression_memberContext* KerMLParser::Owned_expression_referenceContext::owned_expression_member() {
  return getRuleContext<KerMLParser::Owned_expression_memberContext>(0);
}


size_t KerMLParser::Owned_expression_referenceContext::getRuleIndex() const {
  return KerMLParser::RuleOwned_expression_reference;
}

void KerMLParser::Owned_expression_referenceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOwned_expression_reference(this);
}

void KerMLParser::Owned_expression_referenceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOwned_expression_reference(this);
}

KerMLParser::Owned_expression_referenceContext* KerMLParser::owned_expression_reference() {
  Owned_expression_referenceContext *_localctx = _tracker.createInstance<Owned_expression_referenceContext>(_ctx, getState());
  enterRule(_localctx, 258, KerMLParser::RuleOwned_expression_reference);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1484);
    owned_expression_member();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Owned_expression_memberContext ------------------------------------------------------------------

KerMLParser::Owned_expression_memberContext::Owned_expression_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Owned_expressionsContext* KerMLParser::Owned_expression_memberContext::owned_expressions() {
  return getRuleContext<KerMLParser::Owned_expressionsContext>(0);
}


size_t KerMLParser::Owned_expression_memberContext::getRuleIndex() const {
  return KerMLParser::RuleOwned_expression_member;
}

void KerMLParser::Owned_expression_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOwned_expression_member(this);
}

void KerMLParser::Owned_expression_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOwned_expression_member(this);
}

KerMLParser::Owned_expression_memberContext* KerMLParser::owned_expression_member() {
  Owned_expression_memberContext *_localctx = _tracker.createInstance<Owned_expression_memberContext>(_ctx, getState());
  enterRule(_localctx, 260, KerMLParser::RuleOwned_expression_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1486);
    owned_expressions();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Owned_expressionsContext ------------------------------------------------------------------

KerMLParser::Owned_expressionsContext::Owned_expressionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<KerMLParser::Owned_expressionContext *> KerMLParser::Owned_expressionsContext::owned_expression() {
  return getRuleContexts<KerMLParser::Owned_expressionContext>();
}

KerMLParser::Owned_expressionContext* KerMLParser::Owned_expressionsContext::owned_expression(size_t i) {
  return getRuleContext<KerMLParser::Owned_expressionContext>(i);
}


size_t KerMLParser::Owned_expressionsContext::getRuleIndex() const {
  return KerMLParser::RuleOwned_expressions;
}

void KerMLParser::Owned_expressionsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOwned_expressions(this);
}

void KerMLParser::Owned_expressionsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOwned_expressions(this);
}

KerMLParser::Owned_expressionsContext* KerMLParser::owned_expressions() {
  Owned_expressionsContext *_localctx = _tracker.createInstance<Owned_expressionsContext>(_ctx, getState());
  enterRule(_localctx, 262, KerMLParser::RuleOwned_expressions);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1489); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(1488);
              owned_expression();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(1491); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 155, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Owned_expressionContext ------------------------------------------------------------------

KerMLParser::Owned_expressionContext::Owned_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Conditional_expressionContext* KerMLParser::Owned_expressionContext::conditional_expression() {
  return getRuleContext<KerMLParser::Conditional_expressionContext>(0);
}

KerMLParser::Conditional_binary_operator_expressionContext* KerMLParser::Owned_expressionContext::conditional_binary_operator_expression() {
  return getRuleContext<KerMLParser::Conditional_binary_operator_expressionContext>(0);
}

KerMLParser::Binary_operator_expressionContext* KerMLParser::Owned_expressionContext::binary_operator_expression() {
  return getRuleContext<KerMLParser::Binary_operator_expressionContext>(0);
}

KerMLParser::Unary_operator_expressionContext* KerMLParser::Owned_expressionContext::unary_operator_expression() {
  return getRuleContext<KerMLParser::Unary_operator_expressionContext>(0);
}

KerMLParser::Classification_expressionContext* KerMLParser::Owned_expressionContext::classification_expression() {
  return getRuleContext<KerMLParser::Classification_expressionContext>(0);
}

KerMLParser::Metaclassification_expressionContext* KerMLParser::Owned_expressionContext::metaclassification_expression() {
  return getRuleContext<KerMLParser::Metaclassification_expressionContext>(0);
}

KerMLParser::Extend_expressionContext* KerMLParser::Owned_expressionContext::extend_expression() {
  return getRuleContext<KerMLParser::Extend_expressionContext>(0);
}

KerMLParser::Primary_expressionContext* KerMLParser::Owned_expressionContext::primary_expression() {
  return getRuleContext<KerMLParser::Primary_expressionContext>(0);
}


size_t KerMLParser::Owned_expressionContext::getRuleIndex() const {
  return KerMLParser::RuleOwned_expression;
}

void KerMLParser::Owned_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOwned_expression(this);
}

void KerMLParser::Owned_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOwned_expression(this);
}

KerMLParser::Owned_expressionContext* KerMLParser::owned_expression() {
  Owned_expressionContext *_localctx = _tracker.createInstance<Owned_expressionContext>(_ctx, getState());
  enterRule(_localctx, 264, KerMLParser::RuleOwned_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1501);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 156, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1493);
      conditional_expression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1494);
      conditional_binary_operator_expression();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1495);
      binary_operator_expression();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1496);
      unary_operator_expression();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1497);
      classification_expression();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1498);
      metaclassification_expression();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1499);
      extend_expression();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1500);
      primary_expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Conditional_expressionContext ------------------------------------------------------------------

KerMLParser::Conditional_expressionContext::Conditional_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Conditional_expressionContext::KEYWORD_IF() {
  return getToken(KerMLParser::KEYWORD_IF, 0);
}

tree::TerminalNode* KerMLParser::Conditional_expressionContext::SYMBOL_QUESTION() {
  return getToken(KerMLParser::SYMBOL_QUESTION, 0);
}

std::vector<KerMLParser::Argument_expression_memberContext *> KerMLParser::Conditional_expressionContext::argument_expression_member() {
  return getRuleContexts<KerMLParser::Argument_expression_memberContext>();
}

KerMLParser::Argument_expression_memberContext* KerMLParser::Conditional_expressionContext::argument_expression_member(size_t i) {
  return getRuleContext<KerMLParser::Argument_expression_memberContext>(i);
}

tree::TerminalNode* KerMLParser::Conditional_expressionContext::KEYWORD_ELSE() {
  return getToken(KerMLParser::KEYWORD_ELSE, 0);
}


size_t KerMLParser::Conditional_expressionContext::getRuleIndex() const {
  return KerMLParser::RuleConditional_expression;
}

void KerMLParser::Conditional_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConditional_expression(this);
}

void KerMLParser::Conditional_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConditional_expression(this);
}

KerMLParser::Conditional_expressionContext* KerMLParser::conditional_expression() {
  Conditional_expressionContext *_localctx = _tracker.createInstance<Conditional_expressionContext>(_ctx, getState());
  enterRule(_localctx, 266, KerMLParser::RuleConditional_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1503);
    match(KerMLParser::KEYWORD_IF);
    setState(1504);
    match(KerMLParser::SYMBOL_QUESTION);
    setState(1505);
    argument_expression_member();
    setState(1506);
    match(KerMLParser::KEYWORD_ELSE);
    setState(1507);
    argument_expression_member();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Conditional_binary_operator_expressionContext ------------------------------------------------------------------

KerMLParser::Conditional_binary_operator_expressionContext::Conditional_binary_operator_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Conditional_binary_operatorContext* KerMLParser::Conditional_binary_operator_expressionContext::conditional_binary_operator() {
  return getRuleContext<KerMLParser::Conditional_binary_operatorContext>(0);
}

KerMLParser::Argument_expression_memberContext* KerMLParser::Conditional_binary_operator_expressionContext::argument_expression_member() {
  return getRuleContext<KerMLParser::Argument_expression_memberContext>(0);
}


size_t KerMLParser::Conditional_binary_operator_expressionContext::getRuleIndex() const {
  return KerMLParser::RuleConditional_binary_operator_expression;
}

void KerMLParser::Conditional_binary_operator_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConditional_binary_operator_expression(this);
}

void KerMLParser::Conditional_binary_operator_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConditional_binary_operator_expression(this);
}

KerMLParser::Conditional_binary_operator_expressionContext* KerMLParser::conditional_binary_operator_expression() {
  Conditional_binary_operator_expressionContext *_localctx = _tracker.createInstance<Conditional_binary_operator_expressionContext>(_ctx, getState());
  enterRule(_localctx, 268, KerMLParser::RuleConditional_binary_operator_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1509);
    conditional_binary_operator();
    setState(1510);
    argument_expression_member();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Conditional_binary_operatorContext ------------------------------------------------------------------

KerMLParser::Conditional_binary_operatorContext::Conditional_binary_operatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Conditional_binary_operatorContext::SYMBOL_DQUESTION() {
  return getToken(KerMLParser::SYMBOL_DQUESTION, 0);
}

tree::TerminalNode* KerMLParser::Conditional_binary_operatorContext::KEYWORD_OR() {
  return getToken(KerMLParser::KEYWORD_OR, 0);
}

tree::TerminalNode* KerMLParser::Conditional_binary_operatorContext::KEYWORD_AND() {
  return getToken(KerMLParser::KEYWORD_AND, 0);
}

tree::TerminalNode* KerMLParser::Conditional_binary_operatorContext::KEYWORD_IMPLIES() {
  return getToken(KerMLParser::KEYWORD_IMPLIES, 0);
}


size_t KerMLParser::Conditional_binary_operatorContext::getRuleIndex() const {
  return KerMLParser::RuleConditional_binary_operator;
}

void KerMLParser::Conditional_binary_operatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConditional_binary_operator(this);
}

void KerMLParser::Conditional_binary_operatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConditional_binary_operator(this);
}

KerMLParser::Conditional_binary_operatorContext* KerMLParser::conditional_binary_operator() {
  Conditional_binary_operatorContext *_localctx = _tracker.createInstance<Conditional_binary_operatorContext>(_ctx, getState());
  enterRule(_localctx, 270, KerMLParser::RuleConditional_binary_operator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1512);
    _la = _input->LA(1);
    if (!(((((_la - 15) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 15)) & 576461851815051265) != 0) || _la == KerMLParser::SYMBOL_DQUESTION)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Binary_operator_expressionContext ------------------------------------------------------------------

KerMLParser::Binary_operator_expressionContext::Binary_operator_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Binary_operatorContext* KerMLParser::Binary_operator_expressionContext::binary_operator() {
  return getRuleContext<KerMLParser::Binary_operatorContext>(0);
}

KerMLParser::Owned_expressionsContext* KerMLParser::Binary_operator_expressionContext::owned_expressions() {
  return getRuleContext<KerMLParser::Owned_expressionsContext>(0);
}


size_t KerMLParser::Binary_operator_expressionContext::getRuleIndex() const {
  return KerMLParser::RuleBinary_operator_expression;
}

void KerMLParser::Binary_operator_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBinary_operator_expression(this);
}

void KerMLParser::Binary_operator_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBinary_operator_expression(this);
}

KerMLParser::Binary_operator_expressionContext* KerMLParser::binary_operator_expression() {
  Binary_operator_expressionContext *_localctx = _tracker.createInstance<Binary_operator_expressionContext>(_ctx, getState());
  enterRule(_localctx, 272, KerMLParser::RuleBinary_operator_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1514);
    binary_operator();
    setState(1515);
    owned_expressions();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Binary_operatorContext ------------------------------------------------------------------

KerMLParser::Binary_operatorContext::Binary_operatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Binary_operatorContext::SYMBOL_VERTICAL_LINE() {
  return getToken(KerMLParser::SYMBOL_VERTICAL_LINE, 0);
}

tree::TerminalNode* KerMLParser::Binary_operatorContext::SYMBOL_AND() {
  return getToken(KerMLParser::SYMBOL_AND, 0);
}

tree::TerminalNode* KerMLParser::Binary_operatorContext::KEYWORD_XOR() {
  return getToken(KerMLParser::KEYWORD_XOR, 0);
}

tree::TerminalNode* KerMLParser::Binary_operatorContext::SYMBOL_DDOT() {
  return getToken(KerMLParser::SYMBOL_DDOT, 0);
}

tree::TerminalNode* KerMLParser::Binary_operatorContext::SYMBOL_EQUALS() {
  return getToken(KerMLParser::SYMBOL_EQUALS, 0);
}

tree::TerminalNode* KerMLParser::Binary_operatorContext::SYMBOL_NOT_EQUALS() {
  return getToken(KerMLParser::SYMBOL_NOT_EQUALS, 0);
}

tree::TerminalNode* KerMLParser::Binary_operatorContext::SYMBOL_IFF_EQUALS() {
  return getToken(KerMLParser::SYMBOL_IFF_EQUALS, 0);
}

tree::TerminalNode* KerMLParser::Binary_operatorContext::SYMBOL_IFF_NOT_EQUALS() {
  return getToken(KerMLParser::SYMBOL_IFF_NOT_EQUALS, 0);
}

tree::TerminalNode* KerMLParser::Binary_operatorContext::SYMBOL_GREATER() {
  return getToken(KerMLParser::SYMBOL_GREATER, 0);
}

tree::TerminalNode* KerMLParser::Binary_operatorContext::SYMBOL_SMALLER() {
  return getToken(KerMLParser::SYMBOL_SMALLER, 0);
}

tree::TerminalNode* KerMLParser::Binary_operatorContext::SYMBOL_GREATER_EQUALS() {
  return getToken(KerMLParser::SYMBOL_GREATER_EQUALS, 0);
}

tree::TerminalNode* KerMLParser::Binary_operatorContext::SYMBOL_SMALLER_EQUAL() {
  return getToken(KerMLParser::SYMBOL_SMALLER_EQUAL, 0);
}

tree::TerminalNode* KerMLParser::Binary_operatorContext::SYMBOL_PLUS() {
  return getToken(KerMLParser::SYMBOL_PLUS, 0);
}

tree::TerminalNode* KerMLParser::Binary_operatorContext::SYMBOL_MINUS() {
  return getToken(KerMLParser::SYMBOL_MINUS, 0);
}

tree::TerminalNode* KerMLParser::Binary_operatorContext::SYMBOL_STAR() {
  return getToken(KerMLParser::SYMBOL_STAR, 0);
}

tree::TerminalNode* KerMLParser::Binary_operatorContext::SYMBOL_SLASH() {
  return getToken(KerMLParser::SYMBOL_SLASH, 0);
}

tree::TerminalNode* KerMLParser::Binary_operatorContext::SYMBOL_MOD() {
  return getToken(KerMLParser::SYMBOL_MOD, 0);
}

tree::TerminalNode* KerMLParser::Binary_operatorContext::SYMBOL_UPPER() {
  return getToken(KerMLParser::SYMBOL_UPPER, 0);
}

tree::TerminalNode* KerMLParser::Binary_operatorContext::SYMBOL_DOUBLE_STAR() {
  return getToken(KerMLParser::SYMBOL_DOUBLE_STAR, 0);
}


size_t KerMLParser::Binary_operatorContext::getRuleIndex() const {
  return KerMLParser::RuleBinary_operator;
}

void KerMLParser::Binary_operatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBinary_operator(this);
}

void KerMLParser::Binary_operatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBinary_operator(this);
}

KerMLParser::Binary_operatorContext* KerMLParser::binary_operator() {
  Binary_operatorContext *_localctx = _tracker.createInstance<Binary_operatorContext>(_ctx, getState());
  enterRule(_localctx, 274, KerMLParser::RuleBinary_operator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1517);
    _la = _input->LA(1);
    if (!(((((_la - 105) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 105)) & 69518307099137) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Unary_operator_expressionContext ------------------------------------------------------------------

KerMLParser::Unary_operator_expressionContext::Unary_operator_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Unary_operatorContext* KerMLParser::Unary_operator_expressionContext::unary_operator() {
  return getRuleContext<KerMLParser::Unary_operatorContext>(0);
}

KerMLParser::Owned_expressionsContext* KerMLParser::Unary_operator_expressionContext::owned_expressions() {
  return getRuleContext<KerMLParser::Owned_expressionsContext>(0);
}


size_t KerMLParser::Unary_operator_expressionContext::getRuleIndex() const {
  return KerMLParser::RuleUnary_operator_expression;
}

void KerMLParser::Unary_operator_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnary_operator_expression(this);
}

void KerMLParser::Unary_operator_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnary_operator_expression(this);
}

KerMLParser::Unary_operator_expressionContext* KerMLParser::unary_operator_expression() {
  Unary_operator_expressionContext *_localctx = _tracker.createInstance<Unary_operator_expressionContext>(_ctx, getState());
  enterRule(_localctx, 276, KerMLParser::RuleUnary_operator_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1519);
    unary_operator();
    setState(1520);
    owned_expressions();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Unary_operatorContext ------------------------------------------------------------------

KerMLParser::Unary_operatorContext::Unary_operatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Unary_operatorContext::SYMBOL_PLUS() {
  return getToken(KerMLParser::SYMBOL_PLUS, 0);
}

tree::TerminalNode* KerMLParser::Unary_operatorContext::SYMBOL_MINUS() {
  return getToken(KerMLParser::SYMBOL_MINUS, 0);
}

tree::TerminalNode* KerMLParser::Unary_operatorContext::SYMBOL_CONJUNGATES() {
  return getToken(KerMLParser::SYMBOL_CONJUNGATES, 0);
}

tree::TerminalNode* KerMLParser::Unary_operatorContext::KEYWORD_NOT() {
  return getToken(KerMLParser::KEYWORD_NOT, 0);
}


size_t KerMLParser::Unary_operatorContext::getRuleIndex() const {
  return KerMLParser::RuleUnary_operator;
}

void KerMLParser::Unary_operatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnary_operator(this);
}

void KerMLParser::Unary_operatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnary_operator(this);
}

KerMLParser::Unary_operatorContext* KerMLParser::unary_operator() {
  Unary_operatorContext *_localctx = _tracker.createInstance<Unary_operatorContext>(_ctx, getState());
  enterRule(_localctx, 278, KerMLParser::RuleUnary_operator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1522);
    _la = _input->LA(1);
    if (!(_la == KerMLParser::KEYWORD_NOT

    || _la == KerMLParser::SYMBOL_CONJUNGATES || _la == KerMLParser::SYMBOL_PLUS

    || _la == KerMLParser::SYMBOL_MINUS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Classification_expressionContext ------------------------------------------------------------------

KerMLParser::Classification_expressionContext::Classification_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Classification_test_operatorContext* KerMLParser::Classification_expressionContext::classification_test_operator() {
  return getRuleContext<KerMLParser::Classification_test_operatorContext>(0);
}

KerMLParser::Type_reference_memberContext* KerMLParser::Classification_expressionContext::type_reference_member() {
  return getRuleContext<KerMLParser::Type_reference_memberContext>(0);
}

KerMLParser::Cast_operatorContext* KerMLParser::Classification_expressionContext::cast_operator() {
  return getRuleContext<KerMLParser::Cast_operatorContext>(0);
}

KerMLParser::Type_result_memberContext* KerMLParser::Classification_expressionContext::type_result_member() {
  return getRuleContext<KerMLParser::Type_result_memberContext>(0);
}


size_t KerMLParser::Classification_expressionContext::getRuleIndex() const {
  return KerMLParser::RuleClassification_expression;
}

void KerMLParser::Classification_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassification_expression(this);
}

void KerMLParser::Classification_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassification_expression(this);
}

KerMLParser::Classification_expressionContext* KerMLParser::classification_expression() {
  Classification_expressionContext *_localctx = _tracker.createInstance<Classification_expressionContext>(_ctx, getState());
  enterRule(_localctx, 280, KerMLParser::RuleClassification_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1530);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case KerMLParser::KEYWORD_HASTYPE:
      case KerMLParser::KEYWORD_ISTYPE:
      case KerMLParser::SYMBOL_AT: {
        setState(1524);
        classification_test_operator();
        setState(1525);
        type_reference_member();
        break;
      }

      case KerMLParser::KEYWORD_AS: {
        setState(1527);
        cast_operator();
        setState(1528);
        type_result_member();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassificationContext ------------------------------------------------------------------

KerMLParser::ClassificationContext::ClassificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Classification_test_operatorContext* KerMLParser::ClassificationContext::classification_test_operator() {
  return getRuleContext<KerMLParser::Classification_test_operatorContext>(0);
}

KerMLParser::Type_reference_memberContext* KerMLParser::ClassificationContext::type_reference_member() {
  return getRuleContext<KerMLParser::Type_reference_memberContext>(0);
}

KerMLParser::Cast_operatorContext* KerMLParser::ClassificationContext::cast_operator() {
  return getRuleContext<KerMLParser::Cast_operatorContext>(0);
}

KerMLParser::Type_result_memberContext* KerMLParser::ClassificationContext::type_result_member() {
  return getRuleContext<KerMLParser::Type_result_memberContext>(0);
}


size_t KerMLParser::ClassificationContext::getRuleIndex() const {
  return KerMLParser::RuleClassification;
}

void KerMLParser::ClassificationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassification(this);
}

void KerMLParser::ClassificationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassification(this);
}

KerMLParser::ClassificationContext* KerMLParser::classification() {
  ClassificationContext *_localctx = _tracker.createInstance<ClassificationContext>(_ctx, getState());
  enterRule(_localctx, 282, KerMLParser::RuleClassification);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1538);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case KerMLParser::KEYWORD_HASTYPE:
      case KerMLParser::KEYWORD_ISTYPE:
      case KerMLParser::SYMBOL_AT: {
        enterOuterAlt(_localctx, 1);
        setState(1532);
        classification_test_operator();
        setState(1533);
        type_reference_member();
        break;
      }

      case KerMLParser::KEYWORD_AS: {
        enterOuterAlt(_localctx, 2);
        setState(1535);
        cast_operator();
        setState(1536);
        type_result_member();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Classification_test_operatorContext ------------------------------------------------------------------

KerMLParser::Classification_test_operatorContext::Classification_test_operatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Classification_test_operatorContext::KEYWORD_ISTYPE() {
  return getToken(KerMLParser::KEYWORD_ISTYPE, 0);
}

tree::TerminalNode* KerMLParser::Classification_test_operatorContext::KEYWORD_HASTYPE() {
  return getToken(KerMLParser::KEYWORD_HASTYPE, 0);
}

tree::TerminalNode* KerMLParser::Classification_test_operatorContext::SYMBOL_AT() {
  return getToken(KerMLParser::SYMBOL_AT, 0);
}


size_t KerMLParser::Classification_test_operatorContext::getRuleIndex() const {
  return KerMLParser::RuleClassification_test_operator;
}

void KerMLParser::Classification_test_operatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassification_test_operator(this);
}

void KerMLParser::Classification_test_operatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassification_test_operator(this);
}

KerMLParser::Classification_test_operatorContext* KerMLParser::classification_test_operator() {
  Classification_test_operatorContext *_localctx = _tracker.createInstance<Classification_test_operatorContext>(_ctx, getState());
  enterRule(_localctx, 284, KerMLParser::RuleClassification_test_operator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1540);
    _la = _input->LA(1);
    if (!(_la == KerMLParser::KEYWORD_HASTYPE

    || _la == KerMLParser::KEYWORD_ISTYPE || _la == KerMLParser::SYMBOL_AT)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Cast_operatorContext ------------------------------------------------------------------

KerMLParser::Cast_operatorContext::Cast_operatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Cast_operatorContext::KEYWORD_AS() {
  return getToken(KerMLParser::KEYWORD_AS, 0);
}


size_t KerMLParser::Cast_operatorContext::getRuleIndex() const {
  return KerMLParser::RuleCast_operator;
}

void KerMLParser::Cast_operatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCast_operator(this);
}

void KerMLParser::Cast_operatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCast_operator(this);
}

KerMLParser::Cast_operatorContext* KerMLParser::cast_operator() {
  Cast_operatorContext *_localctx = _tracker.createInstance<Cast_operatorContext>(_ctx, getState());
  enterRule(_localctx, 286, KerMLParser::RuleCast_operator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1542);
    match(KerMLParser::KEYWORD_AS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Metaclassification_expressionContext ------------------------------------------------------------------

KerMLParser::Metaclassification_expressionContext::Metaclassification_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Metadata_argument_memberContext* KerMLParser::Metaclassification_expressionContext::metadata_argument_member() {
  return getRuleContext<KerMLParser::Metadata_argument_memberContext>(0);
}

KerMLParser::Metadataclassification_test_operatorContext* KerMLParser::Metaclassification_expressionContext::metadataclassification_test_operator() {
  return getRuleContext<KerMLParser::Metadataclassification_test_operatorContext>(0);
}

KerMLParser::Type_reference_memberContext* KerMLParser::Metaclassification_expressionContext::type_reference_member() {
  return getRuleContext<KerMLParser::Type_reference_memberContext>(0);
}

KerMLParser::Meta_cast_operatorContext* KerMLParser::Metaclassification_expressionContext::meta_cast_operator() {
  return getRuleContext<KerMLParser::Meta_cast_operatorContext>(0);
}

KerMLParser::Type_result_memberContext* KerMLParser::Metaclassification_expressionContext::type_result_member() {
  return getRuleContext<KerMLParser::Type_result_memberContext>(0);
}


size_t KerMLParser::Metaclassification_expressionContext::getRuleIndex() const {
  return KerMLParser::RuleMetaclassification_expression;
}

void KerMLParser::Metaclassification_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMetaclassification_expression(this);
}

void KerMLParser::Metaclassification_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMetaclassification_expression(this);
}

KerMLParser::Metaclassification_expressionContext* KerMLParser::metaclassification_expression() {
  Metaclassification_expressionContext *_localctx = _tracker.createInstance<Metaclassification_expressionContext>(_ctx, getState());
  enterRule(_localctx, 288, KerMLParser::RuleMetaclassification_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1551);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case KerMLParser::NAME: {
        enterOuterAlt(_localctx, 1);
        setState(1544);
        metadata_argument_member();

        setState(1545);
        metadataclassification_test_operator();
        setState(1546);
        type_reference_member();
        break;
      }

      case KerMLParser::T__1: {
        enterOuterAlt(_localctx, 2);
        setState(1548);
        meta_cast_operator();
        setState(1549);
        type_result_member();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Argument_expression_memberContext ------------------------------------------------------------------

KerMLParser::Argument_expression_memberContext::Argument_expression_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Argument_expressionContext* KerMLParser::Argument_expression_memberContext::argument_expression() {
  return getRuleContext<KerMLParser::Argument_expressionContext>(0);
}


size_t KerMLParser::Argument_expression_memberContext::getRuleIndex() const {
  return KerMLParser::RuleArgument_expression_member;
}

void KerMLParser::Argument_expression_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArgument_expression_member(this);
}

void KerMLParser::Argument_expression_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArgument_expression_member(this);
}

KerMLParser::Argument_expression_memberContext* KerMLParser::argument_expression_member() {
  Argument_expression_memberContext *_localctx = _tracker.createInstance<Argument_expression_memberContext>(_ctx, getState());
  enterRule(_localctx, 290, KerMLParser::RuleArgument_expression_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1553);
    argument_expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Argument_expressionContext ------------------------------------------------------------------

KerMLParser::Argument_expressionContext::Argument_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Argument_expression_valueContext* KerMLParser::Argument_expressionContext::argument_expression_value() {
  return getRuleContext<KerMLParser::Argument_expression_valueContext>(0);
}


size_t KerMLParser::Argument_expressionContext::getRuleIndex() const {
  return KerMLParser::RuleArgument_expression;
}

void KerMLParser::Argument_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArgument_expression(this);
}

void KerMLParser::Argument_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArgument_expression(this);
}

KerMLParser::Argument_expressionContext* KerMLParser::argument_expression() {
  Argument_expressionContext *_localctx = _tracker.createInstance<Argument_expressionContext>(_ctx, getState());
  enterRule(_localctx, 292, KerMLParser::RuleArgument_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1555);
    argument_expression_value();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Argument_expression_valueContext ------------------------------------------------------------------

KerMLParser::Argument_expression_valueContext::Argument_expression_valueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Owned_expression_referenceContext* KerMLParser::Argument_expression_valueContext::owned_expression_reference() {
  return getRuleContext<KerMLParser::Owned_expression_referenceContext>(0);
}


size_t KerMLParser::Argument_expression_valueContext::getRuleIndex() const {
  return KerMLParser::RuleArgument_expression_value;
}

void KerMLParser::Argument_expression_valueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArgument_expression_value(this);
}

void KerMLParser::Argument_expression_valueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArgument_expression_value(this);
}

KerMLParser::Argument_expression_valueContext* KerMLParser::argument_expression_value() {
  Argument_expression_valueContext *_localctx = _tracker.createInstance<Argument_expression_valueContext>(_ctx, getState());
  enterRule(_localctx, 294, KerMLParser::RuleArgument_expression_value);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1557);
    owned_expression_reference();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Metadata_argument_memberContext ------------------------------------------------------------------

KerMLParser::Metadata_argument_memberContext::Metadata_argument_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Metadata_argumentContext* KerMLParser::Metadata_argument_memberContext::metadata_argument() {
  return getRuleContext<KerMLParser::Metadata_argumentContext>(0);
}


size_t KerMLParser::Metadata_argument_memberContext::getRuleIndex() const {
  return KerMLParser::RuleMetadata_argument_member;
}

void KerMLParser::Metadata_argument_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMetadata_argument_member(this);
}

void KerMLParser::Metadata_argument_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMetadata_argument_member(this);
}

KerMLParser::Metadata_argument_memberContext* KerMLParser::metadata_argument_member() {
  Metadata_argument_memberContext *_localctx = _tracker.createInstance<Metadata_argument_memberContext>(_ctx, getState());
  enterRule(_localctx, 296, KerMLParser::RuleMetadata_argument_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1559);
    metadata_argument();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Metadata_argumentContext ------------------------------------------------------------------

KerMLParser::Metadata_argumentContext::Metadata_argumentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Metadata_valueContext* KerMLParser::Metadata_argumentContext::metadata_value() {
  return getRuleContext<KerMLParser::Metadata_valueContext>(0);
}


size_t KerMLParser::Metadata_argumentContext::getRuleIndex() const {
  return KerMLParser::RuleMetadata_argument;
}

void KerMLParser::Metadata_argumentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMetadata_argument(this);
}

void KerMLParser::Metadata_argumentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMetadata_argument(this);
}

KerMLParser::Metadata_argumentContext* KerMLParser::metadata_argument() {
  Metadata_argumentContext *_localctx = _tracker.createInstance<Metadata_argumentContext>(_ctx, getState());
  enterRule(_localctx, 298, KerMLParser::RuleMetadata_argument);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1561);
    metadata_value();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Metadata_valueContext ------------------------------------------------------------------

KerMLParser::Metadata_valueContext::Metadata_valueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Metadata_referenceContext* KerMLParser::Metadata_valueContext::metadata_reference() {
  return getRuleContext<KerMLParser::Metadata_referenceContext>(0);
}


size_t KerMLParser::Metadata_valueContext::getRuleIndex() const {
  return KerMLParser::RuleMetadata_value;
}

void KerMLParser::Metadata_valueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMetadata_value(this);
}

void KerMLParser::Metadata_valueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMetadata_value(this);
}

KerMLParser::Metadata_valueContext* KerMLParser::metadata_value() {
  Metadata_valueContext *_localctx = _tracker.createInstance<Metadata_valueContext>(_ctx, getState());
  enterRule(_localctx, 300, KerMLParser::RuleMetadata_value);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1563);
    metadata_reference();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Metadata_referenceContext ------------------------------------------------------------------

KerMLParser::Metadata_referenceContext::Metadata_referenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Qualified_nameContext* KerMLParser::Metadata_referenceContext::qualified_name() {
  return getRuleContext<KerMLParser::Qualified_nameContext>(0);
}


size_t KerMLParser::Metadata_referenceContext::getRuleIndex() const {
  return KerMLParser::RuleMetadata_reference;
}

void KerMLParser::Metadata_referenceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMetadata_reference(this);
}

void KerMLParser::Metadata_referenceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMetadata_reference(this);
}

KerMLParser::Metadata_referenceContext* KerMLParser::metadata_reference() {
  Metadata_referenceContext *_localctx = _tracker.createInstance<Metadata_referenceContext>(_ctx, getState());
  enterRule(_localctx, 302, KerMLParser::RuleMetadata_reference);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1565);
    qualified_name();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Metadataclassification_test_operatorContext ------------------------------------------------------------------

KerMLParser::Metadataclassification_test_operatorContext::Metadataclassification_test_operatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Metadataclassification_test_operatorContext::SYMBOL_DOT() {
  return getToken(KerMLParser::SYMBOL_DOT, 0);
}


size_t KerMLParser::Metadataclassification_test_operatorContext::getRuleIndex() const {
  return KerMLParser::RuleMetadataclassification_test_operator;
}

void KerMLParser::Metadataclassification_test_operatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMetadataclassification_test_operator(this);
}

void KerMLParser::Metadataclassification_test_operatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMetadataclassification_test_operator(this);
}

KerMLParser::Metadataclassification_test_operatorContext* KerMLParser::metadataclassification_test_operator() {
  Metadataclassification_test_operatorContext *_localctx = _tracker.createInstance<Metadataclassification_test_operatorContext>(_ctx, getState());
  enterRule(_localctx, 304, KerMLParser::RuleMetadataclassification_test_operator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1567);
    match(KerMLParser::SYMBOL_DOT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Meta_cast_operatorContext ------------------------------------------------------------------

KerMLParser::Meta_cast_operatorContext::Meta_cast_operatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t KerMLParser::Meta_cast_operatorContext::getRuleIndex() const {
  return KerMLParser::RuleMeta_cast_operator;
}

void KerMLParser::Meta_cast_operatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMeta_cast_operator(this);
}

void KerMLParser::Meta_cast_operatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMeta_cast_operator(this);
}

KerMLParser::Meta_cast_operatorContext* KerMLParser::meta_cast_operator() {
  Meta_cast_operatorContext *_localctx = _tracker.createInstance<Meta_cast_operatorContext>(_ctx, getState());
  enterRule(_localctx, 306, KerMLParser::RuleMeta_cast_operator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1569);
    match(KerMLParser::T__1);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Extend_expressionContext ------------------------------------------------------------------

KerMLParser::Extend_expressionContext::Extend_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Extend_expressionContext::KEYWORD_ALL() {
  return getToken(KerMLParser::KEYWORD_ALL, 0);
}

KerMLParser::Type_reference_memberContext* KerMLParser::Extend_expressionContext::type_reference_member() {
  return getRuleContext<KerMLParser::Type_reference_memberContext>(0);
}


size_t KerMLParser::Extend_expressionContext::getRuleIndex() const {
  return KerMLParser::RuleExtend_expression;
}

void KerMLParser::Extend_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExtend_expression(this);
}

void KerMLParser::Extend_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExtend_expression(this);
}

KerMLParser::Extend_expressionContext* KerMLParser::extend_expression() {
  Extend_expressionContext *_localctx = _tracker.createInstance<Extend_expressionContext>(_ctx, getState());
  enterRule(_localctx, 308, KerMLParser::RuleExtend_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1571);
    match(KerMLParser::KEYWORD_ALL);
    setState(1572);
    type_reference_member();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_reference_memberContext ------------------------------------------------------------------

KerMLParser::Type_reference_memberContext::Type_reference_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Type_referenceContext* KerMLParser::Type_reference_memberContext::type_reference() {
  return getRuleContext<KerMLParser::Type_referenceContext>(0);
}


size_t KerMLParser::Type_reference_memberContext::getRuleIndex() const {
  return KerMLParser::RuleType_reference_member;
}

void KerMLParser::Type_reference_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_reference_member(this);
}

void KerMLParser::Type_reference_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_reference_member(this);
}

KerMLParser::Type_reference_memberContext* KerMLParser::type_reference_member() {
  Type_reference_memberContext *_localctx = _tracker.createInstance<Type_reference_memberContext>(_ctx, getState());
  enterRule(_localctx, 310, KerMLParser::RuleType_reference_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1574);
    type_reference();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_result_memberContext ------------------------------------------------------------------

KerMLParser::Type_result_memberContext::Type_result_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Type_referenceContext* KerMLParser::Type_result_memberContext::type_reference() {
  return getRuleContext<KerMLParser::Type_referenceContext>(0);
}


size_t KerMLParser::Type_result_memberContext::getRuleIndex() const {
  return KerMLParser::RuleType_result_member;
}

void KerMLParser::Type_result_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_result_member(this);
}

void KerMLParser::Type_result_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_result_member(this);
}

KerMLParser::Type_result_memberContext* KerMLParser::type_result_member() {
  Type_result_memberContext *_localctx = _tracker.createInstance<Type_result_memberContext>(_ctx, getState());
  enterRule(_localctx, 312, KerMLParser::RuleType_result_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1576);
    type_reference();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_referenceContext ------------------------------------------------------------------

KerMLParser::Type_referenceContext::Type_referenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Reference_typingContext* KerMLParser::Type_referenceContext::reference_typing() {
  return getRuleContext<KerMLParser::Reference_typingContext>(0);
}


size_t KerMLParser::Type_referenceContext::getRuleIndex() const {
  return KerMLParser::RuleType_reference;
}

void KerMLParser::Type_referenceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_reference(this);
}

void KerMLParser::Type_referenceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_reference(this);
}

KerMLParser::Type_referenceContext* KerMLParser::type_reference() {
  Type_referenceContext *_localctx = _tracker.createInstance<Type_referenceContext>(_ctx, getState());
  enterRule(_localctx, 314, KerMLParser::RuleType_reference);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1578);
    reference_typing();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Reference_typingContext ------------------------------------------------------------------

KerMLParser::Reference_typingContext::Reference_typingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Qualified_nameContext* KerMLParser::Reference_typingContext::qualified_name() {
  return getRuleContext<KerMLParser::Qualified_nameContext>(0);
}


size_t KerMLParser::Reference_typingContext::getRuleIndex() const {
  return KerMLParser::RuleReference_typing;
}

void KerMLParser::Reference_typingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReference_typing(this);
}

void KerMLParser::Reference_typingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReference_typing(this);
}

KerMLParser::Reference_typingContext* KerMLParser::reference_typing() {
  Reference_typingContext *_localctx = _tracker.createInstance<Reference_typingContext>(_ctx, getState());
  enterRule(_localctx, 316, KerMLParser::RuleReference_typing);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1580);
    qualified_name();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Primary_expressionsContext ------------------------------------------------------------------

KerMLParser::Primary_expressionsContext::Primary_expressionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<KerMLParser::Primary_expressionContext *> KerMLParser::Primary_expressionsContext::primary_expression() {
  return getRuleContexts<KerMLParser::Primary_expressionContext>();
}

KerMLParser::Primary_expressionContext* KerMLParser::Primary_expressionsContext::primary_expression(size_t i) {
  return getRuleContext<KerMLParser::Primary_expressionContext>(i);
}


size_t KerMLParser::Primary_expressionsContext::getRuleIndex() const {
  return KerMLParser::RulePrimary_expressions;
}

void KerMLParser::Primary_expressionsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimary_expressions(this);
}

void KerMLParser::Primary_expressionsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimary_expressions(this);
}

KerMLParser::Primary_expressionsContext* KerMLParser::primary_expressions() {
  Primary_expressionsContext *_localctx = _tracker.createInstance<Primary_expressionsContext>(_ctx, getState());
  enterRule(_localctx, 318, KerMLParser::RulePrimary_expressions);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1583); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1582);
      primary_expression();
      setState(1585); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (((((_la - 42) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 42)) & 288230377225453569) != 0) || ((((_la - 114) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 114)) & 63221968963713) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Primary_expressionContext ------------------------------------------------------------------

KerMLParser::Primary_expressionContext::Primary_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Feature_chain_expressionContext* KerMLParser::Primary_expressionContext::feature_chain_expression() {
  return getRuleContext<KerMLParser::Feature_chain_expressionContext>(0);
}

KerMLParser::Non_feature_chain_primary_expressionContext* KerMLParser::Primary_expressionContext::non_feature_chain_primary_expression() {
  return getRuleContext<KerMLParser::Non_feature_chain_primary_expressionContext>(0);
}


size_t KerMLParser::Primary_expressionContext::getRuleIndex() const {
  return KerMLParser::RulePrimary_expression;
}

void KerMLParser::Primary_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimary_expression(this);
}

void KerMLParser::Primary_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimary_expression(this);
}

KerMLParser::Primary_expressionContext* KerMLParser::primary_expression() {
  Primary_expressionContext *_localctx = _tracker.createInstance<Primary_expressionContext>(_ctx, getState());
  enterRule(_localctx, 320, KerMLParser::RulePrimary_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1589);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 161, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1587);
      feature_chain_expression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1588);
      non_feature_chain_primary_expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Non_feature_chain_primary_expressionContext ------------------------------------------------------------------

KerMLParser::Non_feature_chain_primary_expressionContext::Non_feature_chain_primary_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Bracket_expressionContext* KerMLParser::Non_feature_chain_primary_expressionContext::bracket_expression() {
  return getRuleContext<KerMLParser::Bracket_expressionContext>(0);
}

KerMLParser::Index_expressionContext* KerMLParser::Non_feature_chain_primary_expressionContext::index_expression() {
  return getRuleContext<KerMLParser::Index_expressionContext>(0);
}

KerMLParser::Sequence_expressionContext* KerMLParser::Non_feature_chain_primary_expressionContext::sequence_expression() {
  return getRuleContext<KerMLParser::Sequence_expressionContext>(0);
}

KerMLParser::Select_expressionContext* KerMLParser::Non_feature_chain_primary_expressionContext::select_expression() {
  return getRuleContext<KerMLParser::Select_expressionContext>(0);
}

KerMLParser::Collect_expressionContext* KerMLParser::Non_feature_chain_primary_expressionContext::collect_expression() {
  return getRuleContext<KerMLParser::Collect_expressionContext>(0);
}

KerMLParser::Function_operation_expressionContext* KerMLParser::Non_feature_chain_primary_expressionContext::function_operation_expression() {
  return getRuleContext<KerMLParser::Function_operation_expressionContext>(0);
}

KerMLParser::Base_expressionContext* KerMLParser::Non_feature_chain_primary_expressionContext::base_expression() {
  return getRuleContext<KerMLParser::Base_expressionContext>(0);
}


size_t KerMLParser::Non_feature_chain_primary_expressionContext::getRuleIndex() const {
  return KerMLParser::RuleNon_feature_chain_primary_expression;
}

void KerMLParser::Non_feature_chain_primary_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNon_feature_chain_primary_expression(this);
}

void KerMLParser::Non_feature_chain_primary_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNon_feature_chain_primary_expression(this);
}

KerMLParser::Non_feature_chain_primary_expressionContext* KerMLParser::non_feature_chain_primary_expression() {
  Non_feature_chain_primary_expressionContext *_localctx = _tracker.createInstance<Non_feature_chain_primary_expressionContext>(_ctx, getState());
  enterRule(_localctx, 322, KerMLParser::RuleNon_feature_chain_primary_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1598);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 162, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1591);
      bracket_expression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1592);
      index_expression();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1593);
      sequence_expression();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1594);
      select_expression();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1595);
      collect_expression();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1596);
      function_operation_expression();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1597);
      base_expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Non_feature_chain_primary_argument_valueContext ------------------------------------------------------------------

KerMLParser::Non_feature_chain_primary_argument_valueContext::Non_feature_chain_primary_argument_valueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Non_feature_chain_primary_expressionContext* KerMLParser::Non_feature_chain_primary_argument_valueContext::non_feature_chain_primary_expression() {
  return getRuleContext<KerMLParser::Non_feature_chain_primary_expressionContext>(0);
}


size_t KerMLParser::Non_feature_chain_primary_argument_valueContext::getRuleIndex() const {
  return KerMLParser::RuleNon_feature_chain_primary_argument_value;
}

void KerMLParser::Non_feature_chain_primary_argument_valueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNon_feature_chain_primary_argument_value(this);
}

void KerMLParser::Non_feature_chain_primary_argument_valueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNon_feature_chain_primary_argument_value(this);
}

KerMLParser::Non_feature_chain_primary_argument_valueContext* KerMLParser::non_feature_chain_primary_argument_value() {
  Non_feature_chain_primary_argument_valueContext *_localctx = _tracker.createInstance<Non_feature_chain_primary_argument_valueContext>(_ctx, getState());
  enterRule(_localctx, 324, KerMLParser::RuleNon_feature_chain_primary_argument_value);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1600);
    non_feature_chain_primary_expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Bracket_expressionContext ------------------------------------------------------------------

KerMLParser::Bracket_expressionContext::Bracket_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Bracket_expressionContext::SYMBOL_SQUARE_BRACKET_OPEN() {
  return getToken(KerMLParser::SYMBOL_SQUARE_BRACKET_OPEN, 0);
}

KerMLParser::Sequence_expression_list_memberContext* KerMLParser::Bracket_expressionContext::sequence_expression_list_member() {
  return getRuleContext<KerMLParser::Sequence_expression_list_memberContext>(0);
}

tree::TerminalNode* KerMLParser::Bracket_expressionContext::SYMBOL_SQUARE_BRACKET_CLOSE() {
  return getToken(KerMLParser::SYMBOL_SQUARE_BRACKET_CLOSE, 0);
}


size_t KerMLParser::Bracket_expressionContext::getRuleIndex() const {
  return KerMLParser::RuleBracket_expression;
}

void KerMLParser::Bracket_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBracket_expression(this);
}

void KerMLParser::Bracket_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBracket_expression(this);
}

KerMLParser::Bracket_expressionContext* KerMLParser::bracket_expression() {
  Bracket_expressionContext *_localctx = _tracker.createInstance<Bracket_expressionContext>(_ctx, getState());
  enterRule(_localctx, 326, KerMLParser::RuleBracket_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1602);
    match(KerMLParser::SYMBOL_SQUARE_BRACKET_OPEN);
    setState(1603);
    sequence_expression_list_member();
    setState(1604);
    match(KerMLParser::SYMBOL_SQUARE_BRACKET_CLOSE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Index_expressionContext ------------------------------------------------------------------

KerMLParser::Index_expressionContext::Index_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Index_expressionContext::SYMBOL_HASHTAG() {
  return getToken(KerMLParser::SYMBOL_HASHTAG, 0);
}

tree::TerminalNode* KerMLParser::Index_expressionContext::SYMBOL_ROUND_BRACKET_OPEN() {
  return getToken(KerMLParser::SYMBOL_ROUND_BRACKET_OPEN, 0);
}

KerMLParser::Sequence_expression_list_memberContext* KerMLParser::Index_expressionContext::sequence_expression_list_member() {
  return getRuleContext<KerMLParser::Sequence_expression_list_memberContext>(0);
}

tree::TerminalNode* KerMLParser::Index_expressionContext::SYMBOL_ROUND_BRACKET_CLOSE() {
  return getToken(KerMLParser::SYMBOL_ROUND_BRACKET_CLOSE, 0);
}


size_t KerMLParser::Index_expressionContext::getRuleIndex() const {
  return KerMLParser::RuleIndex_expression;
}

void KerMLParser::Index_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIndex_expression(this);
}

void KerMLParser::Index_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIndex_expression(this);
}

KerMLParser::Index_expressionContext* KerMLParser::index_expression() {
  Index_expressionContext *_localctx = _tracker.createInstance<Index_expressionContext>(_ctx, getState());
  enterRule(_localctx, 328, KerMLParser::RuleIndex_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1606);
    match(KerMLParser::SYMBOL_HASHTAG);
    setState(1607);
    match(KerMLParser::SYMBOL_ROUND_BRACKET_OPEN);
    setState(1608);
    sequence_expression_list_member();
    setState(1609);
    match(KerMLParser::SYMBOL_ROUND_BRACKET_CLOSE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Sequence_expressionContext ------------------------------------------------------------------

KerMLParser::Sequence_expressionContext::Sequence_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Sequence_expressionContext::SYMBOL_ROUND_BRACKET_OPEN() {
  return getToken(KerMLParser::SYMBOL_ROUND_BRACKET_OPEN, 0);
}

KerMLParser::Sequence_expression_listContext* KerMLParser::Sequence_expressionContext::sequence_expression_list() {
  return getRuleContext<KerMLParser::Sequence_expression_listContext>(0);
}

tree::TerminalNode* KerMLParser::Sequence_expressionContext::SYMBOL_ROUND_BRACKET_CLOSE() {
  return getToken(KerMLParser::SYMBOL_ROUND_BRACKET_CLOSE, 0);
}


size_t KerMLParser::Sequence_expressionContext::getRuleIndex() const {
  return KerMLParser::RuleSequence_expression;
}

void KerMLParser::Sequence_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSequence_expression(this);
}

void KerMLParser::Sequence_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSequence_expression(this);
}

KerMLParser::Sequence_expressionContext* KerMLParser::sequence_expression() {
  Sequence_expressionContext *_localctx = _tracker.createInstance<Sequence_expressionContext>(_ctx, getState());
  enterRule(_localctx, 330, KerMLParser::RuleSequence_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1611);
    match(KerMLParser::SYMBOL_ROUND_BRACKET_OPEN);
    setState(1612);
    sequence_expression_list();
    setState(1613);
    match(KerMLParser::SYMBOL_ROUND_BRACKET_CLOSE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Sequence_expression_listContext ------------------------------------------------------------------

KerMLParser::Sequence_expression_listContext::Sequence_expression_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Owned_expressionsContext* KerMLParser::Sequence_expression_listContext::owned_expressions() {
  return getRuleContext<KerMLParser::Owned_expressionsContext>(0);
}

tree::TerminalNode* KerMLParser::Sequence_expression_listContext::SYMBOL_COMMA() {
  return getToken(KerMLParser::SYMBOL_COMMA, 0);
}

KerMLParser::Sequence_operator_expressionContext* KerMLParser::Sequence_expression_listContext::sequence_operator_expression() {
  return getRuleContext<KerMLParser::Sequence_operator_expressionContext>(0);
}


size_t KerMLParser::Sequence_expression_listContext::getRuleIndex() const {
  return KerMLParser::RuleSequence_expression_list;
}

void KerMLParser::Sequence_expression_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSequence_expression_list(this);
}

void KerMLParser::Sequence_expression_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSequence_expression_list(this);
}

KerMLParser::Sequence_expression_listContext* KerMLParser::sequence_expression_list() {
  Sequence_expression_listContext *_localctx = _tracker.createInstance<Sequence_expression_listContext>(_ctx, getState());
  enterRule(_localctx, 332, KerMLParser::RuleSequence_expression_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1620);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 164, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1615);
      owned_expressions();
      setState(1617);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == KerMLParser::SYMBOL_COMMA) {
        setState(1616);
        match(KerMLParser::SYMBOL_COMMA);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1619);
      sequence_operator_expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Sequence_operator_expressionContext ------------------------------------------------------------------

KerMLParser::Sequence_operator_expressionContext::Sequence_operator_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Owned_expression_memberContext* KerMLParser::Sequence_operator_expressionContext::owned_expression_member() {
  return getRuleContext<KerMLParser::Owned_expression_memberContext>(0);
}

tree::TerminalNode* KerMLParser::Sequence_operator_expressionContext::SYMBOL_COMMA() {
  return getToken(KerMLParser::SYMBOL_COMMA, 0);
}

KerMLParser::Sequence_expression_list_memberContext* KerMLParser::Sequence_operator_expressionContext::sequence_expression_list_member() {
  return getRuleContext<KerMLParser::Sequence_expression_list_memberContext>(0);
}


size_t KerMLParser::Sequence_operator_expressionContext::getRuleIndex() const {
  return KerMLParser::RuleSequence_operator_expression;
}

void KerMLParser::Sequence_operator_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSequence_operator_expression(this);
}

void KerMLParser::Sequence_operator_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSequence_operator_expression(this);
}

KerMLParser::Sequence_operator_expressionContext* KerMLParser::sequence_operator_expression() {
  Sequence_operator_expressionContext *_localctx = _tracker.createInstance<Sequence_operator_expressionContext>(_ctx, getState());
  enterRule(_localctx, 334, KerMLParser::RuleSequence_operator_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1622);
    owned_expression_member();
    setState(1623);
    match(KerMLParser::SYMBOL_COMMA);
    setState(1624);
    sequence_expression_list_member();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Sequence_expression_list_memberContext ------------------------------------------------------------------

KerMLParser::Sequence_expression_list_memberContext::Sequence_expression_list_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Sequence_expression_listContext* KerMLParser::Sequence_expression_list_memberContext::sequence_expression_list() {
  return getRuleContext<KerMLParser::Sequence_expression_listContext>(0);
}


size_t KerMLParser::Sequence_expression_list_memberContext::getRuleIndex() const {
  return KerMLParser::RuleSequence_expression_list_member;
}

void KerMLParser::Sequence_expression_list_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSequence_expression_list_member(this);
}

void KerMLParser::Sequence_expression_list_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSequence_expression_list_member(this);
}

KerMLParser::Sequence_expression_list_memberContext* KerMLParser::sequence_expression_list_member() {
  Sequence_expression_list_memberContext *_localctx = _tracker.createInstance<Sequence_expression_list_memberContext>(_ctx, getState());
  enterRule(_localctx, 336, KerMLParser::RuleSequence_expression_list_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1626);
    sequence_expression_list();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Feature_chain_expressionContext ------------------------------------------------------------------

KerMLParser::Feature_chain_expressionContext::Feature_chain_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Feature_chain_expressionContext::SYMBOL_DOT() {
  return getToken(KerMLParser::SYMBOL_DOT, 0);
}

KerMLParser::Feature_chain_memberContext* KerMLParser::Feature_chain_expressionContext::feature_chain_member() {
  return getRuleContext<KerMLParser::Feature_chain_memberContext>(0);
}


size_t KerMLParser::Feature_chain_expressionContext::getRuleIndex() const {
  return KerMLParser::RuleFeature_chain_expression;
}

void KerMLParser::Feature_chain_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFeature_chain_expression(this);
}

void KerMLParser::Feature_chain_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFeature_chain_expression(this);
}

KerMLParser::Feature_chain_expressionContext* KerMLParser::feature_chain_expression() {
  Feature_chain_expressionContext *_localctx = _tracker.createInstance<Feature_chain_expressionContext>(_ctx, getState());
  enterRule(_localctx, 338, KerMLParser::RuleFeature_chain_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1628);
    match(KerMLParser::SYMBOL_DOT);
    setState(1629);
    feature_chain_member();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Collect_expressionContext ------------------------------------------------------------------

KerMLParser::Collect_expressionContext::Collect_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Collect_expressionContext::SYMBOL_DOT() {
  return getToken(KerMLParser::SYMBOL_DOT, 0);
}

KerMLParser::Body_expression_memberContext* KerMLParser::Collect_expressionContext::body_expression_member() {
  return getRuleContext<KerMLParser::Body_expression_memberContext>(0);
}


size_t KerMLParser::Collect_expressionContext::getRuleIndex() const {
  return KerMLParser::RuleCollect_expression;
}

void KerMLParser::Collect_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCollect_expression(this);
}

void KerMLParser::Collect_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCollect_expression(this);
}

KerMLParser::Collect_expressionContext* KerMLParser::collect_expression() {
  Collect_expressionContext *_localctx = _tracker.createInstance<Collect_expressionContext>(_ctx, getState());
  enterRule(_localctx, 340, KerMLParser::RuleCollect_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1631);
    match(KerMLParser::SYMBOL_DOT);
    setState(1632);
    body_expression_member();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Select_expressionContext ------------------------------------------------------------------

KerMLParser::Select_expressionContext::Select_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Select_expressionContext::SYMBOL_DOT_QUESTION() {
  return getToken(KerMLParser::SYMBOL_DOT_QUESTION, 0);
}

KerMLParser::Body_expression_memberContext* KerMLParser::Select_expressionContext::body_expression_member() {
  return getRuleContext<KerMLParser::Body_expression_memberContext>(0);
}


size_t KerMLParser::Select_expressionContext::getRuleIndex() const {
  return KerMLParser::RuleSelect_expression;
}

void KerMLParser::Select_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelect_expression(this);
}

void KerMLParser::Select_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelect_expression(this);
}

KerMLParser::Select_expressionContext* KerMLParser::select_expression() {
  Select_expressionContext *_localctx = _tracker.createInstance<Select_expressionContext>(_ctx, getState());
  enterRule(_localctx, 342, KerMLParser::RuleSelect_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1634);
    match(KerMLParser::SYMBOL_DOT_QUESTION);
    setState(1635);
    body_expression_member();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Function_operation_expressionContext ------------------------------------------------------------------

KerMLParser::Function_operation_expressionContext::Function_operation_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Function_operation_expressionContext::SYMBOL_ARROOW() {
  return getToken(KerMLParser::SYMBOL_ARROOW, 0);
}

KerMLParser::Reference_typingContext* KerMLParser::Function_operation_expressionContext::reference_typing() {
  return getRuleContext<KerMLParser::Reference_typingContext>(0);
}

KerMLParser::Body_argument_memberContext* KerMLParser::Function_operation_expressionContext::body_argument_member() {
  return getRuleContext<KerMLParser::Body_argument_memberContext>(0);
}

KerMLParser::Function_reference_argument_memberContext* KerMLParser::Function_operation_expressionContext::function_reference_argument_member() {
  return getRuleContext<KerMLParser::Function_reference_argument_memberContext>(0);
}

KerMLParser::Argument_expressionContext* KerMLParser::Function_operation_expressionContext::argument_expression() {
  return getRuleContext<KerMLParser::Argument_expressionContext>(0);
}


size_t KerMLParser::Function_operation_expressionContext::getRuleIndex() const {
  return KerMLParser::RuleFunction_operation_expression;
}

void KerMLParser::Function_operation_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunction_operation_expression(this);
}

void KerMLParser::Function_operation_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunction_operation_expression(this);
}

KerMLParser::Function_operation_expressionContext* KerMLParser::function_operation_expression() {
  Function_operation_expressionContext *_localctx = _tracker.createInstance<Function_operation_expressionContext>(_ctx, getState());
  enterRule(_localctx, 344, KerMLParser::RuleFunction_operation_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1637);
    match(KerMLParser::SYMBOL_ARROOW);
    setState(1638);
    reference_typing();
    setState(1642);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 165, _ctx)) {
    case 1: {
      setState(1639);
      body_argument_member();
      break;
    }

    case 2: {
      setState(1640);
      function_reference_argument_member();
      break;
    }

    case 3: {
      setState(1641);
      argument_expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Body_argument_memberContext ------------------------------------------------------------------

KerMLParser::Body_argument_memberContext::Body_argument_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Body_argumentContext* KerMLParser::Body_argument_memberContext::body_argument() {
  return getRuleContext<KerMLParser::Body_argumentContext>(0);
}


size_t KerMLParser::Body_argument_memberContext::getRuleIndex() const {
  return KerMLParser::RuleBody_argument_member;
}

void KerMLParser::Body_argument_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBody_argument_member(this);
}

void KerMLParser::Body_argument_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBody_argument_member(this);
}

KerMLParser::Body_argument_memberContext* KerMLParser::body_argument_member() {
  Body_argument_memberContext *_localctx = _tracker.createInstance<Body_argument_memberContext>(_ctx, getState());
  enterRule(_localctx, 346, KerMLParser::RuleBody_argument_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1644);
    body_argument();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Body_argumentContext ------------------------------------------------------------------

KerMLParser::Body_argumentContext::Body_argumentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Body_argument_valueContext* KerMLParser::Body_argumentContext::body_argument_value() {
  return getRuleContext<KerMLParser::Body_argument_valueContext>(0);
}


size_t KerMLParser::Body_argumentContext::getRuleIndex() const {
  return KerMLParser::RuleBody_argument;
}

void KerMLParser::Body_argumentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBody_argument(this);
}

void KerMLParser::Body_argumentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBody_argument(this);
}

KerMLParser::Body_argumentContext* KerMLParser::body_argument() {
  Body_argumentContext *_localctx = _tracker.createInstance<Body_argumentContext>(_ctx, getState());
  enterRule(_localctx, 348, KerMLParser::RuleBody_argument);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1646);
    body_argument_value();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Body_argument_valueContext ------------------------------------------------------------------

KerMLParser::Body_argument_valueContext::Body_argument_valueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Body_expressionContext* KerMLParser::Body_argument_valueContext::body_expression() {
  return getRuleContext<KerMLParser::Body_expressionContext>(0);
}


size_t KerMLParser::Body_argument_valueContext::getRuleIndex() const {
  return KerMLParser::RuleBody_argument_value;
}

void KerMLParser::Body_argument_valueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBody_argument_value(this);
}

void KerMLParser::Body_argument_valueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBody_argument_value(this);
}

KerMLParser::Body_argument_valueContext* KerMLParser::body_argument_value() {
  Body_argument_valueContext *_localctx = _tracker.createInstance<Body_argument_valueContext>(_ctx, getState());
  enterRule(_localctx, 350, KerMLParser::RuleBody_argument_value);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1648);
    body_expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Body_expression_memberContext ------------------------------------------------------------------

KerMLParser::Body_expression_memberContext::Body_expression_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Body_expressionContext* KerMLParser::Body_expression_memberContext::body_expression() {
  return getRuleContext<KerMLParser::Body_expressionContext>(0);
}


size_t KerMLParser::Body_expression_memberContext::getRuleIndex() const {
  return KerMLParser::RuleBody_expression_member;
}

void KerMLParser::Body_expression_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBody_expression_member(this);
}

void KerMLParser::Body_expression_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBody_expression_member(this);
}

KerMLParser::Body_expression_memberContext* KerMLParser::body_expression_member() {
  Body_expression_memberContext *_localctx = _tracker.createInstance<Body_expression_memberContext>(_ctx, getState());
  enterRule(_localctx, 352, KerMLParser::RuleBody_expression_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1650);
    body_expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Function_reference_argument_memberContext ------------------------------------------------------------------

KerMLParser::Function_reference_argument_memberContext::Function_reference_argument_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Function_reference_argumentContext* KerMLParser::Function_reference_argument_memberContext::function_reference_argument() {
  return getRuleContext<KerMLParser::Function_reference_argumentContext>(0);
}


size_t KerMLParser::Function_reference_argument_memberContext::getRuleIndex() const {
  return KerMLParser::RuleFunction_reference_argument_member;
}

void KerMLParser::Function_reference_argument_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunction_reference_argument_member(this);
}

void KerMLParser::Function_reference_argument_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunction_reference_argument_member(this);
}

KerMLParser::Function_reference_argument_memberContext* KerMLParser::function_reference_argument_member() {
  Function_reference_argument_memberContext *_localctx = _tracker.createInstance<Function_reference_argument_memberContext>(_ctx, getState());
  enterRule(_localctx, 354, KerMLParser::RuleFunction_reference_argument_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1652);
    function_reference_argument();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Function_reference_argumentContext ------------------------------------------------------------------

KerMLParser::Function_reference_argumentContext::Function_reference_argumentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Function_reference_memberContext* KerMLParser::Function_reference_argumentContext::function_reference_member() {
  return getRuleContext<KerMLParser::Function_reference_memberContext>(0);
}


size_t KerMLParser::Function_reference_argumentContext::getRuleIndex() const {
  return KerMLParser::RuleFunction_reference_argument;
}

void KerMLParser::Function_reference_argumentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunction_reference_argument(this);
}

void KerMLParser::Function_reference_argumentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunction_reference_argument(this);
}

KerMLParser::Function_reference_argumentContext* KerMLParser::function_reference_argument() {
  Function_reference_argumentContext *_localctx = _tracker.createInstance<Function_reference_argumentContext>(_ctx, getState());
  enterRule(_localctx, 356, KerMLParser::RuleFunction_reference_argument);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1654);
    function_reference_member();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Function_reference_arugment_valueContext ------------------------------------------------------------------

KerMLParser::Function_reference_arugment_valueContext::Function_reference_arugment_valueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Function_reference_expressionContext* KerMLParser::Function_reference_arugment_valueContext::function_reference_expression() {
  return getRuleContext<KerMLParser::Function_reference_expressionContext>(0);
}


size_t KerMLParser::Function_reference_arugment_valueContext::getRuleIndex() const {
  return KerMLParser::RuleFunction_reference_arugment_value;
}

void KerMLParser::Function_reference_arugment_valueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunction_reference_arugment_value(this);
}

void KerMLParser::Function_reference_arugment_valueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunction_reference_arugment_value(this);
}

KerMLParser::Function_reference_arugment_valueContext* KerMLParser::function_reference_arugment_value() {
  Function_reference_arugment_valueContext *_localctx = _tracker.createInstance<Function_reference_arugment_valueContext>(_ctx, getState());
  enterRule(_localctx, 358, KerMLParser::RuleFunction_reference_arugment_value);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1656);
    function_reference_expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Function_reference_expressionContext ------------------------------------------------------------------

KerMLParser::Function_reference_expressionContext::Function_reference_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Reference_typingContext* KerMLParser::Function_reference_expressionContext::reference_typing() {
  return getRuleContext<KerMLParser::Reference_typingContext>(0);
}


size_t KerMLParser::Function_reference_expressionContext::getRuleIndex() const {
  return KerMLParser::RuleFunction_reference_expression;
}

void KerMLParser::Function_reference_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunction_reference_expression(this);
}

void KerMLParser::Function_reference_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunction_reference_expression(this);
}

KerMLParser::Function_reference_expressionContext* KerMLParser::function_reference_expression() {
  Function_reference_expressionContext *_localctx = _tracker.createInstance<Function_reference_expressionContext>(_ctx, getState());
  enterRule(_localctx, 360, KerMLParser::RuleFunction_reference_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1658);
    reference_typing();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Function_reference_memberContext ------------------------------------------------------------------

KerMLParser::Function_reference_memberContext::Function_reference_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Function_referenceContext* KerMLParser::Function_reference_memberContext::function_reference() {
  return getRuleContext<KerMLParser::Function_referenceContext>(0);
}


size_t KerMLParser::Function_reference_memberContext::getRuleIndex() const {
  return KerMLParser::RuleFunction_reference_member;
}

void KerMLParser::Function_reference_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunction_reference_member(this);
}

void KerMLParser::Function_reference_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunction_reference_member(this);
}

KerMLParser::Function_reference_memberContext* KerMLParser::function_reference_member() {
  Function_reference_memberContext *_localctx = _tracker.createInstance<Function_reference_memberContext>(_ctx, getState());
  enterRule(_localctx, 362, KerMLParser::RuleFunction_reference_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1660);
    function_reference();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Function_referenceContext ------------------------------------------------------------------

KerMLParser::Function_referenceContext::Function_referenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Reference_typingContext* KerMLParser::Function_referenceContext::reference_typing() {
  return getRuleContext<KerMLParser::Reference_typingContext>(0);
}


size_t KerMLParser::Function_referenceContext::getRuleIndex() const {
  return KerMLParser::RuleFunction_reference;
}

void KerMLParser::Function_referenceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunction_reference(this);
}

void KerMLParser::Function_referenceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunction_reference(this);
}

KerMLParser::Function_referenceContext* KerMLParser::function_reference() {
  Function_referenceContext *_localctx = _tracker.createInstance<Function_referenceContext>(_ctx, getState());
  enterRule(_localctx, 364, KerMLParser::RuleFunction_reference);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1662);
    reference_typing();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Feature_chain_memberContext ------------------------------------------------------------------

KerMLParser::Feature_chain_memberContext::Feature_chain_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Feature_reference_memberContext* KerMLParser::Feature_chain_memberContext::feature_reference_member() {
  return getRuleContext<KerMLParser::Feature_reference_memberContext>(0);
}

KerMLParser::Owned_feature_chain_memberContext* KerMLParser::Feature_chain_memberContext::owned_feature_chain_member() {
  return getRuleContext<KerMLParser::Owned_feature_chain_memberContext>(0);
}


size_t KerMLParser::Feature_chain_memberContext::getRuleIndex() const {
  return KerMLParser::RuleFeature_chain_member;
}

void KerMLParser::Feature_chain_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFeature_chain_member(this);
}

void KerMLParser::Feature_chain_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFeature_chain_member(this);
}

KerMLParser::Feature_chain_memberContext* KerMLParser::feature_chain_member() {
  Feature_chain_memberContext *_localctx = _tracker.createInstance<Feature_chain_memberContext>(_ctx, getState());
  enterRule(_localctx, 366, KerMLParser::RuleFeature_chain_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1666);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 166, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1664);
      feature_reference_member();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1665);
      owned_feature_chain_member();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Owned_feature_chain_memberContext ------------------------------------------------------------------

KerMLParser::Owned_feature_chain_memberContext::Owned_feature_chain_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Feature_chainContext* KerMLParser::Owned_feature_chain_memberContext::feature_chain() {
  return getRuleContext<KerMLParser::Feature_chainContext>(0);
}


size_t KerMLParser::Owned_feature_chain_memberContext::getRuleIndex() const {
  return KerMLParser::RuleOwned_feature_chain_member;
}

void KerMLParser::Owned_feature_chain_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOwned_feature_chain_member(this);
}

void KerMLParser::Owned_feature_chain_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOwned_feature_chain_member(this);
}

KerMLParser::Owned_feature_chain_memberContext* KerMLParser::owned_feature_chain_member() {
  Owned_feature_chain_memberContext *_localctx = _tracker.createInstance<Owned_feature_chain_memberContext>(_ctx, getState());
  enterRule(_localctx, 368, KerMLParser::RuleOwned_feature_chain_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1668);
    feature_chain();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Base_expressionContext ------------------------------------------------------------------

KerMLParser::Base_expressionContext::Base_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Null_expressionContext* KerMLParser::Base_expressionContext::null_expression() {
  return getRuleContext<KerMLParser::Null_expressionContext>(0);
}

KerMLParser::Literal_expressionContext* KerMLParser::Base_expressionContext::literal_expression() {
  return getRuleContext<KerMLParser::Literal_expressionContext>(0);
}

KerMLParser::Feature_reference_expressionContext* KerMLParser::Base_expressionContext::feature_reference_expression() {
  return getRuleContext<KerMLParser::Feature_reference_expressionContext>(0);
}

KerMLParser::Metadata_access_expressionContext* KerMLParser::Base_expressionContext::metadata_access_expression() {
  return getRuleContext<KerMLParser::Metadata_access_expressionContext>(0);
}

KerMLParser::Invocation_expressionContext* KerMLParser::Base_expressionContext::invocation_expression() {
  return getRuleContext<KerMLParser::Invocation_expressionContext>(0);
}

KerMLParser::Body_expressionContext* KerMLParser::Base_expressionContext::body_expression() {
  return getRuleContext<KerMLParser::Body_expressionContext>(0);
}


size_t KerMLParser::Base_expressionContext::getRuleIndex() const {
  return KerMLParser::RuleBase_expression;
}

void KerMLParser::Base_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBase_expression(this);
}

void KerMLParser::Base_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBase_expression(this);
}

KerMLParser::Base_expressionContext* KerMLParser::base_expression() {
  Base_expressionContext *_localctx = _tracker.createInstance<Base_expressionContext>(_ctx, getState());
  enterRule(_localctx, 370, KerMLParser::RuleBase_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1676);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 167, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1670);
      null_expression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1671);
      literal_expression();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1672);
      feature_reference_expression();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1673);
      metadata_access_expression();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1674);
      invocation_expression();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1675);
      body_expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Null_expressionContext ------------------------------------------------------------------

KerMLParser::Null_expressionContext::Null_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Null_expressionContext::KEYWORD_NULL() {
  return getToken(KerMLParser::KEYWORD_NULL, 0);
}

tree::TerminalNode* KerMLParser::Null_expressionContext::SYMBOL_ROUND_BRACKET_OPEN() {
  return getToken(KerMLParser::SYMBOL_ROUND_BRACKET_OPEN, 0);
}

tree::TerminalNode* KerMLParser::Null_expressionContext::SYMBOL_ROUND_BRACKET_CLOSE() {
  return getToken(KerMLParser::SYMBOL_ROUND_BRACKET_CLOSE, 0);
}


size_t KerMLParser::Null_expressionContext::getRuleIndex() const {
  return KerMLParser::RuleNull_expression;
}

void KerMLParser::Null_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNull_expression(this);
}

void KerMLParser::Null_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNull_expression(this);
}

KerMLParser::Null_expressionContext* KerMLParser::null_expression() {
  Null_expressionContext *_localctx = _tracker.createInstance<Null_expressionContext>(_ctx, getState());
  enterRule(_localctx, 372, KerMLParser::RuleNull_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1681);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case KerMLParser::KEYWORD_NULL: {
        enterOuterAlt(_localctx, 1);
        setState(1678);
        match(KerMLParser::KEYWORD_NULL);
        break;
      }

      case KerMLParser::SYMBOL_ROUND_BRACKET_OPEN: {
        enterOuterAlt(_localctx, 2);
        setState(1679);
        match(KerMLParser::SYMBOL_ROUND_BRACKET_OPEN);
        setState(1680);
        match(KerMLParser::SYMBOL_ROUND_BRACKET_CLOSE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Feature_reference_expressionContext ------------------------------------------------------------------

KerMLParser::Feature_reference_expressionContext::Feature_reference_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Feature_reference_memberContext* KerMLParser::Feature_reference_expressionContext::feature_reference_member() {
  return getRuleContext<KerMLParser::Feature_reference_memberContext>(0);
}


size_t KerMLParser::Feature_reference_expressionContext::getRuleIndex() const {
  return KerMLParser::RuleFeature_reference_expression;
}

void KerMLParser::Feature_reference_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFeature_reference_expression(this);
}

void KerMLParser::Feature_reference_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFeature_reference_expression(this);
}

KerMLParser::Feature_reference_expressionContext* KerMLParser::feature_reference_expression() {
  Feature_reference_expressionContext *_localctx = _tracker.createInstance<Feature_reference_expressionContext>(_ctx, getState());
  enterRule(_localctx, 374, KerMLParser::RuleFeature_reference_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1683);
    feature_reference_member();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Feature_reference_memberContext ------------------------------------------------------------------

KerMLParser::Feature_reference_memberContext::Feature_reference_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Feature_referenceContext* KerMLParser::Feature_reference_memberContext::feature_reference() {
  return getRuleContext<KerMLParser::Feature_referenceContext>(0);
}


size_t KerMLParser::Feature_reference_memberContext::getRuleIndex() const {
  return KerMLParser::RuleFeature_reference_member;
}

void KerMLParser::Feature_reference_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFeature_reference_member(this);
}

void KerMLParser::Feature_reference_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFeature_reference_member(this);
}

KerMLParser::Feature_reference_memberContext* KerMLParser::feature_reference_member() {
  Feature_reference_memberContext *_localctx = _tracker.createInstance<Feature_reference_memberContext>(_ctx, getState());
  enterRule(_localctx, 376, KerMLParser::RuleFeature_reference_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1685);
    feature_reference();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Feature_referenceContext ------------------------------------------------------------------

KerMLParser::Feature_referenceContext::Feature_referenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Qualified_nameContext* KerMLParser::Feature_referenceContext::qualified_name() {
  return getRuleContext<KerMLParser::Qualified_nameContext>(0);
}


size_t KerMLParser::Feature_referenceContext::getRuleIndex() const {
  return KerMLParser::RuleFeature_reference;
}

void KerMLParser::Feature_referenceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFeature_reference(this);
}

void KerMLParser::Feature_referenceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFeature_reference(this);
}

KerMLParser::Feature_referenceContext* KerMLParser::feature_reference() {
  Feature_referenceContext *_localctx = _tracker.createInstance<Feature_referenceContext>(_ctx, getState());
  enterRule(_localctx, 378, KerMLParser::RuleFeature_reference);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1687);
    qualified_name();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Metadata_access_expressionContext ------------------------------------------------------------------

KerMLParser::Metadata_access_expressionContext::Metadata_access_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Qualified_nameContext* KerMLParser::Metadata_access_expressionContext::qualified_name() {
  return getRuleContext<KerMLParser::Qualified_nameContext>(0);
}

tree::TerminalNode* KerMLParser::Metadata_access_expressionContext::SYMBOL_DOT() {
  return getToken(KerMLParser::SYMBOL_DOT, 0);
}

tree::TerminalNode* KerMLParser::Metadata_access_expressionContext::KEYWORD_METADATA() {
  return getToken(KerMLParser::KEYWORD_METADATA, 0);
}


size_t KerMLParser::Metadata_access_expressionContext::getRuleIndex() const {
  return KerMLParser::RuleMetadata_access_expression;
}

void KerMLParser::Metadata_access_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMetadata_access_expression(this);
}

void KerMLParser::Metadata_access_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMetadata_access_expression(this);
}

KerMLParser::Metadata_access_expressionContext* KerMLParser::metadata_access_expression() {
  Metadata_access_expressionContext *_localctx = _tracker.createInstance<Metadata_access_expressionContext>(_ctx, getState());
  enterRule(_localctx, 380, KerMLParser::RuleMetadata_access_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1689);
    qualified_name();
    setState(1690);
    match(KerMLParser::SYMBOL_DOT);
    setState(1691);
    match(KerMLParser::KEYWORD_METADATA);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Invocation_expressionContext ------------------------------------------------------------------

KerMLParser::Invocation_expressionContext::Invocation_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Internal_invocation_expressionContext* KerMLParser::Invocation_expressionContext::internal_invocation_expression() {
  return getRuleContext<KerMLParser::Internal_invocation_expressionContext>(0);
}


size_t KerMLParser::Invocation_expressionContext::getRuleIndex() const {
  return KerMLParser::RuleInvocation_expression;
}

void KerMLParser::Invocation_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInvocation_expression(this);
}

void KerMLParser::Invocation_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInvocation_expression(this);
}

KerMLParser::Invocation_expressionContext* KerMLParser::invocation_expression() {
  Invocation_expressionContext *_localctx = _tracker.createInstance<Invocation_expressionContext>(_ctx, getState());
  enterRule(_localctx, 382, KerMLParser::RuleInvocation_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1693);
    internal_invocation_expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Internal_invocation_expressionContext ------------------------------------------------------------------

KerMLParser::Internal_invocation_expressionContext::Internal_invocation_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Argument_listContext* KerMLParser::Internal_invocation_expressionContext::argument_list() {
  return getRuleContext<KerMLParser::Argument_listContext>(0);
}

KerMLParser::Owned_feature_typingContext* KerMLParser::Internal_invocation_expressionContext::owned_feature_typing() {
  return getRuleContext<KerMLParser::Owned_feature_typingContext>(0);
}

KerMLParser::Named_argument_listContext* KerMLParser::Internal_invocation_expressionContext::named_argument_list() {
  return getRuleContext<KerMLParser::Named_argument_listContext>(0);
}


size_t KerMLParser::Internal_invocation_expressionContext::getRuleIndex() const {
  return KerMLParser::RuleInternal_invocation_expression;
}

void KerMLParser::Internal_invocation_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInternal_invocation_expression(this);
}

void KerMLParser::Internal_invocation_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInternal_invocation_expression(this);
}

KerMLParser::Internal_invocation_expressionContext* KerMLParser::internal_invocation_expression() {
  Internal_invocation_expressionContext *_localctx = _tracker.createInstance<Internal_invocation_expressionContext>(_ctx, getState());
  enterRule(_localctx, 384, KerMLParser::RuleInternal_invocation_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1697);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 169, _ctx)) {
    case 1: {
      setState(1695);
      owned_feature_typing();
      break;
    }

    case 2: {
      setState(1696);
      named_argument_list();
      break;
    }

    default:
      break;
    }
    setState(1699);
    argument_list();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Argument_listContext ------------------------------------------------------------------

KerMLParser::Argument_listContext::Argument_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Argument_listContext::SYMBOL_ROUND_BRACKET_OPEN() {
  return getToken(KerMLParser::SYMBOL_ROUND_BRACKET_OPEN, 0);
}

tree::TerminalNode* KerMLParser::Argument_listContext::SYMBOL_ROUND_BRACKET_CLOSE() {
  return getToken(KerMLParser::SYMBOL_ROUND_BRACKET_CLOSE, 0);
}

KerMLParser::Owned_expressionsContext* KerMLParser::Argument_listContext::owned_expressions() {
  return getRuleContext<KerMLParser::Owned_expressionsContext>(0);
}

KerMLParser::Positional_argument_listContext* KerMLParser::Argument_listContext::positional_argument_list() {
  return getRuleContext<KerMLParser::Positional_argument_listContext>(0);
}

KerMLParser::Named_argument_listContext* KerMLParser::Argument_listContext::named_argument_list() {
  return getRuleContext<KerMLParser::Named_argument_listContext>(0);
}


size_t KerMLParser::Argument_listContext::getRuleIndex() const {
  return KerMLParser::RuleArgument_list;
}

void KerMLParser::Argument_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArgument_list(this);
}

void KerMLParser::Argument_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArgument_list(this);
}

KerMLParser::Argument_listContext* KerMLParser::argument_list() {
  Argument_listContext *_localctx = _tracker.createInstance<Argument_listContext>(_ctx, getState());
  enterRule(_localctx, 386, KerMLParser::RuleArgument_list);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1701);
    match(KerMLParser::SYMBOL_ROUND_BRACKET_OPEN);
    setState(1706);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 170, _ctx)) {
    case 1: {
      setState(1702);
      owned_expressions();
      setState(1703);
      positional_argument_list();
      break;
    }

    case 2: {
      setState(1705);
      named_argument_list();
      break;
    }

    default:
      break;
    }
    setState(1708);
    match(KerMLParser::SYMBOL_ROUND_BRACKET_CLOSE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Positional_argument_listContext ------------------------------------------------------------------

KerMLParser::Positional_argument_listContext::Positional_argument_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> KerMLParser::Positional_argument_listContext::SYMBOL_COMMA() {
  return getTokens(KerMLParser::SYMBOL_COMMA);
}

tree::TerminalNode* KerMLParser::Positional_argument_listContext::SYMBOL_COMMA(size_t i) {
  return getToken(KerMLParser::SYMBOL_COMMA, i);
}

std::vector<KerMLParser::Owned_expressionsContext *> KerMLParser::Positional_argument_listContext::owned_expressions() {
  return getRuleContexts<KerMLParser::Owned_expressionsContext>();
}

KerMLParser::Owned_expressionsContext* KerMLParser::Positional_argument_listContext::owned_expressions(size_t i) {
  return getRuleContext<KerMLParser::Owned_expressionsContext>(i);
}


size_t KerMLParser::Positional_argument_listContext::getRuleIndex() const {
  return KerMLParser::RulePositional_argument_list;
}

void KerMLParser::Positional_argument_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPositional_argument_list(this);
}

void KerMLParser::Positional_argument_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPositional_argument_list(this);
}

KerMLParser::Positional_argument_listContext* KerMLParser::positional_argument_list() {
  Positional_argument_listContext *_localctx = _tracker.createInstance<Positional_argument_listContext>(_ctx, getState());
  enterRule(_localctx, 388, KerMLParser::RulePositional_argument_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1714);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == KerMLParser::SYMBOL_COMMA) {
      setState(1710);
      match(KerMLParser::SYMBOL_COMMA);
      setState(1711);
      owned_expressions();
      setState(1716);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Named_argument_listContext ------------------------------------------------------------------

KerMLParser::Named_argument_listContext::Named_argument_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<KerMLParser::Named_argument_memberContext *> KerMLParser::Named_argument_listContext::named_argument_member() {
  return getRuleContexts<KerMLParser::Named_argument_memberContext>();
}

KerMLParser::Named_argument_memberContext* KerMLParser::Named_argument_listContext::named_argument_member(size_t i) {
  return getRuleContext<KerMLParser::Named_argument_memberContext>(i);
}

std::vector<tree::TerminalNode *> KerMLParser::Named_argument_listContext::SYMBOL_COMMA() {
  return getTokens(KerMLParser::SYMBOL_COMMA);
}

tree::TerminalNode* KerMLParser::Named_argument_listContext::SYMBOL_COMMA(size_t i) {
  return getToken(KerMLParser::SYMBOL_COMMA, i);
}


size_t KerMLParser::Named_argument_listContext::getRuleIndex() const {
  return KerMLParser::RuleNamed_argument_list;
}

void KerMLParser::Named_argument_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamed_argument_list(this);
}

void KerMLParser::Named_argument_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamed_argument_list(this);
}

KerMLParser::Named_argument_listContext* KerMLParser::named_argument_list() {
  Named_argument_listContext *_localctx = _tracker.createInstance<Named_argument_listContext>(_ctx, getState());
  enterRule(_localctx, 390, KerMLParser::RuleNamed_argument_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1717);
    named_argument_member();
    setState(1722);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == KerMLParser::SYMBOL_COMMA) {
      setState(1718);
      match(KerMLParser::SYMBOL_COMMA);
      setState(1719);
      named_argument_member();
      setState(1724);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Named_argument_memberContext ------------------------------------------------------------------

KerMLParser::Named_argument_memberContext::Named_argument_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Named_argumentContext* KerMLParser::Named_argument_memberContext::named_argument() {
  return getRuleContext<KerMLParser::Named_argumentContext>(0);
}


size_t KerMLParser::Named_argument_memberContext::getRuleIndex() const {
  return KerMLParser::RuleNamed_argument_member;
}

void KerMLParser::Named_argument_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamed_argument_member(this);
}

void KerMLParser::Named_argument_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamed_argument_member(this);
}

KerMLParser::Named_argument_memberContext* KerMLParser::named_argument_member() {
  Named_argument_memberContext *_localctx = _tracker.createInstance<Named_argument_memberContext>(_ctx, getState());
  enterRule(_localctx, 392, KerMLParser::RuleNamed_argument_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1725);
    named_argument();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Named_argumentContext ------------------------------------------------------------------

KerMLParser::Named_argumentContext::Named_argumentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Paramenter_redefinitionContext* KerMLParser::Named_argumentContext::paramenter_redefinition() {
  return getRuleContext<KerMLParser::Paramenter_redefinitionContext>(0);
}

tree::TerminalNode* KerMLParser::Named_argumentContext::SYMBOL_EQUALS() {
  return getToken(KerMLParser::SYMBOL_EQUALS, 0);
}

KerMLParser::Owned_expressionsContext* KerMLParser::Named_argumentContext::owned_expressions() {
  return getRuleContext<KerMLParser::Owned_expressionsContext>(0);
}


size_t KerMLParser::Named_argumentContext::getRuleIndex() const {
  return KerMLParser::RuleNamed_argument;
}

void KerMLParser::Named_argumentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamed_argument(this);
}

void KerMLParser::Named_argumentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamed_argument(this);
}

KerMLParser::Named_argumentContext* KerMLParser::named_argument() {
  Named_argumentContext *_localctx = _tracker.createInstance<Named_argumentContext>(_ctx, getState());
  enterRule(_localctx, 394, KerMLParser::RuleNamed_argument);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1727);
    paramenter_redefinition();
    setState(1728);
    match(KerMLParser::SYMBOL_EQUALS);
    setState(1729);
    owned_expressions();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Paramenter_redefinitionContext ------------------------------------------------------------------

KerMLParser::Paramenter_redefinitionContext::Paramenter_redefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Qualified_nameContext* KerMLParser::Paramenter_redefinitionContext::qualified_name() {
  return getRuleContext<KerMLParser::Qualified_nameContext>(0);
}


size_t KerMLParser::Paramenter_redefinitionContext::getRuleIndex() const {
  return KerMLParser::RuleParamenter_redefinition;
}

void KerMLParser::Paramenter_redefinitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParamenter_redefinition(this);
}

void KerMLParser::Paramenter_redefinitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParamenter_redefinition(this);
}

KerMLParser::Paramenter_redefinitionContext* KerMLParser::paramenter_redefinition() {
  Paramenter_redefinitionContext *_localctx = _tracker.createInstance<Paramenter_redefinitionContext>(_ctx, getState());
  enterRule(_localctx, 396, KerMLParser::RuleParamenter_redefinition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1731);
    qualified_name();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Body_expressionContext ------------------------------------------------------------------

KerMLParser::Body_expressionContext::Body_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Expression_body_memberContext* KerMLParser::Body_expressionContext::expression_body_member() {
  return getRuleContext<KerMLParser::Expression_body_memberContext>(0);
}


size_t KerMLParser::Body_expressionContext::getRuleIndex() const {
  return KerMLParser::RuleBody_expression;
}

void KerMLParser::Body_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBody_expression(this);
}

void KerMLParser::Body_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBody_expression(this);
}

KerMLParser::Body_expressionContext* KerMLParser::body_expression() {
  Body_expressionContext *_localctx = _tracker.createInstance<Body_expressionContext>(_ctx, getState());
  enterRule(_localctx, 398, KerMLParser::RuleBody_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1733);
    expression_body_member();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expression_body_memberContext ------------------------------------------------------------------

KerMLParser::Expression_body_memberContext::Expression_body_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Expression_bodyContext* KerMLParser::Expression_body_memberContext::expression_body() {
  return getRuleContext<KerMLParser::Expression_bodyContext>(0);
}


size_t KerMLParser::Expression_body_memberContext::getRuleIndex() const {
  return KerMLParser::RuleExpression_body_member;
}

void KerMLParser::Expression_body_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpression_body_member(this);
}

void KerMLParser::Expression_body_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpression_body_member(this);
}

KerMLParser::Expression_body_memberContext* KerMLParser::expression_body_member() {
  Expression_body_memberContext *_localctx = _tracker.createInstance<Expression_body_memberContext>(_ctx, getState());
  enterRule(_localctx, 400, KerMLParser::RuleExpression_body_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1735);
    expression_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expression_bodyContext ------------------------------------------------------------------

KerMLParser::Expression_bodyContext::Expression_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Expression_bodyContext::SYMBOL_ROUND_BRACKET_OPEN() {
  return getToken(KerMLParser::SYMBOL_ROUND_BRACKET_OPEN, 0);
}

KerMLParser::Function_body_partContext* KerMLParser::Expression_bodyContext::function_body_part() {
  return getRuleContext<KerMLParser::Function_body_partContext>(0);
}

tree::TerminalNode* KerMLParser::Expression_bodyContext::SYMBOL_ROUND_BRACKET_CLOSE() {
  return getToken(KerMLParser::SYMBOL_ROUND_BRACKET_CLOSE, 0);
}


size_t KerMLParser::Expression_bodyContext::getRuleIndex() const {
  return KerMLParser::RuleExpression_body;
}

void KerMLParser::Expression_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpression_body(this);
}

void KerMLParser::Expression_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpression_body(this);
}

KerMLParser::Expression_bodyContext* KerMLParser::expression_body() {
  Expression_bodyContext *_localctx = _tracker.createInstance<Expression_bodyContext>(_ctx, getState());
  enterRule(_localctx, 402, KerMLParser::RuleExpression_body);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1737);
    match(KerMLParser::SYMBOL_ROUND_BRACKET_OPEN);
    setState(1738);
    function_body_part();
    setState(1739);
    match(KerMLParser::SYMBOL_ROUND_BRACKET_CLOSE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Literal_expressionContext ------------------------------------------------------------------

KerMLParser::Literal_expressionContext::Literal_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Literal_expressionContext::KEYWORD_TRUE() {
  return getToken(KerMLParser::KEYWORD_TRUE, 0);
}

tree::TerminalNode* KerMLParser::Literal_expressionContext::KEYWORD_FALSE() {
  return getToken(KerMLParser::KEYWORD_FALSE, 0);
}

KerMLParser::Literal_stringContext* KerMLParser::Literal_expressionContext::literal_string() {
  return getRuleContext<KerMLParser::Literal_stringContext>(0);
}

KerMLParser::Literal_integerContext* KerMLParser::Literal_expressionContext::literal_integer() {
  return getRuleContext<KerMLParser::Literal_integerContext>(0);
}

KerMLParser::Literal_realContext* KerMLParser::Literal_expressionContext::literal_real() {
  return getRuleContext<KerMLParser::Literal_realContext>(0);
}

KerMLParser::Literal_infinityContext* KerMLParser::Literal_expressionContext::literal_infinity() {
  return getRuleContext<KerMLParser::Literal_infinityContext>(0);
}


size_t KerMLParser::Literal_expressionContext::getRuleIndex() const {
  return KerMLParser::RuleLiteral_expression;
}

void KerMLParser::Literal_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLiteral_expression(this);
}

void KerMLParser::Literal_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLiteral_expression(this);
}

KerMLParser::Literal_expressionContext* KerMLParser::literal_expression() {
  Literal_expressionContext *_localctx = _tracker.createInstance<Literal_expressionContext>(_ctx, getState());
  enterRule(_localctx, 404, KerMLParser::RuleLiteral_expression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1747);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 173, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1741);
      _la = _input->LA(1);
      if (!(_la == KerMLParser::KEYWORD_FALSE

      || _la == KerMLParser::KEYWORD_TRUE)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1742);
      literal_string();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1743);
      literal_integer();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1744);
      literal_real();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1745);
      literal_integer();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1746);
      literal_infinity();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Literal_booleanContext ------------------------------------------------------------------

KerMLParser::Literal_booleanContext::Literal_booleanContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Boolean_valueContext* KerMLParser::Literal_booleanContext::boolean_value() {
  return getRuleContext<KerMLParser::Boolean_valueContext>(0);
}


size_t KerMLParser::Literal_booleanContext::getRuleIndex() const {
  return KerMLParser::RuleLiteral_boolean;
}

void KerMLParser::Literal_booleanContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLiteral_boolean(this);
}

void KerMLParser::Literal_booleanContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLiteral_boolean(this);
}

KerMLParser::Literal_booleanContext* KerMLParser::literal_boolean() {
  Literal_booleanContext *_localctx = _tracker.createInstance<Literal_booleanContext>(_ctx, getState());
  enterRule(_localctx, 406, KerMLParser::RuleLiteral_boolean);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1749);
    boolean_value();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Boolean_valueContext ------------------------------------------------------------------

KerMLParser::Boolean_valueContext::Boolean_valueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Boolean_valueContext::KEYWORD_TRUE() {
  return getToken(KerMLParser::KEYWORD_TRUE, 0);
}

tree::TerminalNode* KerMLParser::Boolean_valueContext::KEYWORD_FALSE() {
  return getToken(KerMLParser::KEYWORD_FALSE, 0);
}


size_t KerMLParser::Boolean_valueContext::getRuleIndex() const {
  return KerMLParser::RuleBoolean_value;
}

void KerMLParser::Boolean_valueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBoolean_value(this);
}

void KerMLParser::Boolean_valueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBoolean_value(this);
}

KerMLParser::Boolean_valueContext* KerMLParser::boolean_value() {
  Boolean_valueContext *_localctx = _tracker.createInstance<Boolean_valueContext>(_ctx, getState());
  enterRule(_localctx, 408, KerMLParser::RuleBoolean_value);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1751);
    _la = _input->LA(1);
    if (!(_la == KerMLParser::KEYWORD_FALSE

    || _la == KerMLParser::KEYWORD_TRUE)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Literal_stringContext ------------------------------------------------------------------

KerMLParser::Literal_stringContext::Literal_stringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Literal_stringContext::STRING_VALUE() {
  return getToken(KerMLParser::STRING_VALUE, 0);
}


size_t KerMLParser::Literal_stringContext::getRuleIndex() const {
  return KerMLParser::RuleLiteral_string;
}

void KerMLParser::Literal_stringContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLiteral_string(this);
}

void KerMLParser::Literal_stringContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLiteral_string(this);
}

KerMLParser::Literal_stringContext* KerMLParser::literal_string() {
  Literal_stringContext *_localctx = _tracker.createInstance<Literal_stringContext>(_ctx, getState());
  enterRule(_localctx, 410, KerMLParser::RuleLiteral_string);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1753);
    match(KerMLParser::STRING_VALUE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Literal_integerContext ------------------------------------------------------------------

KerMLParser::Literal_integerContext::Literal_integerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Literal_integerContext::DECIMAL_VALUE() {
  return getToken(KerMLParser::DECIMAL_VALUE, 0);
}


size_t KerMLParser::Literal_integerContext::getRuleIndex() const {
  return KerMLParser::RuleLiteral_integer;
}

void KerMLParser::Literal_integerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLiteral_integer(this);
}

void KerMLParser::Literal_integerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLiteral_integer(this);
}

KerMLParser::Literal_integerContext* KerMLParser::literal_integer() {
  Literal_integerContext *_localctx = _tracker.createInstance<Literal_integerContext>(_ctx, getState());
  enterRule(_localctx, 412, KerMLParser::RuleLiteral_integer);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1755);
    match(KerMLParser::DECIMAL_VALUE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Literal_realContext ------------------------------------------------------------------

KerMLParser::Literal_realContext::Literal_realContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Real_valueContext* KerMLParser::Literal_realContext::real_value() {
  return getRuleContext<KerMLParser::Real_valueContext>(0);
}


size_t KerMLParser::Literal_realContext::getRuleIndex() const {
  return KerMLParser::RuleLiteral_real;
}

void KerMLParser::Literal_realContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLiteral_real(this);
}

void KerMLParser::Literal_realContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLiteral_real(this);
}

KerMLParser::Literal_realContext* KerMLParser::literal_real() {
  Literal_realContext *_localctx = _tracker.createInstance<Literal_realContext>(_ctx, getState());
  enterRule(_localctx, 414, KerMLParser::RuleLiteral_real);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1757);
    real_value();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Real_valueContext ------------------------------------------------------------------

KerMLParser::Real_valueContext::Real_valueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Real_valueContext::SYMBOL_DOT() {
  return getToken(KerMLParser::SYMBOL_DOT, 0);
}

std::vector<tree::TerminalNode *> KerMLParser::Real_valueContext::DECIMAL_VALUE() {
  return getTokens(KerMLParser::DECIMAL_VALUE);
}

tree::TerminalNode* KerMLParser::Real_valueContext::DECIMAL_VALUE(size_t i) {
  return getToken(KerMLParser::DECIMAL_VALUE, i);
}

tree::TerminalNode* KerMLParser::Real_valueContext::EXPONENTIAL_VALUE() {
  return getToken(KerMLParser::EXPONENTIAL_VALUE, 0);
}


size_t KerMLParser::Real_valueContext::getRuleIndex() const {
  return KerMLParser::RuleReal_value;
}

void KerMLParser::Real_valueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReal_value(this);
}

void KerMLParser::Real_valueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReal_value(this);
}

KerMLParser::Real_valueContext* KerMLParser::real_value() {
  Real_valueContext *_localctx = _tracker.createInstance<Real_valueContext>(_ctx, getState());
  enterRule(_localctx, 416, KerMLParser::RuleReal_value);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1765);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case KerMLParser::SYMBOL_DOT:
      case KerMLParser::DECIMAL_VALUE: {
        enterOuterAlt(_localctx, 1);
        setState(1760);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == KerMLParser::DECIMAL_VALUE) {
          setState(1759);
          match(KerMLParser::DECIMAL_VALUE);
        }
        setState(1762);
        match(KerMLParser::SYMBOL_DOT);
        setState(1763);
        _la = _input->LA(1);
        if (!(_la == KerMLParser::DECIMAL_VALUE

        || _la == KerMLParser::EXPONENTIAL_VALUE)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case KerMLParser::EXPONENTIAL_VALUE: {
        enterOuterAlt(_localctx, 2);
        setState(1764);
        match(KerMLParser::EXPONENTIAL_VALUE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Literal_infinityContext ------------------------------------------------------------------

KerMLParser::Literal_infinityContext::Literal_infinityContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Literal_infinityContext::SYMBOL_STAR() {
  return getToken(KerMLParser::SYMBOL_STAR, 0);
}


size_t KerMLParser::Literal_infinityContext::getRuleIndex() const {
  return KerMLParser::RuleLiteral_infinity;
}

void KerMLParser::Literal_infinityContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLiteral_infinity(this);
}

void KerMLParser::Literal_infinityContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLiteral_infinity(this);
}

KerMLParser::Literal_infinityContext* KerMLParser::literal_infinity() {
  Literal_infinityContext *_localctx = _tracker.createInstance<Literal_infinityContext>(_ctx, getState());
  enterRule(_localctx, 418, KerMLParser::RuleLiteral_infinity);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1767);
    match(KerMLParser::SYMBOL_STAR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InteractionContext ------------------------------------------------------------------

KerMLParser::InteractionContext::InteractionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Type_prefixContext* KerMLParser::InteractionContext::type_prefix() {
  return getRuleContext<KerMLParser::Type_prefixContext>(0);
}

tree::TerminalNode* KerMLParser::InteractionContext::KEYWORD_INTERACTION() {
  return getToken(KerMLParser::KEYWORD_INTERACTION, 0);
}

KerMLParser::Classifier_declarationContext* KerMLParser::InteractionContext::classifier_declaration() {
  return getRuleContext<KerMLParser::Classifier_declarationContext>(0);
}

KerMLParser::Type_bodyContext* KerMLParser::InteractionContext::type_body() {
  return getRuleContext<KerMLParser::Type_bodyContext>(0);
}


size_t KerMLParser::InteractionContext::getRuleIndex() const {
  return KerMLParser::RuleInteraction;
}

void KerMLParser::InteractionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInteraction(this);
}

void KerMLParser::InteractionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInteraction(this);
}

KerMLParser::InteractionContext* KerMLParser::interaction() {
  InteractionContext *_localctx = _tracker.createInstance<InteractionContext>(_ctx, getState());
  enterRule(_localctx, 420, KerMLParser::RuleInteraction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1769);
    type_prefix();
    setState(1770);
    match(KerMLParser::KEYWORD_INTERACTION);
    setState(1771);
    classifier_declaration();
    setState(1772);
    type_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Item_flowContext ------------------------------------------------------------------

KerMLParser::Item_flowContext::Item_flowContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Feature_prefixContext* KerMLParser::Item_flowContext::feature_prefix() {
  return getRuleContext<KerMLParser::Feature_prefixContext>(0);
}

tree::TerminalNode* KerMLParser::Item_flowContext::KEYWORD_FLOW() {
  return getToken(KerMLParser::KEYWORD_FLOW, 0);
}

KerMLParser::Item_flow_declarationContext* KerMLParser::Item_flowContext::item_flow_declaration() {
  return getRuleContext<KerMLParser::Item_flow_declarationContext>(0);
}

KerMLParser::Type_bodyContext* KerMLParser::Item_flowContext::type_body() {
  return getRuleContext<KerMLParser::Type_bodyContext>(0);
}


size_t KerMLParser::Item_flowContext::getRuleIndex() const {
  return KerMLParser::RuleItem_flow;
}

void KerMLParser::Item_flowContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterItem_flow(this);
}

void KerMLParser::Item_flowContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitItem_flow(this);
}

KerMLParser::Item_flowContext* KerMLParser::item_flow() {
  Item_flowContext *_localctx = _tracker.createInstance<Item_flowContext>(_ctx, getState());
  enterRule(_localctx, 422, KerMLParser::RuleItem_flow);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1774);
    feature_prefix();
    setState(1775);
    match(KerMLParser::KEYWORD_FLOW);
    setState(1776);
    item_flow_declaration();
    setState(1777);
    type_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Succession_item_flowContext ------------------------------------------------------------------

KerMLParser::Succession_item_flowContext::Succession_item_flowContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Feature_prefixContext* KerMLParser::Succession_item_flowContext::feature_prefix() {
  return getRuleContext<KerMLParser::Feature_prefixContext>(0);
}

tree::TerminalNode* KerMLParser::Succession_item_flowContext::KEYWORD_SUCCSESSION() {
  return getToken(KerMLParser::KEYWORD_SUCCSESSION, 0);
}

tree::TerminalNode* KerMLParser::Succession_item_flowContext::KEYWORD_FLOW() {
  return getToken(KerMLParser::KEYWORD_FLOW, 0);
}

KerMLParser::Item_flow_declarationContext* KerMLParser::Succession_item_flowContext::item_flow_declaration() {
  return getRuleContext<KerMLParser::Item_flow_declarationContext>(0);
}

KerMLParser::Type_bodyContext* KerMLParser::Succession_item_flowContext::type_body() {
  return getRuleContext<KerMLParser::Type_bodyContext>(0);
}


size_t KerMLParser::Succession_item_flowContext::getRuleIndex() const {
  return KerMLParser::RuleSuccession_item_flow;
}

void KerMLParser::Succession_item_flowContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSuccession_item_flow(this);
}

void KerMLParser::Succession_item_flowContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSuccession_item_flow(this);
}

KerMLParser::Succession_item_flowContext* KerMLParser::succession_item_flow() {
  Succession_item_flowContext *_localctx = _tracker.createInstance<Succession_item_flowContext>(_ctx, getState());
  enterRule(_localctx, 424, KerMLParser::RuleSuccession_item_flow);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1779);
    feature_prefix();
    setState(1780);
    match(KerMLParser::KEYWORD_SUCCSESSION);
    setState(1781);
    match(KerMLParser::KEYWORD_FLOW);
    setState(1782);
    item_flow_declaration();
    setState(1783);
    type_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Item_flow_declarationContext ------------------------------------------------------------------

KerMLParser::Item_flow_declarationContext::Item_flow_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Feature_declarationContext* KerMLParser::Item_flow_declarationContext::feature_declaration() {
  return getRuleContext<KerMLParser::Feature_declarationContext>(0);
}

std::vector<KerMLParser::Item_flow_end_memberContext *> KerMLParser::Item_flow_declarationContext::item_flow_end_member() {
  return getRuleContexts<KerMLParser::Item_flow_end_memberContext>();
}

KerMLParser::Item_flow_end_memberContext* KerMLParser::Item_flow_declarationContext::item_flow_end_member(size_t i) {
  return getRuleContext<KerMLParser::Item_flow_end_memberContext>(i);
}

tree::TerminalNode* KerMLParser::Item_flow_declarationContext::KEYWORD_TO() {
  return getToken(KerMLParser::KEYWORD_TO, 0);
}

KerMLParser::Value_partContext* KerMLParser::Item_flow_declarationContext::value_part() {
  return getRuleContext<KerMLParser::Value_partContext>(0);
}

tree::TerminalNode* KerMLParser::Item_flow_declarationContext::KEYWORD_OF() {
  return getToken(KerMLParser::KEYWORD_OF, 0);
}

KerMLParser::Item_feature_memberContext* KerMLParser::Item_flow_declarationContext::item_feature_member() {
  return getRuleContext<KerMLParser::Item_feature_memberContext>(0);
}

tree::TerminalNode* KerMLParser::Item_flow_declarationContext::KEYWORD_FROM() {
  return getToken(KerMLParser::KEYWORD_FROM, 0);
}

tree::TerminalNode* KerMLParser::Item_flow_declarationContext::KEYWORD_ALL() {
  return getToken(KerMLParser::KEYWORD_ALL, 0);
}


size_t KerMLParser::Item_flow_declarationContext::getRuleIndex() const {
  return KerMLParser::RuleItem_flow_declaration;
}

void KerMLParser::Item_flow_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterItem_flow_declaration(this);
}

void KerMLParser::Item_flow_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitItem_flow_declaration(this);
}

KerMLParser::Item_flow_declarationContext* KerMLParser::item_flow_declaration() {
  Item_flow_declarationContext *_localctx = _tracker.createInstance<Item_flow_declarationContext>(_ctx, getState());
  enterRule(_localctx, 426, KerMLParser::RuleItem_flow_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1807);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 180, _ctx)) {
    case 1: {
      setState(1785);
      feature_declaration();
      setState(1787);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == KerMLParser::KEYWORD_DEFAULT || _la == KerMLParser::SYMBOL_DEF_ASSIGN

      || _la == KerMLParser::SYMBOL_EQUALS) {
        setState(1786);
        value_part();
      }
      setState(1791);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == KerMLParser::KEYWORD_OF) {
        setState(1789);
        match(KerMLParser::KEYWORD_OF);
        setState(1790);
        item_feature_member();
      }
      setState(1798);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == KerMLParser::KEYWORD_FROM) {
        setState(1793);
        match(KerMLParser::KEYWORD_FROM);
        setState(1794);
        item_flow_end_member();
        setState(1795);
        match(KerMLParser::KEYWORD_TO);
        setState(1796);
        item_flow_end_member();
      }
      break;
    }

    case 2: {
      setState(1801);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == KerMLParser::KEYWORD_ALL) {
        setState(1800);
        match(KerMLParser::KEYWORD_ALL);
      }
      setState(1803);
      item_flow_end_member();
      setState(1804);
      match(KerMLParser::KEYWORD_TO);
      setState(1805);
      item_flow_end_member();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Item_feature_memberContext ------------------------------------------------------------------

KerMLParser::Item_feature_memberContext::Item_feature_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Item_featureContext* KerMLParser::Item_feature_memberContext::item_feature() {
  return getRuleContext<KerMLParser::Item_featureContext>(0);
}


size_t KerMLParser::Item_feature_memberContext::getRuleIndex() const {
  return KerMLParser::RuleItem_feature_member;
}

void KerMLParser::Item_feature_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterItem_feature_member(this);
}

void KerMLParser::Item_feature_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitItem_feature_member(this);
}

KerMLParser::Item_feature_memberContext* KerMLParser::item_feature_member() {
  Item_feature_memberContext *_localctx = _tracker.createInstance<Item_feature_memberContext>(_ctx, getState());
  enterRule(_localctx, 428, KerMLParser::RuleItem_feature_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1809);
    item_feature();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Item_featureContext ------------------------------------------------------------------

KerMLParser::Item_featureContext::Item_featureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::IdentificationContext* KerMLParser::Item_featureContext::identification() {
  return getRuleContext<KerMLParser::IdentificationContext>(0);
}

KerMLParser::Item_feature_specilization_partContext* KerMLParser::Item_featureContext::item_feature_specilization_part() {
  return getRuleContext<KerMLParser::Item_feature_specilization_partContext>(0);
}

KerMLParser::Value_partContext* KerMLParser::Item_featureContext::value_part() {
  return getRuleContext<KerMLParser::Value_partContext>(0);
}

KerMLParser::Owned_feature_typingContext* KerMLParser::Item_featureContext::owned_feature_typing() {
  return getRuleContext<KerMLParser::Owned_feature_typingContext>(0);
}

KerMLParser::Multiplicity_boundsContext* KerMLParser::Item_featureContext::multiplicity_bounds() {
  return getRuleContext<KerMLParser::Multiplicity_boundsContext>(0);
}


size_t KerMLParser::Item_featureContext::getRuleIndex() const {
  return KerMLParser::RuleItem_feature;
}

void KerMLParser::Item_featureContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterItem_feature(this);
}

void KerMLParser::Item_featureContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitItem_feature(this);
}

KerMLParser::Item_featureContext* KerMLParser::item_feature() {
  Item_featureContext *_localctx = _tracker.createInstance<Item_featureContext>(_ctx, getState());
  enterRule(_localctx, 430, KerMLParser::RuleItem_feature);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1824);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 184, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1811);
      identification();
      setState(1812);
      item_feature_specilization_part();
      setState(1814);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == KerMLParser::KEYWORD_DEFAULT || _la == KerMLParser::SYMBOL_DEF_ASSIGN

      || _la == KerMLParser::SYMBOL_EQUALS) {
        setState(1813);
        value_part();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1816);
      owned_feature_typing();
      setState(1818);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == KerMLParser::SYMBOL_SQUARE_BRACKET_OPEN) {
        setState(1817);
        multiplicity_bounds();
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1820);
      multiplicity_bounds();
      setState(1822);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == KerMLParser::NAME) {
        setState(1821);
        owned_feature_typing();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Item_feature_specilization_partContext ------------------------------------------------------------------

KerMLParser::Item_feature_specilization_partContext::Item_feature_specilization_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Multiplicity_partContext* KerMLParser::Item_feature_specilization_partContext::multiplicity_part() {
  return getRuleContext<KerMLParser::Multiplicity_partContext>(0);
}

std::vector<KerMLParser::Feature_specilizationContext *> KerMLParser::Item_feature_specilization_partContext::feature_specilization() {
  return getRuleContexts<KerMLParser::Feature_specilizationContext>();
}

KerMLParser::Feature_specilizationContext* KerMLParser::Item_feature_specilization_partContext::feature_specilization(size_t i) {
  return getRuleContext<KerMLParser::Feature_specilizationContext>(i);
}


size_t KerMLParser::Item_feature_specilization_partContext::getRuleIndex() const {
  return KerMLParser::RuleItem_feature_specilization_part;
}

void KerMLParser::Item_feature_specilization_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterItem_feature_specilization_part(this);
}

void KerMLParser::Item_feature_specilization_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitItem_feature_specilization_part(this);
}

KerMLParser::Item_feature_specilization_partContext* KerMLParser::item_feature_specilization_part() {
  Item_feature_specilization_partContext *_localctx = _tracker.createInstance<Item_feature_specilization_partContext>(_ctx, getState());
  enterRule(_localctx, 432, KerMLParser::RuleItem_feature_specilization_part);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1829);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 432345564227568544) != 0) || _la == KerMLParser::KEYWORD_OUT) {
      setState(1826);
      feature_specilization();
      setState(1831);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }

    setState(1832);
    multiplicity_part();
    setState(1834);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 432345564227568544) != 0) || _la == KerMLParser::KEYWORD_OUT) {
      setState(1833);
      feature_specilization();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Item_flow_end_memberContext ------------------------------------------------------------------

KerMLParser::Item_flow_end_memberContext::Item_flow_end_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Item_flow_endContext* KerMLParser::Item_flow_end_memberContext::item_flow_end() {
  return getRuleContext<KerMLParser::Item_flow_endContext>(0);
}


size_t KerMLParser::Item_flow_end_memberContext::getRuleIndex() const {
  return KerMLParser::RuleItem_flow_end_member;
}

void KerMLParser::Item_flow_end_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterItem_flow_end_member(this);
}

void KerMLParser::Item_flow_end_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitItem_flow_end_member(this);
}

KerMLParser::Item_flow_end_memberContext* KerMLParser::item_flow_end_member() {
  Item_flow_end_memberContext *_localctx = _tracker.createInstance<Item_flow_end_memberContext>(_ctx, getState());
  enterRule(_localctx, 434, KerMLParser::RuleItem_flow_end_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1836);
    item_flow_end();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Item_flow_endContext ------------------------------------------------------------------

KerMLParser::Item_flow_endContext::Item_flow_endContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Item_flow_feature_memberContext* KerMLParser::Item_flow_endContext::item_flow_feature_member() {
  return getRuleContext<KerMLParser::Item_flow_feature_memberContext>(0);
}

KerMLParser::Owned_reference_subsettingContext* KerMLParser::Item_flow_endContext::owned_reference_subsetting() {
  return getRuleContext<KerMLParser::Owned_reference_subsettingContext>(0);
}

tree::TerminalNode* KerMLParser::Item_flow_endContext::SYMBOL_DOT() {
  return getToken(KerMLParser::SYMBOL_DOT, 0);
}


size_t KerMLParser::Item_flow_endContext::getRuleIndex() const {
  return KerMLParser::RuleItem_flow_end;
}

void KerMLParser::Item_flow_endContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterItem_flow_end(this);
}

void KerMLParser::Item_flow_endContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitItem_flow_end(this);
}

KerMLParser::Item_flow_endContext* KerMLParser::item_flow_end() {
  Item_flow_endContext *_localctx = _tracker.createInstance<Item_flow_endContext>(_ctx, getState());
  enterRule(_localctx, 436, KerMLParser::RuleItem_flow_end);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1841);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 187, _ctx)) {
    case 1: {
      setState(1838);
      owned_reference_subsetting();
      setState(1839);
      match(KerMLParser::SYMBOL_DOT);
      break;
    }

    default:
      break;
    }
    setState(1843);
    item_flow_feature_member();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Item_flow_feature_memberContext ------------------------------------------------------------------

KerMLParser::Item_flow_feature_memberContext::Item_flow_feature_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Item_flow_featureContext* KerMLParser::Item_flow_feature_memberContext::item_flow_feature() {
  return getRuleContext<KerMLParser::Item_flow_featureContext>(0);
}


size_t KerMLParser::Item_flow_feature_memberContext::getRuleIndex() const {
  return KerMLParser::RuleItem_flow_feature_member;
}

void KerMLParser::Item_flow_feature_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterItem_flow_feature_member(this);
}

void KerMLParser::Item_flow_feature_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitItem_flow_feature_member(this);
}

KerMLParser::Item_flow_feature_memberContext* KerMLParser::item_flow_feature_member() {
  Item_flow_feature_memberContext *_localctx = _tracker.createInstance<Item_flow_feature_memberContext>(_ctx, getState());
  enterRule(_localctx, 438, KerMLParser::RuleItem_flow_feature_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1845);
    item_flow_feature();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Item_flow_featureContext ------------------------------------------------------------------

KerMLParser::Item_flow_featureContext::Item_flow_featureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Item_flow_redefinitionContext* KerMLParser::Item_flow_featureContext::item_flow_redefinition() {
  return getRuleContext<KerMLParser::Item_flow_redefinitionContext>(0);
}


size_t KerMLParser::Item_flow_featureContext::getRuleIndex() const {
  return KerMLParser::RuleItem_flow_feature;
}

void KerMLParser::Item_flow_featureContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterItem_flow_feature(this);
}

void KerMLParser::Item_flow_featureContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitItem_flow_feature(this);
}

KerMLParser::Item_flow_featureContext* KerMLParser::item_flow_feature() {
  Item_flow_featureContext *_localctx = _tracker.createInstance<Item_flow_featureContext>(_ctx, getState());
  enterRule(_localctx, 440, KerMLParser::RuleItem_flow_feature);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1847);
    item_flow_redefinition();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Item_flow_redefinitionContext ------------------------------------------------------------------

KerMLParser::Item_flow_redefinitionContext::Item_flow_redefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Qualified_nameContext* KerMLParser::Item_flow_redefinitionContext::qualified_name() {
  return getRuleContext<KerMLParser::Qualified_nameContext>(0);
}


size_t KerMLParser::Item_flow_redefinitionContext::getRuleIndex() const {
  return KerMLParser::RuleItem_flow_redefinition;
}

void KerMLParser::Item_flow_redefinitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterItem_flow_redefinition(this);
}

void KerMLParser::Item_flow_redefinitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitItem_flow_redefinition(this);
}

KerMLParser::Item_flow_redefinitionContext* KerMLParser::item_flow_redefinition() {
  Item_flow_redefinitionContext *_localctx = _tracker.createInstance<Item_flow_redefinitionContext>(_ctx, getState());
  enterRule(_localctx, 442, KerMLParser::RuleItem_flow_redefinition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1849);
    qualified_name();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Value_partContext ------------------------------------------------------------------

KerMLParser::Value_partContext::Value_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Feature_valueContext* KerMLParser::Value_partContext::feature_value() {
  return getRuleContext<KerMLParser::Feature_valueContext>(0);
}


size_t KerMLParser::Value_partContext::getRuleIndex() const {
  return KerMLParser::RuleValue_part;
}

void KerMLParser::Value_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterValue_part(this);
}

void KerMLParser::Value_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitValue_part(this);
}

KerMLParser::Value_partContext* KerMLParser::value_part() {
  Value_partContext *_localctx = _tracker.createInstance<Value_partContext>(_ctx, getState());
  enterRule(_localctx, 444, KerMLParser::RuleValue_part);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1851);
    feature_value();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Feature_valueContext ------------------------------------------------------------------

KerMLParser::Feature_valueContext::Feature_valueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Owned_expressionContext* KerMLParser::Feature_valueContext::owned_expression() {
  return getRuleContext<KerMLParser::Owned_expressionContext>(0);
}

tree::TerminalNode* KerMLParser::Feature_valueContext::SYMBOL_EQUALS() {
  return getToken(KerMLParser::SYMBOL_EQUALS, 0);
}

tree::TerminalNode* KerMLParser::Feature_valueContext::SYMBOL_DEF_ASSIGN() {
  return getToken(KerMLParser::SYMBOL_DEF_ASSIGN, 0);
}

tree::TerminalNode* KerMLParser::Feature_valueContext::KEYWORD_DEFAULT() {
  return getToken(KerMLParser::KEYWORD_DEFAULT, 0);
}


size_t KerMLParser::Feature_valueContext::getRuleIndex() const {
  return KerMLParser::RuleFeature_value;
}

void KerMLParser::Feature_valueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFeature_value(this);
}

void KerMLParser::Feature_valueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFeature_value(this);
}

KerMLParser::Feature_valueContext* KerMLParser::feature_value() {
  Feature_valueContext *_localctx = _tracker.createInstance<Feature_valueContext>(_ctx, getState());
  enterRule(_localctx, 446, KerMLParser::RuleFeature_value);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1859);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case KerMLParser::SYMBOL_EQUALS: {
        setState(1853);
        match(KerMLParser::SYMBOL_EQUALS);
        break;
      }

      case KerMLParser::SYMBOL_DEF_ASSIGN: {
        setState(1854);
        match(KerMLParser::SYMBOL_DEF_ASSIGN);
        break;
      }

      case KerMLParser::KEYWORD_DEFAULT: {
        setState(1855);
        match(KerMLParser::KEYWORD_DEFAULT);
        setState(1857);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 188, _ctx)) {
        case 1: {
          setState(1856);
          _la = _input->LA(1);
          if (!(_la == KerMLParser::SYMBOL_DEF_ASSIGN

          || _la == KerMLParser::SYMBOL_EQUALS)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          break;
        }

        default:
          break;
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(1861);
    owned_expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Feature_assignmentContext ------------------------------------------------------------------

KerMLParser::Feature_assignmentContext::Feature_assignmentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Feature_assignmentContext::SYMBOL_ASSIGN() {
  return getToken(KerMLParser::SYMBOL_ASSIGN, 0);
}

KerMLParser::Owned_expressionContext* KerMLParser::Feature_assignmentContext::owned_expression() {
  return getRuleContext<KerMLParser::Owned_expressionContext>(0);
}


size_t KerMLParser::Feature_assignmentContext::getRuleIndex() const {
  return KerMLParser::RuleFeature_assignment;
}

void KerMLParser::Feature_assignmentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFeature_assignment(this);
}

void KerMLParser::Feature_assignmentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFeature_assignment(this);
}

KerMLParser::Feature_assignmentContext* KerMLParser::feature_assignment() {
  Feature_assignmentContext *_localctx = _tracker.createInstance<Feature_assignmentContext>(_ctx, getState());
  enterRule(_localctx, 448, KerMLParser::RuleFeature_assignment);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1863);
    match(KerMLParser::SYMBOL_ASSIGN);
    setState(1864);
    owned_expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MultiplicityContext ------------------------------------------------------------------

KerMLParser::MultiplicityContext::MultiplicityContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Multiplicity_subsetContext* KerMLParser::MultiplicityContext::multiplicity_subset() {
  return getRuleContext<KerMLParser::Multiplicity_subsetContext>(0);
}

KerMLParser::Multiplicity_rangeContext* KerMLParser::MultiplicityContext::multiplicity_range() {
  return getRuleContext<KerMLParser::Multiplicity_rangeContext>(0);
}


size_t KerMLParser::MultiplicityContext::getRuleIndex() const {
  return KerMLParser::RuleMultiplicity;
}

void KerMLParser::MultiplicityContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMultiplicity(this);
}

void KerMLParser::MultiplicityContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMultiplicity(this);
}

KerMLParser::MultiplicityContext* KerMLParser::multiplicity() {
  MultiplicityContext *_localctx = _tracker.createInstance<MultiplicityContext>(_ctx, getState());
  enterRule(_localctx, 450, KerMLParser::RuleMultiplicity);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1868);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 190, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1866);
      multiplicity_subset();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1867);
      multiplicity_range();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Multiplicity_subsetContext ------------------------------------------------------------------

KerMLParser::Multiplicity_subsetContext::Multiplicity_subsetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Multiplicity_subsetContext::KEYWORD_MULTIPLICITY() {
  return getToken(KerMLParser::KEYWORD_MULTIPLICITY, 0);
}

KerMLParser::IdentificationContext* KerMLParser::Multiplicity_subsetContext::identification() {
  return getRuleContext<KerMLParser::IdentificationContext>(0);
}

KerMLParser::SubsetsContext* KerMLParser::Multiplicity_subsetContext::subsets() {
  return getRuleContext<KerMLParser::SubsetsContext>(0);
}

KerMLParser::Type_bodyContext* KerMLParser::Multiplicity_subsetContext::type_body() {
  return getRuleContext<KerMLParser::Type_bodyContext>(0);
}


size_t KerMLParser::Multiplicity_subsetContext::getRuleIndex() const {
  return KerMLParser::RuleMultiplicity_subset;
}

void KerMLParser::Multiplicity_subsetContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMultiplicity_subset(this);
}

void KerMLParser::Multiplicity_subsetContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMultiplicity_subset(this);
}

KerMLParser::Multiplicity_subsetContext* KerMLParser::multiplicity_subset() {
  Multiplicity_subsetContext *_localctx = _tracker.createInstance<Multiplicity_subsetContext>(_ctx, getState());
  enterRule(_localctx, 452, KerMLParser::RuleMultiplicity_subset);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1870);
    match(KerMLParser::KEYWORD_MULTIPLICITY);
    setState(1871);
    identification();
    setState(1872);
    subsets();
    setState(1873);
    type_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Multiplicity_rangeContext ------------------------------------------------------------------

KerMLParser::Multiplicity_rangeContext::Multiplicity_rangeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Multiplicity_rangeContext::KEYWORD_MULTIPLICITY() {
  return getToken(KerMLParser::KEYWORD_MULTIPLICITY, 0);
}

KerMLParser::IdentificationContext* KerMLParser::Multiplicity_rangeContext::identification() {
  return getRuleContext<KerMLParser::IdentificationContext>(0);
}

KerMLParser::Multiplicity_boundsContext* KerMLParser::Multiplicity_rangeContext::multiplicity_bounds() {
  return getRuleContext<KerMLParser::Multiplicity_boundsContext>(0);
}

KerMLParser::Type_bodyContext* KerMLParser::Multiplicity_rangeContext::type_body() {
  return getRuleContext<KerMLParser::Type_bodyContext>(0);
}


size_t KerMLParser::Multiplicity_rangeContext::getRuleIndex() const {
  return KerMLParser::RuleMultiplicity_range;
}

void KerMLParser::Multiplicity_rangeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMultiplicity_range(this);
}

void KerMLParser::Multiplicity_rangeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMultiplicity_range(this);
}

KerMLParser::Multiplicity_rangeContext* KerMLParser::multiplicity_range() {
  Multiplicity_rangeContext *_localctx = _tracker.createInstance<Multiplicity_rangeContext>(_ctx, getState());
  enterRule(_localctx, 454, KerMLParser::RuleMultiplicity_range);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1875);
    match(KerMLParser::KEYWORD_MULTIPLICITY);
    setState(1876);
    identification();
    setState(1877);
    multiplicity_bounds();
    setState(1878);
    type_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Owned_multiplicityContext ------------------------------------------------------------------

KerMLParser::Owned_multiplicityContext::Owned_multiplicityContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Multiplicity_boundsContext* KerMLParser::Owned_multiplicityContext::multiplicity_bounds() {
  return getRuleContext<KerMLParser::Multiplicity_boundsContext>(0);
}


size_t KerMLParser::Owned_multiplicityContext::getRuleIndex() const {
  return KerMLParser::RuleOwned_multiplicity;
}

void KerMLParser::Owned_multiplicityContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOwned_multiplicity(this);
}

void KerMLParser::Owned_multiplicityContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOwned_multiplicity(this);
}

KerMLParser::Owned_multiplicityContext* KerMLParser::owned_multiplicity() {
  Owned_multiplicityContext *_localctx = _tracker.createInstance<Owned_multiplicityContext>(_ctx, getState());
  enterRule(_localctx, 456, KerMLParser::RuleOwned_multiplicity);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1880);
    multiplicity_bounds();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Owned_multiplicity_rangeContext ------------------------------------------------------------------

KerMLParser::Owned_multiplicity_rangeContext::Owned_multiplicity_rangeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Multiplicity_boundsContext* KerMLParser::Owned_multiplicity_rangeContext::multiplicity_bounds() {
  return getRuleContext<KerMLParser::Multiplicity_boundsContext>(0);
}


size_t KerMLParser::Owned_multiplicity_rangeContext::getRuleIndex() const {
  return KerMLParser::RuleOwned_multiplicity_range;
}

void KerMLParser::Owned_multiplicity_rangeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOwned_multiplicity_range(this);
}

void KerMLParser::Owned_multiplicity_rangeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOwned_multiplicity_range(this);
}

KerMLParser::Owned_multiplicity_rangeContext* KerMLParser::owned_multiplicity_range() {
  Owned_multiplicity_rangeContext *_localctx = _tracker.createInstance<Owned_multiplicity_rangeContext>(_ctx, getState());
  enterRule(_localctx, 458, KerMLParser::RuleOwned_multiplicity_range);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1882);
    multiplicity_bounds();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Multiplicity_boundsContext ------------------------------------------------------------------

KerMLParser::Multiplicity_boundsContext::Multiplicity_boundsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Multiplicity_boundsContext::SYMBOL_SQUARE_BRACKET_OPEN() {
  return getToken(KerMLParser::SYMBOL_SQUARE_BRACKET_OPEN, 0);
}

std::vector<KerMLParser::Multiplicity_expression_memberContext *> KerMLParser::Multiplicity_boundsContext::multiplicity_expression_member() {
  return getRuleContexts<KerMLParser::Multiplicity_expression_memberContext>();
}

KerMLParser::Multiplicity_expression_memberContext* KerMLParser::Multiplicity_boundsContext::multiplicity_expression_member(size_t i) {
  return getRuleContext<KerMLParser::Multiplicity_expression_memberContext>(i);
}

tree::TerminalNode* KerMLParser::Multiplicity_boundsContext::SYMBOL_SQUARE_BRACKET_CLOSE() {
  return getToken(KerMLParser::SYMBOL_SQUARE_BRACKET_CLOSE, 0);
}

tree::TerminalNode* KerMLParser::Multiplicity_boundsContext::SYMBOL_DDOT() {
  return getToken(KerMLParser::SYMBOL_DDOT, 0);
}


size_t KerMLParser::Multiplicity_boundsContext::getRuleIndex() const {
  return KerMLParser::RuleMultiplicity_bounds;
}

void KerMLParser::Multiplicity_boundsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMultiplicity_bounds(this);
}

void KerMLParser::Multiplicity_boundsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMultiplicity_bounds(this);
}

KerMLParser::Multiplicity_boundsContext* KerMLParser::multiplicity_bounds() {
  Multiplicity_boundsContext *_localctx = _tracker.createInstance<Multiplicity_boundsContext>(_ctx, getState());
  enterRule(_localctx, 460, KerMLParser::RuleMultiplicity_bounds);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1884);
    match(KerMLParser::SYMBOL_SQUARE_BRACKET_OPEN);
    setState(1888);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 191, _ctx)) {
    case 1: {
      setState(1885);
      multiplicity_expression_member();
      setState(1886);
      match(KerMLParser::SYMBOL_DDOT);
      break;
    }

    default:
      break;
    }
    setState(1890);
    multiplicity_expression_member();
    setState(1891);
    match(KerMLParser::SYMBOL_SQUARE_BRACKET_CLOSE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Multiplicity_expression_memberContext ------------------------------------------------------------------

KerMLParser::Multiplicity_expression_memberContext::Multiplicity_expression_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Internal_multiplicity_expression_memberContext* KerMLParser::Multiplicity_expression_memberContext::internal_multiplicity_expression_member() {
  return getRuleContext<KerMLParser::Internal_multiplicity_expression_memberContext>(0);
}


size_t KerMLParser::Multiplicity_expression_memberContext::getRuleIndex() const {
  return KerMLParser::RuleMultiplicity_expression_member;
}

void KerMLParser::Multiplicity_expression_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMultiplicity_expression_member(this);
}

void KerMLParser::Multiplicity_expression_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMultiplicity_expression_member(this);
}

KerMLParser::Multiplicity_expression_memberContext* KerMLParser::multiplicity_expression_member() {
  Multiplicity_expression_memberContext *_localctx = _tracker.createInstance<Multiplicity_expression_memberContext>(_ctx, getState());
  enterRule(_localctx, 462, KerMLParser::RuleMultiplicity_expression_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1893);
    internal_multiplicity_expression_member();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Internal_multiplicity_expression_memberContext ------------------------------------------------------------------

KerMLParser::Internal_multiplicity_expression_memberContext::Internal_multiplicity_expression_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Literal_expressionContext* KerMLParser::Internal_multiplicity_expression_memberContext::literal_expression() {
  return getRuleContext<KerMLParser::Literal_expressionContext>(0);
}

KerMLParser::Feature_reference_expressionContext* KerMLParser::Internal_multiplicity_expression_memberContext::feature_reference_expression() {
  return getRuleContext<KerMLParser::Feature_reference_expressionContext>(0);
}


size_t KerMLParser::Internal_multiplicity_expression_memberContext::getRuleIndex() const {
  return KerMLParser::RuleInternal_multiplicity_expression_member;
}

void KerMLParser::Internal_multiplicity_expression_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInternal_multiplicity_expression_member(this);
}

void KerMLParser::Internal_multiplicity_expression_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInternal_multiplicity_expression_member(this);
}

KerMLParser::Internal_multiplicity_expression_memberContext* KerMLParser::internal_multiplicity_expression_member() {
  Internal_multiplicity_expression_memberContext *_localctx = _tracker.createInstance<Internal_multiplicity_expression_memberContext>(_ctx, getState());
  enterRule(_localctx, 464, KerMLParser::RuleInternal_multiplicity_expression_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1897);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case KerMLParser::KEYWORD_FALSE:
      case KerMLParser::KEYWORD_TRUE:
      case KerMLParser::SYMBOL_STAR:
      case KerMLParser::SYMBOL_DOT:
      case KerMLParser::DECIMAL_VALUE:
      case KerMLParser::EXPONENTIAL_VALUE:
      case KerMLParser::STRING_VALUE: {
        setState(1895);
        literal_expression();
        break;
      }

      case KerMLParser::NAME: {
        setState(1896);
        feature_reference_expression();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MetaclassContext ------------------------------------------------------------------

KerMLParser::MetaclassContext::MetaclassContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::MetaclassContext::KEYWORD_METACLASS() {
  return getToken(KerMLParser::KEYWORD_METACLASS, 0);
}

KerMLParser::Type_bodyContext* KerMLParser::MetaclassContext::type_body() {
  return getRuleContext<KerMLParser::Type_bodyContext>(0);
}

KerMLParser::IdentificationContext* KerMLParser::MetaclassContext::identification() {
  return getRuleContext<KerMLParser::IdentificationContext>(0);
}

KerMLParser::Classifier_declarationContext* KerMLParser::MetaclassContext::classifier_declaration() {
  return getRuleContext<KerMLParser::Classifier_declarationContext>(0);
}

KerMLParser::Type_prefixContext* KerMLParser::MetaclassContext::type_prefix() {
  return getRuleContext<KerMLParser::Type_prefixContext>(0);
}

std::vector<tree::TerminalNode *> KerMLParser::MetaclassContext::NAME() {
  return getTokens(KerMLParser::NAME);
}

tree::TerminalNode* KerMLParser::MetaclassContext::NAME(size_t i) {
  return getToken(KerMLParser::NAME, i);
}

tree::TerminalNode* KerMLParser::MetaclassContext::SPECIALIZES() {
  return getToken(KerMLParser::SPECIALIZES, 0);
}


size_t KerMLParser::MetaclassContext::getRuleIndex() const {
  return KerMLParser::RuleMetaclass;
}

void KerMLParser::MetaclassContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMetaclass(this);
}

void KerMLParser::MetaclassContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMetaclass(this);
}

KerMLParser::MetaclassContext* KerMLParser::metaclass() {
  MetaclassContext *_localctx = _tracker.createInstance<MetaclassContext>(_ctx, getState());
  enterRule(_localctx, 466, KerMLParser::RuleMetaclass);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1900);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 193, _ctx)) {
    case 1: {
      setState(1899);
      type_prefix();
      break;
    }

    default:
      break;
    }
    setState(1902);
    match(KerMLParser::KEYWORD_METACLASS);
    setState(1905);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 194, _ctx)) {
    case 1: {
      setState(1903);
      identification();
      break;
    }

    case 2: {
      setState(1904);
      classifier_declaration();
      break;
    }

    default:
      break;
    }
    setState(1908);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::NAME) {
      setState(1907);
      match(KerMLParser::NAME);
    }
    setState(1912);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::SPECIALIZES) {
      setState(1910);
      match(KerMLParser::SPECIALIZES);
      setState(1911);
      match(KerMLParser::NAME);
    }
    setState(1914);
    type_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Prefix_metadata_annotationContext ------------------------------------------------------------------

KerMLParser::Prefix_metadata_annotationContext::Prefix_metadata_annotationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Prefix_metadata_annotationContext::SYMBOL_HASHTAG() {
  return getToken(KerMLParser::SYMBOL_HASHTAG, 0);
}

KerMLParser::Prefix_metadata_featureContext* KerMLParser::Prefix_metadata_annotationContext::prefix_metadata_feature() {
  return getRuleContext<KerMLParser::Prefix_metadata_featureContext>(0);
}


size_t KerMLParser::Prefix_metadata_annotationContext::getRuleIndex() const {
  return KerMLParser::RulePrefix_metadata_annotation;
}

void KerMLParser::Prefix_metadata_annotationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrefix_metadata_annotation(this);
}

void KerMLParser::Prefix_metadata_annotationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrefix_metadata_annotation(this);
}

KerMLParser::Prefix_metadata_annotationContext* KerMLParser::prefix_metadata_annotation() {
  Prefix_metadata_annotationContext *_localctx = _tracker.createInstance<Prefix_metadata_annotationContext>(_ctx, getState());
  enterRule(_localctx, 468, KerMLParser::RulePrefix_metadata_annotation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1916);
    match(KerMLParser::SYMBOL_HASHTAG);
    setState(1917);
    prefix_metadata_feature();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Prefix_metadata_memberContext ------------------------------------------------------------------

KerMLParser::Prefix_metadata_memberContext::Prefix_metadata_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Prefix_metadata_memberContext::SYMBOL_HASHTAG() {
  return getToken(KerMLParser::SYMBOL_HASHTAG, 0);
}

KerMLParser::Prefix_metadata_featureContext* KerMLParser::Prefix_metadata_memberContext::prefix_metadata_feature() {
  return getRuleContext<KerMLParser::Prefix_metadata_featureContext>(0);
}


size_t KerMLParser::Prefix_metadata_memberContext::getRuleIndex() const {
  return KerMLParser::RulePrefix_metadata_member;
}

void KerMLParser::Prefix_metadata_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrefix_metadata_member(this);
}

void KerMLParser::Prefix_metadata_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrefix_metadata_member(this);
}

KerMLParser::Prefix_metadata_memberContext* KerMLParser::prefix_metadata_member() {
  Prefix_metadata_memberContext *_localctx = _tracker.createInstance<Prefix_metadata_memberContext>(_ctx, getState());
  enterRule(_localctx, 470, KerMLParser::RulePrefix_metadata_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1919);
    match(KerMLParser::SYMBOL_HASHTAG);
    setState(1920);
    prefix_metadata_feature();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Prefix_metadata_featureContext ------------------------------------------------------------------

KerMLParser::Prefix_metadata_featureContext::Prefix_metadata_featureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Owned_feature_typingContext* KerMLParser::Prefix_metadata_featureContext::owned_feature_typing() {
  return getRuleContext<KerMLParser::Owned_feature_typingContext>(0);
}


size_t KerMLParser::Prefix_metadata_featureContext::getRuleIndex() const {
  return KerMLParser::RulePrefix_metadata_feature;
}

void KerMLParser::Prefix_metadata_featureContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrefix_metadata_feature(this);
}

void KerMLParser::Prefix_metadata_featureContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrefix_metadata_feature(this);
}

KerMLParser::Prefix_metadata_featureContext* KerMLParser::prefix_metadata_feature() {
  Prefix_metadata_featureContext *_localctx = _tracker.createInstance<Prefix_metadata_featureContext>(_ctx, getState());
  enterRule(_localctx, 472, KerMLParser::RulePrefix_metadata_feature);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1922);
    owned_feature_typing();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Metadata_featureContext ------------------------------------------------------------------

KerMLParser::Metadata_featureContext::Metadata_featureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Metadata_feature_declarationContext* KerMLParser::Metadata_featureContext::metadata_feature_declaration() {
  return getRuleContext<KerMLParser::Metadata_feature_declarationContext>(0);
}

tree::TerminalNode* KerMLParser::Metadata_featureContext::SYMBOL_AT() {
  return getToken(KerMLParser::SYMBOL_AT, 0);
}

tree::TerminalNode* KerMLParser::Metadata_featureContext::KEYWORD_METADATA() {
  return getToken(KerMLParser::KEYWORD_METADATA, 0);
}

tree::TerminalNode* KerMLParser::Metadata_featureContext::KEYWORD_ABOUT() {
  return getToken(KerMLParser::KEYWORD_ABOUT, 0);
}

std::vector<KerMLParser::AnnotationContext *> KerMLParser::Metadata_featureContext::annotation() {
  return getRuleContexts<KerMLParser::AnnotationContext>();
}

KerMLParser::AnnotationContext* KerMLParser::Metadata_featureContext::annotation(size_t i) {
  return getRuleContext<KerMLParser::AnnotationContext>(i);
}

std::vector<KerMLParser::Prefix_metadata_memberContext *> KerMLParser::Metadata_featureContext::prefix_metadata_member() {
  return getRuleContexts<KerMLParser::Prefix_metadata_memberContext>();
}

KerMLParser::Prefix_metadata_memberContext* KerMLParser::Metadata_featureContext::prefix_metadata_member(size_t i) {
  return getRuleContext<KerMLParser::Prefix_metadata_memberContext>(i);
}

tree::TerminalNode* KerMLParser::Metadata_featureContext::SYMBOL_COMMA() {
  return getToken(KerMLParser::SYMBOL_COMMA, 0);
}


size_t KerMLParser::Metadata_featureContext::getRuleIndex() const {
  return KerMLParser::RuleMetadata_feature;
}

void KerMLParser::Metadata_featureContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMetadata_feature(this);
}

void KerMLParser::Metadata_featureContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMetadata_feature(this);
}

KerMLParser::Metadata_featureContext* KerMLParser::metadata_feature() {
  Metadata_featureContext *_localctx = _tracker.createInstance<Metadata_featureContext>(_ctx, getState());
  enterRule(_localctx, 474, KerMLParser::RuleMetadata_feature);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1927);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == KerMLParser::SYMBOL_HASHTAG) {
      setState(1924);
      prefix_metadata_member();
      setState(1929);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1930);
    _la = _input->LA(1);
    if (!(_la == KerMLParser::KEYWORD_METADATA

    || _la == KerMLParser::SYMBOL_AT)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(1931);
    metadata_feature_declaration();

    setState(1932);
    match(KerMLParser::KEYWORD_ABOUT);
    setState(1933);
    annotation();

    setState(1934);
    match(KerMLParser::SYMBOL_COMMA);
    setState(1935);
    annotation();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Metadata_feature_declarationContext ------------------------------------------------------------------

KerMLParser::Metadata_feature_declarationContext::Metadata_feature_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Owned_feature_typingContext* KerMLParser::Metadata_feature_declarationContext::owned_feature_typing() {
  return getRuleContext<KerMLParser::Owned_feature_typingContext>(0);
}

KerMLParser::IdentificationContext* KerMLParser::Metadata_feature_declarationContext::identification() {
  return getRuleContext<KerMLParser::IdentificationContext>(0);
}

tree::TerminalNode* KerMLParser::Metadata_feature_declarationContext::SYMBOL_TYPED_BY() {
  return getToken(KerMLParser::SYMBOL_TYPED_BY, 0);
}

tree::TerminalNode* KerMLParser::Metadata_feature_declarationContext::KEYWORD_TYPED() {
  return getToken(KerMLParser::KEYWORD_TYPED, 0);
}

tree::TerminalNode* KerMLParser::Metadata_feature_declarationContext::KEYWORD_BY() {
  return getToken(KerMLParser::KEYWORD_BY, 0);
}


size_t KerMLParser::Metadata_feature_declarationContext::getRuleIndex() const {
  return KerMLParser::RuleMetadata_feature_declaration;
}

void KerMLParser::Metadata_feature_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMetadata_feature_declaration(this);
}

void KerMLParser::Metadata_feature_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMetadata_feature_declaration(this);
}

KerMLParser::Metadata_feature_declarationContext* KerMLParser::metadata_feature_declaration() {
  Metadata_feature_declarationContext *_localctx = _tracker.createInstance<Metadata_feature_declarationContext>(_ctx, getState());
  enterRule(_localctx, 476, KerMLParser::RuleMetadata_feature_declaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1943);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 199, _ctx)) {
    case 1: {
      setState(1937);
      identification();
      setState(1941);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case KerMLParser::SYMBOL_TYPED_BY: {
          setState(1938);
          match(KerMLParser::SYMBOL_TYPED_BY);
          break;
        }

        case KerMLParser::KEYWORD_TYPED: {
          setState(1939);
          match(KerMLParser::KEYWORD_TYPED);
          setState(1940);
          match(KerMLParser::KEYWORD_BY);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    default:
      break;
    }
    setState(1945);
    owned_feature_typing();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Metadata_bodyContext ------------------------------------------------------------------

KerMLParser::Metadata_bodyContext::Metadata_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Metadata_bodyContext::SYMBOL_STATEMENT_DELIMITER() {
  return getToken(KerMLParser::SYMBOL_STATEMENT_DELIMITER, 0);
}

tree::TerminalNode* KerMLParser::Metadata_bodyContext::SYMBOL_CURLY_BRACKET_OPEN() {
  return getToken(KerMLParser::SYMBOL_CURLY_BRACKET_OPEN, 0);
}

tree::TerminalNode* KerMLParser::Metadata_bodyContext::SYMBOL_CURLY_BRACKET_CLOSE() {
  return getToken(KerMLParser::SYMBOL_CURLY_BRACKET_CLOSE, 0);
}

std::vector<KerMLParser::Metadata_body_elementContext *> KerMLParser::Metadata_bodyContext::metadata_body_element() {
  return getRuleContexts<KerMLParser::Metadata_body_elementContext>();
}

KerMLParser::Metadata_body_elementContext* KerMLParser::Metadata_bodyContext::metadata_body_element(size_t i) {
  return getRuleContext<KerMLParser::Metadata_body_elementContext>(i);
}


size_t KerMLParser::Metadata_bodyContext::getRuleIndex() const {
  return KerMLParser::RuleMetadata_body;
}

void KerMLParser::Metadata_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMetadata_body(this);
}

void KerMLParser::Metadata_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMetadata_body(this);
}

KerMLParser::Metadata_bodyContext* KerMLParser::metadata_body() {
  Metadata_bodyContext *_localctx = _tracker.createInstance<Metadata_bodyContext>(_ctx, getState());
  enterRule(_localctx, 478, KerMLParser::RuleMetadata_body);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1956);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case KerMLParser::SYMBOL_STATEMENT_DELIMITER: {
        enterOuterAlt(_localctx, 1);
        setState(1947);
        match(KerMLParser::SYMBOL_STATEMENT_DELIMITER);
        break;
      }

      case KerMLParser::SYMBOL_CURLY_BRACKET_OPEN: {
        enterOuterAlt(_localctx, 2);
        setState(1948);
        match(KerMLParser::SYMBOL_CURLY_BRACKET_OPEN);
        setState(1952);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 8000688936081306136) != 0) || ((((_la - 66) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 66)) & -9214364664248538099) != 0) || _la == KerMLParser::NAME) {
          setState(1949);
          metadata_body_element();
          setState(1954);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(1955);
        match(KerMLParser::SYMBOL_CURLY_BRACKET_CLOSE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Metadata_body_elementContext ------------------------------------------------------------------

KerMLParser::Metadata_body_elementContext::Metadata_body_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Non_feature_memberContext* KerMLParser::Metadata_body_elementContext::non_feature_member() {
  return getRuleContext<KerMLParser::Non_feature_memberContext>(0);
}

KerMLParser::Metadata_body_feature_memberContext* KerMLParser::Metadata_body_elementContext::metadata_body_feature_member() {
  return getRuleContext<KerMLParser::Metadata_body_feature_memberContext>(0);
}

KerMLParser::Alias_memberContext* KerMLParser::Metadata_body_elementContext::alias_member() {
  return getRuleContext<KerMLParser::Alias_memberContext>(0);
}

KerMLParser::Import_declarationContext* KerMLParser::Metadata_body_elementContext::import_declaration() {
  return getRuleContext<KerMLParser::Import_declarationContext>(0);
}


size_t KerMLParser::Metadata_body_elementContext::getRuleIndex() const {
  return KerMLParser::RuleMetadata_body_element;
}

void KerMLParser::Metadata_body_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMetadata_body_element(this);
}

void KerMLParser::Metadata_body_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMetadata_body_element(this);
}

KerMLParser::Metadata_body_elementContext* KerMLParser::metadata_body_element() {
  Metadata_body_elementContext *_localctx = _tracker.createInstance<Metadata_body_elementContext>(_ctx, getState());
  enterRule(_localctx, 480, KerMLParser::RuleMetadata_body_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1962);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 202, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1958);
      non_feature_member();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1959);
      metadata_body_feature_member();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1960);
      alias_member();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1961);
      import_declaration();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Metadata_body_feature_memberContext ------------------------------------------------------------------

KerMLParser::Metadata_body_feature_memberContext::Metadata_body_feature_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Metadata_body_featureContext* KerMLParser::Metadata_body_feature_memberContext::metadata_body_feature() {
  return getRuleContext<KerMLParser::Metadata_body_featureContext>(0);
}


size_t KerMLParser::Metadata_body_feature_memberContext::getRuleIndex() const {
  return KerMLParser::RuleMetadata_body_feature_member;
}

void KerMLParser::Metadata_body_feature_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMetadata_body_feature_member(this);
}

void KerMLParser::Metadata_body_feature_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMetadata_body_feature_member(this);
}

KerMLParser::Metadata_body_feature_memberContext* KerMLParser::metadata_body_feature_member() {
  Metadata_body_feature_memberContext *_localctx = _tracker.createInstance<Metadata_body_feature_memberContext>(_ctx, getState());
  enterRule(_localctx, 482, KerMLParser::RuleMetadata_body_feature_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1964);
    metadata_body_feature();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Metadata_body_featureContext ------------------------------------------------------------------

KerMLParser::Metadata_body_featureContext::Metadata_body_featureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Owned_redefinitionContext* KerMLParser::Metadata_body_featureContext::owned_redefinition() {
  return getRuleContext<KerMLParser::Owned_redefinitionContext>(0);
}

KerMLParser::Metadata_bodyContext* KerMLParser::Metadata_body_featureContext::metadata_body() {
  return getRuleContext<KerMLParser::Metadata_bodyContext>(0);
}

tree::TerminalNode* KerMLParser::Metadata_body_featureContext::KEYWORD_FEATURE() {
  return getToken(KerMLParser::KEYWORD_FEATURE, 0);
}

KerMLParser::Feature_specialization_partContext* KerMLParser::Metadata_body_featureContext::feature_specialization_part() {
  return getRuleContext<KerMLParser::Feature_specialization_partContext>(0);
}

KerMLParser::Value_partContext* KerMLParser::Metadata_body_featureContext::value_part() {
  return getRuleContext<KerMLParser::Value_partContext>(0);
}

tree::TerminalNode* KerMLParser::Metadata_body_featureContext::SYMBOL_REDEFINES() {
  return getToken(KerMLParser::SYMBOL_REDEFINES, 0);
}

tree::TerminalNode* KerMLParser::Metadata_body_featureContext::KEYWORD_REDEFINES() {
  return getToken(KerMLParser::KEYWORD_REDEFINES, 0);
}


size_t KerMLParser::Metadata_body_featureContext::getRuleIndex() const {
  return KerMLParser::RuleMetadata_body_feature;
}

void KerMLParser::Metadata_body_featureContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMetadata_body_feature(this);
}

void KerMLParser::Metadata_body_featureContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMetadata_body_feature(this);
}

KerMLParser::Metadata_body_featureContext* KerMLParser::metadata_body_feature() {
  Metadata_body_featureContext *_localctx = _tracker.createInstance<Metadata_body_featureContext>(_ctx, getState());
  enterRule(_localctx, 484, KerMLParser::RuleMetadata_body_feature);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1967);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::KEYWORD_FEATURE) {
      setState(1966);
      match(KerMLParser::KEYWORD_FEATURE);
    }
    setState(1970);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::KEYWORD_REDEFINES

    || _la == KerMLParser::SYMBOL_REDEFINES) {
      setState(1969);
      _la = _input->LA(1);
      if (!(_la == KerMLParser::KEYWORD_REDEFINES

      || _la == KerMLParser::SYMBOL_REDEFINES)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(1972);
    owned_redefinition();
    setState(1974);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 432345564227568544) != 0) || _la == KerMLParser::KEYWORD_OUT

    || _la == KerMLParser::SYMBOL_SQUARE_BRACKET_OPEN) {
      setState(1973);
      feature_specialization_part();
    }
    setState(1977);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::KEYWORD_DEFAULT || _la == KerMLParser::SYMBOL_DEF_ASSIGN

    || _la == KerMLParser::SYMBOL_EQUALS) {
      setState(1976);
      value_part();
    }
    setState(1979);
    metadata_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PackageContext ------------------------------------------------------------------

KerMLParser::PackageContext::PackageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Package_declarationContext* KerMLParser::PackageContext::package_declaration() {
  return getRuleContext<KerMLParser::Package_declarationContext>(0);
}

KerMLParser::Package_bodyContext* KerMLParser::PackageContext::package_body() {
  return getRuleContext<KerMLParser::Package_bodyContext>(0);
}

std::vector<KerMLParser::Prefix_metadata_memberContext *> KerMLParser::PackageContext::prefix_metadata_member() {
  return getRuleContexts<KerMLParser::Prefix_metadata_memberContext>();
}

KerMLParser::Prefix_metadata_memberContext* KerMLParser::PackageContext::prefix_metadata_member(size_t i) {
  return getRuleContext<KerMLParser::Prefix_metadata_memberContext>(i);
}


size_t KerMLParser::PackageContext::getRuleIndex() const {
  return KerMLParser::RulePackage;
}

void KerMLParser::PackageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPackage(this);
}

void KerMLParser::PackageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPackage(this);
}

KerMLParser::PackageContext* KerMLParser::package() {
  PackageContext *_localctx = _tracker.createInstance<PackageContext>(_ctx, getState());
  enterRule(_localctx, 486, KerMLParser::RulePackage);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1984);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == KerMLParser::SYMBOL_HASHTAG) {
      setState(1981);
      prefix_metadata_member();
      setState(1986);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1987);
    package_declaration();
    setState(1988);
    package_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Library_packageContext ------------------------------------------------------------------

KerMLParser::Library_packageContext::Library_packageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Package_declarationContext* KerMLParser::Library_packageContext::package_declaration() {
  return getRuleContext<KerMLParser::Package_declarationContext>(0);
}

KerMLParser::Package_bodyContext* KerMLParser::Library_packageContext::package_body() {
  return getRuleContext<KerMLParser::Package_bodyContext>(0);
}

std::vector<KerMLParser::Prefix_metadata_memberContext *> KerMLParser::Library_packageContext::prefix_metadata_member() {
  return getRuleContexts<KerMLParser::Prefix_metadata_memberContext>();
}

KerMLParser::Prefix_metadata_memberContext* KerMLParser::Library_packageContext::prefix_metadata_member(size_t i) {
  return getRuleContext<KerMLParser::Prefix_metadata_memberContext>(i);
}


size_t KerMLParser::Library_packageContext::getRuleIndex() const {
  return KerMLParser::RuleLibrary_package;
}

void KerMLParser::Library_packageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLibrary_package(this);
}

void KerMLParser::Library_packageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLibrary_package(this);
}

KerMLParser::Library_packageContext* KerMLParser::library_package() {
  Library_packageContext *_localctx = _tracker.createInstance<Library_packageContext>(_ctx, getState());
  enterRule(_localctx, 488, KerMLParser::RuleLibrary_package);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1991);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::T__2) {
      setState(1990);
      match(KerMLParser::T__2);
    }
    setState(1993);
    match(KerMLParser::T__3);
    setState(1997);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == KerMLParser::SYMBOL_HASHTAG) {
      setState(1994);
      prefix_metadata_member();
      setState(1999);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2000);
    package_declaration();
    setState(2001);
    package_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Package_declarationContext ------------------------------------------------------------------

KerMLParser::Package_declarationContext::Package_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Package_declarationContext::KEYWORD_PACKAGE() {
  return getToken(KerMLParser::KEYWORD_PACKAGE, 0);
}

KerMLParser::IdentificationContext* KerMLParser::Package_declarationContext::identification() {
  return getRuleContext<KerMLParser::IdentificationContext>(0);
}


size_t KerMLParser::Package_declarationContext::getRuleIndex() const {
  return KerMLParser::RulePackage_declaration;
}

void KerMLParser::Package_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPackage_declaration(this);
}

void KerMLParser::Package_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPackage_declaration(this);
}

KerMLParser::Package_declarationContext* KerMLParser::package_declaration() {
  Package_declarationContext *_localctx = _tracker.createInstance<Package_declarationContext>(_ctx, getState());
  enterRule(_localctx, 490, KerMLParser::RulePackage_declaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2003);
    match(KerMLParser::KEYWORD_PACKAGE);
    setState(2004);
    identification();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Package_bodyContext ------------------------------------------------------------------

KerMLParser::Package_bodyContext::Package_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Package_bodyContext::SYMBOL_STATEMENT_DELIMITER() {
  return getToken(KerMLParser::SYMBOL_STATEMENT_DELIMITER, 0);
}

tree::TerminalNode* KerMLParser::Package_bodyContext::SYMBOL_CURLY_BRACKET_OPEN() {
  return getToken(KerMLParser::SYMBOL_CURLY_BRACKET_OPEN, 0);
}

tree::TerminalNode* KerMLParser::Package_bodyContext::SYMBOL_CURLY_BRACKET_CLOSE() {
  return getToken(KerMLParser::SYMBOL_CURLY_BRACKET_CLOSE, 0);
}

std::vector<KerMLParser::Namespace_body_elementContext *> KerMLParser::Package_bodyContext::namespace_body_element() {
  return getRuleContexts<KerMLParser::Namespace_body_elementContext>();
}

KerMLParser::Namespace_body_elementContext* KerMLParser::Package_bodyContext::namespace_body_element(size_t i) {
  return getRuleContext<KerMLParser::Namespace_body_elementContext>(i);
}

std::vector<KerMLParser::Element_filter_memberContext *> KerMLParser::Package_bodyContext::element_filter_member() {
  return getRuleContexts<KerMLParser::Element_filter_memberContext>();
}

KerMLParser::Element_filter_memberContext* KerMLParser::Package_bodyContext::element_filter_member(size_t i) {
  return getRuleContext<KerMLParser::Element_filter_memberContext>(i);
}

std::vector<KerMLParser::ElementContext *> KerMLParser::Package_bodyContext::element() {
  return getRuleContexts<KerMLParser::ElementContext>();
}

KerMLParser::ElementContext* KerMLParser::Package_bodyContext::element(size_t i) {
  return getRuleContext<KerMLParser::ElementContext>(i);
}


size_t KerMLParser::Package_bodyContext::getRuleIndex() const {
  return KerMLParser::RulePackage_body;
}

void KerMLParser::Package_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPackage_body(this);
}

void KerMLParser::Package_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPackage_body(this);
}

KerMLParser::Package_bodyContext* KerMLParser::package_body() {
  Package_bodyContext *_localctx = _tracker.createInstance<Package_bodyContext>(_ctx, getState());
  enterRule(_localctx, 492, KerMLParser::RulePackage_body);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2017);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case KerMLParser::SYMBOL_STATEMENT_DELIMITER: {
        enterOuterAlt(_localctx, 1);
        setState(2006);
        match(KerMLParser::SYMBOL_STATEMENT_DELIMITER);
        break;
      }

      case KerMLParser::SYMBOL_CURLY_BRACKET_OPEN: {
        enterOuterAlt(_localctx, 2);
        setState(2007);
        match(KerMLParser::SYMBOL_CURLY_BRACKET_OPEN);
        setState(2011); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(2011);
          _errHandler->sync(this);
          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 210, _ctx)) {
          case 1: {
            setState(2008);
            namespace_body_element();
            break;
          }

          case 2: {
            setState(2009);
            element_filter_member();
            break;
          }

          case 3: {
            setState(2010);
            element();
            break;
          }

          default:
            break;
          }
          setState(2013); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 9153965876177678874) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 64)) & 40284556619837) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 128)) & 67108867) != 0));
        setState(2015);
        match(KerMLParser::SYMBOL_CURLY_BRACKET_CLOSE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Element_filter_memberContext ------------------------------------------------------------------

KerMLParser::Element_filter_memberContext::Element_filter_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Member_prefixContext* KerMLParser::Element_filter_memberContext::member_prefix() {
  return getRuleContext<KerMLParser::Member_prefixContext>(0);
}

tree::TerminalNode* KerMLParser::Element_filter_memberContext::KEYWORD_FILTER() {
  return getToken(KerMLParser::KEYWORD_FILTER, 0);
}

KerMLParser::Owned_expressionContext* KerMLParser::Element_filter_memberContext::owned_expression() {
  return getRuleContext<KerMLParser::Owned_expressionContext>(0);
}

tree::TerminalNode* KerMLParser::Element_filter_memberContext::SYMBOL_STATEMENT_DELIMITER() {
  return getToken(KerMLParser::SYMBOL_STATEMENT_DELIMITER, 0);
}


size_t KerMLParser::Element_filter_memberContext::getRuleIndex() const {
  return KerMLParser::RuleElement_filter_member;
}

void KerMLParser::Element_filter_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElement_filter_member(this);
}

void KerMLParser::Element_filter_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElement_filter_member(this);
}

KerMLParser::Element_filter_memberContext* KerMLParser::element_filter_member() {
  Element_filter_memberContext *_localctx = _tracker.createInstance<Element_filter_memberContext>(_ctx, getState());
  enterRule(_localctx, 494, KerMLParser::RuleElement_filter_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2019);
    member_prefix();
    setState(2020);
    match(KerMLParser::KEYWORD_FILTER);
    setState(2021);
    owned_expression();
    setState(2022);
    match(KerMLParser::SYMBOL_STATEMENT_DELIMITER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Meta_assignmentContext ------------------------------------------------------------------

KerMLParser::Meta_assignmentContext::Meta_assignmentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<KerMLParser::Qualified_nameContext *> KerMLParser::Meta_assignmentContext::qualified_name() {
  return getRuleContexts<KerMLParser::Qualified_nameContext>();
}

KerMLParser::Qualified_nameContext* KerMLParser::Meta_assignmentContext::qualified_name(size_t i) {
  return getRuleContext<KerMLParser::Qualified_nameContext>(i);
}

tree::TerminalNode* KerMLParser::Meta_assignmentContext::SYMBOL_ASSIGN() {
  return getToken(KerMLParser::SYMBOL_ASSIGN, 0);
}

KerMLParser::IdentificationContext* KerMLParser::Meta_assignmentContext::identification() {
  return getRuleContext<KerMLParser::IdentificationContext>(0);
}

tree::TerminalNode* KerMLParser::Meta_assignmentContext::SYMBOL_STATEMENT_DELIMITER() {
  return getToken(KerMLParser::SYMBOL_STATEMENT_DELIMITER, 0);
}


size_t KerMLParser::Meta_assignmentContext::getRuleIndex() const {
  return KerMLParser::RuleMeta_assignment;
}

void KerMLParser::Meta_assignmentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMeta_assignment(this);
}

void KerMLParser::Meta_assignmentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMeta_assignment(this);
}

KerMLParser::Meta_assignmentContext* KerMLParser::meta_assignment() {
  Meta_assignmentContext *_localctx = _tracker.createInstance<Meta_assignmentContext>(_ctx, getState());
  enterRule(_localctx, 496, KerMLParser::RuleMeta_assignment);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2024);
    qualified_name();
    setState(2025);
    match(KerMLParser::SYMBOL_ASSIGN);
    setState(2026);
    identification();
    setState(2027);
    match(KerMLParser::T__1);
    setState(2028);
    qualified_name();
    setState(2029);
    match(KerMLParser::SYMBOL_STATEMENT_DELIMITER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

void KerMLParser::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  kermlParserInitialize();
#else
  ::antlr4::internal::call_once(kermlParserOnceFlag, kermlParserInitialize);
#endif
}
