
// Generated from SysMLv2.g4 by ANTLR 4.13.2


#include "SysMLv2Lexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct SysMLv2LexerStaticData final {
  SysMLv2LexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  SysMLv2LexerStaticData(const SysMLv2LexerStaticData&) = delete;
  SysMLv2LexerStaticData(SysMLv2LexerStaticData&&) = delete;
  SysMLv2LexerStaticData& operator=(const SysMLv2LexerStaticData&) = delete;
  SysMLv2LexerStaticData& operator=(SysMLv2LexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag sysmlv2lexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
std::unique_ptr<SysMLv2LexerStaticData> sysmlv2lexerLexerStaticData = nullptr;

void sysmlv2lexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (sysmlv2lexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(sysmlv2lexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<SysMLv2LexerStaticData>(
    std::vector<std::string>{
      "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
      "T__9", "T__10", "DEPENDENCY", "REPRESENTATION", "LANGUAGE_DESCRIPTOR", 
      "DOCUMENTATION", "COMMENT", "ABOUT", "PART", "BLOCK_COMMENT", "LINE_COMMENT", 
      "TO", "FROM", "FOR", "DELIMITER", "PORT", "ITEM", "PACKAGE", "DEFINITION", 
      "ATTRIBUTE", "MEASURABLE", "CONTROLLABLE", "ASSERT", "ACTION", "ALIAS", 
      "PRIVATE", "PROTECTED", "PUBLIC", "IMPORT", "ABSTRACT", "VARIATION", 
      "VARIANT", "STAR", "CALC", "IN", "OUT", "RETURN", "HASHTAG", "COMMAND", 
      "VARIABLE", "CONNECT_TO", "INSTANCE", "INDIVIDUAL", "SUPERCLASS", 
      "NUMBER", "NAME", "INT", "WS"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "':'", "','", "'\"'", "'''", "'::'", "'{'", "'}'", "'('", "')'", 
      "'['", "']'", "'dependency'", "'rep'", "'language'", "'doc'", "'comment'", 
      "'about'", "'part'", "", "", "'to'", "'from'", "'for'", "';'", "'port'", 
      "'item'", "'package'", "'def'", "'attribute'", "'measurable'", "'controllable'", 
      "'assert'", "'action'", "'alias'", "'private'", "'protected'", "'public'", 
      "'import'", "'abstract'", "'variation'", "'variant'", "'*'", "'calc'", 
      "'in'", "'out'", "'return'", "'#'", "'command'", "'variable'", "'connectTo'", 
      "'instance'", "'individual'", "':>'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "DEPENDENCY", "REPRESENTATION", 
      "LANGUAGE_DESCRIPTOR", "DOCUMENTATION", "COMMENT", "ABOUT", "PART", 
      "BLOCK_COMMENT", "LINE_COMMENT", "TO", "FROM", "FOR", "DELIMITER", 
      "PORT", "ITEM", "PACKAGE", "DEFINITION", "ATTRIBUTE", "MEASURABLE", 
      "CONTROLLABLE", "ASSERT", "ACTION", "ALIAS", "PRIVATE", "PROTECTED", 
      "PUBLIC", "IMPORT", "ABSTRACT", "VARIATION", "VARIANT", "STAR", "CALC", 
      "IN", "OUT", "RETURN", "HASHTAG", "COMMAND", "VARIABLE", "CONNECT_TO", 
      "INSTANCE", "INDIVIDUAL", "SUPERCLASS", "NUMBER", "NAME", "INT", "WS"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,57,450,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,6,1,6,1,7,
  	1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
  	1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
  	1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
  	1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,
  	1,18,5,18,190,8,18,10,18,12,18,193,9,18,1,18,1,18,1,18,1,19,1,19,1,19,
  	1,19,5,19,202,8,19,10,19,12,19,205,9,19,1,20,1,20,1,20,1,21,1,21,1,21,
  	1,21,1,21,1,22,1,22,1,22,1,22,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,25,
  	1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,
  	1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,
  	1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,
  	1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,
  	1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,
  	1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,
  	1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,
  	1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,39,
  	1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,
  	1,40,1,40,1,40,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,44,
  	1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,46,1,46,1,47,1,47,
  	1,47,1,47,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,
  	1,48,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,50,1,50,1,50,
  	1,50,1,50,1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,
  	1,51,1,51,1,51,1,52,1,52,1,52,1,53,4,53,430,8,53,11,53,12,53,431,1,54,
  	4,54,435,8,54,11,54,12,54,436,1,55,4,55,440,8,55,11,55,12,55,441,1,56,
  	4,56,445,8,56,11,56,12,56,446,1,56,1,56,1,191,0,57,1,1,3,2,5,3,7,4,9,
  	5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,
  	35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,
  	29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,
  	81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,
  	52,105,53,107,54,109,55,111,56,113,57,1,0,4,2,0,10,10,13,13,1,0,48,57,
  	4,0,48,57,65,90,95,95,97,122,3,0,9,10,13,13,32,32,455,0,1,1,0,0,0,0,3,
  	1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,
  	0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,
  	1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,
  	0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,
  	0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,
  	1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,
  	0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,
  	0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,
  	1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,
  	0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,
  	0,0,0,111,1,0,0,0,0,113,1,0,0,0,1,115,1,0,0,0,3,117,1,0,0,0,5,119,1,0,
  	0,0,7,121,1,0,0,0,9,123,1,0,0,0,11,126,1,0,0,0,13,128,1,0,0,0,15,130,
  	1,0,0,0,17,132,1,0,0,0,19,134,1,0,0,0,21,136,1,0,0,0,23,138,1,0,0,0,25,
  	149,1,0,0,0,27,153,1,0,0,0,29,162,1,0,0,0,31,166,1,0,0,0,33,174,1,0,0,
  	0,35,180,1,0,0,0,37,185,1,0,0,0,39,197,1,0,0,0,41,206,1,0,0,0,43,209,
  	1,0,0,0,45,214,1,0,0,0,47,218,1,0,0,0,49,220,1,0,0,0,51,225,1,0,0,0,53,
  	230,1,0,0,0,55,238,1,0,0,0,57,242,1,0,0,0,59,252,1,0,0,0,61,263,1,0,0,
  	0,63,276,1,0,0,0,65,283,1,0,0,0,67,290,1,0,0,0,69,296,1,0,0,0,71,304,
  	1,0,0,0,73,314,1,0,0,0,75,321,1,0,0,0,77,328,1,0,0,0,79,337,1,0,0,0,81,
  	347,1,0,0,0,83,355,1,0,0,0,85,357,1,0,0,0,87,362,1,0,0,0,89,365,1,0,0,
  	0,91,369,1,0,0,0,93,376,1,0,0,0,95,378,1,0,0,0,97,386,1,0,0,0,99,395,
  	1,0,0,0,101,405,1,0,0,0,103,414,1,0,0,0,105,425,1,0,0,0,107,429,1,0,0,
  	0,109,434,1,0,0,0,111,439,1,0,0,0,113,444,1,0,0,0,115,116,5,58,0,0,116,
  	2,1,0,0,0,117,118,5,44,0,0,118,4,1,0,0,0,119,120,5,34,0,0,120,6,1,0,0,
  	0,121,122,5,39,0,0,122,8,1,0,0,0,123,124,5,58,0,0,124,125,5,58,0,0,125,
  	10,1,0,0,0,126,127,5,123,0,0,127,12,1,0,0,0,128,129,5,125,0,0,129,14,
  	1,0,0,0,130,131,5,40,0,0,131,16,1,0,0,0,132,133,5,41,0,0,133,18,1,0,0,
  	0,134,135,5,91,0,0,135,20,1,0,0,0,136,137,5,93,0,0,137,22,1,0,0,0,138,
  	139,5,100,0,0,139,140,5,101,0,0,140,141,5,112,0,0,141,142,5,101,0,0,142,
  	143,5,110,0,0,143,144,5,100,0,0,144,145,5,101,0,0,145,146,5,110,0,0,146,
  	147,5,99,0,0,147,148,5,121,0,0,148,24,1,0,0,0,149,150,5,114,0,0,150,151,
  	5,101,0,0,151,152,5,112,0,0,152,26,1,0,0,0,153,154,5,108,0,0,154,155,
  	5,97,0,0,155,156,5,110,0,0,156,157,5,103,0,0,157,158,5,117,0,0,158,159,
  	5,97,0,0,159,160,5,103,0,0,160,161,5,101,0,0,161,28,1,0,0,0,162,163,5,
  	100,0,0,163,164,5,111,0,0,164,165,5,99,0,0,165,30,1,0,0,0,166,167,5,99,
  	0,0,167,168,5,111,0,0,168,169,5,109,0,0,169,170,5,109,0,0,170,171,5,101,
  	0,0,171,172,5,110,0,0,172,173,5,116,0,0,173,32,1,0,0,0,174,175,5,97,0,
  	0,175,176,5,98,0,0,176,177,5,111,0,0,177,178,5,117,0,0,178,179,5,116,
  	0,0,179,34,1,0,0,0,180,181,5,112,0,0,181,182,5,97,0,0,182,183,5,114,0,
  	0,183,184,5,116,0,0,184,36,1,0,0,0,185,186,5,47,0,0,186,187,5,42,0,0,
  	187,191,1,0,0,0,188,190,9,0,0,0,189,188,1,0,0,0,190,193,1,0,0,0,191,192,
  	1,0,0,0,191,189,1,0,0,0,192,194,1,0,0,0,193,191,1,0,0,0,194,195,5,42,
  	0,0,195,196,5,47,0,0,196,38,1,0,0,0,197,198,5,47,0,0,198,199,5,47,0,0,
  	199,203,1,0,0,0,200,202,8,0,0,0,201,200,1,0,0,0,202,205,1,0,0,0,203,201,
  	1,0,0,0,203,204,1,0,0,0,204,40,1,0,0,0,205,203,1,0,0,0,206,207,5,116,
  	0,0,207,208,5,111,0,0,208,42,1,0,0,0,209,210,5,102,0,0,210,211,5,114,
  	0,0,211,212,5,111,0,0,212,213,5,109,0,0,213,44,1,0,0,0,214,215,5,102,
  	0,0,215,216,5,111,0,0,216,217,5,114,0,0,217,46,1,0,0,0,218,219,5,59,0,
  	0,219,48,1,0,0,0,220,221,5,112,0,0,221,222,5,111,0,0,222,223,5,114,0,
  	0,223,224,5,116,0,0,224,50,1,0,0,0,225,226,5,105,0,0,226,227,5,116,0,
  	0,227,228,5,101,0,0,228,229,5,109,0,0,229,52,1,0,0,0,230,231,5,112,0,
  	0,231,232,5,97,0,0,232,233,5,99,0,0,233,234,5,107,0,0,234,235,5,97,0,
  	0,235,236,5,103,0,0,236,237,5,101,0,0,237,54,1,0,0,0,238,239,5,100,0,
  	0,239,240,5,101,0,0,240,241,5,102,0,0,241,56,1,0,0,0,242,243,5,97,0,0,
  	243,244,5,116,0,0,244,245,5,116,0,0,245,246,5,114,0,0,246,247,5,105,0,
  	0,247,248,5,98,0,0,248,249,5,117,0,0,249,250,5,116,0,0,250,251,5,101,
  	0,0,251,58,1,0,0,0,252,253,5,109,0,0,253,254,5,101,0,0,254,255,5,97,0,
  	0,255,256,5,115,0,0,256,257,5,117,0,0,257,258,5,114,0,0,258,259,5,97,
  	0,0,259,260,5,98,0,0,260,261,5,108,0,0,261,262,5,101,0,0,262,60,1,0,0,
  	0,263,264,5,99,0,0,264,265,5,111,0,0,265,266,5,110,0,0,266,267,5,116,
  	0,0,267,268,5,114,0,0,268,269,5,111,0,0,269,270,5,108,0,0,270,271,5,108,
  	0,0,271,272,5,97,0,0,272,273,5,98,0,0,273,274,5,108,0,0,274,275,5,101,
  	0,0,275,62,1,0,0,0,276,277,5,97,0,0,277,278,5,115,0,0,278,279,5,115,0,
  	0,279,280,5,101,0,0,280,281,5,114,0,0,281,282,5,116,0,0,282,64,1,0,0,
  	0,283,284,5,97,0,0,284,285,5,99,0,0,285,286,5,116,0,0,286,287,5,105,0,
  	0,287,288,5,111,0,0,288,289,5,110,0,0,289,66,1,0,0,0,290,291,5,97,0,0,
  	291,292,5,108,0,0,292,293,5,105,0,0,293,294,5,97,0,0,294,295,5,115,0,
  	0,295,68,1,0,0,0,296,297,5,112,0,0,297,298,5,114,0,0,298,299,5,105,0,
  	0,299,300,5,118,0,0,300,301,5,97,0,0,301,302,5,116,0,0,302,303,5,101,
  	0,0,303,70,1,0,0,0,304,305,5,112,0,0,305,306,5,114,0,0,306,307,5,111,
  	0,0,307,308,5,116,0,0,308,309,5,101,0,0,309,310,5,99,0,0,310,311,5,116,
  	0,0,311,312,5,101,0,0,312,313,5,100,0,0,313,72,1,0,0,0,314,315,5,112,
  	0,0,315,316,5,117,0,0,316,317,5,98,0,0,317,318,5,108,0,0,318,319,5,105,
  	0,0,319,320,5,99,0,0,320,74,1,0,0,0,321,322,5,105,0,0,322,323,5,109,0,
  	0,323,324,5,112,0,0,324,325,5,111,0,0,325,326,5,114,0,0,326,327,5,116,
  	0,0,327,76,1,0,0,0,328,329,5,97,0,0,329,330,5,98,0,0,330,331,5,115,0,
  	0,331,332,5,116,0,0,332,333,5,114,0,0,333,334,5,97,0,0,334,335,5,99,0,
  	0,335,336,5,116,0,0,336,78,1,0,0,0,337,338,5,118,0,0,338,339,5,97,0,0,
  	339,340,5,114,0,0,340,341,5,105,0,0,341,342,5,97,0,0,342,343,5,116,0,
  	0,343,344,5,105,0,0,344,345,5,111,0,0,345,346,5,110,0,0,346,80,1,0,0,
  	0,347,348,5,118,0,0,348,349,5,97,0,0,349,350,5,114,0,0,350,351,5,105,
  	0,0,351,352,5,97,0,0,352,353,5,110,0,0,353,354,5,116,0,0,354,82,1,0,0,
  	0,355,356,5,42,0,0,356,84,1,0,0,0,357,358,5,99,0,0,358,359,5,97,0,0,359,
  	360,5,108,0,0,360,361,5,99,0,0,361,86,1,0,0,0,362,363,5,105,0,0,363,364,
  	5,110,0,0,364,88,1,0,0,0,365,366,5,111,0,0,366,367,5,117,0,0,367,368,
  	5,116,0,0,368,90,1,0,0,0,369,370,5,114,0,0,370,371,5,101,0,0,371,372,
  	5,116,0,0,372,373,5,117,0,0,373,374,5,114,0,0,374,375,5,110,0,0,375,92,
  	1,0,0,0,376,377,5,35,0,0,377,94,1,0,0,0,378,379,5,99,0,0,379,380,5,111,
  	0,0,380,381,5,109,0,0,381,382,5,109,0,0,382,383,5,97,0,0,383,384,5,110,
  	0,0,384,385,5,100,0,0,385,96,1,0,0,0,386,387,5,118,0,0,387,388,5,97,0,
  	0,388,389,5,114,0,0,389,390,5,105,0,0,390,391,5,97,0,0,391,392,5,98,0,
  	0,392,393,5,108,0,0,393,394,5,101,0,0,394,98,1,0,0,0,395,396,5,99,0,0,
  	396,397,5,111,0,0,397,398,5,110,0,0,398,399,5,110,0,0,399,400,5,101,0,
  	0,400,401,5,99,0,0,401,402,5,116,0,0,402,403,5,84,0,0,403,404,5,111,0,
  	0,404,100,1,0,0,0,405,406,5,105,0,0,406,407,5,110,0,0,407,408,5,115,0,
  	0,408,409,5,116,0,0,409,410,5,97,0,0,410,411,5,110,0,0,411,412,5,99,0,
  	0,412,413,5,101,0,0,413,102,1,0,0,0,414,415,5,105,0,0,415,416,5,110,0,
  	0,416,417,5,100,0,0,417,418,5,105,0,0,418,419,5,118,0,0,419,420,5,105,
  	0,0,420,421,5,100,0,0,421,422,5,117,0,0,422,423,5,97,0,0,423,424,5,108,
  	0,0,424,104,1,0,0,0,425,426,5,58,0,0,426,427,5,62,0,0,427,106,1,0,0,0,
  	428,430,7,1,0,0,429,428,1,0,0,0,430,431,1,0,0,0,431,429,1,0,0,0,431,432,
  	1,0,0,0,432,108,1,0,0,0,433,435,7,2,0,0,434,433,1,0,0,0,435,436,1,0,0,
  	0,436,434,1,0,0,0,436,437,1,0,0,0,437,110,1,0,0,0,438,440,7,1,0,0,439,
  	438,1,0,0,0,440,441,1,0,0,0,441,439,1,0,0,0,441,442,1,0,0,0,442,112,1,
  	0,0,0,443,445,7,3,0,0,444,443,1,0,0,0,445,446,1,0,0,0,446,444,1,0,0,0,
  	446,447,1,0,0,0,447,448,1,0,0,0,448,449,6,56,0,0,449,114,1,0,0,0,8,0,
  	191,203,431,434,436,441,446,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  sysmlv2lexerLexerStaticData = std::move(staticData);
}

}

SysMLv2Lexer::SysMLv2Lexer(CharStream *input) : Lexer(input) {
  SysMLv2Lexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *sysmlv2lexerLexerStaticData->atn, sysmlv2lexerLexerStaticData->decisionToDFA, sysmlv2lexerLexerStaticData->sharedContextCache);
}

SysMLv2Lexer::~SysMLv2Lexer() {
  delete _interpreter;
}

std::string SysMLv2Lexer::getGrammarFileName() const {
  return "SysMLv2.g4";
}

const std::vector<std::string>& SysMLv2Lexer::getRuleNames() const {
  return sysmlv2lexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& SysMLv2Lexer::getChannelNames() const {
  return sysmlv2lexerLexerStaticData->channelNames;
}

const std::vector<std::string>& SysMLv2Lexer::getModeNames() const {
  return sysmlv2lexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& SysMLv2Lexer::getVocabulary() const {
  return sysmlv2lexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView SysMLv2Lexer::getSerializedATN() const {
  return sysmlv2lexerLexerStaticData->serializedATN;
}

const atn::ATN& SysMLv2Lexer::getATN() const {
  return *sysmlv2lexerLexerStaticData->atn;
}




void SysMLv2Lexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  sysmlv2lexerLexerInitialize();
#else
  ::antlr4::internal::call_once(sysmlv2lexerLexerOnceFlag, sysmlv2lexerLexerInitialize);
#endif
}
