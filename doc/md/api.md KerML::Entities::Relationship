# class `KerML::Entities::Relationship` {#d0/d55/class_ker_m_l_1_1_entities_1_1_relationship}

```
class KerML::Entities::Relationship
  : public KerML::Entities::Element
```  

Moritz Herzog 

1.0 Beta 2 A [Relationship](#d0/d55/class_ker_m_l_1_1_entities_1_1_relationship) is an [Element](api.md KerML::Entities::Element#d3/dc7/class_ker_m_l_1_1_entities_1_1_element) that relates two elements to each other.

## Summary

 Members                        | Descriptions                                
--------------------------------|---------------------------------------------
`public  explicit `[`Relationship`](#d0/d55/class_ker_m_l_1_1_entities_1_1_relationship_1a6828ab0a5934d03f6858ec84193a0ccd)`(boost::uuids::uuid elementID,std::shared_ptr< `[`Element`](api.md KerML::Entities::Element#d3/dc7/class_ker_m_l_1_1_entities_1_1_element)` > owner)` | Constructor of the [Relationship](#d0/d55/class_ker_m_l_1_1_entities_1_1_relationship). This constructor does allow for an empty elementID. 
`public  explicit `[`Relationship`](#d0/d55/class_ker_m_l_1_1_entities_1_1_relationship_1a1e4e57db6cd1128e42fece6461fe014a)`(std::string elementID,std::shared_ptr< `[`Element`](api.md KerML::Entities::Element#d3/dc7/class_ker_m_l_1_1_entities_1_1_element)` > owner)` | Constructor of the [Relationship](#d0/d55/class_ker_m_l_1_1_entities_1_1_relationship). This constructor does not allow for an empty elementID. 
`public virtual  `[`~Relationship`](#d0/d55/class_ker_m_l_1_1_entities_1_1_relationship_1a2bf714f78b988a26b66d195b3eb19620)`() = default` | Destructor. An implementation is not required, since shared pointer are used.
`public void `[`setIsImplied`](#d0/d55/class_ker_m_l_1_1_entities_1_1_relationship_1a3d040e9729b6646a83ecf85aab5192fd)`(bool isImplied)` | Sets the Implied option. This should be set true if the relationship is implied by the elements. 
`public bool `[`isImplied`](#d0/d55/class_ker_m_l_1_1_entities_1_1_relationship_1a776acb680aa78ae90a282500e7565591)`()` | Returns the is Implied option. This option is set by tools, to meet semantic standards. 
`public virtual std::shared_ptr< `[`Namespace`](api.md KerML::Entities::Namespace#d4/dbb/class_ker_m_l_1_1_entities_1_1_namespace)` > `[`libraryNamespace`](#d0/d55/class_ker_m_l_1_1_entities_1_1_relationship_1a99569006de4a3c175ffc89576427fba1)`() const` | #### Returns
`public void `[`appendElementToOwnedRelatedElement`](#d0/d55/class_ker_m_l_1_1_entities_1_1_relationship_1af29a0fc37c9162532f51eb16af05fe27)`(std::shared_ptr< `[`Element`](api.md KerML::Entities::Element#d3/dc7/class_ker_m_l_1_1_entities_1_1_element)` > element)` | Appends one [Element](api.md KerML::Entities::Element#d3/dc7/class_ker_m_l_1_1_entities_1_1_element) to the Owned Related [Element](api.md KerML::Entities::Element#d3/dc7/class_ker_m_l_1_1_entities_1_1_element) list. 
`public void `[`setOwnedRelatedElements`](#d0/d55/class_ker_m_l_1_1_entities_1_1_relationship_1ad87693d6609a978e80a549fa00629f8e)`(std::vector< std::shared_ptr< `[`Element`](api.md KerML::Entities::Element#d3/dc7/class_ker_m_l_1_1_entities_1_1_element)` > > elements)` | #### Parameters
`public std::vector< std::shared_ptr< `[`Element`](api.md KerML::Entities::Element#d3/dc7/class_ker_m_l_1_1_entities_1_1_element)` > > `[`ownedRelatedElement`](#d0/d55/class_ker_m_l_1_1_entities_1_1_relationship_1ae6e6c82e371f43e0cdb13c16c893da24)`() const` | #### Returns
`public void `[`setOwningRelatedElement`](#d0/d55/class_ker_m_l_1_1_entities_1_1_relationship_1a13fdcfa05169e037236bec0ebceb201a)`(std::shared_ptr< `[`Element`](api.md KerML::Entities::Element#d3/dc7/class_ker_m_l_1_1_entities_1_1_element)` > owningRelatedElement)` | Sets the owning related element. This is the element that owns this specific relationship. This can also be null. This method checks also, if the given element is contained inside of the ownedRelatedElements. 
`public std::shared_ptr< `[`Element`](api.md KerML::Entities::Element#d3/dc7/class_ker_m_l_1_1_entities_1_1_element)` > `[`owningRelatedElement`](#d0/d55/class_ker_m_l_1_1_entities_1_1_relationship_1adae66b24b0e92a40241844fdf14bfbed)`() const` | Returns the owning related [Element](api.md KerML::Entities::Element#d3/dc7/class_ker_m_l_1_1_entities_1_1_element). It is to remember that the owning related [Element](api.md KerML::Entities::Element#d3/dc7/class_ker_m_l_1_1_entities_1_1_element) can be NULL per definition. 
`protected void `[`setRelatedElements`](#d0/d55/class_ker_m_l_1_1_entities_1_1_relationship_1a4eec900254c83027498d8307579b1dba)`(std::vector< std::shared_ptr< `[`Element`](api.md KerML::Entities::Element#d3/dc7/class_ker_m_l_1_1_entities_1_1_element)` > > relatedElements)` | Allows to set the related Elements in bulk. 
`protected std::vector< std::shared_ptr< `[`Element`](api.md KerML::Entities::Element#d3/dc7/class_ker_m_l_1_1_entities_1_1_element)` > > `[`relatedElements`](#d0/d55/class_ker_m_l_1_1_entities_1_1_relationship_1a6b11ba6b15aa8eaf007074d660fb46b9)`() const` | Returns the full and sorted list of the related elements. 
`protected void `[`appendElementToRelatedElements`](#d0/d55/class_ker_m_l_1_1_entities_1_1_relationship_1a8da4cdd1eb513c3bb5e4fd873fd8851d)`(std::shared_ptr< `[`Element`](api.md KerML::Entities::Element#d3/dc7/class_ker_m_l_1_1_entities_1_1_element)` > element)` | Appends one element to the related elements vector. 

## Members

#### `public  explicit `[`Relationship`](#d0/d55/class_ker_m_l_1_1_entities_1_1_relationship_1a6828ab0a5934d03f6858ec84193a0ccd)`(boost::uuids::uuid elementID,std::shared_ptr< `[`Element`](api.md KerML::Entities::Element#d3/dc7/class_ker_m_l_1_1_entities_1_1_element)` > owner)` {#d0/d55/class_ker_m_l_1_1_entities_1_1_relationship_1a6828ab0a5934d03f6858ec84193a0ccd}

Constructor of the [Relationship](#d0/d55/class_ker_m_l_1_1_entities_1_1_relationship). This constructor does allow for an empty elementID. 
#### Parameters
* `elementID` The [Element](api.md KerML::Entities::Element#d3/dc7/class_ker_m_l_1_1_entities_1_1_element) ID of the [Relationship](#d0/d55/class_ker_m_l_1_1_entities_1_1_relationship). If no UUID is provided, a random UUID is provided by the Software. 

* `owner` The [Element](api.md KerML::Entities::Element#d3/dc7/class_ker_m_l_1_1_entities_1_1_element) that owns this [Relationship](#d0/d55/class_ker_m_l_1_1_entities_1_1_relationship). If no [Element](api.md KerML::Entities::Element#d3/dc7/class_ker_m_l_1_1_entities_1_1_element) is provided the owning element is automatically set to null.

#### `public  explicit `[`Relationship`](#d0/d55/class_ker_m_l_1_1_entities_1_1_relationship_1a1e4e57db6cd1128e42fece6461fe014a)`(std::string elementID,std::shared_ptr< `[`Element`](api.md KerML::Entities::Element#d3/dc7/class_ker_m_l_1_1_entities_1_1_element)` > owner)` {#d0/d55/class_ker_m_l_1_1_entities_1_1_relationship_1a1e4e57db6cd1128e42fece6461fe014a}

Constructor of the [Relationship](#d0/d55/class_ker_m_l_1_1_entities_1_1_relationship). This constructor does not allow for an empty elementID. 
#### Parameters
* `elementID` The [Element](api.md KerML::Entities::Element#d3/dc7/class_ker_m_l_1_1_entities_1_1_element) ID of the [Relationship](#d0/d55/class_ker_m_l_1_1_entities_1_1_relationship) as string. 

* `owner` The [Element](api.md KerML::Entities::Element#d3/dc7/class_ker_m_l_1_1_entities_1_1_element) that owns this relationship. If no [Element](api.md KerML::Entities::Element#d3/dc7/class_ker_m_l_1_1_entities_1_1_element) is provided the owning element is automatically set to null.

#### `public virtual  `[`~Relationship`](#d0/d55/class_ker_m_l_1_1_entities_1_1_relationship_1a2bf714f78b988a26b66d195b3eb19620)`() = default` {#d0/d55/class_ker_m_l_1_1_entities_1_1_relationship_1a2bf714f78b988a26b66d195b3eb19620}

Destructor. An implementation is not required, since shared pointer are used.

#### `public void `[`setIsImplied`](#d0/d55/class_ker_m_l_1_1_entities_1_1_relationship_1a3d040e9729b6646a83ecf85aab5192fd)`(bool isImplied)` {#d0/d55/class_ker_m_l_1_1_entities_1_1_relationship_1a3d040e9729b6646a83ecf85aab5192fd}

Sets the Implied option. This should be set true if the relationship is implied by the elements. 
#### Parameters
* `isImplied` Is set by most tools, to meet semantic rules.

#### `public bool `[`isImplied`](#d0/d55/class_ker_m_l_1_1_entities_1_1_relationship_1a776acb680aa78ae90a282500e7565591)`()` {#d0/d55/class_ker_m_l_1_1_entities_1_1_relationship_1a776acb680aa78ae90a282500e7565591}

Returns the is Implied option. This option is set by tools, to meet semantic standards. 
#### Returns
The is Implied option.

#### `public virtual std::shared_ptr< `[`Namespace`](api.md KerML::Entities::Namespace#d4/dbb/class_ker_m_l_1_1_entities_1_1_namespace)` > `[`libraryNamespace`](#d0/d55/class_ker_m_l_1_1_entities_1_1_relationship_1a99569006de4a3c175ffc89576427fba1)`() const` {#d0/d55/class_ker_m_l_1_1_entities_1_1_relationship_1a99569006de4a3c175ffc89576427fba1}

#### Returns

#### `public void `[`appendElementToOwnedRelatedElement`](#d0/d55/class_ker_m_l_1_1_entities_1_1_relationship_1af29a0fc37c9162532f51eb16af05fe27)`(std::shared_ptr< `[`Element`](api.md KerML::Entities::Element#d3/dc7/class_ker_m_l_1_1_entities_1_1_element)` > element)` {#d0/d55/class_ker_m_l_1_1_entities_1_1_relationship_1af29a0fc37c9162532f51eb16af05fe27}

Appends one [Element](api.md KerML::Entities::Element#d3/dc7/class_ker_m_l_1_1_entities_1_1_element) to the Owned Related [Element](api.md KerML::Entities::Element#d3/dc7/class_ker_m_l_1_1_entities_1_1_element) list. 
#### Parameters
* `element` Shared pointer of an element.

#### `public void `[`setOwnedRelatedElements`](#d0/d55/class_ker_m_l_1_1_entities_1_1_relationship_1ad87693d6609a978e80a549fa00629f8e)`(std::vector< std::shared_ptr< `[`Element`](api.md KerML::Entities::Element#d3/dc7/class_ker_m_l_1_1_entities_1_1_element)` > > elements)` {#d0/d55/class_ker_m_l_1_1_entities_1_1_relationship_1ad87693d6609a978e80a549fa00629f8e}

#### Parameters
* `elements`

#### `public std::vector< std::shared_ptr< `[`Element`](api.md KerML::Entities::Element#d3/dc7/class_ker_m_l_1_1_entities_1_1_element)` > > `[`ownedRelatedElement`](#d0/d55/class_ker_m_l_1_1_entities_1_1_relationship_1ae6e6c82e371f43e0cdb13c16c893da24)`() const` {#d0/d55/class_ker_m_l_1_1_entities_1_1_relationship_1ae6e6c82e371f43e0cdb13c16c893da24}

#### Returns

#### `public void `[`setOwningRelatedElement`](#d0/d55/class_ker_m_l_1_1_entities_1_1_relationship_1a13fdcfa05169e037236bec0ebceb201a)`(std::shared_ptr< `[`Element`](api.md KerML::Entities::Element#d3/dc7/class_ker_m_l_1_1_entities_1_1_element)` > owningRelatedElement)` {#d0/d55/class_ker_m_l_1_1_entities_1_1_relationship_1a13fdcfa05169e037236bec0ebceb201a}

Sets the owning related element. This is the element that owns this specific relationship. This can also be null. This method checks also, if the given element is contained inside of the ownedRelatedElements. 
#### Parameters
* `owningRelatedElement` The element that owns this relationship as shared pointer. 

#### Exceptions
* `std::exception` If the element is not in the ownedRelatedElements list an exception is thrown.

#### `public std::shared_ptr< `[`Element`](api.md KerML::Entities::Element#d3/dc7/class_ker_m_l_1_1_entities_1_1_element)` > `[`owningRelatedElement`](#d0/d55/class_ker_m_l_1_1_entities_1_1_relationship_1adae66b24b0e92a40241844fdf14bfbed)`() const` {#d0/d55/class_ker_m_l_1_1_entities_1_1_relationship_1adae66b24b0e92a40241844fdf14bfbed}

Returns the owning related [Element](api.md KerML::Entities::Element#d3/dc7/class_ker_m_l_1_1_entities_1_1_element). It is to remember that the owning related [Element](api.md KerML::Entities::Element#d3/dc7/class_ker_m_l_1_1_entities_1_1_element) can be NULL per definition. 
#### Returns
The owningRelatedElement, if available.

#### `protected void `[`setRelatedElements`](#d0/d55/class_ker_m_l_1_1_entities_1_1_relationship_1a4eec900254c83027498d8307579b1dba)`(std::vector< std::shared_ptr< `[`Element`](api.md KerML::Entities::Element#d3/dc7/class_ker_m_l_1_1_entities_1_1_element)` > > relatedElements)` {#d0/d55/class_ker_m_l_1_1_entities_1_1_relationship_1a4eec900254c83027498d8307579b1dba}

Allows to set the related Elements in bulk. 
#### Parameters
* `relatedElements` The given list of related Elements.

#### `protected std::vector< std::shared_ptr< `[`Element`](api.md KerML::Entities::Element#d3/dc7/class_ker_m_l_1_1_entities_1_1_element)` > > `[`relatedElements`](#d0/d55/class_ker_m_l_1_1_entities_1_1_relationship_1a6b11ba6b15aa8eaf007074d660fb46b9)`() const` {#d0/d55/class_ker_m_l_1_1_entities_1_1_relationship_1a6b11ba6b15aa8eaf007074d660fb46b9}

Returns the full and sorted list of the related elements. 
#### Returns
Returns the vectors of the related Elements.

#### `protected void `[`appendElementToRelatedElements`](#d0/d55/class_ker_m_l_1_1_entities_1_1_relationship_1a8da4cdd1eb513c3bb5e4fd873fd8851d)`(std::shared_ptr< `[`Element`](api.md KerML::Entities::Element#d3/dc7/class_ker_m_l_1_1_entities_1_1_element)` > element)` {#d0/d55/class_ker_m_l_1_1_entities_1_1_relationship_1a8da4cdd1eb513c3bb5e4fd873fd8851d}

Appends one element to the related elements vector. 
#### Parameters
* `element` A shared pointer to the related element.

