
// Generated from KerML.g4 by ANTLR 4.13.2


#include "KerMLListener.h"

#include "KerMLParser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct KerMLParserStaticData final {
  KerMLParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  KerMLParserStaticData(const KerMLParserStaticData&) = delete;
  KerMLParserStaticData(KerMLParserStaticData&&) = delete;
  KerMLParserStaticData& operator=(const KerMLParserStaticData&) = delete;
  KerMLParserStaticData& operator=(KerMLParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag kermlParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
std::unique_ptr<KerMLParserStaticData> kermlParserStaticData = nullptr;

void kermlParserInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (kermlParserStaticData != nullptr) {
    return;
  }
#else
  assert(kermlParserStaticData == nullptr);
#endif
  auto staticData = std::make_unique<KerMLParserStaticData>(
    std::vector<std::string>{
      "start", "startRule", "elements", "identification", "relationship_body", 
      "relationship_onwed_elements", "relationship_owned_element", "owned_related_element", 
      "dependency", "annotation", "owned_annotation", "annotating_element", 
      "comment", "documentation", "textual_representation", "root_namespace", 
      "namespace", "namespace_declaration", "namespace_body", "namespace_body_elements", 
      "namespace_body_element", "member_prefix", "visibility_indicator", 
      "namespace_member", "non_feature_member", "namespace_feature_member", 
      "alias_member", "qualified_name", "namespace_import", "import_declaration", 
      "membership_import", "filter_package", "filter_package_member", "element", 
      "non_feature_element", "feature_element", "additional_options", "type", 
      "type_prefix", "type_declaration", "specialization_part", "conjugation_part", 
      "type_relationship_part", "disjoining_part", "unioning_part", "intersecting_part", 
      "differencing_part", "type_body", "type_body_elements", "type_body_element", 
      "specialization", "owned_specialization", "specific_type", "general_type", 
      "conjunction", "owned_conjugation", "disjoining", "owned_disjoining", 
      "unioning", "intersecting", "differencing", "feature_member", "type_feature_member", 
      "owned_feature_member", "classifier", "classifier_declaration", "superclassing_part", 
      "subclassification", "owned_subclassification", "feature", "feature_prefix", 
      "feature_direction", "feature_declaration", "feature_identification", 
      "feature_relationship_part", "chaining_part", "inverting_part", "type_featuring_part", 
      "feature_specialization_part", "multiplicity_part", "feature_specilization", 
      "typings", "typed_by", "subsettings", "subsets", "references", "redefinitions", 
      "redefines", "feature_typing", "owned_feature_typing", "subsetting", 
      "owned_subsetting", "owned_reference_subsetting", "redefinition", 
      "owned_redefinition", "owned_feature_chain", "feature_chain", "owned_feature_chaining", 
      "feature_inverting", "owned_feature_inverting", "type_featuring", 
      "owned_type_featuring", "data_type", "class", "structure", "association", 
      "association_structure", "connector", "connector_declaration", "binary_connector_declaration", 
      "nary_connector_declaration", "connector_end_member", "connector_end", 
      "binding_connector", "binding_connector_declaration", "succession", 
      "succession_declaration", "behavior", "step", "function", "function_body", 
      "function_body_part", "return_feature_member", "result_expression_member", 
      "expression", "predicate", "boolean_expression", "invariant", "owned_expression_reference_member", 
      "owned_expression_reference", "owned_expression_member", "owned_expressions", 
      "owned_expression", "eased_owned_expression", "conditional_expression", 
      "conditional_binary_operator_expression", "conditional_binary_operator", 
      "binary_operator_expression", "binary_operator", "unary_operator_expression", 
      "unary_operator", "classification_expression", "classification", "classification_test_operator", 
      "cast_operator", "metaclassification_expression", "argument_member", 
      "argument", "argument_value", "argument_expression_member", "argument_expression", 
      "argument_expression_value", "metadata_argument_member", "metadata_argument", 
      "metadata_value", "metadata_reference", "metadataclassification_test_operator", 
      "meta_cast_operator", "extend_expression", "type_reference_member", 
      "type_result_member", "type_reference", "reference_typing", "primary_expressions", 
      "primary_expression", "primary_argument_value", "primary_argument", 
      "primary_argument_member", "non_feature_chain_primary_expression", 
      "non_feature_chain_primary_argument_value", "non_feature_chain_primary_argument", 
      "non_feature_chain_primary_argument_member", "bracket_expression", 
      "index_expression", "sequence_expression", "sequence_expression_list", 
      "sequence_operator_expression", "sequence_expression_list_member", 
      "feature_chain_expression", "collect_expression", "select_expression", 
      "function_operation_expression", "body_argument_member", "body_argument", 
      "body_argument_value", "body_expression_member", "function_reference_argument_member", 
      "function_reference_argument", "function_reference_arugment_value", 
      "function_reference_expression", "function_reference_member", "function_reference", 
      "feature_chain_member", "owned_feature_chain_member", "base_expression", 
      "null_expression", "feature_reference_expression", "feature_reference_member", 
      "feature_reference", "metadata_access_expression", "invocation_expression", 
      "internal_invocation_expression", "argument_list", "positional_argument_list", 
      "named_argument_list", "named_argument_member", "named_argument", 
      "paramenter_redefinition", "body_expression", "expression_body_member", 
      "expression_body", "literal_expression", "literal_boolean", "boolean_value", 
      "literal_string", "literal_integer", "literal_real", "real_value", 
      "literal_infinity", "interaction", "item_flow", "succession_item_flow", 
      "item_flow_declaration", "item_feature_member", "item_feature", "item_feature_specilization_part", 
      "item_flow_end_member", "item_flow_end", "item_flow_feature_member", 
      "item_flow_feature", "item_flow_redefinition", "value_part", "feature_value", 
      "feature_assignment", "multiplicity", "multiplicity_subset", "multiplicity_range", 
      "owned_multiplicity", "owned_multiplicity_range", "multiplicity_bounds", 
      "multiplicity_expression_member", "internal_multiplicity_expression_member", 
      "metaclass", "prefix_metadata_annotation", "prefix_metadata_member", 
      "prefix_metadata_feature", "metadata_feature", "metadata_feature_declaration", 
      "metadata_body", "metadata_body_element", "metadata_body_feature_member", 
      "metadata_body_feature", "package", "library_package", "package_declaration", 
      "package_body", "element_filter_member", "meta_assignment"
    },
    std::vector<std::string>{
      "", "'meta'", "", "", "", "", "", "", "'about'", "'abstract'", "'alias'", 
      "'all'", "'and'", "'as'", "'assoc'", "'behavior'", "'binding'", "'bool'", 
      "'by'", "'chains'", "'class'", "'classifier'", "'comment'", "'composite'", 
      "'conjugate'", "'conjugates'", "'conjugation'", "'connector'", "'datatype'", 
      "'default'", "'dependency'", "'derived'", "'differences'", "'disjoining'", 
      "'disjoint'", "'doc'", "'else'", "'end'", "'expr'", "'false'", "'feature'", 
      "'featured'", "'featuring'", "'filter'", "'first'", "'flow'", "'for'", 
      "'from'", "'function'", "'hastype'", "'if'", "'intersects'", "'implies'", 
      "'import'", "'in'", "'inout'", "'interaction'", "'inv'", "'inverse'", 
      "'inverting'", "'istype'", "'language'", "'member'", "'metaclass'", 
      "'metadata'", "'multiplicity'", "'namespace'", "'nonunique'", "'not'", 
      "'null'", "'of'", "'or'", "'ordered'", "'out'", "'package'", "'potion'", 
      "'predicate'", "'private'", "'protected'", "'public'", "'readonly'", 
      "'redefines'", "'redefinition'", "'references'", "'rep'", "'return'", 
      "'specialization'", "'specializes'", "'step'", "'struct'", "'subclassifier'", 
      "'subset'", "'subsets'", "'subtype'", "'succession'", "'then'", "'to'", 
      "'true'", "'type'", "'typed'", "'typing'", "'unions'", "'xor'", "'var'", 
      "'locale'", "'standard'", "'library'", "'constant'", "", "", "", "'/*'", 
      "'//*'", "'*/'", "';'", "'*'", "'::'", "':'", "':>'", "'::>'", "':>>'", 
      "'~'", "'('", "')'", "'{'", "'}'", "'['", "']'", "','", "'@'", "'#'", 
      "'%'", "'&'", "'^'", "'|'", "'**'", "'+'", "'-'", "'/'", "'->'", "'.'", 
      "'..'", "'<'", "'<='", "'='", "':='", "'=='", "'==='", "'!='", "'!=='", 
      "'>'", "'>='", "'\\u003F'", "'\\u003F\\u003F'", "'.\\u003F'"
    },
    std::vector<std::string>{
      "", "", "TYPED_BY", "SPECIALIZES", "SUBSETS", "REFERENCES", "REDEFINES", 
      "CONJUNGATES", "KEYWORD_ABOUT", "KEYWORD_ABSTRACT", "KEYWORD_ALIAS", 
      "KEYWORD_ALL", "KEYWORD_AND", "KEYWORD_AS", "KEYWORD_ASSOC", "KEYWORD_BEHAVIOR", 
      "KEYWORD_BINDING", "KEYWORD_BOOL", "KEYWORD_BY", "KEYWORD_CHAINS", 
      "KEYWORD_CLASS", "KEYWORD_CLASSIFIER", "KEYWORD_COMMENT", "KEYWORD_COMPOSITE", 
      "KEYWORD_CONJUGATE", "KEYWORD_CONJUGATES", "KEYWORD_CONJUGATION", 
      "KEYWORD_CONNECTOR", "KEYWORD_DATATYPE", "KEYWORD_DEFAULT", "KEYWORD_DEPENDENCY", 
      "KEYWORD_DERIVED", "KEYWORD_DIFFERENCES", "KEYWORD_DISJOINING", "KEYWORD_DISJOINT", 
      "KEYWORD_DOC", "KEYWORD_ELSE", "KEYWORD_END", "KEYWORD_EXPR", "KEYWORD_FALSE", 
      "KEYWORD_FEATURE", "KEYWORD_FEATURED", "KEYWORD_FEATURING", "KEYWORD_FILTER", 
      "KEYWORD_FIRST", "KEYWORD_FLOW", "KEYWORD_FOR", "KEYWORD_FROM", "KEYWORD_FUNCTION", 
      "KEYWORD_HASTYPE", "KEYWORD_IF", "KEYWORD_INTERSECTS", "KEYWORD_IMPLIES", 
      "KEYWORD_IMPORT", "KEYWORD_IN", "KEYWORD_INOUT", "KEYWORD_INTERACTION", 
      "KEYWORD_INV", "KEYWORD_INVERSE", "KEYWORD_INVERTING", "KEYWORD_ISTYPE", 
      "KEYWORD_LANGUAGE", "KEYWORD_MEMBER", "KEYWORD_METACLASS", "KEYWORD_METADATA", 
      "KEYWORD_MULTIPLICITY", "KEYWORD_NAMESPACE", "KEYWORD_NONUNIQUE", 
      "KEYWORD_NOT", "KEYWORD_NULL", "KEYWORD_OF", "KEYWORD_OR", "KEYWORD_ORDERED", 
      "KEYWORD_OUT", "KEYWORD_PACKAGE", "KEYWORD_PORTION", "KEYWORD_PREDICATE", 
      "KEYWORD_PRIVATE", "KEYWORD_PROTECTED", "KEYWORD_PUBLIC", "KEYWORD_READONLY", 
      "KEYWORD_REDEFINES", "KEYWORD_REDEFINITION", "KEYWORD_REFERENCES", 
      "KEYWORD_REP", "KEYWORD_RETURN", "KEYWORD_SPECILIZATION", "KEYWORD_SPECIALIZES", 
      "KEYWORD_STEP", "KEYWORD_STRUCT", "KEYWORD_SUBCLASSIFIER", "KEYWORD_SUBSET", 
      "KEYWORD_SUBSETS", "KEYWORD_SUBTYPE", "KEYWORD_SUCCSESSION", "KEYWORD_THEN", 
      "KEYWORD_TO", "KEYWORD_TRUE", "KEYWORD_TYPE", "KEYWORD_TYPED", "KEYWORD_TYPING", 
      "KEYWORD_UNIONS", "KEYWORD_XOR", "KEYWORD_VAR", "KEYWORD_LOCALE", 
      "KEYWORD_STANDARD", "KEYWORD_LIBRARY", "KEYWORD_CONSTANT", "SINGLE_LINE_NOTE", 
      "MULTI_LINE_NOTE", "REGULAR_COMMENT", "SYMBOL_COMMENT_BLOCK_START", 
      "SYMBOL_NOTE_BLOCK_START", "SYMBOL_COMMENT_BLOCK_END", "SYMBOL_STATEMENT_DELIMITER", 
      "SYMBOL_STAR", "SYMBOL_NAMESPACE_SUBSET", "SYMBOL_TYPED_BY", "SYMBOL_SPECIALIZES", 
      "SYMBOL_REFERENCES", "SYMBOL_REDEFINES", "SYMBOL_CONJUNGATES", "SYMBOL_ROUND_BRACKET_OPEN", 
      "SYMBOL_ROUND_BRACKET_CLOSE", "SYMBOL_CURLY_BRACKET_OPEN", "SYMBOL_CURLY_BRACKET_CLOSE", 
      "SYMBOL_SQUARE_BRACKET_OPEN", "SYMBOL_SQUARE_BRACKET_CLOSE", "SYMBOL_COMMA", 
      "SYMBOL_AT", "SYMBOL_HASHTAG", "SYMBOL_MOD", "SYMBOL_AND", "SYMBOL_UPPER", 
      "SYMBOL_VERTICAL_LINE", "SYMBOL_DOUBLE_STAR", "SYMBOL_PLUS", "SYMBOL_MINUS", 
      "SYMBOL_SLASH", "SYMBOL_ARROOW", "SYMBOL_DOT", "SYMBOL_DDOT", "SYMBOL_SMALLER", 
      "SYMBOL_SMALLER_EQUAL", "SYMBOL_ASSIGN", "SYMBOL_DEF_ASSIGN", "SYMBOL_EQUALS", 
      "SYMBOL_IFF_EQUALS", "SYMBOL_NOT_EQUALS", "SYMBOL_IFF_NOT_EQUALS", 
      "SYMBOL_GREATER", "SYMBOL_GREATER_EQUALS", "SYMBOL_QUESTION", "SYMBOL_DQUESTION", 
      "SYMBOL_DOT_QUESTION", "NAME", "BASIC_NAME", "UNRESTRICTED_NAME", 
      "DECIMAL_VALUE", "EXPONENTIAL_VALUE", "STRING_VALUE", "WS"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,161,2086,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
  	2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
  	7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,
  	7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,
  	7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,
  	7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,
  	7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,
  	7,122,2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,
  	7,128,2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,
  	7,134,2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,
  	7,140,2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,
  	7,146,2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,
  	7,152,2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,
  	7,158,2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
  	7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,
  	7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,
  	7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,
  	7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,
  	7,188,2,189,7,189,2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,
  	7,194,2,195,7,195,2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,
  	7,200,2,201,7,201,2,202,7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,
  	7,206,2,207,7,207,2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,
  	7,212,2,213,7,213,2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,
  	7,218,2,219,7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,
  	7,224,2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,
  	7,230,2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,2,236,
  	7,236,2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,241,7,241,2,242,
  	7,242,2,243,7,243,2,244,7,244,2,245,7,245,2,246,7,246,2,247,7,247,2,248,
  	7,248,2,249,7,249,2,250,7,250,2,251,7,251,2,252,7,252,2,253,7,253,2,254,
  	7,254,2,255,7,255,2,256,7,256,2,257,7,257,1,0,1,0,1,0,1,1,1,1,1,2,5,2,
  	523,8,2,10,2,12,2,526,9,2,1,3,1,3,1,3,3,3,531,8,3,1,3,3,3,534,8,3,3,3,
  	536,8,3,1,4,1,4,1,4,1,4,1,4,3,4,543,8,4,1,5,5,5,546,8,5,10,5,12,5,549,
  	9,5,1,6,1,6,3,6,553,8,6,1,7,1,7,3,7,557,8,7,1,8,5,8,560,8,8,10,8,12,8,
  	563,9,8,1,8,1,8,1,8,1,8,3,8,569,8,8,1,8,1,8,1,8,5,8,574,8,8,10,8,12,8,
  	577,9,8,1,8,1,8,1,8,1,8,5,8,583,8,8,10,8,12,8,586,9,8,1,8,1,8,1,9,1,9,
  	1,10,1,10,1,11,1,11,1,11,1,11,3,11,598,8,11,1,12,1,12,1,12,1,12,1,12,
  	1,12,5,12,606,8,12,10,12,12,12,609,9,12,3,12,611,8,12,3,12,613,8,12,1,
  	12,1,12,3,12,617,8,12,1,12,1,12,1,13,1,13,3,13,623,8,13,1,13,1,13,3,13,
  	627,8,13,1,13,1,13,1,14,1,14,3,14,633,8,14,1,14,1,14,1,14,1,14,1,15,1,
  	15,1,16,5,16,642,8,16,10,16,12,16,645,9,16,1,16,1,16,1,16,1,17,1,17,1,
  	17,1,18,1,18,1,18,1,18,1,18,3,18,658,8,18,1,19,1,19,1,20,1,20,1,20,3,
  	20,665,8,20,1,21,3,21,668,8,21,1,22,1,22,1,23,1,23,3,23,674,8,23,1,24,
  	1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,3,26,687,8,26,1,26,
  	3,26,690,8,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,5,27,699,8,27,10,27,
  	12,27,702,9,27,1,28,3,28,705,8,28,1,28,1,28,3,28,709,8,28,1,28,1,28,3,
  	28,713,8,28,1,29,1,29,3,29,717,8,29,1,30,1,30,3,30,721,8,30,1,30,3,30,
  	724,8,30,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,3,33,
  	737,8,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,
  	1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,
  	1,34,3,34,766,8,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,
  	3,35,778,8,35,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,38,3,38,788,8,38,1,
  	38,5,38,791,8,38,10,38,12,38,794,9,38,1,39,3,39,797,8,39,1,39,1,39,3,
  	39,801,8,39,1,39,1,39,4,39,805,8,39,11,39,12,39,806,1,39,5,39,810,8,39,
  	10,39,12,39,813,9,39,1,40,1,40,1,40,1,40,5,40,819,8,40,10,40,12,40,822,
  	9,40,1,41,1,41,1,41,1,42,1,42,1,42,1,42,3,42,831,8,42,1,43,1,43,1,43,
  	1,43,1,43,5,43,838,8,43,10,43,12,43,841,9,43,1,44,1,44,1,44,1,44,5,44,
  	847,8,44,10,44,12,44,850,9,44,1,45,1,45,1,45,1,45,5,45,856,8,45,10,45,
  	12,45,859,9,45,1,46,1,46,1,46,1,46,5,46,865,8,46,10,46,12,46,868,9,46,
  	1,47,1,47,1,47,1,47,1,47,3,47,875,8,47,1,48,5,48,878,8,48,10,48,12,48,
  	881,9,48,1,49,1,49,1,50,1,50,3,50,887,8,50,1,50,1,50,1,50,1,50,1,50,1,
  	50,1,51,1,51,1,52,1,52,3,52,899,8,52,1,53,1,53,3,53,903,8,53,1,54,1,54,
  	3,54,907,8,54,1,54,1,54,1,54,3,54,912,8,54,1,54,1,54,1,54,3,54,917,8,
  	54,1,54,1,54,1,55,1,55,3,55,923,8,55,1,56,1,56,3,56,927,8,56,1,56,1,56,
  	1,56,3,56,932,8,56,1,56,1,56,1,56,3,56,937,8,56,1,56,1,56,1,57,1,57,3,
  	57,943,8,57,1,58,1,58,3,58,947,8,58,1,59,1,59,3,59,951,8,59,1,60,1,60,
  	3,60,955,8,60,1,61,1,61,3,61,959,8,61,1,62,1,62,1,62,1,62,1,63,1,63,1,
  	63,1,64,3,64,969,8,64,1,64,1,64,1,64,1,64,1,65,3,65,976,8,65,1,65,1,65,
  	3,65,980,8,65,1,65,1,65,3,65,984,8,65,1,65,5,65,987,8,65,10,65,12,65,
  	990,9,65,1,66,1,66,1,66,1,66,5,66,996,8,66,10,66,12,66,999,9,66,1,67,
  	1,67,3,67,1003,8,67,1,67,1,67,1,67,1,67,1,67,1,67,1,68,1,68,1,69,3,69,
  	1014,8,69,1,69,1,69,1,69,1,69,3,69,1020,8,69,1,69,3,69,1023,8,69,1,69,
  	3,69,1026,8,69,1,69,3,69,1029,8,69,1,69,1,69,1,70,3,70,1034,8,70,1,70,
  	3,70,1037,8,70,1,70,3,70,1040,8,70,1,70,3,70,1043,8,70,1,70,3,70,1046,
  	8,70,1,70,3,70,1049,8,70,1,70,5,70,1052,8,70,10,70,12,70,1055,9,70,1,
  	71,1,71,1,72,3,72,1060,8,72,1,72,1,72,1,72,3,72,1065,8,72,1,72,1,72,3,
  	72,1069,8,72,1,72,5,72,1072,8,72,10,72,12,72,1075,9,72,1,72,3,72,1078,
  	8,72,1,73,1,73,1,73,1,73,3,73,1084,8,73,1,73,3,73,1087,8,73,1,74,1,74,
  	1,74,1,74,3,74,1093,8,74,1,75,1,75,1,75,3,75,1098,8,75,1,76,1,76,1,76,
  	1,76,1,77,1,77,1,77,1,77,1,77,5,77,1109,8,77,10,77,12,77,1112,9,77,1,
  	78,4,78,1115,8,78,11,78,12,78,1116,1,78,3,78,1120,8,78,1,78,5,78,1123,
  	8,78,10,78,12,78,1126,9,78,1,78,1,78,4,78,1130,8,78,11,78,12,78,1131,
  	3,78,1134,8,78,1,79,1,79,1,79,3,79,1139,8,79,3,79,1141,8,79,1,79,3,79,
  	1144,8,79,1,79,3,79,1147,8,79,3,79,1149,8,79,1,80,1,80,1,80,1,80,3,80,
  	1155,8,80,1,81,1,81,1,81,5,81,1160,8,81,10,81,12,81,1163,9,81,1,82,1,
  	82,1,82,1,83,1,83,3,83,1170,8,83,1,83,1,83,5,83,1174,8,83,10,83,12,83,
  	1177,9,83,1,84,1,84,1,84,1,85,1,85,1,85,1,86,1,86,1,86,3,86,1188,8,86,
  	1,87,3,87,1191,8,87,1,87,1,87,1,87,1,88,1,88,3,88,1198,8,88,1,88,3,88,
  	1201,8,88,1,88,1,88,1,88,1,88,3,88,1207,8,88,1,88,1,88,1,89,1,89,1,90,
  	1,90,3,90,1215,8,90,1,90,3,90,1218,8,90,1,90,1,90,1,90,1,90,3,90,1224,
  	8,90,1,90,1,90,1,91,1,91,1,92,1,92,1,93,3,93,1233,8,93,1,93,1,93,3,93,
  	1237,8,93,1,93,1,93,3,93,1241,8,93,1,93,1,93,1,93,3,93,1246,8,93,1,93,
  	3,93,1249,8,93,1,93,3,93,1252,8,93,1,93,3,93,1255,8,93,1,93,1,93,1,94,
  	1,94,1,95,1,95,1,96,1,96,1,96,5,96,1266,8,96,10,96,12,96,1269,9,96,1,
  	97,1,97,1,98,1,98,3,98,1275,8,98,1,98,1,98,1,98,3,98,1280,8,98,1,98,1,
  	98,1,98,3,98,1285,8,98,1,98,1,98,1,99,1,99,3,99,1291,8,99,1,100,1,100,
  	1,100,1,100,3,100,1297,8,100,1,100,1,100,1,100,1,100,1,100,1,101,1,101,
  	1,102,1,102,1,102,1,102,1,102,1,103,1,103,1,103,1,103,1,103,1,104,3,104,
  	1317,8,104,1,104,1,104,1,104,1,104,1,105,1,105,1,105,1,105,1,105,1,106,
  	1,106,1,106,1,106,1,106,1,106,1,107,3,107,1335,8,107,1,107,1,107,1,107,
  	1,107,1,108,1,108,1,108,3,108,1344,8,108,1,109,3,109,1347,8,109,1,109,
  	1,109,1,109,1,109,1,109,1,110,1,110,1,110,1,110,1,110,1,110,5,110,1360,
  	8,110,10,110,12,110,1363,9,110,1,110,1,110,1,111,1,111,1,112,1,112,3,
  	112,1371,8,112,1,112,3,112,1374,8,112,1,112,1,112,1,113,1,113,1,113,1,
  	113,1,113,1,114,1,114,1,114,1,114,1,114,1,114,3,114,1389,8,114,1,114,
  	3,114,1392,8,114,1,114,3,114,1395,8,114,1,114,1,114,1,114,1,114,3,114,
  	1401,8,114,3,114,1403,8,114,1,115,1,115,1,115,1,115,1,115,1,116,1,116,
  	1,116,1,116,1,116,1,116,3,116,1416,8,116,1,116,3,116,1419,8,116,1,116,
  	3,116,1422,8,116,1,116,1,116,1,116,1,116,3,116,1428,8,116,3,116,1430,
  	8,116,1,117,1,117,1,117,1,117,1,117,1,118,1,118,1,118,1,118,3,118,1441,
  	8,118,1,118,1,118,1,119,1,119,1,119,1,119,1,119,1,120,1,120,1,120,1,120,
  	1,120,3,120,1455,8,120,1,121,1,121,4,121,1459,8,121,11,121,12,121,1460,
  	1,121,3,121,1464,8,121,1,122,1,122,1,122,1,122,1,123,1,123,1,123,1,124,
  	1,124,1,124,1,124,3,124,1477,8,124,1,124,1,124,1,125,1,125,1,125,1,125,
  	1,125,1,126,1,126,1,126,1,126,3,126,1490,8,126,1,126,1,126,1,127,1,127,
  	1,127,3,127,1497,8,127,1,127,1,127,3,127,1501,8,127,1,127,1,127,1,128,
  	1,128,1,129,1,129,1,130,1,130,1,131,4,131,1512,8,131,11,131,12,131,1513,
  	1,132,1,132,1,132,1,132,1,132,1,132,1,132,1,132,3,132,1524,8,132,1,133,
  	1,133,1,133,1,133,3,133,1530,8,133,1,134,1,134,1,134,1,134,1,134,1,134,
  	1,134,1,135,1,135,1,135,1,135,1,136,1,136,1,137,1,137,1,137,1,137,1,138,
  	1,138,1,139,1,139,1,139,1,140,1,140,1,141,3,141,1557,8,141,1,141,1,141,
  	1,141,1,141,1,141,1,141,3,141,1565,8,141,1,142,3,142,1568,8,142,1,142,
  	1,142,1,142,1,142,1,142,1,142,3,142,1576,8,142,1,143,1,143,1,144,1,144,
  	1,145,1,145,1,145,1,145,1,145,1,145,1,145,3,145,1589,8,145,1,146,1,146,
  	1,147,1,147,1,148,1,148,1,149,1,149,1,150,1,150,1,151,1,151,1,152,1,152,
  	1,153,1,153,1,154,1,154,1,155,1,155,1,156,1,156,1,157,1,157,1,158,1,158,
  	1,158,1,159,1,159,1,160,1,160,1,161,1,161,1,162,1,162,1,163,4,163,1627,
  	8,163,11,163,12,163,1628,1,164,1,164,3,164,1633,8,164,1,165,1,165,1,166,
  	1,166,1,167,1,167,1,168,1,168,1,168,1,168,1,168,1,168,1,168,3,168,1648,
  	8,168,1,169,1,169,1,170,1,170,1,171,1,171,1,172,1,172,1,172,1,172,1,173,
  	1,173,1,173,1,173,1,173,1,174,1,174,1,174,1,174,1,175,1,175,3,175,1671,
  	8,175,1,175,3,175,1674,8,175,1,176,1,176,1,176,1,176,1,177,1,177,1,178,
  	1,178,1,178,1,179,1,179,1,179,1,180,1,180,1,180,1,181,1,181,1,181,1,181,
  	1,181,3,181,1696,8,181,1,182,1,182,1,183,1,183,1,184,1,184,1,185,1,185,
  	1,186,1,186,1,187,1,187,1,188,1,188,1,189,1,189,1,190,1,190,1,191,1,191,
  	1,192,1,192,3,192,1720,8,192,1,193,1,193,1,194,1,194,1,194,1,194,1,194,
  	1,194,3,194,1730,8,194,1,195,1,195,1,195,3,195,1735,8,195,1,196,1,196,
  	1,197,1,197,1,198,1,198,1,199,1,199,1,199,1,199,1,200,1,200,1,201,1,201,
  	3,201,1751,8,201,1,201,1,201,1,202,1,202,1,202,1,202,1,202,3,202,1760,
  	8,202,1,202,1,202,1,203,1,203,1,203,5,203,1767,8,203,10,203,12,203,1770,
  	9,203,1,204,1,204,1,204,5,204,1775,8,204,10,204,12,204,1778,9,204,1,205,
  	1,205,1,206,1,206,1,206,1,206,1,207,1,207,1,208,1,208,1,209,1,209,1,210,
  	1,210,1,210,1,210,1,211,1,211,1,211,1,211,1,211,1,211,3,211,1802,8,211,
  	1,212,1,212,1,213,1,213,1,214,1,214,1,215,1,215,1,216,1,216,1,217,3,217,
  	1815,8,217,1,217,1,217,1,217,3,217,1820,8,217,1,218,1,218,1,219,1,219,
  	1,219,1,219,1,219,1,220,1,220,1,220,1,220,1,220,1,221,1,221,1,221,1,221,
  	1,221,1,221,1,222,1,222,3,222,1842,8,222,1,222,1,222,3,222,1846,8,222,
  	1,222,1,222,1,222,1,222,1,222,3,222,1853,8,222,1,222,3,222,1856,8,222,
  	1,222,1,222,1,222,1,222,3,222,1862,8,222,1,223,1,223,1,224,1,224,1,224,
  	3,224,1869,8,224,1,224,1,224,3,224,1873,8,224,1,224,1,224,3,224,1877,
  	8,224,3,224,1879,8,224,1,225,5,225,1882,8,225,10,225,12,225,1885,9,225,
  	1,225,1,225,3,225,1889,8,225,1,226,1,226,1,227,1,227,1,227,3,227,1896,
  	8,227,1,227,1,227,1,228,1,228,1,229,1,229,1,230,1,230,1,231,1,231,1,232,
  	1,232,1,232,1,232,3,232,1912,8,232,3,232,1914,8,232,1,232,1,232,1,233,
  	1,233,1,233,1,234,1,234,3,234,1923,8,234,1,235,1,235,1,235,1,235,1,235,
  	1,236,1,236,1,236,1,236,1,236,1,237,1,237,1,238,1,238,1,239,1,239,1,239,
  	1,239,3,239,1943,8,239,1,239,1,239,1,239,1,240,1,240,1,241,1,241,3,241,
  	1952,8,241,1,242,3,242,1955,8,242,1,242,1,242,1,242,3,242,1960,8,242,
  	1,242,3,242,1963,8,242,1,242,1,242,3,242,1967,8,242,1,242,1,242,1,243,
  	1,243,1,243,1,244,1,244,1,244,1,245,1,245,1,246,5,246,1980,8,246,10,246,
  	12,246,1983,9,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,247,1,247,
  	1,247,1,247,3,247,1996,8,247,3,247,1998,8,247,1,247,1,247,1,248,1,248,
  	1,248,5,248,2005,8,248,10,248,12,248,2008,9,248,1,248,3,248,2011,8,248,
  	1,249,1,249,1,249,1,249,3,249,2017,8,249,1,250,1,250,1,251,3,251,2022,
  	8,251,1,251,3,251,2025,8,251,1,251,1,251,3,251,2029,8,251,1,251,3,251,
  	2032,8,251,1,251,1,251,1,252,5,252,2037,8,252,10,252,12,252,2040,9,252,
  	1,252,1,252,1,252,1,253,3,253,2046,8,253,1,253,1,253,5,253,2050,8,253,
  	10,253,12,253,2053,9,253,1,253,1,253,1,253,1,254,1,254,1,254,1,255,1,
  	255,1,255,1,255,1,255,4,255,2066,8,255,11,255,12,255,2067,1,255,1,255,
  	3,255,2072,8,255,1,256,1,256,1,256,1,256,1,256,1,257,1,257,1,257,1,257,
  	1,257,1,257,1,257,1,257,0,0,258,0,2,4,6,8,10,12,14,16,18,20,22,24,26,
  	28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,
  	74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,
  	116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,
  	152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,
  	188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,222,
  	224,226,228,230,232,234,236,238,240,242,244,246,248,250,252,254,256,258,
  	260,262,264,266,268,270,272,274,276,278,280,282,284,286,288,290,292,294,
  	296,298,300,302,304,306,308,310,312,314,316,318,320,322,324,326,328,330,
  	332,334,336,338,340,342,344,346,348,350,352,354,356,358,360,362,364,366,
  	368,370,372,374,376,378,380,382,384,386,388,390,392,394,396,398,400,402,
  	404,406,408,410,412,414,416,418,420,422,424,426,428,430,432,434,436,438,
  	440,442,444,446,448,450,452,454,456,458,460,462,464,466,468,470,472,474,
  	476,478,480,482,484,486,488,490,492,494,496,498,500,502,504,506,508,510,
  	512,514,0,13,1,0,77,79,2,0,115,115,135,135,3,0,23,23,75,75,103,103,2,
  	0,54,55,73,73,2,0,39,39,97,97,4,0,12,12,52,52,71,71,153,153,5,0,102,102,
  	115,115,131,138,141,143,146,151,3,0,68,68,121,121,136,137,3,0,49,49,60,
  	60,129,129,1,0,158,159,1,0,145,146,2,0,64,64,129,129,2,0,81,81,120,120,
  	2121,0,516,1,0,0,0,2,519,1,0,0,0,4,524,1,0,0,0,6,535,1,0,0,0,8,542,1,
  	0,0,0,10,547,1,0,0,0,12,552,1,0,0,0,14,556,1,0,0,0,16,561,1,0,0,0,18,
  	589,1,0,0,0,20,591,1,0,0,0,22,597,1,0,0,0,24,612,1,0,0,0,26,620,1,0,0,
  	0,28,632,1,0,0,0,30,638,1,0,0,0,32,643,1,0,0,0,34,649,1,0,0,0,36,657,
  	1,0,0,0,38,659,1,0,0,0,40,664,1,0,0,0,42,667,1,0,0,0,44,669,1,0,0,0,46,
  	673,1,0,0,0,48,675,1,0,0,0,50,678,1,0,0,0,52,681,1,0,0,0,54,695,1,0,0,
  	0,56,704,1,0,0,0,58,716,1,0,0,0,60,718,1,0,0,0,62,725,1,0,0,0,64,728,
  	1,0,0,0,66,736,1,0,0,0,68,765,1,0,0,0,70,777,1,0,0,0,72,779,1,0,0,0,74,
  	781,1,0,0,0,76,787,1,0,0,0,78,796,1,0,0,0,80,814,1,0,0,0,82,823,1,0,0,
  	0,84,830,1,0,0,0,86,832,1,0,0,0,88,842,1,0,0,0,90,851,1,0,0,0,92,860,
  	1,0,0,0,94,874,1,0,0,0,96,879,1,0,0,0,98,882,1,0,0,0,100,886,1,0,0,0,
  	102,894,1,0,0,0,104,898,1,0,0,0,106,902,1,0,0,0,108,906,1,0,0,0,110,922,
  	1,0,0,0,112,926,1,0,0,0,114,942,1,0,0,0,116,946,1,0,0,0,118,950,1,0,0,
  	0,120,954,1,0,0,0,122,958,1,0,0,0,124,960,1,0,0,0,126,964,1,0,0,0,128,
  	968,1,0,0,0,130,975,1,0,0,0,132,991,1,0,0,0,134,1002,1,0,0,0,136,1010,
  	1,0,0,0,138,1013,1,0,0,0,140,1033,1,0,0,0,142,1056,1,0,0,0,144,1059,1,
  	0,0,0,146,1086,1,0,0,0,148,1092,1,0,0,0,150,1094,1,0,0,0,152,1099,1,0,
  	0,0,154,1103,1,0,0,0,156,1133,1,0,0,0,158,1135,1,0,0,0,160,1154,1,0,0,
  	0,162,1156,1,0,0,0,164,1164,1,0,0,0,166,1167,1,0,0,0,168,1178,1,0,0,0,
  	170,1181,1,0,0,0,172,1184,1,0,0,0,174,1190,1,0,0,0,176,1197,1,0,0,0,178,
  	1210,1,0,0,0,180,1214,1,0,0,0,182,1227,1,0,0,0,184,1229,1,0,0,0,186,1232,
  	1,0,0,0,188,1258,1,0,0,0,190,1260,1,0,0,0,192,1262,1,0,0,0,194,1270,1,
  	0,0,0,196,1274,1,0,0,0,198,1290,1,0,0,0,200,1292,1,0,0,0,202,1303,1,0,
  	0,0,204,1305,1,0,0,0,206,1310,1,0,0,0,208,1316,1,0,0,0,210,1322,1,0,0,
  	0,212,1327,1,0,0,0,214,1334,1,0,0,0,216,1340,1,0,0,0,218,1346,1,0,0,0,
  	220,1353,1,0,0,0,222,1366,1,0,0,0,224,1370,1,0,0,0,226,1377,1,0,0,0,228,
  	1402,1,0,0,0,230,1404,1,0,0,0,232,1429,1,0,0,0,234,1431,1,0,0,0,236,1436,
  	1,0,0,0,238,1444,1,0,0,0,240,1454,1,0,0,0,242,1458,1,0,0,0,244,1465,1,
  	0,0,0,246,1469,1,0,0,0,248,1472,1,0,0,0,250,1480,1,0,0,0,252,1485,1,0,
  	0,0,254,1493,1,0,0,0,256,1504,1,0,0,0,258,1506,1,0,0,0,260,1508,1,0,0,
  	0,262,1511,1,0,0,0,264,1523,1,0,0,0,266,1529,1,0,0,0,268,1531,1,0,0,0,
  	270,1538,1,0,0,0,272,1542,1,0,0,0,274,1544,1,0,0,0,276,1548,1,0,0,0,278,
  	1550,1,0,0,0,280,1553,1,0,0,0,282,1556,1,0,0,0,284,1575,1,0,0,0,286,1577,
  	1,0,0,0,288,1579,1,0,0,0,290,1588,1,0,0,0,292,1590,1,0,0,0,294,1592,1,
  	0,0,0,296,1594,1,0,0,0,298,1596,1,0,0,0,300,1598,1,0,0,0,302,1600,1,0,
  	0,0,304,1602,1,0,0,0,306,1604,1,0,0,0,308,1606,1,0,0,0,310,1608,1,0,0,
  	0,312,1610,1,0,0,0,314,1612,1,0,0,0,316,1614,1,0,0,0,318,1617,1,0,0,0,
  	320,1619,1,0,0,0,322,1621,1,0,0,0,324,1623,1,0,0,0,326,1626,1,0,0,0,328,
  	1632,1,0,0,0,330,1634,1,0,0,0,332,1636,1,0,0,0,334,1638,1,0,0,0,336,1647,
  	1,0,0,0,338,1649,1,0,0,0,340,1651,1,0,0,0,342,1653,1,0,0,0,344,1655,1,
  	0,0,0,346,1659,1,0,0,0,348,1664,1,0,0,0,350,1673,1,0,0,0,352,1675,1,0,
  	0,0,354,1679,1,0,0,0,356,1681,1,0,0,0,358,1684,1,0,0,0,360,1687,1,0,0,
  	0,362,1690,1,0,0,0,364,1697,1,0,0,0,366,1699,1,0,0,0,368,1701,1,0,0,0,
  	370,1703,1,0,0,0,372,1705,1,0,0,0,374,1707,1,0,0,0,376,1709,1,0,0,0,378,
  	1711,1,0,0,0,380,1713,1,0,0,0,382,1715,1,0,0,0,384,1719,1,0,0,0,386,1721,
  	1,0,0,0,388,1729,1,0,0,0,390,1734,1,0,0,0,392,1736,1,0,0,0,394,1738,1,
  	0,0,0,396,1740,1,0,0,0,398,1742,1,0,0,0,400,1746,1,0,0,0,402,1750,1,0,
  	0,0,404,1754,1,0,0,0,406,1763,1,0,0,0,408,1771,1,0,0,0,410,1779,1,0,0,
  	0,412,1781,1,0,0,0,414,1785,1,0,0,0,416,1787,1,0,0,0,418,1789,1,0,0,0,
  	420,1791,1,0,0,0,422,1801,1,0,0,0,424,1803,1,0,0,0,426,1805,1,0,0,0,428,
  	1807,1,0,0,0,430,1809,1,0,0,0,432,1811,1,0,0,0,434,1819,1,0,0,0,436,1821,
  	1,0,0,0,438,1823,1,0,0,0,440,1828,1,0,0,0,442,1833,1,0,0,0,444,1861,1,
  	0,0,0,446,1863,1,0,0,0,448,1878,1,0,0,0,450,1883,1,0,0,0,452,1890,1,0,
  	0,0,454,1895,1,0,0,0,456,1899,1,0,0,0,458,1901,1,0,0,0,460,1903,1,0,0,
  	0,462,1905,1,0,0,0,464,1913,1,0,0,0,466,1917,1,0,0,0,468,1922,1,0,0,0,
  	470,1924,1,0,0,0,472,1929,1,0,0,0,474,1934,1,0,0,0,476,1936,1,0,0,0,478,
  	1938,1,0,0,0,480,1947,1,0,0,0,482,1951,1,0,0,0,484,1954,1,0,0,0,486,1970,
  	1,0,0,0,488,1973,1,0,0,0,490,1976,1,0,0,0,492,1981,1,0,0,0,494,1997,1,
  	0,0,0,496,2010,1,0,0,0,498,2016,1,0,0,0,500,2018,1,0,0,0,502,2021,1,0,
  	0,0,504,2038,1,0,0,0,506,2045,1,0,0,0,508,2057,1,0,0,0,510,2071,1,0,0,
  	0,512,2073,1,0,0,0,514,2078,1,0,0,0,516,517,3,4,2,0,517,518,5,0,0,1,518,
  	1,1,0,0,0,519,520,3,0,0,0,520,3,1,0,0,0,521,523,3,66,33,0,522,521,1,0,
  	0,0,523,526,1,0,0,0,524,522,1,0,0,0,524,525,1,0,0,0,525,5,1,0,0,0,526,
  	524,1,0,0,0,527,528,5,142,0,0,528,529,5,155,0,0,529,531,5,150,0,0,530,
  	527,1,0,0,0,530,531,1,0,0,0,531,536,1,0,0,0,532,534,5,155,0,0,533,532,
  	1,0,0,0,533,534,1,0,0,0,534,536,1,0,0,0,535,530,1,0,0,0,535,533,1,0,0,
  	0,536,7,1,0,0,0,537,543,5,114,0,0,538,539,5,124,0,0,539,540,3,10,5,0,
  	540,541,5,125,0,0,541,543,1,0,0,0,542,537,1,0,0,0,542,538,1,0,0,0,543,
  	9,1,0,0,0,544,546,3,12,6,0,545,544,1,0,0,0,546,549,1,0,0,0,547,545,1,
  	0,0,0,547,548,1,0,0,0,548,11,1,0,0,0,549,547,1,0,0,0,550,553,3,14,7,0,
  	551,553,3,20,10,0,552,550,1,0,0,0,552,551,1,0,0,0,553,13,1,0,0,0,554,
  	557,3,68,34,0,555,557,3,70,35,0,556,554,1,0,0,0,556,555,1,0,0,0,557,15,
  	1,0,0,0,558,560,3,486,243,0,559,558,1,0,0,0,560,563,1,0,0,0,561,559,1,
  	0,0,0,561,562,1,0,0,0,562,564,1,0,0,0,563,561,1,0,0,0,564,568,5,30,0,
  	0,565,566,3,6,3,0,566,567,5,47,0,0,567,569,1,0,0,0,568,565,1,0,0,0,568,
  	569,1,0,0,0,569,570,1,0,0,0,570,575,3,54,27,0,571,572,5,128,0,0,572,574,
  	3,54,27,0,573,571,1,0,0,0,574,577,1,0,0,0,575,573,1,0,0,0,575,576,1,0,
  	0,0,576,578,1,0,0,0,577,575,1,0,0,0,578,579,5,96,0,0,579,584,3,54,27,
  	0,580,581,5,128,0,0,581,583,3,54,27,0,582,580,1,0,0,0,583,586,1,0,0,0,
  	584,582,1,0,0,0,584,585,1,0,0,0,585,587,1,0,0,0,586,584,1,0,0,0,587,588,
  	3,8,4,0,588,17,1,0,0,0,589,590,3,54,27,0,590,19,1,0,0,0,591,592,3,22,
  	11,0,592,21,1,0,0,0,593,598,3,24,12,0,594,598,3,26,13,0,595,598,3,28,
  	14,0,596,598,3,492,246,0,597,593,1,0,0,0,597,594,1,0,0,0,597,595,1,0,
  	0,0,597,596,1,0,0,0,598,23,1,0,0,0,599,600,5,22,0,0,600,610,3,6,3,0,601,
  	602,5,8,0,0,602,607,3,18,9,0,603,604,5,128,0,0,604,606,3,18,9,0,605,603,
  	1,0,0,0,606,609,1,0,0,0,607,605,1,0,0,0,607,608,1,0,0,0,608,611,1,0,0,
  	0,609,607,1,0,0,0,610,601,1,0,0,0,610,611,1,0,0,0,611,613,1,0,0,0,612,
  	599,1,0,0,0,612,613,1,0,0,0,613,616,1,0,0,0,614,615,5,104,0,0,615,617,
  	5,160,0,0,616,614,1,0,0,0,616,617,1,0,0,0,617,618,1,0,0,0,618,619,5,110,
  	0,0,619,25,1,0,0,0,620,622,5,35,0,0,621,623,3,6,3,0,622,621,1,0,0,0,622,
  	623,1,0,0,0,623,626,1,0,0,0,624,625,5,104,0,0,625,627,5,160,0,0,626,624,
  	1,0,0,0,626,627,1,0,0,0,627,628,1,0,0,0,628,629,5,110,0,0,629,27,1,0,
  	0,0,630,631,5,84,0,0,631,633,3,6,3,0,632,630,1,0,0,0,632,633,1,0,0,0,
  	633,634,1,0,0,0,634,635,5,61,0,0,635,636,5,160,0,0,636,637,5,110,0,0,
  	637,29,1,0,0,0,638,639,3,38,19,0,639,31,1,0,0,0,640,642,3,488,244,0,641,
  	640,1,0,0,0,642,645,1,0,0,0,643,641,1,0,0,0,643,644,1,0,0,0,644,646,1,
  	0,0,0,645,643,1,0,0,0,646,647,3,34,17,0,647,648,3,36,18,0,648,33,1,0,
  	0,0,649,650,5,66,0,0,650,651,3,6,3,0,651,35,1,0,0,0,652,658,5,114,0,0,
  	653,654,5,124,0,0,654,655,3,40,20,0,655,656,5,125,0,0,656,658,1,0,0,0,
  	657,652,1,0,0,0,657,653,1,0,0,0,658,37,1,0,0,0,659,660,3,4,2,0,660,39,
  	1,0,0,0,661,665,3,46,23,0,662,665,3,52,26,0,663,665,3,56,28,0,664,661,
  	1,0,0,0,664,662,1,0,0,0,664,663,1,0,0,0,665,41,1,0,0,0,666,668,3,44,22,
  	0,667,666,1,0,0,0,667,668,1,0,0,0,668,43,1,0,0,0,669,670,7,0,0,0,670,
  	45,1,0,0,0,671,674,3,48,24,0,672,674,3,50,25,0,673,671,1,0,0,0,673,672,
  	1,0,0,0,674,47,1,0,0,0,675,676,3,42,21,0,676,677,3,68,34,0,677,49,1,0,
  	0,0,678,679,3,42,21,0,679,680,3,70,35,0,680,51,1,0,0,0,681,682,3,42,21,
  	0,682,686,5,10,0,0,683,684,5,142,0,0,684,685,5,155,0,0,685,687,5,150,
  	0,0,686,683,1,0,0,0,686,687,1,0,0,0,687,689,1,0,0,0,688,690,5,155,0,0,
  	689,688,1,0,0,0,689,690,1,0,0,0,690,691,1,0,0,0,691,692,5,46,0,0,692,
  	693,3,54,27,0,693,694,3,8,4,0,694,53,1,0,0,0,695,700,5,155,0,0,696,697,
  	5,116,0,0,697,699,5,155,0,0,698,696,1,0,0,0,699,702,1,0,0,0,700,698,1,
  	0,0,0,700,701,1,0,0,0,701,55,1,0,0,0,702,700,1,0,0,0,703,705,3,44,22,
  	0,704,703,1,0,0,0,704,705,1,0,0,0,705,706,1,0,0,0,706,708,5,53,0,0,707,
  	709,5,11,0,0,708,707,1,0,0,0,708,709,1,0,0,0,709,710,1,0,0,0,710,712,
  	3,58,29,0,711,713,3,8,4,0,712,711,1,0,0,0,712,713,1,0,0,0,713,57,1,0,
  	0,0,714,717,3,60,30,0,715,717,3,56,28,0,716,714,1,0,0,0,716,715,1,0,0,
  	0,717,59,1,0,0,0,718,720,3,54,27,0,719,721,5,116,0,0,720,719,1,0,0,0,
  	720,721,1,0,0,0,721,723,1,0,0,0,722,724,7,1,0,0,723,722,1,0,0,0,723,724,
  	1,0,0,0,724,61,1,0,0,0,725,726,3,58,29,0,726,727,3,64,32,0,727,63,1,0,
  	0,0,728,729,5,126,0,0,729,730,3,264,132,0,730,731,5,127,0,0,731,65,1,
  	0,0,0,732,737,3,22,11,0,733,737,3,68,34,0,734,737,3,70,35,0,735,737,3,
  	72,36,0,736,732,1,0,0,0,736,733,1,0,0,0,736,734,1,0,0,0,736,735,1,0,0,
  	0,737,67,1,0,0,0,738,766,3,16,8,0,739,766,3,74,37,0,740,766,3,128,64,
  	0,741,766,3,204,102,0,742,766,3,32,16,0,743,766,3,206,103,0,744,766,3,
  	208,104,0,745,766,3,484,242,0,746,766,3,210,105,0,747,766,3,212,106,0,
  	748,766,3,438,219,0,749,766,3,234,117,0,750,766,3,238,119,0,751,766,3,
  	250,125,0,752,766,3,468,234,0,753,766,3,504,252,0,754,766,3,506,253,0,
  	755,766,3,100,50,0,756,766,3,108,54,0,757,766,3,134,67,0,758,766,3,112,
  	56,0,759,766,3,196,98,0,760,766,3,176,88,0,761,766,3,180,90,0,762,766,
  	3,186,93,0,763,766,3,200,100,0,764,766,3,56,28,0,765,738,1,0,0,0,765,
  	739,1,0,0,0,765,740,1,0,0,0,765,741,1,0,0,0,765,742,1,0,0,0,765,743,1,
  	0,0,0,765,744,1,0,0,0,765,745,1,0,0,0,765,746,1,0,0,0,765,747,1,0,0,0,
  	765,748,1,0,0,0,765,749,1,0,0,0,765,750,1,0,0,0,765,751,1,0,0,0,765,752,
  	1,0,0,0,765,753,1,0,0,0,765,754,1,0,0,0,765,755,1,0,0,0,765,756,1,0,0,
  	0,765,757,1,0,0,0,765,758,1,0,0,0,765,759,1,0,0,0,765,760,1,0,0,0,765,
  	761,1,0,0,0,765,762,1,0,0,0,765,763,1,0,0,0,765,764,1,0,0,0,766,69,1,
  	0,0,0,767,778,3,138,69,0,768,778,3,236,118,0,769,778,3,248,124,0,770,
  	778,3,252,126,0,771,778,3,254,127,0,772,778,3,214,107,0,773,778,3,226,
  	113,0,774,778,3,230,115,0,775,778,3,440,220,0,776,778,3,442,221,0,777,
  	767,1,0,0,0,777,768,1,0,0,0,777,769,1,0,0,0,777,770,1,0,0,0,777,771,1,
  	0,0,0,777,772,1,0,0,0,777,773,1,0,0,0,777,774,1,0,0,0,777,775,1,0,0,0,
  	777,776,1,0,0,0,778,71,1,0,0,0,779,780,3,514,257,0,780,73,1,0,0,0,781,
  	782,3,76,38,0,782,783,5,98,0,0,783,784,3,78,39,0,784,785,3,94,47,0,785,
  	75,1,0,0,0,786,788,5,9,0,0,787,786,1,0,0,0,787,788,1,0,0,0,788,792,1,
  	0,0,0,789,791,3,488,244,0,790,789,1,0,0,0,791,794,1,0,0,0,792,790,1,0,
  	0,0,792,793,1,0,0,0,793,77,1,0,0,0,794,792,1,0,0,0,795,797,5,11,0,0,796,
  	795,1,0,0,0,796,797,1,0,0,0,797,798,1,0,0,0,798,800,3,6,3,0,799,801,3,
  	478,239,0,800,799,1,0,0,0,800,801,1,0,0,0,801,804,1,0,0,0,802,805,3,80,
  	40,0,803,805,3,82,41,0,804,802,1,0,0,0,804,803,1,0,0,0,805,806,1,0,0,
  	0,806,804,1,0,0,0,806,807,1,0,0,0,807,811,1,0,0,0,808,810,3,84,42,0,809,
  	808,1,0,0,0,810,813,1,0,0,0,811,809,1,0,0,0,811,812,1,0,0,0,812,79,1,
  	0,0,0,813,811,1,0,0,0,814,815,5,3,0,0,815,820,3,102,51,0,816,817,5,128,
  	0,0,817,819,3,102,51,0,818,816,1,0,0,0,819,822,1,0,0,0,820,818,1,0,0,
  	0,820,821,1,0,0,0,821,81,1,0,0,0,822,820,1,0,0,0,823,824,5,7,0,0,824,
  	825,3,110,55,0,825,83,1,0,0,0,826,831,3,86,43,0,827,831,3,88,44,0,828,
  	831,3,90,45,0,829,831,3,92,46,0,830,826,1,0,0,0,830,827,1,0,0,0,830,828,
  	1,0,0,0,830,829,1,0,0,0,831,85,1,0,0,0,832,833,5,34,0,0,833,834,5,47,
  	0,0,834,839,3,114,57,0,835,836,5,128,0,0,836,838,3,114,57,0,837,835,1,
  	0,0,0,838,841,1,0,0,0,839,837,1,0,0,0,839,840,1,0,0,0,840,87,1,0,0,0,
  	841,839,1,0,0,0,842,843,5,101,0,0,843,848,3,116,58,0,844,845,5,128,0,
  	0,845,847,3,116,58,0,846,844,1,0,0,0,847,850,1,0,0,0,848,846,1,0,0,0,
  	848,849,1,0,0,0,849,89,1,0,0,0,850,848,1,0,0,0,851,852,5,51,0,0,852,857,
  	3,118,59,0,853,854,5,128,0,0,854,856,3,118,59,0,855,853,1,0,0,0,856,859,
  	1,0,0,0,857,855,1,0,0,0,857,858,1,0,0,0,858,91,1,0,0,0,859,857,1,0,0,
  	0,860,861,5,32,0,0,861,866,3,120,60,0,862,863,5,128,0,0,863,865,3,120,
  	60,0,864,862,1,0,0,0,865,868,1,0,0,0,866,864,1,0,0,0,866,867,1,0,0,0,
  	867,93,1,0,0,0,868,866,1,0,0,0,869,875,5,114,0,0,870,871,5,124,0,0,871,
  	872,3,96,48,0,872,873,5,125,0,0,873,875,1,0,0,0,874,869,1,0,0,0,874,870,
  	1,0,0,0,875,95,1,0,0,0,876,878,3,66,33,0,877,876,1,0,0,0,878,881,1,0,
  	0,0,879,877,1,0,0,0,879,880,1,0,0,0,880,97,1,0,0,0,881,879,1,0,0,0,882,
  	883,3,66,33,0,883,99,1,0,0,0,884,885,5,86,0,0,885,887,3,6,3,0,886,884,
  	1,0,0,0,886,887,1,0,0,0,887,888,1,0,0,0,888,889,5,93,0,0,889,890,3,104,
  	52,0,890,891,5,3,0,0,891,892,3,106,53,0,892,893,3,8,4,0,893,101,1,0,0,
  	0,894,895,3,106,53,0,895,103,1,0,0,0,896,899,3,54,27,0,897,899,3,190,
  	95,0,898,896,1,0,0,0,898,897,1,0,0,0,899,105,1,0,0,0,900,903,3,54,27,
  	0,901,903,3,190,95,0,902,900,1,0,0,0,902,901,1,0,0,0,903,107,1,0,0,0,
  	904,905,5,26,0,0,905,907,3,6,3,0,906,904,1,0,0,0,906,907,1,0,0,0,907,
  	908,1,0,0,0,908,911,5,24,0,0,909,912,3,54,27,0,910,912,3,192,96,0,911,
  	909,1,0,0,0,911,910,1,0,0,0,912,913,1,0,0,0,913,916,5,7,0,0,914,917,3,
  	54,27,0,915,917,3,192,96,0,916,914,1,0,0,0,916,915,1,0,0,0,917,918,1,
  	0,0,0,918,919,3,8,4,0,919,109,1,0,0,0,920,923,3,54,27,0,921,923,3,192,
  	96,0,922,920,1,0,0,0,922,921,1,0,0,0,923,111,1,0,0,0,924,925,5,33,0,0,
  	925,927,3,6,3,0,926,924,1,0,0,0,926,927,1,0,0,0,927,928,1,0,0,0,928,931,
  	5,34,0,0,929,932,3,54,27,0,930,932,3,192,96,0,931,929,1,0,0,0,931,930,
  	1,0,0,0,932,933,1,0,0,0,933,936,5,47,0,0,934,937,3,54,27,0,935,937,3,
  	192,96,0,936,934,1,0,0,0,936,935,1,0,0,0,937,938,1,0,0,0,938,939,3,8,
  	4,0,939,113,1,0,0,0,940,943,3,54,27,0,941,943,3,192,96,0,942,940,1,0,
  	0,0,942,941,1,0,0,0,943,115,1,0,0,0,944,947,3,54,27,0,945,947,3,190,95,
  	0,946,944,1,0,0,0,946,945,1,0,0,0,947,117,1,0,0,0,948,951,3,54,27,0,949,
  	951,3,190,95,0,950,948,1,0,0,0,950,949,1,0,0,0,951,119,1,0,0,0,952,955,
  	3,54,27,0,953,955,3,190,95,0,954,952,1,0,0,0,954,953,1,0,0,0,955,121,
  	1,0,0,0,956,959,3,124,62,0,957,959,3,126,63,0,958,956,1,0,0,0,958,957,
  	1,0,0,0,959,123,1,0,0,0,960,961,3,42,21,0,961,962,5,62,0,0,962,963,3,
  	70,35,0,963,125,1,0,0,0,964,965,3,42,21,0,965,966,3,70,35,0,966,127,1,
  	0,0,0,967,969,3,76,38,0,968,967,1,0,0,0,968,969,1,0,0,0,969,970,1,0,0,
  	0,970,971,5,21,0,0,971,972,3,130,65,0,972,973,3,94,47,0,973,129,1,0,0,
  	0,974,976,5,11,0,0,975,974,1,0,0,0,975,976,1,0,0,0,976,977,1,0,0,0,977,
  	979,3,6,3,0,978,980,3,478,239,0,979,978,1,0,0,0,979,980,1,0,0,0,980,983,
  	1,0,0,0,981,984,3,132,66,0,982,984,3,82,41,0,983,981,1,0,0,0,983,982,
  	1,0,0,0,983,984,1,0,0,0,984,988,1,0,0,0,985,987,3,84,42,0,986,985,1,0,
  	0,0,987,990,1,0,0,0,988,986,1,0,0,0,988,989,1,0,0,0,989,131,1,0,0,0,990,
  	988,1,0,0,0,991,992,5,3,0,0,992,997,3,136,68,0,993,994,5,128,0,0,994,
  	996,3,136,68,0,995,993,1,0,0,0,996,999,1,0,0,0,997,995,1,0,0,0,997,998,
  	1,0,0,0,998,133,1,0,0,0,999,997,1,0,0,0,1000,1001,5,86,0,0,1001,1003,
  	3,6,3,0,1002,1000,1,0,0,0,1002,1003,1,0,0,0,1003,1004,1,0,0,0,1004,1005,
  	5,90,0,0,1005,1006,3,54,27,0,1006,1007,5,3,0,0,1007,1008,3,54,27,0,1008,
  	1009,3,8,4,0,1009,135,1,0,0,0,1010,1011,3,54,27,0,1011,137,1,0,0,0,1012,
  	1014,3,140,70,0,1013,1012,1,0,0,0,1013,1014,1,0,0,0,1014,1019,1,0,0,0,
  	1015,1016,5,40,0,0,1016,1020,3,144,72,0,1017,1020,5,40,0,0,1018,1020,
  	3,488,244,0,1019,1015,1,0,0,0,1019,1017,1,0,0,0,1019,1018,1,0,0,0,1020,
  	1022,1,0,0,0,1021,1023,3,166,83,0,1022,1021,1,0,0,0,1022,1023,1,0,0,0,
  	1023,1025,1,0,0,0,1024,1026,3,466,233,0,1025,1024,1,0,0,0,1025,1026,1,
  	0,0,0,1026,1028,1,0,0,0,1027,1029,3,464,232,0,1028,1027,1,0,0,0,1028,
  	1029,1,0,0,0,1029,1030,1,0,0,0,1030,1031,3,94,47,0,1031,139,1,0,0,0,1032,
  	1034,3,142,71,0,1033,1032,1,0,0,0,1033,1034,1,0,0,0,1034,1036,1,0,0,0,
  	1035,1037,5,9,0,0,1036,1035,1,0,0,0,1036,1037,1,0,0,0,1037,1039,1,0,0,
  	0,1038,1040,7,2,0,0,1039,1038,1,0,0,0,1039,1040,1,0,0,0,1040,1042,1,0,
  	0,0,1041,1043,5,80,0,0,1042,1041,1,0,0,0,1042,1043,1,0,0,0,1043,1045,
  	1,0,0,0,1044,1046,5,31,0,0,1045,1044,1,0,0,0,1045,1046,1,0,0,0,1046,1048,
  	1,0,0,0,1047,1049,5,37,0,0,1048,1047,1,0,0,0,1048,1049,1,0,0,0,1049,1053,
  	1,0,0,0,1050,1052,3,488,244,0,1051,1050,1,0,0,0,1052,1055,1,0,0,0,1053,
  	1051,1,0,0,0,1053,1054,1,0,0,0,1054,141,1,0,0,0,1055,1053,1,0,0,0,1056,
  	1057,7,3,0,0,1057,143,1,0,0,0,1058,1060,5,11,0,0,1059,1058,1,0,0,0,1059,
  	1060,1,0,0,0,1060,1068,1,0,0,0,1061,1064,3,146,73,0,1062,1065,3,156,78,
  	0,1063,1065,3,82,41,0,1064,1062,1,0,0,0,1064,1063,1,0,0,0,1064,1065,1,
  	0,0,0,1065,1069,1,0,0,0,1066,1069,3,156,78,0,1067,1069,3,82,41,0,1068,
  	1061,1,0,0,0,1068,1066,1,0,0,0,1068,1067,1,0,0,0,1069,1073,1,0,0,0,1070,
  	1072,3,148,74,0,1071,1070,1,0,0,0,1072,1075,1,0,0,0,1073,1071,1,0,0,0,
  	1073,1074,1,0,0,0,1074,1077,1,0,0,0,1075,1073,1,0,0,0,1076,1078,3,94,
  	47,0,1077,1076,1,0,0,0,1077,1078,1,0,0,0,1078,145,1,0,0,0,1079,1080,5,
  	142,0,0,1080,1081,5,155,0,0,1081,1083,5,150,0,0,1082,1084,5,155,0,0,1083,
  	1082,1,0,0,0,1083,1084,1,0,0,0,1084,1087,1,0,0,0,1085,1087,5,155,0,0,
  	1086,1079,1,0,0,0,1086,1085,1,0,0,0,1087,147,1,0,0,0,1088,1093,3,84,42,
  	0,1089,1093,3,150,75,0,1090,1093,3,152,76,0,1091,1093,3,154,77,0,1092,
  	1088,1,0,0,0,1092,1089,1,0,0,0,1092,1090,1,0,0,0,1092,1091,1,0,0,0,1093,
  	149,1,0,0,0,1094,1097,5,19,0,0,1095,1098,3,194,97,0,1096,1098,3,192,96,
  	0,1097,1095,1,0,0,0,1097,1096,1,0,0,0,1098,151,1,0,0,0,1099,1100,5,58,
  	0,0,1100,1101,5,70,0,0,1101,1102,3,198,99,0,1102,153,1,0,0,0,1103,1104,
  	5,41,0,0,1104,1105,5,18,0,0,1105,1110,3,202,101,0,1106,1107,5,128,0,0,
  	1107,1109,3,202,101,0,1108,1106,1,0,0,0,1109,1112,1,0,0,0,1110,1108,1,
  	0,0,0,1110,1111,1,0,0,0,1111,155,1,0,0,0,1112,1110,1,0,0,0,1113,1115,
  	3,160,80,0,1114,1113,1,0,0,0,1115,1116,1,0,0,0,1116,1114,1,0,0,0,1116,
  	1117,1,0,0,0,1117,1119,1,0,0,0,1118,1120,3,158,79,0,1119,1118,1,0,0,0,
  	1119,1120,1,0,0,0,1120,1124,1,0,0,0,1121,1123,3,160,80,0,1122,1121,1,
  	0,0,0,1123,1126,1,0,0,0,1124,1122,1,0,0,0,1124,1125,1,0,0,0,1125,1134,
  	1,0,0,0,1126,1124,1,0,0,0,1127,1129,3,158,79,0,1128,1130,3,160,80,0,1129,
  	1128,1,0,0,0,1130,1131,1,0,0,0,1131,1129,1,0,0,0,1131,1132,1,0,0,0,1132,
  	1134,1,0,0,0,1133,1114,1,0,0,0,1133,1127,1,0,0,0,1134,157,1,0,0,0,1135,
  	1148,3,478,239,0,1136,1138,5,72,0,0,1137,1139,5,67,0,0,1138,1137,1,0,
  	0,0,1138,1139,1,0,0,0,1139,1141,1,0,0,0,1140,1136,1,0,0,0,1140,1141,1,
  	0,0,0,1141,1149,1,0,0,0,1142,1144,5,67,0,0,1143,1142,1,0,0,0,1143,1144,
  	1,0,0,0,1144,1145,1,0,0,0,1145,1147,5,72,0,0,1146,1143,1,0,0,0,1146,1147,
  	1,0,0,0,1147,1149,1,0,0,0,1148,1140,1,0,0,0,1148,1146,1,0,0,0,1149,159,
  	1,0,0,0,1150,1155,3,162,81,0,1151,1155,3,166,83,0,1152,1155,3,170,85,
  	0,1153,1155,3,172,86,0,1154,1150,1,0,0,0,1154,1151,1,0,0,0,1154,1152,
  	1,0,0,0,1154,1153,1,0,0,0,1155,161,1,0,0,0,1156,1161,3,164,82,0,1157,
  	1158,5,128,0,0,1158,1160,3,178,89,0,1159,1157,1,0,0,0,1160,1163,1,0,0,
  	0,1161,1159,1,0,0,0,1161,1162,1,0,0,0,1162,163,1,0,0,0,1163,1161,1,0,
  	0,0,1164,1165,5,2,0,0,1165,1166,3,178,89,0,1166,165,1,0,0,0,1167,1169,
  	3,168,84,0,1168,1170,3,182,91,0,1169,1168,1,0,0,0,1169,1170,1,0,0,0,1170,
  	1175,1,0,0,0,1171,1172,5,128,0,0,1172,1174,3,182,91,0,1173,1171,1,0,0,
  	0,1174,1177,1,0,0,0,1175,1173,1,0,0,0,1175,1176,1,0,0,0,1176,167,1,0,
  	0,0,1177,1175,1,0,0,0,1178,1179,5,4,0,0,1179,1180,3,182,91,0,1180,169,
  	1,0,0,0,1181,1182,5,5,0,0,1182,1183,3,184,92,0,1183,171,1,0,0,0,1184,
  	1187,3,174,87,0,1185,1186,5,128,0,0,1186,1188,3,188,94,0,1187,1185,1,
  	0,0,0,1187,1188,1,0,0,0,1188,173,1,0,0,0,1189,1191,3,142,71,0,1190,1189,
  	1,0,0,0,1190,1191,1,0,0,0,1191,1192,1,0,0,0,1192,1193,5,6,0,0,1193,1194,
  	3,188,94,0,1194,175,1,0,0,0,1195,1196,5,86,0,0,1196,1198,3,6,3,0,1197,
  	1195,1,0,0,0,1197,1198,1,0,0,0,1198,1200,1,0,0,0,1199,1201,5,100,0,0,
  	1200,1199,1,0,0,0,1200,1201,1,0,0,0,1201,1202,1,0,0,0,1202,1203,3,54,
  	27,0,1203,1204,5,2,0,0,1204,1206,3,106,53,0,1205,1207,3,158,79,0,1206,
  	1205,1,0,0,0,1206,1207,1,0,0,0,1207,1208,1,0,0,0,1208,1209,3,8,4,0,1209,
  	177,1,0,0,0,1210,1211,3,106,53,0,1211,179,1,0,0,0,1212,1213,5,86,0,0,
  	1213,1215,3,6,3,0,1214,1212,1,0,0,0,1214,1215,1,0,0,0,1215,1217,1,0,0,
  	0,1216,1218,5,91,0,0,1217,1216,1,0,0,0,1217,1218,1,0,0,0,1218,1219,1,
  	0,0,0,1219,1220,3,104,52,0,1220,1221,5,4,0,0,1221,1223,3,106,53,0,1222,
  	1224,3,158,79,0,1223,1222,1,0,0,0,1223,1224,1,0,0,0,1224,1225,1,0,0,0,
  	1225,1226,3,8,4,0,1226,181,1,0,0,0,1227,1228,3,106,53,0,1228,183,1,0,
  	0,0,1229,1230,3,106,53,0,1230,185,1,0,0,0,1231,1233,3,142,71,0,1232,1231,
  	1,0,0,0,1232,1233,1,0,0,0,1233,1236,1,0,0,0,1234,1235,5,86,0,0,1235,1237,
  	3,6,3,0,1236,1234,1,0,0,0,1236,1237,1,0,0,0,1237,1240,1,0,0,0,1238,1239,
  	5,82,0,0,1239,1241,3,104,52,0,1240,1238,1,0,0,0,1240,1241,1,0,0,0,1241,
  	1242,1,0,0,0,1242,1243,5,6,0,0,1243,1245,3,54,27,0,1244,1246,3,164,82,
  	0,1245,1244,1,0,0,0,1245,1246,1,0,0,0,1246,1248,1,0,0,0,1247,1249,3,158,
  	79,0,1248,1247,1,0,0,0,1248,1249,1,0,0,0,1249,1251,1,0,0,0,1250,1252,
  	3,168,84,0,1251,1250,1,0,0,0,1251,1252,1,0,0,0,1252,1254,1,0,0,0,1253,
  	1255,3,466,233,0,1254,1253,1,0,0,0,1254,1255,1,0,0,0,1255,1256,1,0,0,
  	0,1256,1257,3,8,4,0,1257,187,1,0,0,0,1258,1259,3,106,53,0,1259,189,1,
  	0,0,0,1260,1261,3,192,96,0,1261,191,1,0,0,0,1262,1267,3,194,97,0,1263,
  	1264,5,140,0,0,1264,1266,3,194,97,0,1265,1263,1,0,0,0,1266,1269,1,0,0,
  	0,1267,1265,1,0,0,0,1267,1268,1,0,0,0,1268,193,1,0,0,0,1269,1267,1,0,
  	0,0,1270,1271,3,54,27,0,1271,195,1,0,0,0,1272,1273,5,59,0,0,1273,1275,
  	3,6,3,0,1274,1272,1,0,0,0,1274,1275,1,0,0,0,1275,1276,1,0,0,0,1276,1279,
  	5,58,0,0,1277,1280,3,54,27,0,1278,1280,3,190,95,0,1279,1277,1,0,0,0,1279,
  	1278,1,0,0,0,1280,1281,1,0,0,0,1281,1284,5,70,0,0,1282,1285,3,54,27,0,
  	1283,1285,3,190,95,0,1284,1282,1,0,0,0,1284,1283,1,0,0,0,1285,1286,1,
  	0,0,0,1286,1287,3,8,4,0,1287,197,1,0,0,0,1288,1291,3,54,27,0,1289,1291,
  	3,190,95,0,1290,1288,1,0,0,0,1290,1289,1,0,0,0,1291,199,1,0,0,0,1292,
  	1296,5,42,0,0,1293,1294,3,6,3,0,1294,1295,5,70,0,0,1295,1297,1,0,0,0,
  	1296,1293,1,0,0,0,1296,1297,1,0,0,0,1297,1298,1,0,0,0,1298,1299,3,54,
  	27,0,1299,1300,5,18,0,0,1300,1301,3,54,27,0,1301,1302,3,8,4,0,1302,201,
  	1,0,0,0,1303,1304,3,54,27,0,1304,203,1,0,0,0,1305,1306,3,76,38,0,1306,
  	1307,5,28,0,0,1307,1308,3,130,65,0,1308,1309,3,94,47,0,1309,205,1,0,0,
  	0,1310,1311,3,76,38,0,1311,1312,5,20,0,0,1312,1313,3,130,65,0,1313,1314,
  	3,94,47,0,1314,207,1,0,0,0,1315,1317,3,76,38,0,1316,1315,1,0,0,0,1316,
  	1317,1,0,0,0,1317,1318,1,0,0,0,1318,1319,5,89,0,0,1319,1320,3,130,65,
  	0,1320,1321,3,94,47,0,1321,209,1,0,0,0,1322,1323,3,76,38,0,1323,1324,
  	5,14,0,0,1324,1325,3,130,65,0,1325,1326,3,94,47,0,1326,211,1,0,0,0,1327,
  	1328,3,76,38,0,1328,1329,5,14,0,0,1329,1330,5,89,0,0,1330,1331,3,130,
  	65,0,1331,1332,3,94,47,0,1332,213,1,0,0,0,1333,1335,3,76,38,0,1334,1333,
  	1,0,0,0,1334,1335,1,0,0,0,1335,1336,1,0,0,0,1336,1337,5,27,0,0,1337,1338,
  	3,216,108,0,1338,1339,3,94,47,0,1339,215,1,0,0,0,1340,1343,3,144,72,0,
  	1341,1344,3,218,109,0,1342,1344,3,220,110,0,1343,1341,1,0,0,0,1343,1342,
  	1,0,0,0,1344,217,1,0,0,0,1345,1347,5,11,0,0,1346,1345,1,0,0,0,1346,1347,
  	1,0,0,0,1347,1348,1,0,0,0,1348,1349,5,47,0,0,1349,1350,3,222,111,0,1350,
  	1351,5,96,0,0,1351,1352,3,222,111,0,1352,219,1,0,0,0,1353,1354,5,122,
  	0,0,1354,1355,3,222,111,0,1355,1356,5,128,0,0,1356,1361,3,222,111,0,1357,
  	1358,5,128,0,0,1358,1360,3,222,111,0,1359,1357,1,0,0,0,1360,1363,1,0,
  	0,0,1361,1359,1,0,0,0,1361,1362,1,0,0,0,1362,1364,1,0,0,0,1363,1361,1,
  	0,0,0,1364,1365,5,123,0,0,1365,221,1,0,0,0,1366,1367,3,224,112,0,1367,
  	223,1,0,0,0,1368,1369,5,155,0,0,1369,1371,5,5,0,0,1370,1368,1,0,0,0,1370,
  	1371,1,0,0,0,1371,1373,1,0,0,0,1372,1374,3,478,239,0,1373,1372,1,0,0,
  	0,1373,1374,1,0,0,0,1374,1375,1,0,0,0,1375,1376,3,184,92,0,1376,225,1,
  	0,0,0,1377,1378,3,140,70,0,1378,1379,5,16,0,0,1379,1380,3,228,114,0,1380,
  	1381,3,94,47,0,1381,227,1,0,0,0,1382,1388,3,144,72,0,1383,1384,5,70,0,
  	0,1384,1385,3,222,111,0,1385,1386,5,146,0,0,1386,1387,3,222,111,0,1387,
  	1389,1,0,0,0,1388,1383,1,0,0,0,1388,1389,1,0,0,0,1389,1403,1,0,0,0,1390,
  	1392,5,11,0,0,1391,1390,1,0,0,0,1391,1392,1,0,0,0,1392,1400,1,0,0,0,1393,
  	1395,5,70,0,0,1394,1393,1,0,0,0,1394,1395,1,0,0,0,1395,1396,1,0,0,0,1396,
  	1397,3,222,111,0,1397,1398,5,146,0,0,1398,1399,3,222,111,0,1399,1401,
  	1,0,0,0,1400,1394,1,0,0,0,1400,1401,1,0,0,0,1401,1403,1,0,0,0,1402,1382,
  	1,0,0,0,1402,1391,1,0,0,0,1403,229,1,0,0,0,1404,1405,3,140,70,0,1405,
  	1406,5,94,0,0,1406,1407,3,232,116,0,1407,1408,3,94,47,0,1408,231,1,0,
  	0,0,1409,1415,3,144,72,0,1410,1411,5,44,0,0,1411,1412,3,222,111,0,1412,
  	1413,5,95,0,0,1413,1414,3,222,111,0,1414,1416,1,0,0,0,1415,1410,1,0,0,
  	0,1415,1416,1,0,0,0,1416,1430,1,0,0,0,1417,1419,5,11,0,0,1418,1417,1,
  	0,0,0,1418,1419,1,0,0,0,1419,1427,1,0,0,0,1420,1422,5,44,0,0,1421,1420,
  	1,0,0,0,1421,1422,1,0,0,0,1422,1423,1,0,0,0,1423,1424,3,222,111,0,1424,
  	1425,5,95,0,0,1425,1426,3,222,111,0,1426,1428,1,0,0,0,1427,1421,1,0,0,
  	0,1427,1428,1,0,0,0,1428,1430,1,0,0,0,1429,1409,1,0,0,0,1429,1418,1,0,
  	0,0,1430,233,1,0,0,0,1431,1432,3,76,38,0,1432,1433,5,15,0,0,1433,1434,
  	3,130,65,0,1434,1435,3,94,47,0,1435,235,1,0,0,0,1436,1437,3,140,70,0,
  	1437,1438,5,88,0,0,1438,1440,3,144,72,0,1439,1441,3,462,231,0,1440,1439,
  	1,0,0,0,1440,1441,1,0,0,0,1441,1442,1,0,0,0,1442,1443,3,94,47,0,1443,
  	237,1,0,0,0,1444,1445,3,76,38,0,1445,1446,5,48,0,0,1446,1447,3,130,65,
  	0,1447,1448,3,240,120,0,1448,239,1,0,0,0,1449,1455,5,114,0,0,1450,1451,
  	5,124,0,0,1451,1452,3,242,121,0,1452,1453,5,125,0,0,1453,1455,1,0,0,0,
  	1454,1449,1,0,0,0,1454,1450,1,0,0,0,1455,241,1,0,0,0,1456,1459,3,98,49,
  	0,1457,1459,3,244,122,0,1458,1456,1,0,0,0,1458,1457,1,0,0,0,1459,1460,
  	1,0,0,0,1460,1458,1,0,0,0,1460,1461,1,0,0,0,1461,1463,1,0,0,0,1462,1464,
  	3,246,123,0,1463,1462,1,0,0,0,1463,1464,1,0,0,0,1464,243,1,0,0,0,1465,
  	1466,3,42,21,0,1466,1467,5,85,0,0,1467,1468,3,70,35,0,1468,245,1,0,0,
  	0,1469,1470,3,42,21,0,1470,1471,3,264,132,0,1471,247,1,0,0,0,1472,1473,
  	3,140,70,0,1473,1474,5,38,0,0,1474,1476,3,144,72,0,1475,1477,3,462,231,
  	0,1476,1475,1,0,0,0,1476,1477,1,0,0,0,1477,1478,1,0,0,0,1478,1479,3,240,
  	120,0,1479,249,1,0,0,0,1480,1481,3,76,38,0,1481,1482,5,76,0,0,1482,1483,
  	3,130,65,0,1483,1484,3,240,120,0,1484,251,1,0,0,0,1485,1486,3,140,70,
  	0,1486,1487,5,17,0,0,1487,1489,3,144,72,0,1488,1490,3,462,231,0,1489,
  	1488,1,0,0,0,1489,1490,1,0,0,0,1490,1491,1,0,0,0,1491,1492,3,240,120,
  	0,1492,253,1,0,0,0,1493,1494,3,140,70,0,1494,1496,5,57,0,0,1495,1497,
  	7,4,0,0,1496,1495,1,0,0,0,1496,1497,1,0,0,0,1497,1498,1,0,0,0,1498,1500,
  	3,144,72,0,1499,1501,3,462,231,0,1500,1499,1,0,0,0,1500,1501,1,0,0,0,
  	1501,1502,1,0,0,0,1502,1503,3,240,120,0,1503,255,1,0,0,0,1504,1505,3,
  	258,129,0,1505,257,1,0,0,0,1506,1507,3,260,130,0,1507,259,1,0,0,0,1508,
  	1509,3,262,131,0,1509,261,1,0,0,0,1510,1512,3,264,132,0,1511,1510,1,0,
  	0,0,1512,1513,1,0,0,0,1513,1511,1,0,0,0,1513,1514,1,0,0,0,1514,263,1,
  	0,0,0,1515,1524,3,268,134,0,1516,1524,3,270,135,0,1517,1524,3,274,137,
  	0,1518,1524,3,278,139,0,1519,1524,3,282,141,0,1520,1524,3,290,145,0,1521,
  	1524,3,316,158,0,1522,1524,3,328,164,0,1523,1515,1,0,0,0,1523,1516,1,
  	0,0,0,1523,1517,1,0,0,0,1523,1518,1,0,0,0,1523,1519,1,0,0,0,1523,1520,
  	1,0,0,0,1523,1521,1,0,0,0,1523,1522,1,0,0,0,1524,265,1,0,0,0,1525,1530,
  	3,328,164,0,1526,1530,3,316,158,0,1527,1530,3,290,145,0,1528,1530,3,278,
  	139,0,1529,1525,1,0,0,0,1529,1526,1,0,0,0,1529,1527,1,0,0,0,1529,1528,
  	1,0,0,0,1530,267,1,0,0,0,1531,1532,5,50,0,0,1532,1533,3,292,146,0,1533,
  	1534,5,152,0,0,1534,1535,3,298,149,0,1535,1536,5,36,0,0,1536,1537,3,298,
  	149,0,1537,269,1,0,0,0,1538,1539,3,292,146,0,1539,1540,3,272,136,0,1540,
  	1541,3,298,149,0,1541,271,1,0,0,0,1542,1543,7,5,0,0,1543,273,1,0,0,0,
  	1544,1545,3,292,146,0,1545,1546,3,276,138,0,1546,1547,3,262,131,0,1547,
  	275,1,0,0,0,1548,1549,7,6,0,0,1549,277,1,0,0,0,1550,1551,3,280,140,0,
  	1551,1552,3,262,131,0,1552,279,1,0,0,0,1553,1554,7,7,0,0,1554,281,1,0,
  	0,0,1555,1557,3,292,146,0,1556,1555,1,0,0,0,1556,1557,1,0,0,0,1557,1564,
  	1,0,0,0,1558,1559,3,286,143,0,1559,1560,3,318,159,0,1560,1565,1,0,0,0,
  	1561,1562,3,288,144,0,1562,1563,3,320,160,0,1563,1565,1,0,0,0,1564,1558,
  	1,0,0,0,1564,1561,1,0,0,0,1565,283,1,0,0,0,1566,1568,3,292,146,0,1567,
  	1566,1,0,0,0,1567,1568,1,0,0,0,1568,1569,1,0,0,0,1569,1570,3,286,143,
  	0,1570,1571,3,318,159,0,1571,1576,1,0,0,0,1572,1573,3,288,144,0,1573,
  	1574,3,320,160,0,1574,1576,1,0,0,0,1575,1567,1,0,0,0,1575,1572,1,0,0,
  	0,1576,285,1,0,0,0,1577,1578,7,8,0,0,1578,287,1,0,0,0,1579,1580,5,13,
  	0,0,1580,289,1,0,0,0,1581,1582,3,304,152,0,1582,1583,3,312,156,0,1583,
  	1584,3,318,159,0,1584,1589,1,0,0,0,1585,1586,3,314,157,0,1586,1587,3,
  	320,160,0,1587,1589,1,0,0,0,1588,1581,1,0,0,0,1588,1585,1,0,0,0,1589,
  	291,1,0,0,0,1590,1591,3,294,147,0,1591,293,1,0,0,0,1592,1593,3,296,148,
  	0,1593,295,1,0,0,0,1594,1595,3,266,133,0,1595,297,1,0,0,0,1596,1597,3,
  	300,150,0,1597,299,1,0,0,0,1598,1599,3,302,151,0,1599,301,1,0,0,0,1600,
  	1601,3,258,129,0,1601,303,1,0,0,0,1602,1603,3,306,153,0,1603,305,1,0,
  	0,0,1604,1605,3,308,154,0,1605,307,1,0,0,0,1606,1607,3,310,155,0,1607,
  	309,1,0,0,0,1608,1609,3,54,27,0,1609,311,1,0,0,0,1610,1611,5,140,0,0,
  	1611,313,1,0,0,0,1612,1613,5,1,0,0,1613,315,1,0,0,0,1614,1615,5,11,0,
  	0,1615,1616,3,318,159,0,1616,317,1,0,0,0,1617,1618,3,322,161,0,1618,319,
  	1,0,0,0,1619,1620,3,322,161,0,1620,321,1,0,0,0,1621,1622,3,324,162,0,
  	1622,323,1,0,0,0,1623,1624,3,54,27,0,1624,325,1,0,0,0,1625,1627,3,328,
  	164,0,1626,1625,1,0,0,0,1627,1628,1,0,0,0,1628,1626,1,0,0,0,1628,1629,
  	1,0,0,0,1629,327,1,0,0,0,1630,1633,3,356,178,0,1631,1633,3,336,168,0,
  	1632,1630,1,0,0,0,1632,1631,1,0,0,0,1633,329,1,0,0,0,1634,1635,3,328,
  	164,0,1635,331,1,0,0,0,1636,1637,3,330,165,0,1637,333,1,0,0,0,1638,1639,
  	3,332,166,0,1639,335,1,0,0,0,1640,1648,3,344,172,0,1641,1648,3,346,173,
  	0,1642,1648,3,348,174,0,1643,1648,3,360,180,0,1644,1648,3,358,179,0,1645,
  	1648,3,362,181,0,1646,1648,3,388,194,0,1647,1640,1,0,0,0,1647,1641,1,
  	0,0,0,1647,1642,1,0,0,0,1647,1643,1,0,0,0,1647,1644,1,0,0,0,1647,1645,
  	1,0,0,0,1647,1646,1,0,0,0,1648,337,1,0,0,0,1649,1650,3,336,168,0,1650,
  	339,1,0,0,0,1651,1652,3,332,166,0,1652,341,1,0,0,0,1653,1654,3,332,166,
  	0,1654,343,1,0,0,0,1655,1656,5,126,0,0,1656,1657,3,354,177,0,1657,1658,
  	5,127,0,0,1658,345,1,0,0,0,1659,1660,5,130,0,0,1660,1661,5,122,0,0,1661,
  	1662,3,354,177,0,1662,1663,5,123,0,0,1663,347,1,0,0,0,1664,1665,5,122,
  	0,0,1665,1666,3,350,175,0,1666,1667,5,123,0,0,1667,349,1,0,0,0,1668,1670,
  	3,262,131,0,1669,1671,5,128,0,0,1670,1669,1,0,0,0,1670,1671,1,0,0,0,1671,
  	1674,1,0,0,0,1672,1674,3,352,176,0,1673,1668,1,0,0,0,1673,1672,1,0,0,
  	0,1674,351,1,0,0,0,1675,1676,3,260,130,0,1676,1677,5,128,0,0,1677,1678,
  	3,354,177,0,1678,353,1,0,0,0,1679,1680,3,350,175,0,1680,355,1,0,0,0,1681,
  	1682,5,140,0,0,1682,1683,3,384,192,0,1683,357,1,0,0,0,1684,1685,5,140,
  	0,0,1685,1686,3,370,185,0,1686,359,1,0,0,0,1687,1688,5,154,0,0,1688,1689,
  	3,370,185,0,1689,361,1,0,0,0,1690,1691,5,139,0,0,1691,1695,3,324,162,
  	0,1692,1696,3,364,182,0,1693,1696,3,372,186,0,1694,1696,3,300,150,0,1695,
  	1692,1,0,0,0,1695,1693,1,0,0,0,1695,1694,1,0,0,0,1696,363,1,0,0,0,1697,
  	1698,3,366,183,0,1698,365,1,0,0,0,1699,1700,3,368,184,0,1700,367,1,0,
  	0,0,1701,1702,3,416,208,0,1702,369,1,0,0,0,1703,1704,3,416,208,0,1704,
  	371,1,0,0,0,1705,1706,3,374,187,0,1706,373,1,0,0,0,1707,1708,3,380,190,
  	0,1708,375,1,0,0,0,1709,1710,3,378,189,0,1710,377,1,0,0,0,1711,1712,3,
  	324,162,0,1712,379,1,0,0,0,1713,1714,3,382,191,0,1714,381,1,0,0,0,1715,
  	1716,3,324,162,0,1716,383,1,0,0,0,1717,1720,3,394,197,0,1718,1720,3,386,
  	193,0,1719,1717,1,0,0,0,1719,1718,1,0,0,0,1720,385,1,0,0,0,1721,1722,
  	3,192,96,0,1722,387,1,0,0,0,1723,1730,3,390,195,0,1724,1730,3,422,211,
  	0,1725,1730,3,392,196,0,1726,1730,3,398,199,0,1727,1730,3,400,200,0,1728,
  	1730,3,416,208,0,1729,1723,1,0,0,0,1729,1724,1,0,0,0,1729,1725,1,0,0,
  	0,1729,1726,1,0,0,0,1729,1727,1,0,0,0,1729,1728,1,0,0,0,1730,389,1,0,
  	0,0,1731,1735,5,69,0,0,1732,1733,5,122,0,0,1733,1735,5,123,0,0,1734,1731,
  	1,0,0,0,1734,1732,1,0,0,0,1735,391,1,0,0,0,1736,1737,3,394,197,0,1737,
  	393,1,0,0,0,1738,1739,3,396,198,0,1739,395,1,0,0,0,1740,1741,3,54,27,
  	0,1741,397,1,0,0,0,1742,1743,3,54,27,0,1743,1744,5,140,0,0,1744,1745,
  	5,64,0,0,1745,399,1,0,0,0,1746,1747,3,402,201,0,1747,401,1,0,0,0,1748,
  	1751,3,178,89,0,1749,1751,3,408,204,0,1750,1748,1,0,0,0,1750,1749,1,0,
  	0,0,1751,1752,1,0,0,0,1752,1753,3,404,202,0,1753,403,1,0,0,0,1754,1759,
  	5,122,0,0,1755,1756,3,262,131,0,1756,1757,3,406,203,0,1757,1760,1,0,0,
  	0,1758,1760,3,408,204,0,1759,1755,1,0,0,0,1759,1758,1,0,0,0,1759,1760,
  	1,0,0,0,1760,1761,1,0,0,0,1761,1762,5,123,0,0,1762,405,1,0,0,0,1763,1768,
  	3,292,146,0,1764,1765,5,128,0,0,1765,1767,3,262,131,0,1766,1764,1,0,0,
  	0,1767,1770,1,0,0,0,1768,1766,1,0,0,0,1768,1769,1,0,0,0,1769,407,1,0,
  	0,0,1770,1768,1,0,0,0,1771,1776,3,410,205,0,1772,1773,5,128,0,0,1773,
  	1775,3,410,205,0,1774,1772,1,0,0,0,1775,1778,1,0,0,0,1776,1774,1,0,0,
  	0,1776,1777,1,0,0,0,1777,409,1,0,0,0,1778,1776,1,0,0,0,1779,1780,3,412,
  	206,0,1780,411,1,0,0,0,1781,1782,3,414,207,0,1782,1783,5,146,0,0,1783,
  	1784,3,262,131,0,1784,413,1,0,0,0,1785,1786,3,54,27,0,1786,415,1,0,0,
  	0,1787,1788,3,418,209,0,1788,417,1,0,0,0,1789,1790,3,420,210,0,1790,419,
  	1,0,0,0,1791,1792,5,122,0,0,1792,1793,3,242,121,0,1793,1794,5,123,0,0,
  	1794,421,1,0,0,0,1795,1802,7,4,0,0,1796,1802,3,428,214,0,1797,1802,3,
  	430,215,0,1798,1802,3,432,216,0,1799,1802,3,430,215,0,1800,1802,3,436,
  	218,0,1801,1795,1,0,0,0,1801,1796,1,0,0,0,1801,1797,1,0,0,0,1801,1798,
  	1,0,0,0,1801,1799,1,0,0,0,1801,1800,1,0,0,0,1802,423,1,0,0,0,1803,1804,
  	3,426,213,0,1804,425,1,0,0,0,1805,1806,7,4,0,0,1806,427,1,0,0,0,1807,
  	1808,5,160,0,0,1808,429,1,0,0,0,1809,1810,5,158,0,0,1810,431,1,0,0,0,
  	1811,1812,3,434,217,0,1812,433,1,0,0,0,1813,1815,5,158,0,0,1814,1813,
  	1,0,0,0,1814,1815,1,0,0,0,1815,1816,1,0,0,0,1816,1817,5,140,0,0,1817,
  	1820,7,9,0,0,1818,1820,5,159,0,0,1819,1814,1,0,0,0,1819,1818,1,0,0,0,
  	1820,435,1,0,0,0,1821,1822,5,115,0,0,1822,437,1,0,0,0,1823,1824,3,76,
  	38,0,1824,1825,5,56,0,0,1825,1826,3,130,65,0,1826,1827,3,94,47,0,1827,
  	439,1,0,0,0,1828,1829,3,140,70,0,1829,1830,5,45,0,0,1830,1831,3,444,222,
  	0,1831,1832,3,94,47,0,1832,441,1,0,0,0,1833,1834,3,140,70,0,1834,1835,
  	5,94,0,0,1835,1836,5,45,0,0,1836,1837,3,444,222,0,1837,1838,3,94,47,0,
  	1838,443,1,0,0,0,1839,1841,3,144,72,0,1840,1842,3,462,231,0,1841,1840,
  	1,0,0,0,1841,1842,1,0,0,0,1842,1845,1,0,0,0,1843,1844,5,70,0,0,1844,1846,
  	3,446,223,0,1845,1843,1,0,0,0,1845,1846,1,0,0,0,1846,1852,1,0,0,0,1847,
  	1848,5,47,0,0,1848,1849,3,452,226,0,1849,1850,5,96,0,0,1850,1851,3,452,
  	226,0,1851,1853,1,0,0,0,1852,1847,1,0,0,0,1852,1853,1,0,0,0,1853,1862,
  	1,0,0,0,1854,1856,5,11,0,0,1855,1854,1,0,0,0,1855,1856,1,0,0,0,1856,1857,
  	1,0,0,0,1857,1858,3,452,226,0,1858,1859,5,96,0,0,1859,1860,3,452,226,
  	0,1860,1862,1,0,0,0,1861,1839,1,0,0,0,1861,1855,1,0,0,0,1862,445,1,0,
  	0,0,1863,1864,3,448,224,0,1864,447,1,0,0,0,1865,1866,3,6,3,0,1866,1868,
  	3,450,225,0,1867,1869,3,462,231,0,1868,1867,1,0,0,0,1868,1869,1,0,0,0,
  	1869,1879,1,0,0,0,1870,1872,3,178,89,0,1871,1873,3,478,239,0,1872,1871,
  	1,0,0,0,1872,1873,1,0,0,0,1873,1879,1,0,0,0,1874,1876,3,478,239,0,1875,
  	1877,3,178,89,0,1876,1875,1,0,0,0,1876,1877,1,0,0,0,1877,1879,1,0,0,0,
  	1878,1865,1,0,0,0,1878,1870,1,0,0,0,1878,1874,1,0,0,0,1879,449,1,0,0,
  	0,1880,1882,3,160,80,0,1881,1880,1,0,0,0,1882,1885,1,0,0,0,1883,1881,
  	1,0,0,0,1883,1884,1,0,0,0,1884,1886,1,0,0,0,1885,1883,1,0,0,0,1886,1888,
  	3,158,79,0,1887,1889,3,160,80,0,1888,1887,1,0,0,0,1888,1889,1,0,0,0,1889,
  	451,1,0,0,0,1890,1891,3,454,227,0,1891,453,1,0,0,0,1892,1893,3,184,92,
  	0,1893,1894,5,140,0,0,1894,1896,1,0,0,0,1895,1892,1,0,0,0,1895,1896,1,
  	0,0,0,1896,1897,1,0,0,0,1897,1898,3,456,228,0,1898,455,1,0,0,0,1899,1900,
  	3,458,229,0,1900,457,1,0,0,0,1901,1902,3,460,230,0,1902,459,1,0,0,0,1903,
  	1904,3,54,27,0,1904,461,1,0,0,0,1905,1906,3,464,232,0,1906,463,1,0,0,
  	0,1907,1914,5,146,0,0,1908,1914,5,145,0,0,1909,1911,5,29,0,0,1910,1912,
  	7,10,0,0,1911,1910,1,0,0,0,1911,1912,1,0,0,0,1912,1914,1,0,0,0,1913,1907,
  	1,0,0,0,1913,1908,1,0,0,0,1913,1909,1,0,0,0,1914,1915,1,0,0,0,1915,1916,
  	3,264,132,0,1916,465,1,0,0,0,1917,1918,5,144,0,0,1918,1919,3,264,132,
  	0,1919,467,1,0,0,0,1920,1923,3,470,235,0,1921,1923,3,472,236,0,1922,1920,
  	1,0,0,0,1922,1921,1,0,0,0,1923,469,1,0,0,0,1924,1925,5,65,0,0,1925,1926,
  	3,6,3,0,1926,1927,3,168,84,0,1927,1928,3,94,47,0,1928,471,1,0,0,0,1929,
  	1930,5,65,0,0,1930,1931,3,6,3,0,1931,1932,3,478,239,0,1932,1933,3,94,
  	47,0,1933,473,1,0,0,0,1934,1935,3,478,239,0,1935,475,1,0,0,0,1936,1937,
  	3,478,239,0,1937,477,1,0,0,0,1938,1942,5,126,0,0,1939,1940,3,480,240,
  	0,1940,1941,5,141,0,0,1941,1943,1,0,0,0,1942,1939,1,0,0,0,1942,1943,1,
  	0,0,0,1943,1944,1,0,0,0,1944,1945,3,480,240,0,1945,1946,5,127,0,0,1946,
  	479,1,0,0,0,1947,1948,3,482,241,0,1948,481,1,0,0,0,1949,1952,3,422,211,
  	0,1950,1952,3,392,196,0,1951,1949,1,0,0,0,1951,1950,1,0,0,0,1952,483,
  	1,0,0,0,1953,1955,3,76,38,0,1954,1953,1,0,0,0,1954,1955,1,0,0,0,1955,
  	1956,1,0,0,0,1956,1959,5,63,0,0,1957,1960,3,6,3,0,1958,1960,3,130,65,
  	0,1959,1957,1,0,0,0,1959,1958,1,0,0,0,1960,1962,1,0,0,0,1961,1963,5,155,
  	0,0,1962,1961,1,0,0,0,1962,1963,1,0,0,0,1963,1966,1,0,0,0,1964,1965,5,
  	3,0,0,1965,1967,5,155,0,0,1966,1964,1,0,0,0,1966,1967,1,0,0,0,1967,1968,
  	1,0,0,0,1968,1969,3,94,47,0,1969,485,1,0,0,0,1970,1971,5,130,0,0,1971,
  	1972,3,490,245,0,1972,487,1,0,0,0,1973,1974,5,130,0,0,1974,1975,3,490,
  	245,0,1975,489,1,0,0,0,1976,1977,3,178,89,0,1977,491,1,0,0,0,1978,1980,
  	3,488,244,0,1979,1978,1,0,0,0,1980,1983,1,0,0,0,1981,1979,1,0,0,0,1981,
  	1982,1,0,0,0,1982,1984,1,0,0,0,1983,1981,1,0,0,0,1984,1985,7,11,0,0,1985,
  	1986,3,494,247,0,1986,1987,5,8,0,0,1987,1988,3,18,9,0,1988,1989,5,128,
  	0,0,1989,1990,3,18,9,0,1990,493,1,0,0,0,1991,1995,3,6,3,0,1992,1996,5,
  	117,0,0,1993,1994,5,99,0,0,1994,1996,5,18,0,0,1995,1992,1,0,0,0,1995,
  	1993,1,0,0,0,1996,1998,1,0,0,0,1997,1991,1,0,0,0,1997,1998,1,0,0,0,1998,
  	1999,1,0,0,0,1999,2000,3,178,89,0,2000,495,1,0,0,0,2001,2011,5,114,0,
  	0,2002,2006,5,124,0,0,2003,2005,3,498,249,0,2004,2003,1,0,0,0,2005,2008,
  	1,0,0,0,2006,2004,1,0,0,0,2006,2007,1,0,0,0,2007,2009,1,0,0,0,2008,2006,
  	1,0,0,0,2009,2011,5,125,0,0,2010,2001,1,0,0,0,2010,2002,1,0,0,0,2011,
  	497,1,0,0,0,2012,2017,3,48,24,0,2013,2017,3,500,250,0,2014,2017,3,52,
  	26,0,2015,2017,3,58,29,0,2016,2012,1,0,0,0,2016,2013,1,0,0,0,2016,2014,
  	1,0,0,0,2016,2015,1,0,0,0,2017,499,1,0,0,0,2018,2019,3,502,251,0,2019,
  	501,1,0,0,0,2020,2022,5,40,0,0,2021,2020,1,0,0,0,2021,2022,1,0,0,0,2022,
  	2024,1,0,0,0,2023,2025,7,12,0,0,2024,2023,1,0,0,0,2024,2025,1,0,0,0,2025,
  	2026,1,0,0,0,2026,2028,3,188,94,0,2027,2029,3,156,78,0,2028,2027,1,0,
  	0,0,2028,2029,1,0,0,0,2029,2031,1,0,0,0,2030,2032,3,462,231,0,2031,2030,
  	1,0,0,0,2031,2032,1,0,0,0,2032,2033,1,0,0,0,2033,2034,3,496,248,0,2034,
  	503,1,0,0,0,2035,2037,3,488,244,0,2036,2035,1,0,0,0,2037,2040,1,0,0,0,
  	2038,2036,1,0,0,0,2038,2039,1,0,0,0,2039,2041,1,0,0,0,2040,2038,1,0,0,
  	0,2041,2042,3,508,254,0,2042,2043,3,510,255,0,2043,505,1,0,0,0,2044,2046,
  	5,105,0,0,2045,2044,1,0,0,0,2045,2046,1,0,0,0,2046,2047,1,0,0,0,2047,
  	2051,5,106,0,0,2048,2050,3,488,244,0,2049,2048,1,0,0,0,2050,2053,1,0,
  	0,0,2051,2049,1,0,0,0,2051,2052,1,0,0,0,2052,2054,1,0,0,0,2053,2051,1,
  	0,0,0,2054,2055,3,508,254,0,2055,2056,3,510,255,0,2056,507,1,0,0,0,2057,
  	2058,5,74,0,0,2058,2059,3,6,3,0,2059,509,1,0,0,0,2060,2072,5,114,0,0,
  	2061,2065,5,124,0,0,2062,2066,3,40,20,0,2063,2066,3,512,256,0,2064,2066,
  	3,66,33,0,2065,2062,1,0,0,0,2065,2063,1,0,0,0,2065,2064,1,0,0,0,2066,
  	2067,1,0,0,0,2067,2065,1,0,0,0,2067,2068,1,0,0,0,2068,2069,1,0,0,0,2069,
  	2070,5,125,0,0,2070,2072,1,0,0,0,2071,2060,1,0,0,0,2071,2061,1,0,0,0,
  	2072,511,1,0,0,0,2073,2074,3,42,21,0,2074,2075,5,43,0,0,2075,2076,3,264,
  	132,0,2076,2077,5,114,0,0,2077,513,1,0,0,0,2078,2079,3,54,27,0,2079,2080,
  	5,144,0,0,2080,2081,3,6,3,0,2081,2082,5,1,0,0,2082,2083,3,54,27,0,2083,
  	2084,5,114,0,0,2084,515,1,0,0,0,218,524,530,533,535,542,547,552,556,561,
  	568,575,584,597,607,610,612,616,622,626,632,643,657,664,667,673,686,689,
  	700,704,708,712,716,720,723,736,765,777,787,792,796,800,804,806,811,820,
  	830,839,848,857,866,874,879,886,898,902,906,911,916,922,926,931,936,942,
  	946,950,954,958,968,975,979,983,988,997,1002,1013,1019,1022,1025,1028,
  	1033,1036,1039,1042,1045,1048,1053,1059,1064,1068,1073,1077,1083,1086,
  	1092,1097,1110,1116,1119,1124,1131,1133,1138,1140,1143,1146,1148,1154,
  	1161,1169,1175,1187,1190,1197,1200,1206,1214,1217,1223,1232,1236,1240,
  	1245,1248,1251,1254,1267,1274,1279,1284,1290,1296,1316,1334,1343,1346,
  	1361,1370,1373,1388,1391,1394,1400,1402,1415,1418,1421,1427,1429,1440,
  	1454,1458,1460,1463,1476,1489,1496,1500,1513,1523,1529,1556,1564,1567,
  	1575,1588,1628,1632,1647,1670,1673,1695,1719,1729,1734,1750,1759,1768,
  	1776,1801,1814,1819,1841,1845,1852,1855,1861,1868,1872,1876,1878,1883,
  	1888,1895,1911,1913,1922,1942,1951,1954,1959,1962,1966,1981,1995,1997,
  	2006,2010,2016,2021,2024,2028,2031,2038,2045,2051,2065,2067,2071
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  kermlParserStaticData = std::move(staticData);
}

}

KerMLParser::KerMLParser(TokenStream *input) : KerMLParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

KerMLParser::KerMLParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  KerMLParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *kermlParserStaticData->atn, kermlParserStaticData->decisionToDFA, kermlParserStaticData->sharedContextCache, options);
}

KerMLParser::~KerMLParser() {
  delete _interpreter;
}

const atn::ATN& KerMLParser::getATN() const {
  return *kermlParserStaticData->atn;
}

std::string KerMLParser::getGrammarFileName() const {
  return "KerML.g4";
}

const std::vector<std::string>& KerMLParser::getRuleNames() const {
  return kermlParserStaticData->ruleNames;
}

const dfa::Vocabulary& KerMLParser::getVocabulary() const {
  return kermlParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView KerMLParser::getSerializedATN() const {
  return kermlParserStaticData->serializedATN;
}


//----------------- StartContext ------------------------------------------------------------------

KerMLParser::StartContext::StartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::ElementsContext* KerMLParser::StartContext::elements() {
  return getRuleContext<KerMLParser::ElementsContext>(0);
}

tree::TerminalNode* KerMLParser::StartContext::EOF() {
  return getToken(KerMLParser::EOF, 0);
}


size_t KerMLParser::StartContext::getRuleIndex() const {
  return KerMLParser::RuleStart;
}

void KerMLParser::StartContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStart(this);
}

void KerMLParser::StartContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStart(this);
}

KerMLParser::StartContext* KerMLParser::start() {
  StartContext *_localctx = _tracker.createInstance<StartContext>(_ctx, getState());
  enterRule(_localctx, 0, KerMLParser::RuleStart);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(516);
    elements();
    setState(517);
    match(KerMLParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StartRuleContext ------------------------------------------------------------------

KerMLParser::StartRuleContext::StartRuleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::StartContext* KerMLParser::StartRuleContext::start() {
  return getRuleContext<KerMLParser::StartContext>(0);
}


size_t KerMLParser::StartRuleContext::getRuleIndex() const {
  return KerMLParser::RuleStartRule;
}

void KerMLParser::StartRuleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStartRule(this);
}

void KerMLParser::StartRuleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStartRule(this);
}

KerMLParser::StartRuleContext* KerMLParser::startRule() {
  StartRuleContext *_localctx = _tracker.createInstance<StartRuleContext>(_ctx, getState());
  enterRule(_localctx, 2, KerMLParser::RuleStartRule);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(519);
    start();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElementsContext ------------------------------------------------------------------

KerMLParser::ElementsContext::ElementsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<KerMLParser::ElementContext *> KerMLParser::ElementsContext::element() {
  return getRuleContexts<KerMLParser::ElementContext>();
}

KerMLParser::ElementContext* KerMLParser::ElementsContext::element(size_t i) {
  return getRuleContext<KerMLParser::ElementContext>(i);
}


size_t KerMLParser::ElementsContext::getRuleIndex() const {
  return KerMLParser::RuleElements;
}

void KerMLParser::ElementsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElements(this);
}

void KerMLParser::ElementsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElements(this);
}

KerMLParser::ElementsContext* KerMLParser::elements() {
  ElementsContext *_localctx = _tracker.createInstance<ElementsContext>(_ctx, getState());
  enterRule(_localctx, 4, KerMLParser::RuleElements);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(524);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -5773292089211895232) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 78702848638471) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 129)) & 67108867) != 0)) {
      setState(521);
      element();
      setState(526);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IdentificationContext ------------------------------------------------------------------

KerMLParser::IdentificationContext::IdentificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::IdentificationContext::SYMBOL_SMALLER() {
  return getToken(KerMLParser::SYMBOL_SMALLER, 0);
}

tree::TerminalNode* KerMLParser::IdentificationContext::NAME() {
  return getToken(KerMLParser::NAME, 0);
}

tree::TerminalNode* KerMLParser::IdentificationContext::SYMBOL_GREATER() {
  return getToken(KerMLParser::SYMBOL_GREATER, 0);
}


size_t KerMLParser::IdentificationContext::getRuleIndex() const {
  return KerMLParser::RuleIdentification;
}

void KerMLParser::IdentificationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIdentification(this);
}

void KerMLParser::IdentificationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIdentification(this);
}

KerMLParser::IdentificationContext* KerMLParser::identification() {
  IdentificationContext *_localctx = _tracker.createInstance<IdentificationContext>(_ctx, getState());
  enterRule(_localctx, 6, KerMLParser::RuleIdentification);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(535);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 3, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(530);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == KerMLParser::SYMBOL_SMALLER) {
        setState(527);
        match(KerMLParser::SYMBOL_SMALLER);
        setState(528);
        match(KerMLParser::NAME);
        setState(529);
        match(KerMLParser::SYMBOL_GREATER);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(533);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 2, _ctx)) {
      case 1: {
        setState(532);
        match(KerMLParser::NAME);
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Relationship_bodyContext ------------------------------------------------------------------

KerMLParser::Relationship_bodyContext::Relationship_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Relationship_bodyContext::SYMBOL_STATEMENT_DELIMITER() {
  return getToken(KerMLParser::SYMBOL_STATEMENT_DELIMITER, 0);
}

tree::TerminalNode* KerMLParser::Relationship_bodyContext::SYMBOL_CURLY_BRACKET_OPEN() {
  return getToken(KerMLParser::SYMBOL_CURLY_BRACKET_OPEN, 0);
}

KerMLParser::Relationship_onwed_elementsContext* KerMLParser::Relationship_bodyContext::relationship_onwed_elements() {
  return getRuleContext<KerMLParser::Relationship_onwed_elementsContext>(0);
}

tree::TerminalNode* KerMLParser::Relationship_bodyContext::SYMBOL_CURLY_BRACKET_CLOSE() {
  return getToken(KerMLParser::SYMBOL_CURLY_BRACKET_CLOSE, 0);
}


size_t KerMLParser::Relationship_bodyContext::getRuleIndex() const {
  return KerMLParser::RuleRelationship_body;
}

void KerMLParser::Relationship_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRelationship_body(this);
}

void KerMLParser::Relationship_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRelationship_body(this);
}

KerMLParser::Relationship_bodyContext* KerMLParser::relationship_body() {
  Relationship_bodyContext *_localctx = _tracker.createInstance<Relationship_bodyContext>(_ctx, getState());
  enterRule(_localctx, 8, KerMLParser::RuleRelationship_body);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(542);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case KerMLParser::SYMBOL_STATEMENT_DELIMITER: {
        enterOuterAlt(_localctx, 1);
        setState(537);
        match(KerMLParser::SYMBOL_STATEMENT_DELIMITER);
        break;
      }

      case KerMLParser::SYMBOL_CURLY_BRACKET_OPEN: {
        enterOuterAlt(_localctx, 2);
        setState(538);
        match(KerMLParser::SYMBOL_CURLY_BRACKET_OPEN);
        setState(539);
        relationship_onwed_elements();
        setState(540);
        match(KerMLParser::SYMBOL_CURLY_BRACKET_CLOSE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Relationship_onwed_elementsContext ------------------------------------------------------------------

KerMLParser::Relationship_onwed_elementsContext::Relationship_onwed_elementsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<KerMLParser::Relationship_owned_elementContext *> KerMLParser::Relationship_onwed_elementsContext::relationship_owned_element() {
  return getRuleContexts<KerMLParser::Relationship_owned_elementContext>();
}

KerMLParser::Relationship_owned_elementContext* KerMLParser::Relationship_onwed_elementsContext::relationship_owned_element(size_t i) {
  return getRuleContext<KerMLParser::Relationship_owned_elementContext>(i);
}


size_t KerMLParser::Relationship_onwed_elementsContext::getRuleIndex() const {
  return KerMLParser::RuleRelationship_onwed_elements;
}

void KerMLParser::Relationship_onwed_elementsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRelationship_onwed_elements(this);
}

void KerMLParser::Relationship_onwed_elementsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRelationship_onwed_elements(this);
}

KerMLParser::Relationship_onwed_elementsContext* KerMLParser::relationship_onwed_elements() {
  Relationship_onwed_elementsContext *_localctx = _tracker.createInstance<Relationship_onwed_elementsContext>(_ctx, getState());
  enterRule(_localctx, 10, KerMLParser::RuleRelationship_onwed_elements);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(547);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -5773292089211895232) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 78702848638471) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 129)) & 67108867) != 0)) {
      setState(544);
      relationship_owned_element();
      setState(549);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Relationship_owned_elementContext ------------------------------------------------------------------

KerMLParser::Relationship_owned_elementContext::Relationship_owned_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Owned_related_elementContext* KerMLParser::Relationship_owned_elementContext::owned_related_element() {
  return getRuleContext<KerMLParser::Owned_related_elementContext>(0);
}

KerMLParser::Owned_annotationContext* KerMLParser::Relationship_owned_elementContext::owned_annotation() {
  return getRuleContext<KerMLParser::Owned_annotationContext>(0);
}


size_t KerMLParser::Relationship_owned_elementContext::getRuleIndex() const {
  return KerMLParser::RuleRelationship_owned_element;
}

void KerMLParser::Relationship_owned_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRelationship_owned_element(this);
}

void KerMLParser::Relationship_owned_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRelationship_owned_element(this);
}

KerMLParser::Relationship_owned_elementContext* KerMLParser::relationship_owned_element() {
  Relationship_owned_elementContext *_localctx = _tracker.createInstance<Relationship_owned_elementContext>(_ctx, getState());
  enterRule(_localctx, 12, KerMLParser::RuleRelationship_owned_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(552);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 6, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(550);
      owned_related_element();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(551);
      owned_annotation();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Owned_related_elementContext ------------------------------------------------------------------

KerMLParser::Owned_related_elementContext::Owned_related_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Non_feature_elementContext* KerMLParser::Owned_related_elementContext::non_feature_element() {
  return getRuleContext<KerMLParser::Non_feature_elementContext>(0);
}

KerMLParser::Feature_elementContext* KerMLParser::Owned_related_elementContext::feature_element() {
  return getRuleContext<KerMLParser::Feature_elementContext>(0);
}


size_t KerMLParser::Owned_related_elementContext::getRuleIndex() const {
  return KerMLParser::RuleOwned_related_element;
}

void KerMLParser::Owned_related_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOwned_related_element(this);
}

void KerMLParser::Owned_related_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOwned_related_element(this);
}

KerMLParser::Owned_related_elementContext* KerMLParser::owned_related_element() {
  Owned_related_elementContext *_localctx = _tracker.createInstance<Owned_related_elementContext>(_ctx, getState());
  enterRule(_localctx, 14, KerMLParser::RuleOwned_related_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(556);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 7, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(554);
      non_feature_element();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(555);
      feature_element();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DependencyContext ------------------------------------------------------------------

KerMLParser::DependencyContext::DependencyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::DependencyContext::KEYWORD_DEPENDENCY() {
  return getToken(KerMLParser::KEYWORD_DEPENDENCY, 0);
}

std::vector<KerMLParser::Qualified_nameContext *> KerMLParser::DependencyContext::qualified_name() {
  return getRuleContexts<KerMLParser::Qualified_nameContext>();
}

KerMLParser::Qualified_nameContext* KerMLParser::DependencyContext::qualified_name(size_t i) {
  return getRuleContext<KerMLParser::Qualified_nameContext>(i);
}

tree::TerminalNode* KerMLParser::DependencyContext::KEYWORD_TO() {
  return getToken(KerMLParser::KEYWORD_TO, 0);
}

KerMLParser::Relationship_bodyContext* KerMLParser::DependencyContext::relationship_body() {
  return getRuleContext<KerMLParser::Relationship_bodyContext>(0);
}

std::vector<KerMLParser::Prefix_metadata_annotationContext *> KerMLParser::DependencyContext::prefix_metadata_annotation() {
  return getRuleContexts<KerMLParser::Prefix_metadata_annotationContext>();
}

KerMLParser::Prefix_metadata_annotationContext* KerMLParser::DependencyContext::prefix_metadata_annotation(size_t i) {
  return getRuleContext<KerMLParser::Prefix_metadata_annotationContext>(i);
}

KerMLParser::IdentificationContext* KerMLParser::DependencyContext::identification() {
  return getRuleContext<KerMLParser::IdentificationContext>(0);
}

tree::TerminalNode* KerMLParser::DependencyContext::KEYWORD_FROM() {
  return getToken(KerMLParser::KEYWORD_FROM, 0);
}

std::vector<tree::TerminalNode *> KerMLParser::DependencyContext::SYMBOL_COMMA() {
  return getTokens(KerMLParser::SYMBOL_COMMA);
}

tree::TerminalNode* KerMLParser::DependencyContext::SYMBOL_COMMA(size_t i) {
  return getToken(KerMLParser::SYMBOL_COMMA, i);
}


size_t KerMLParser::DependencyContext::getRuleIndex() const {
  return KerMLParser::RuleDependency;
}

void KerMLParser::DependencyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDependency(this);
}

void KerMLParser::DependencyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDependency(this);
}

KerMLParser::DependencyContext* KerMLParser::dependency() {
  DependencyContext *_localctx = _tracker.createInstance<DependencyContext>(_ctx, getState());
  enterRule(_localctx, 16, KerMLParser::RuleDependency);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(561);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == KerMLParser::SYMBOL_HASHTAG) {
      setState(558);
      prefix_metadata_annotation();
      setState(563);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(564);
    match(KerMLParser::KEYWORD_DEPENDENCY);
    setState(568);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 9, _ctx)) {
    case 1: {
      setState(565);
      identification();
      setState(566);
      match(KerMLParser::KEYWORD_FROM);
      break;
    }

    default:
      break;
    }
    setState(570);
    qualified_name();
    setState(575);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == KerMLParser::SYMBOL_COMMA) {
      setState(571);
      match(KerMLParser::SYMBOL_COMMA);
      setState(572);
      qualified_name();
      setState(577);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(578);
    match(KerMLParser::KEYWORD_TO);
    setState(579);
    qualified_name();
    setState(584);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == KerMLParser::SYMBOL_COMMA) {
      setState(580);
      match(KerMLParser::SYMBOL_COMMA);
      setState(581);
      qualified_name();
      setState(586);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(587);
    relationship_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnnotationContext ------------------------------------------------------------------

KerMLParser::AnnotationContext::AnnotationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Qualified_nameContext* KerMLParser::AnnotationContext::qualified_name() {
  return getRuleContext<KerMLParser::Qualified_nameContext>(0);
}


size_t KerMLParser::AnnotationContext::getRuleIndex() const {
  return KerMLParser::RuleAnnotation;
}

void KerMLParser::AnnotationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotation(this);
}

void KerMLParser::AnnotationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotation(this);
}

KerMLParser::AnnotationContext* KerMLParser::annotation() {
  AnnotationContext *_localctx = _tracker.createInstance<AnnotationContext>(_ctx, getState());
  enterRule(_localctx, 18, KerMLParser::RuleAnnotation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(589);
    qualified_name();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Owned_annotationContext ------------------------------------------------------------------

KerMLParser::Owned_annotationContext::Owned_annotationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Annotating_elementContext* KerMLParser::Owned_annotationContext::annotating_element() {
  return getRuleContext<KerMLParser::Annotating_elementContext>(0);
}


size_t KerMLParser::Owned_annotationContext::getRuleIndex() const {
  return KerMLParser::RuleOwned_annotation;
}

void KerMLParser::Owned_annotationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOwned_annotation(this);
}

void KerMLParser::Owned_annotationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOwned_annotation(this);
}

KerMLParser::Owned_annotationContext* KerMLParser::owned_annotation() {
  Owned_annotationContext *_localctx = _tracker.createInstance<Owned_annotationContext>(_ctx, getState());
  enterRule(_localctx, 20, KerMLParser::RuleOwned_annotation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(591);
    annotating_element();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Annotating_elementContext ------------------------------------------------------------------

KerMLParser::Annotating_elementContext::Annotating_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::CommentContext* KerMLParser::Annotating_elementContext::comment() {
  return getRuleContext<KerMLParser::CommentContext>(0);
}

KerMLParser::DocumentationContext* KerMLParser::Annotating_elementContext::documentation() {
  return getRuleContext<KerMLParser::DocumentationContext>(0);
}

KerMLParser::Textual_representationContext* KerMLParser::Annotating_elementContext::textual_representation() {
  return getRuleContext<KerMLParser::Textual_representationContext>(0);
}

KerMLParser::Metadata_featureContext* KerMLParser::Annotating_elementContext::metadata_feature() {
  return getRuleContext<KerMLParser::Metadata_featureContext>(0);
}


size_t KerMLParser::Annotating_elementContext::getRuleIndex() const {
  return KerMLParser::RuleAnnotating_element;
}

void KerMLParser::Annotating_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotating_element(this);
}

void KerMLParser::Annotating_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotating_element(this);
}

KerMLParser::Annotating_elementContext* KerMLParser::annotating_element() {
  Annotating_elementContext *_localctx = _tracker.createInstance<Annotating_elementContext>(_ctx, getState());
  enterRule(_localctx, 22, KerMLParser::RuleAnnotating_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(597);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case KerMLParser::KEYWORD_COMMENT:
      case KerMLParser::KEYWORD_LOCALE:
      case KerMLParser::REGULAR_COMMENT: {
        enterOuterAlt(_localctx, 1);
        setState(593);
        comment();
        break;
      }

      case KerMLParser::KEYWORD_DOC: {
        enterOuterAlt(_localctx, 2);
        setState(594);
        documentation();
        break;
      }

      case KerMLParser::KEYWORD_LANGUAGE:
      case KerMLParser::KEYWORD_REP: {
        enterOuterAlt(_localctx, 3);
        setState(595);
        textual_representation();
        break;
      }

      case KerMLParser::KEYWORD_METADATA:
      case KerMLParser::SYMBOL_AT:
      case KerMLParser::SYMBOL_HASHTAG: {
        enterOuterAlt(_localctx, 4);
        setState(596);
        metadata_feature();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CommentContext ------------------------------------------------------------------

KerMLParser::CommentContext::CommentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::CommentContext::REGULAR_COMMENT() {
  return getToken(KerMLParser::REGULAR_COMMENT, 0);
}

tree::TerminalNode* KerMLParser::CommentContext::KEYWORD_COMMENT() {
  return getToken(KerMLParser::KEYWORD_COMMENT, 0);
}

KerMLParser::IdentificationContext* KerMLParser::CommentContext::identification() {
  return getRuleContext<KerMLParser::IdentificationContext>(0);
}

tree::TerminalNode* KerMLParser::CommentContext::KEYWORD_LOCALE() {
  return getToken(KerMLParser::KEYWORD_LOCALE, 0);
}

tree::TerminalNode* KerMLParser::CommentContext::STRING_VALUE() {
  return getToken(KerMLParser::STRING_VALUE, 0);
}

tree::TerminalNode* KerMLParser::CommentContext::KEYWORD_ABOUT() {
  return getToken(KerMLParser::KEYWORD_ABOUT, 0);
}

std::vector<KerMLParser::AnnotationContext *> KerMLParser::CommentContext::annotation() {
  return getRuleContexts<KerMLParser::AnnotationContext>();
}

KerMLParser::AnnotationContext* KerMLParser::CommentContext::annotation(size_t i) {
  return getRuleContext<KerMLParser::AnnotationContext>(i);
}

std::vector<tree::TerminalNode *> KerMLParser::CommentContext::SYMBOL_COMMA() {
  return getTokens(KerMLParser::SYMBOL_COMMA);
}

tree::TerminalNode* KerMLParser::CommentContext::SYMBOL_COMMA(size_t i) {
  return getToken(KerMLParser::SYMBOL_COMMA, i);
}


size_t KerMLParser::CommentContext::getRuleIndex() const {
  return KerMLParser::RuleComment;
}

void KerMLParser::CommentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComment(this);
}

void KerMLParser::CommentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComment(this);
}

KerMLParser::CommentContext* KerMLParser::comment() {
  CommentContext *_localctx = _tracker.createInstance<CommentContext>(_ctx, getState());
  enterRule(_localctx, 24, KerMLParser::RuleComment);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(612);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::KEYWORD_COMMENT) {
      setState(599);
      match(KerMLParser::KEYWORD_COMMENT);
      setState(600);
      identification();
      setState(610);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == KerMLParser::KEYWORD_ABOUT) {
        setState(601);
        match(KerMLParser::KEYWORD_ABOUT);
        setState(602);
        annotation();
        setState(607);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == KerMLParser::SYMBOL_COMMA) {
          setState(603);
          match(KerMLParser::SYMBOL_COMMA);
          setState(604);
          annotation();
          setState(609);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
      }
    }
    setState(616);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::KEYWORD_LOCALE) {
      setState(614);
      match(KerMLParser::KEYWORD_LOCALE);
      setState(615);
      match(KerMLParser::STRING_VALUE);
    }
    setState(618);
    match(KerMLParser::REGULAR_COMMENT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DocumentationContext ------------------------------------------------------------------

KerMLParser::DocumentationContext::DocumentationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::DocumentationContext::KEYWORD_DOC() {
  return getToken(KerMLParser::KEYWORD_DOC, 0);
}

tree::TerminalNode* KerMLParser::DocumentationContext::REGULAR_COMMENT() {
  return getToken(KerMLParser::REGULAR_COMMENT, 0);
}

KerMLParser::IdentificationContext* KerMLParser::DocumentationContext::identification() {
  return getRuleContext<KerMLParser::IdentificationContext>(0);
}

tree::TerminalNode* KerMLParser::DocumentationContext::KEYWORD_LOCALE() {
  return getToken(KerMLParser::KEYWORD_LOCALE, 0);
}

tree::TerminalNode* KerMLParser::DocumentationContext::STRING_VALUE() {
  return getToken(KerMLParser::STRING_VALUE, 0);
}


size_t KerMLParser::DocumentationContext::getRuleIndex() const {
  return KerMLParser::RuleDocumentation;
}

void KerMLParser::DocumentationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDocumentation(this);
}

void KerMLParser::DocumentationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDocumentation(this);
}

KerMLParser::DocumentationContext* KerMLParser::documentation() {
  DocumentationContext *_localctx = _tracker.createInstance<DocumentationContext>(_ctx, getState());
  enterRule(_localctx, 26, KerMLParser::RuleDocumentation);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(620);
    match(KerMLParser::KEYWORD_DOC);
    setState(622);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 17, _ctx)) {
    case 1: {
      setState(621);
      identification();
      break;
    }

    default:
      break;
    }
    setState(626);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::KEYWORD_LOCALE) {
      setState(624);
      match(KerMLParser::KEYWORD_LOCALE);
      setState(625);
      match(KerMLParser::STRING_VALUE);
    }
    setState(628);
    match(KerMLParser::REGULAR_COMMENT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Textual_representationContext ------------------------------------------------------------------

KerMLParser::Textual_representationContext::Textual_representationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Textual_representationContext::KEYWORD_LANGUAGE() {
  return getToken(KerMLParser::KEYWORD_LANGUAGE, 0);
}

tree::TerminalNode* KerMLParser::Textual_representationContext::STRING_VALUE() {
  return getToken(KerMLParser::STRING_VALUE, 0);
}

tree::TerminalNode* KerMLParser::Textual_representationContext::REGULAR_COMMENT() {
  return getToken(KerMLParser::REGULAR_COMMENT, 0);
}

tree::TerminalNode* KerMLParser::Textual_representationContext::KEYWORD_REP() {
  return getToken(KerMLParser::KEYWORD_REP, 0);
}

KerMLParser::IdentificationContext* KerMLParser::Textual_representationContext::identification() {
  return getRuleContext<KerMLParser::IdentificationContext>(0);
}


size_t KerMLParser::Textual_representationContext::getRuleIndex() const {
  return KerMLParser::RuleTextual_representation;
}

void KerMLParser::Textual_representationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTextual_representation(this);
}

void KerMLParser::Textual_representationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTextual_representation(this);
}

KerMLParser::Textual_representationContext* KerMLParser::textual_representation() {
  Textual_representationContext *_localctx = _tracker.createInstance<Textual_representationContext>(_ctx, getState());
  enterRule(_localctx, 28, KerMLParser::RuleTextual_representation);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(632);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::KEYWORD_REP) {
      setState(630);
      match(KerMLParser::KEYWORD_REP);
      setState(631);
      identification();
    }
    setState(634);
    match(KerMLParser::KEYWORD_LANGUAGE);
    setState(635);
    match(KerMLParser::STRING_VALUE);
    setState(636);
    match(KerMLParser::REGULAR_COMMENT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Root_namespaceContext ------------------------------------------------------------------

KerMLParser::Root_namespaceContext::Root_namespaceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Namespace_body_elementsContext* KerMLParser::Root_namespaceContext::namespace_body_elements() {
  return getRuleContext<KerMLParser::Namespace_body_elementsContext>(0);
}


size_t KerMLParser::Root_namespaceContext::getRuleIndex() const {
  return KerMLParser::RuleRoot_namespace;
}

void KerMLParser::Root_namespaceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRoot_namespace(this);
}

void KerMLParser::Root_namespaceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRoot_namespace(this);
}

KerMLParser::Root_namespaceContext* KerMLParser::root_namespace() {
  Root_namespaceContext *_localctx = _tracker.createInstance<Root_namespaceContext>(_ctx, getState());
  enterRule(_localctx, 30, KerMLParser::RuleRoot_namespace);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(638);
    namespace_body_elements();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NamespaceContext ------------------------------------------------------------------

KerMLParser::NamespaceContext::NamespaceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Namespace_declarationContext* KerMLParser::NamespaceContext::namespace_declaration() {
  return getRuleContext<KerMLParser::Namespace_declarationContext>(0);
}

KerMLParser::Namespace_bodyContext* KerMLParser::NamespaceContext::namespace_body() {
  return getRuleContext<KerMLParser::Namespace_bodyContext>(0);
}

std::vector<KerMLParser::Prefix_metadata_memberContext *> KerMLParser::NamespaceContext::prefix_metadata_member() {
  return getRuleContexts<KerMLParser::Prefix_metadata_memberContext>();
}

KerMLParser::Prefix_metadata_memberContext* KerMLParser::NamespaceContext::prefix_metadata_member(size_t i) {
  return getRuleContext<KerMLParser::Prefix_metadata_memberContext>(i);
}


size_t KerMLParser::NamespaceContext::getRuleIndex() const {
  return KerMLParser::RuleNamespace;
}

void KerMLParser::NamespaceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamespace(this);
}

void KerMLParser::NamespaceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamespace(this);
}

KerMLParser::NamespaceContext* KerMLParser::namespace_() {
  NamespaceContext *_localctx = _tracker.createInstance<NamespaceContext>(_ctx, getState());
  enterRule(_localctx, 32, KerMLParser::RuleNamespace);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(643);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == KerMLParser::SYMBOL_HASHTAG) {
      setState(640);
      prefix_metadata_member();
      setState(645);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(646);
    namespace_declaration();
    setState(647);
    namespace_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Namespace_declarationContext ------------------------------------------------------------------

KerMLParser::Namespace_declarationContext::Namespace_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Namespace_declarationContext::KEYWORD_NAMESPACE() {
  return getToken(KerMLParser::KEYWORD_NAMESPACE, 0);
}

KerMLParser::IdentificationContext* KerMLParser::Namespace_declarationContext::identification() {
  return getRuleContext<KerMLParser::IdentificationContext>(0);
}


size_t KerMLParser::Namespace_declarationContext::getRuleIndex() const {
  return KerMLParser::RuleNamespace_declaration;
}

void KerMLParser::Namespace_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamespace_declaration(this);
}

void KerMLParser::Namespace_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamespace_declaration(this);
}

KerMLParser::Namespace_declarationContext* KerMLParser::namespace_declaration() {
  Namespace_declarationContext *_localctx = _tracker.createInstance<Namespace_declarationContext>(_ctx, getState());
  enterRule(_localctx, 34, KerMLParser::RuleNamespace_declaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(649);
    match(KerMLParser::KEYWORD_NAMESPACE);
    setState(650);
    identification();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Namespace_bodyContext ------------------------------------------------------------------

KerMLParser::Namespace_bodyContext::Namespace_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Namespace_bodyContext::SYMBOL_STATEMENT_DELIMITER() {
  return getToken(KerMLParser::SYMBOL_STATEMENT_DELIMITER, 0);
}

tree::TerminalNode* KerMLParser::Namespace_bodyContext::SYMBOL_CURLY_BRACKET_OPEN() {
  return getToken(KerMLParser::SYMBOL_CURLY_BRACKET_OPEN, 0);
}

KerMLParser::Namespace_body_elementContext* KerMLParser::Namespace_bodyContext::namespace_body_element() {
  return getRuleContext<KerMLParser::Namespace_body_elementContext>(0);
}

tree::TerminalNode* KerMLParser::Namespace_bodyContext::SYMBOL_CURLY_BRACKET_CLOSE() {
  return getToken(KerMLParser::SYMBOL_CURLY_BRACKET_CLOSE, 0);
}


size_t KerMLParser::Namespace_bodyContext::getRuleIndex() const {
  return KerMLParser::RuleNamespace_body;
}

void KerMLParser::Namespace_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamespace_body(this);
}

void KerMLParser::Namespace_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamespace_body(this);
}

KerMLParser::Namespace_bodyContext* KerMLParser::namespace_body() {
  Namespace_bodyContext *_localctx = _tracker.createInstance<Namespace_bodyContext>(_ctx, getState());
  enterRule(_localctx, 36, KerMLParser::RuleNamespace_body);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(657);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case KerMLParser::SYMBOL_STATEMENT_DELIMITER: {
        enterOuterAlt(_localctx, 1);
        setState(652);
        match(KerMLParser::SYMBOL_STATEMENT_DELIMITER);
        break;
      }

      case KerMLParser::SYMBOL_CURLY_BRACKET_OPEN: {
        enterOuterAlt(_localctx, 2);
        setState(653);
        match(KerMLParser::SYMBOL_CURLY_BRACKET_OPEN);
        setState(654);
        namespace_body_element();
        setState(655);
        match(KerMLParser::SYMBOL_CURLY_BRACKET_CLOSE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Namespace_body_elementsContext ------------------------------------------------------------------

KerMLParser::Namespace_body_elementsContext::Namespace_body_elementsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::ElementsContext* KerMLParser::Namespace_body_elementsContext::elements() {
  return getRuleContext<KerMLParser::ElementsContext>(0);
}


size_t KerMLParser::Namespace_body_elementsContext::getRuleIndex() const {
  return KerMLParser::RuleNamespace_body_elements;
}

void KerMLParser::Namespace_body_elementsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamespace_body_elements(this);
}

void KerMLParser::Namespace_body_elementsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamespace_body_elements(this);
}

KerMLParser::Namespace_body_elementsContext* KerMLParser::namespace_body_elements() {
  Namespace_body_elementsContext *_localctx = _tracker.createInstance<Namespace_body_elementsContext>(_ctx, getState());
  enterRule(_localctx, 38, KerMLParser::RuleNamespace_body_elements);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(659);
    elements();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Namespace_body_elementContext ------------------------------------------------------------------

KerMLParser::Namespace_body_elementContext::Namespace_body_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Namespace_memberContext* KerMLParser::Namespace_body_elementContext::namespace_member() {
  return getRuleContext<KerMLParser::Namespace_memberContext>(0);
}

KerMLParser::Alias_memberContext* KerMLParser::Namespace_body_elementContext::alias_member() {
  return getRuleContext<KerMLParser::Alias_memberContext>(0);
}

KerMLParser::Namespace_importContext* KerMLParser::Namespace_body_elementContext::namespace_import() {
  return getRuleContext<KerMLParser::Namespace_importContext>(0);
}


size_t KerMLParser::Namespace_body_elementContext::getRuleIndex() const {
  return KerMLParser::RuleNamespace_body_element;
}

void KerMLParser::Namespace_body_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamespace_body_element(this);
}

void KerMLParser::Namespace_body_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamespace_body_element(this);
}

KerMLParser::Namespace_body_elementContext* KerMLParser::namespace_body_element() {
  Namespace_body_elementContext *_localctx = _tracker.createInstance<Namespace_body_elementContext>(_ctx, getState());
  enterRule(_localctx, 40, KerMLParser::RuleNamespace_body_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(664);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 22, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(661);
      namespace_member();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(662);
      alias_member();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(663);
      namespace_import();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Member_prefixContext ------------------------------------------------------------------

KerMLParser::Member_prefixContext::Member_prefixContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Visibility_indicatorContext* KerMLParser::Member_prefixContext::visibility_indicator() {
  return getRuleContext<KerMLParser::Visibility_indicatorContext>(0);
}


size_t KerMLParser::Member_prefixContext::getRuleIndex() const {
  return KerMLParser::RuleMember_prefix;
}

void KerMLParser::Member_prefixContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMember_prefix(this);
}

void KerMLParser::Member_prefixContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMember_prefix(this);
}

KerMLParser::Member_prefixContext* KerMLParser::member_prefix() {
  Member_prefixContext *_localctx = _tracker.createInstance<Member_prefixContext>(_ctx, getState());
  enterRule(_localctx, 42, KerMLParser::RuleMember_prefix);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(667);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 23, _ctx)) {
    case 1: {
      setState(666);
      visibility_indicator();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Visibility_indicatorContext ------------------------------------------------------------------

KerMLParser::Visibility_indicatorContext::Visibility_indicatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Visibility_indicatorContext::KEYWORD_PUBLIC() {
  return getToken(KerMLParser::KEYWORD_PUBLIC, 0);
}

tree::TerminalNode* KerMLParser::Visibility_indicatorContext::KEYWORD_PRIVATE() {
  return getToken(KerMLParser::KEYWORD_PRIVATE, 0);
}

tree::TerminalNode* KerMLParser::Visibility_indicatorContext::KEYWORD_PROTECTED() {
  return getToken(KerMLParser::KEYWORD_PROTECTED, 0);
}


size_t KerMLParser::Visibility_indicatorContext::getRuleIndex() const {
  return KerMLParser::RuleVisibility_indicator;
}

void KerMLParser::Visibility_indicatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVisibility_indicator(this);
}

void KerMLParser::Visibility_indicatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVisibility_indicator(this);
}

KerMLParser::Visibility_indicatorContext* KerMLParser::visibility_indicator() {
  Visibility_indicatorContext *_localctx = _tracker.createInstance<Visibility_indicatorContext>(_ctx, getState());
  enterRule(_localctx, 44, KerMLParser::RuleVisibility_indicator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(669);
    _la = _input->LA(1);
    if (!(((((_la - 77) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 77)) & 7) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Namespace_memberContext ------------------------------------------------------------------

KerMLParser::Namespace_memberContext::Namespace_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Non_feature_memberContext* KerMLParser::Namespace_memberContext::non_feature_member() {
  return getRuleContext<KerMLParser::Non_feature_memberContext>(0);
}

KerMLParser::Namespace_feature_memberContext* KerMLParser::Namespace_memberContext::namespace_feature_member() {
  return getRuleContext<KerMLParser::Namespace_feature_memberContext>(0);
}


size_t KerMLParser::Namespace_memberContext::getRuleIndex() const {
  return KerMLParser::RuleNamespace_member;
}

void KerMLParser::Namespace_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamespace_member(this);
}

void KerMLParser::Namespace_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamespace_member(this);
}

KerMLParser::Namespace_memberContext* KerMLParser::namespace_member() {
  Namespace_memberContext *_localctx = _tracker.createInstance<Namespace_memberContext>(_ctx, getState());
  enterRule(_localctx, 46, KerMLParser::RuleNamespace_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(673);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 24, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(671);
      non_feature_member();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(672);
      namespace_feature_member();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Non_feature_memberContext ------------------------------------------------------------------

KerMLParser::Non_feature_memberContext::Non_feature_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Member_prefixContext* KerMLParser::Non_feature_memberContext::member_prefix() {
  return getRuleContext<KerMLParser::Member_prefixContext>(0);
}

KerMLParser::Non_feature_elementContext* KerMLParser::Non_feature_memberContext::non_feature_element() {
  return getRuleContext<KerMLParser::Non_feature_elementContext>(0);
}


size_t KerMLParser::Non_feature_memberContext::getRuleIndex() const {
  return KerMLParser::RuleNon_feature_member;
}

void KerMLParser::Non_feature_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNon_feature_member(this);
}

void KerMLParser::Non_feature_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNon_feature_member(this);
}

KerMLParser::Non_feature_memberContext* KerMLParser::non_feature_member() {
  Non_feature_memberContext *_localctx = _tracker.createInstance<Non_feature_memberContext>(_ctx, getState());
  enterRule(_localctx, 48, KerMLParser::RuleNon_feature_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(675);
    member_prefix();
    setState(676);
    non_feature_element();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Namespace_feature_memberContext ------------------------------------------------------------------

KerMLParser::Namespace_feature_memberContext::Namespace_feature_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Member_prefixContext* KerMLParser::Namespace_feature_memberContext::member_prefix() {
  return getRuleContext<KerMLParser::Member_prefixContext>(0);
}

KerMLParser::Feature_elementContext* KerMLParser::Namespace_feature_memberContext::feature_element() {
  return getRuleContext<KerMLParser::Feature_elementContext>(0);
}


size_t KerMLParser::Namespace_feature_memberContext::getRuleIndex() const {
  return KerMLParser::RuleNamespace_feature_member;
}

void KerMLParser::Namespace_feature_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamespace_feature_member(this);
}

void KerMLParser::Namespace_feature_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamespace_feature_member(this);
}

KerMLParser::Namespace_feature_memberContext* KerMLParser::namespace_feature_member() {
  Namespace_feature_memberContext *_localctx = _tracker.createInstance<Namespace_feature_memberContext>(_ctx, getState());
  enterRule(_localctx, 50, KerMLParser::RuleNamespace_feature_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(678);
    member_prefix();
    setState(679);
    feature_element();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alias_memberContext ------------------------------------------------------------------

KerMLParser::Alias_memberContext::Alias_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Member_prefixContext* KerMLParser::Alias_memberContext::member_prefix() {
  return getRuleContext<KerMLParser::Member_prefixContext>(0);
}

tree::TerminalNode* KerMLParser::Alias_memberContext::KEYWORD_ALIAS() {
  return getToken(KerMLParser::KEYWORD_ALIAS, 0);
}

tree::TerminalNode* KerMLParser::Alias_memberContext::KEYWORD_FOR() {
  return getToken(KerMLParser::KEYWORD_FOR, 0);
}

KerMLParser::Qualified_nameContext* KerMLParser::Alias_memberContext::qualified_name() {
  return getRuleContext<KerMLParser::Qualified_nameContext>(0);
}

KerMLParser::Relationship_bodyContext* KerMLParser::Alias_memberContext::relationship_body() {
  return getRuleContext<KerMLParser::Relationship_bodyContext>(0);
}

tree::TerminalNode* KerMLParser::Alias_memberContext::SYMBOL_SMALLER() {
  return getToken(KerMLParser::SYMBOL_SMALLER, 0);
}

std::vector<tree::TerminalNode *> KerMLParser::Alias_memberContext::NAME() {
  return getTokens(KerMLParser::NAME);
}

tree::TerminalNode* KerMLParser::Alias_memberContext::NAME(size_t i) {
  return getToken(KerMLParser::NAME, i);
}

tree::TerminalNode* KerMLParser::Alias_memberContext::SYMBOL_GREATER() {
  return getToken(KerMLParser::SYMBOL_GREATER, 0);
}


size_t KerMLParser::Alias_memberContext::getRuleIndex() const {
  return KerMLParser::RuleAlias_member;
}

void KerMLParser::Alias_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlias_member(this);
}

void KerMLParser::Alias_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlias_member(this);
}

KerMLParser::Alias_memberContext* KerMLParser::alias_member() {
  Alias_memberContext *_localctx = _tracker.createInstance<Alias_memberContext>(_ctx, getState());
  enterRule(_localctx, 52, KerMLParser::RuleAlias_member);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(681);
    member_prefix();
    setState(682);
    match(KerMLParser::KEYWORD_ALIAS);
    setState(686);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::SYMBOL_SMALLER) {
      setState(683);
      match(KerMLParser::SYMBOL_SMALLER);
      setState(684);
      match(KerMLParser::NAME);
      setState(685);
      match(KerMLParser::SYMBOL_GREATER);
    }
    setState(689);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::NAME) {
      setState(688);
      match(KerMLParser::NAME);
    }
    setState(691);
    match(KerMLParser::KEYWORD_FOR);
    setState(692);
    qualified_name();
    setState(693);
    relationship_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Qualified_nameContext ------------------------------------------------------------------

KerMLParser::Qualified_nameContext::Qualified_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> KerMLParser::Qualified_nameContext::NAME() {
  return getTokens(KerMLParser::NAME);
}

tree::TerminalNode* KerMLParser::Qualified_nameContext::NAME(size_t i) {
  return getToken(KerMLParser::NAME, i);
}

std::vector<tree::TerminalNode *> KerMLParser::Qualified_nameContext::SYMBOL_NAMESPACE_SUBSET() {
  return getTokens(KerMLParser::SYMBOL_NAMESPACE_SUBSET);
}

tree::TerminalNode* KerMLParser::Qualified_nameContext::SYMBOL_NAMESPACE_SUBSET(size_t i) {
  return getToken(KerMLParser::SYMBOL_NAMESPACE_SUBSET, i);
}


size_t KerMLParser::Qualified_nameContext::getRuleIndex() const {
  return KerMLParser::RuleQualified_name;
}

void KerMLParser::Qualified_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQualified_name(this);
}

void KerMLParser::Qualified_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQualified_name(this);
}

KerMLParser::Qualified_nameContext* KerMLParser::qualified_name() {
  Qualified_nameContext *_localctx = _tracker.createInstance<Qualified_nameContext>(_ctx, getState());
  enterRule(_localctx, 54, KerMLParser::RuleQualified_name);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(695);
    match(KerMLParser::NAME);
    setState(700);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 27, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(696);
        match(KerMLParser::SYMBOL_NAMESPACE_SUBSET);
        setState(697);
        match(KerMLParser::NAME); 
      }
      setState(702);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 27, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Namespace_importContext ------------------------------------------------------------------

KerMLParser::Namespace_importContext::Namespace_importContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Namespace_importContext::KEYWORD_IMPORT() {
  return getToken(KerMLParser::KEYWORD_IMPORT, 0);
}

KerMLParser::Import_declarationContext* KerMLParser::Namespace_importContext::import_declaration() {
  return getRuleContext<KerMLParser::Import_declarationContext>(0);
}

KerMLParser::Visibility_indicatorContext* KerMLParser::Namespace_importContext::visibility_indicator() {
  return getRuleContext<KerMLParser::Visibility_indicatorContext>(0);
}

tree::TerminalNode* KerMLParser::Namespace_importContext::KEYWORD_ALL() {
  return getToken(KerMLParser::KEYWORD_ALL, 0);
}

KerMLParser::Relationship_bodyContext* KerMLParser::Namespace_importContext::relationship_body() {
  return getRuleContext<KerMLParser::Relationship_bodyContext>(0);
}


size_t KerMLParser::Namespace_importContext::getRuleIndex() const {
  return KerMLParser::RuleNamespace_import;
}

void KerMLParser::Namespace_importContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamespace_import(this);
}

void KerMLParser::Namespace_importContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamespace_import(this);
}

KerMLParser::Namespace_importContext* KerMLParser::namespace_import() {
  Namespace_importContext *_localctx = _tracker.createInstance<Namespace_importContext>(_ctx, getState());
  enterRule(_localctx, 56, KerMLParser::RuleNamespace_import);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(704);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 77) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 77)) & 7) != 0)) {
      setState(703);
      visibility_indicator();
    }
    setState(706);
    match(KerMLParser::KEYWORD_IMPORT);
    setState(708);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::KEYWORD_ALL) {
      setState(707);
      match(KerMLParser::KEYWORD_ALL);
    }
    setState(710);
    import_declaration();
    setState(712);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 30, _ctx)) {
    case 1: {
      setState(711);
      relationship_body();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Import_declarationContext ------------------------------------------------------------------

KerMLParser::Import_declarationContext::Import_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Membership_importContext* KerMLParser::Import_declarationContext::membership_import() {
  return getRuleContext<KerMLParser::Membership_importContext>(0);
}

KerMLParser::Namespace_importContext* KerMLParser::Import_declarationContext::namespace_import() {
  return getRuleContext<KerMLParser::Namespace_importContext>(0);
}


size_t KerMLParser::Import_declarationContext::getRuleIndex() const {
  return KerMLParser::RuleImport_declaration;
}

void KerMLParser::Import_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImport_declaration(this);
}

void KerMLParser::Import_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImport_declaration(this);
}

KerMLParser::Import_declarationContext* KerMLParser::import_declaration() {
  Import_declarationContext *_localctx = _tracker.createInstance<Import_declarationContext>(_ctx, getState());
  enterRule(_localctx, 58, KerMLParser::RuleImport_declaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(716);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case KerMLParser::NAME: {
        enterOuterAlt(_localctx, 1);
        setState(714);
        membership_import();
        break;
      }

      case KerMLParser::KEYWORD_IMPORT:
      case KerMLParser::KEYWORD_PRIVATE:
      case KerMLParser::KEYWORD_PROTECTED:
      case KerMLParser::KEYWORD_PUBLIC: {
        enterOuterAlt(_localctx, 2);
        setState(715);
        namespace_import();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Membership_importContext ------------------------------------------------------------------

KerMLParser::Membership_importContext::Membership_importContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Qualified_nameContext* KerMLParser::Membership_importContext::qualified_name() {
  return getRuleContext<KerMLParser::Qualified_nameContext>(0);
}

tree::TerminalNode* KerMLParser::Membership_importContext::SYMBOL_NAMESPACE_SUBSET() {
  return getToken(KerMLParser::SYMBOL_NAMESPACE_SUBSET, 0);
}

tree::TerminalNode* KerMLParser::Membership_importContext::SYMBOL_DOUBLE_STAR() {
  return getToken(KerMLParser::SYMBOL_DOUBLE_STAR, 0);
}

tree::TerminalNode* KerMLParser::Membership_importContext::SYMBOL_STAR() {
  return getToken(KerMLParser::SYMBOL_STAR, 0);
}


size_t KerMLParser::Membership_importContext::getRuleIndex() const {
  return KerMLParser::RuleMembership_import;
}

void KerMLParser::Membership_importContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMembership_import(this);
}

void KerMLParser::Membership_importContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMembership_import(this);
}

KerMLParser::Membership_importContext* KerMLParser::membership_import() {
  Membership_importContext *_localctx = _tracker.createInstance<Membership_importContext>(_ctx, getState());
  enterRule(_localctx, 60, KerMLParser::RuleMembership_import);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(718);
    qualified_name();

    setState(720);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::SYMBOL_NAMESPACE_SUBSET) {
      setState(719);
      match(KerMLParser::SYMBOL_NAMESPACE_SUBSET);
    }
    setState(723);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 33, _ctx)) {
    case 1: {
      setState(722);
      _la = _input->LA(1);
      if (!(_la == KerMLParser::SYMBOL_STAR

      || _la == KerMLParser::SYMBOL_DOUBLE_STAR)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Filter_packageContext ------------------------------------------------------------------

KerMLParser::Filter_packageContext::Filter_packageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Import_declarationContext* KerMLParser::Filter_packageContext::import_declaration() {
  return getRuleContext<KerMLParser::Import_declarationContext>(0);
}

KerMLParser::Filter_package_memberContext* KerMLParser::Filter_packageContext::filter_package_member() {
  return getRuleContext<KerMLParser::Filter_package_memberContext>(0);
}


size_t KerMLParser::Filter_packageContext::getRuleIndex() const {
  return KerMLParser::RuleFilter_package;
}

void KerMLParser::Filter_packageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFilter_package(this);
}

void KerMLParser::Filter_packageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFilter_package(this);
}

KerMLParser::Filter_packageContext* KerMLParser::filter_package() {
  Filter_packageContext *_localctx = _tracker.createInstance<Filter_packageContext>(_ctx, getState());
  enterRule(_localctx, 62, KerMLParser::RuleFilter_package);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(725);
    import_declaration();
    setState(726);
    filter_package_member();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Filter_package_memberContext ------------------------------------------------------------------

KerMLParser::Filter_package_memberContext::Filter_package_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Filter_package_memberContext::SYMBOL_SQUARE_BRACKET_OPEN() {
  return getToken(KerMLParser::SYMBOL_SQUARE_BRACKET_OPEN, 0);
}

KerMLParser::Owned_expressionContext* KerMLParser::Filter_package_memberContext::owned_expression() {
  return getRuleContext<KerMLParser::Owned_expressionContext>(0);
}

tree::TerminalNode* KerMLParser::Filter_package_memberContext::SYMBOL_SQUARE_BRACKET_CLOSE() {
  return getToken(KerMLParser::SYMBOL_SQUARE_BRACKET_CLOSE, 0);
}


size_t KerMLParser::Filter_package_memberContext::getRuleIndex() const {
  return KerMLParser::RuleFilter_package_member;
}

void KerMLParser::Filter_package_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFilter_package_member(this);
}

void KerMLParser::Filter_package_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFilter_package_member(this);
}

KerMLParser::Filter_package_memberContext* KerMLParser::filter_package_member() {
  Filter_package_memberContext *_localctx = _tracker.createInstance<Filter_package_memberContext>(_ctx, getState());
  enterRule(_localctx, 64, KerMLParser::RuleFilter_package_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(728);
    match(KerMLParser::SYMBOL_SQUARE_BRACKET_OPEN);
    setState(729);
    owned_expression();
    setState(730);
    match(KerMLParser::SYMBOL_SQUARE_BRACKET_CLOSE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElementContext ------------------------------------------------------------------

KerMLParser::ElementContext::ElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Annotating_elementContext* KerMLParser::ElementContext::annotating_element() {
  return getRuleContext<KerMLParser::Annotating_elementContext>(0);
}

KerMLParser::Non_feature_elementContext* KerMLParser::ElementContext::non_feature_element() {
  return getRuleContext<KerMLParser::Non_feature_elementContext>(0);
}

KerMLParser::Feature_elementContext* KerMLParser::ElementContext::feature_element() {
  return getRuleContext<KerMLParser::Feature_elementContext>(0);
}

KerMLParser::Additional_optionsContext* KerMLParser::ElementContext::additional_options() {
  return getRuleContext<KerMLParser::Additional_optionsContext>(0);
}


size_t KerMLParser::ElementContext::getRuleIndex() const {
  return KerMLParser::RuleElement;
}

void KerMLParser::ElementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElement(this);
}

void KerMLParser::ElementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElement(this);
}

KerMLParser::ElementContext* KerMLParser::element() {
  ElementContext *_localctx = _tracker.createInstance<ElementContext>(_ctx, getState());
  enterRule(_localctx, 66, KerMLParser::RuleElement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(736);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 34, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(732);
      annotating_element();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(733);
      non_feature_element();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(734);
      feature_element();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(735);
      additional_options();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Non_feature_elementContext ------------------------------------------------------------------

KerMLParser::Non_feature_elementContext::Non_feature_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::DependencyContext* KerMLParser::Non_feature_elementContext::dependency() {
  return getRuleContext<KerMLParser::DependencyContext>(0);
}

KerMLParser::TypeContext* KerMLParser::Non_feature_elementContext::type() {
  return getRuleContext<KerMLParser::TypeContext>(0);
}

KerMLParser::ClassifierContext* KerMLParser::Non_feature_elementContext::classifier() {
  return getRuleContext<KerMLParser::ClassifierContext>(0);
}

KerMLParser::Data_typeContext* KerMLParser::Non_feature_elementContext::data_type() {
  return getRuleContext<KerMLParser::Data_typeContext>(0);
}

KerMLParser::NamespaceContext* KerMLParser::Non_feature_elementContext::namespace_() {
  return getRuleContext<KerMLParser::NamespaceContext>(0);
}

KerMLParser::ClassContext* KerMLParser::Non_feature_elementContext::class_() {
  return getRuleContext<KerMLParser::ClassContext>(0);
}

KerMLParser::StructureContext* KerMLParser::Non_feature_elementContext::structure() {
  return getRuleContext<KerMLParser::StructureContext>(0);
}

KerMLParser::MetaclassContext* KerMLParser::Non_feature_elementContext::metaclass() {
  return getRuleContext<KerMLParser::MetaclassContext>(0);
}

KerMLParser::AssociationContext* KerMLParser::Non_feature_elementContext::association() {
  return getRuleContext<KerMLParser::AssociationContext>(0);
}

KerMLParser::Association_structureContext* KerMLParser::Non_feature_elementContext::association_structure() {
  return getRuleContext<KerMLParser::Association_structureContext>(0);
}

KerMLParser::InteractionContext* KerMLParser::Non_feature_elementContext::interaction() {
  return getRuleContext<KerMLParser::InteractionContext>(0);
}

KerMLParser::BehaviorContext* KerMLParser::Non_feature_elementContext::behavior() {
  return getRuleContext<KerMLParser::BehaviorContext>(0);
}

KerMLParser::FunctionContext* KerMLParser::Non_feature_elementContext::function() {
  return getRuleContext<KerMLParser::FunctionContext>(0);
}

KerMLParser::PredicateContext* KerMLParser::Non_feature_elementContext::predicate() {
  return getRuleContext<KerMLParser::PredicateContext>(0);
}

KerMLParser::MultiplicityContext* KerMLParser::Non_feature_elementContext::multiplicity() {
  return getRuleContext<KerMLParser::MultiplicityContext>(0);
}

KerMLParser::PackageContext* KerMLParser::Non_feature_elementContext::package() {
  return getRuleContext<KerMLParser::PackageContext>(0);
}

KerMLParser::Library_packageContext* KerMLParser::Non_feature_elementContext::library_package() {
  return getRuleContext<KerMLParser::Library_packageContext>(0);
}

KerMLParser::SpecializationContext* KerMLParser::Non_feature_elementContext::specialization() {
  return getRuleContext<KerMLParser::SpecializationContext>(0);
}

KerMLParser::ConjunctionContext* KerMLParser::Non_feature_elementContext::conjunction() {
  return getRuleContext<KerMLParser::ConjunctionContext>(0);
}

KerMLParser::SubclassificationContext* KerMLParser::Non_feature_elementContext::subclassification() {
  return getRuleContext<KerMLParser::SubclassificationContext>(0);
}

KerMLParser::DisjoiningContext* KerMLParser::Non_feature_elementContext::disjoining() {
  return getRuleContext<KerMLParser::DisjoiningContext>(0);
}

KerMLParser::Feature_invertingContext* KerMLParser::Non_feature_elementContext::feature_inverting() {
  return getRuleContext<KerMLParser::Feature_invertingContext>(0);
}

KerMLParser::Feature_typingContext* KerMLParser::Non_feature_elementContext::feature_typing() {
  return getRuleContext<KerMLParser::Feature_typingContext>(0);
}

KerMLParser::SubsettingContext* KerMLParser::Non_feature_elementContext::subsetting() {
  return getRuleContext<KerMLParser::SubsettingContext>(0);
}

KerMLParser::RedefinitionContext* KerMLParser::Non_feature_elementContext::redefinition() {
  return getRuleContext<KerMLParser::RedefinitionContext>(0);
}

KerMLParser::Type_featuringContext* KerMLParser::Non_feature_elementContext::type_featuring() {
  return getRuleContext<KerMLParser::Type_featuringContext>(0);
}

KerMLParser::Namespace_importContext* KerMLParser::Non_feature_elementContext::namespace_import() {
  return getRuleContext<KerMLParser::Namespace_importContext>(0);
}


size_t KerMLParser::Non_feature_elementContext::getRuleIndex() const {
  return KerMLParser::RuleNon_feature_element;
}

void KerMLParser::Non_feature_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNon_feature_element(this);
}

void KerMLParser::Non_feature_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNon_feature_element(this);
}

KerMLParser::Non_feature_elementContext* KerMLParser::non_feature_element() {
  Non_feature_elementContext *_localctx = _tracker.createInstance<Non_feature_elementContext>(_ctx, getState());
  enterRule(_localctx, 68, KerMLParser::RuleNon_feature_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(765);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 35, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(738);
      dependency();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(739);
      type();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(740);
      classifier();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(741);
      data_type();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(742);
      namespace_();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(743);
      class_();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(744);
      structure();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(745);
      metaclass();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(746);
      association();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(747);
      association_structure();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(748);
      interaction();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(749);
      behavior();
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(750);
      function();
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(751);
      predicate();
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(752);
      multiplicity();
      break;
    }

    case 16: {
      enterOuterAlt(_localctx, 16);
      setState(753);
      package();
      break;
    }

    case 17: {
      enterOuterAlt(_localctx, 17);
      setState(754);
      library_package();
      break;
    }

    case 18: {
      enterOuterAlt(_localctx, 18);
      setState(755);
      specialization();
      break;
    }

    case 19: {
      enterOuterAlt(_localctx, 19);
      setState(756);
      conjunction();
      break;
    }

    case 20: {
      enterOuterAlt(_localctx, 20);
      setState(757);
      subclassification();
      break;
    }

    case 21: {
      enterOuterAlt(_localctx, 21);
      setState(758);
      disjoining();
      break;
    }

    case 22: {
      enterOuterAlt(_localctx, 22);
      setState(759);
      feature_inverting();
      break;
    }

    case 23: {
      enterOuterAlt(_localctx, 23);
      setState(760);
      feature_typing();
      break;
    }

    case 24: {
      enterOuterAlt(_localctx, 24);
      setState(761);
      subsetting();
      break;
    }

    case 25: {
      enterOuterAlt(_localctx, 25);
      setState(762);
      redefinition();
      break;
    }

    case 26: {
      enterOuterAlt(_localctx, 26);
      setState(763);
      type_featuring();
      break;
    }

    case 27: {
      enterOuterAlt(_localctx, 27);
      setState(764);
      namespace_import();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Feature_elementContext ------------------------------------------------------------------

KerMLParser::Feature_elementContext::Feature_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::FeatureContext* KerMLParser::Feature_elementContext::feature() {
  return getRuleContext<KerMLParser::FeatureContext>(0);
}

KerMLParser::StepContext* KerMLParser::Feature_elementContext::step() {
  return getRuleContext<KerMLParser::StepContext>(0);
}

KerMLParser::ExpressionContext* KerMLParser::Feature_elementContext::expression() {
  return getRuleContext<KerMLParser::ExpressionContext>(0);
}

KerMLParser::Boolean_expressionContext* KerMLParser::Feature_elementContext::boolean_expression() {
  return getRuleContext<KerMLParser::Boolean_expressionContext>(0);
}

KerMLParser::InvariantContext* KerMLParser::Feature_elementContext::invariant() {
  return getRuleContext<KerMLParser::InvariantContext>(0);
}

KerMLParser::ConnectorContext* KerMLParser::Feature_elementContext::connector() {
  return getRuleContext<KerMLParser::ConnectorContext>(0);
}

KerMLParser::Binding_connectorContext* KerMLParser::Feature_elementContext::binding_connector() {
  return getRuleContext<KerMLParser::Binding_connectorContext>(0);
}

KerMLParser::SuccessionContext* KerMLParser::Feature_elementContext::succession() {
  return getRuleContext<KerMLParser::SuccessionContext>(0);
}

KerMLParser::Item_flowContext* KerMLParser::Feature_elementContext::item_flow() {
  return getRuleContext<KerMLParser::Item_flowContext>(0);
}

KerMLParser::Succession_item_flowContext* KerMLParser::Feature_elementContext::succession_item_flow() {
  return getRuleContext<KerMLParser::Succession_item_flowContext>(0);
}


size_t KerMLParser::Feature_elementContext::getRuleIndex() const {
  return KerMLParser::RuleFeature_element;
}

void KerMLParser::Feature_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFeature_element(this);
}

void KerMLParser::Feature_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFeature_element(this);
}

KerMLParser::Feature_elementContext* KerMLParser::feature_element() {
  Feature_elementContext *_localctx = _tracker.createInstance<Feature_elementContext>(_ctx, getState());
  enterRule(_localctx, 70, KerMLParser::RuleFeature_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(777);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 36, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(767);
      feature();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(768);
      step();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(769);
      expression();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(770);
      boolean_expression();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(771);
      invariant();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(772);
      connector();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(773);
      binding_connector();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(774);
      succession();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(775);
      item_flow();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(776);
      succession_item_flow();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Additional_optionsContext ------------------------------------------------------------------

KerMLParser::Additional_optionsContext::Additional_optionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Meta_assignmentContext* KerMLParser::Additional_optionsContext::meta_assignment() {
  return getRuleContext<KerMLParser::Meta_assignmentContext>(0);
}


size_t KerMLParser::Additional_optionsContext::getRuleIndex() const {
  return KerMLParser::RuleAdditional_options;
}

void KerMLParser::Additional_optionsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAdditional_options(this);
}

void KerMLParser::Additional_optionsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAdditional_options(this);
}

KerMLParser::Additional_optionsContext* KerMLParser::additional_options() {
  Additional_optionsContext *_localctx = _tracker.createInstance<Additional_optionsContext>(_ctx, getState());
  enterRule(_localctx, 72, KerMLParser::RuleAdditional_options);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(779);
    meta_assignment();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeContext ------------------------------------------------------------------

KerMLParser::TypeContext::TypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Type_prefixContext* KerMLParser::TypeContext::type_prefix() {
  return getRuleContext<KerMLParser::Type_prefixContext>(0);
}

tree::TerminalNode* KerMLParser::TypeContext::KEYWORD_TYPE() {
  return getToken(KerMLParser::KEYWORD_TYPE, 0);
}

KerMLParser::Type_declarationContext* KerMLParser::TypeContext::type_declaration() {
  return getRuleContext<KerMLParser::Type_declarationContext>(0);
}

KerMLParser::Type_bodyContext* KerMLParser::TypeContext::type_body() {
  return getRuleContext<KerMLParser::Type_bodyContext>(0);
}


size_t KerMLParser::TypeContext::getRuleIndex() const {
  return KerMLParser::RuleType;
}

void KerMLParser::TypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType(this);
}

void KerMLParser::TypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType(this);
}

KerMLParser::TypeContext* KerMLParser::type() {
  TypeContext *_localctx = _tracker.createInstance<TypeContext>(_ctx, getState());
  enterRule(_localctx, 74, KerMLParser::RuleType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(781);
    type_prefix();
    setState(782);
    match(KerMLParser::KEYWORD_TYPE);
    setState(783);
    type_declaration();
    setState(784);
    type_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_prefixContext ------------------------------------------------------------------

KerMLParser::Type_prefixContext::Type_prefixContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Type_prefixContext::KEYWORD_ABSTRACT() {
  return getToken(KerMLParser::KEYWORD_ABSTRACT, 0);
}

std::vector<KerMLParser::Prefix_metadata_memberContext *> KerMLParser::Type_prefixContext::prefix_metadata_member() {
  return getRuleContexts<KerMLParser::Prefix_metadata_memberContext>();
}

KerMLParser::Prefix_metadata_memberContext* KerMLParser::Type_prefixContext::prefix_metadata_member(size_t i) {
  return getRuleContext<KerMLParser::Prefix_metadata_memberContext>(i);
}


size_t KerMLParser::Type_prefixContext::getRuleIndex() const {
  return KerMLParser::RuleType_prefix;
}

void KerMLParser::Type_prefixContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_prefix(this);
}

void KerMLParser::Type_prefixContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_prefix(this);
}

KerMLParser::Type_prefixContext* KerMLParser::type_prefix() {
  Type_prefixContext *_localctx = _tracker.createInstance<Type_prefixContext>(_ctx, getState());
  enterRule(_localctx, 76, KerMLParser::RuleType_prefix);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(787);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::KEYWORD_ABSTRACT) {
      setState(786);
      match(KerMLParser::KEYWORD_ABSTRACT);
    }
    setState(792);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == KerMLParser::SYMBOL_HASHTAG) {
      setState(789);
      prefix_metadata_member();
      setState(794);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_declarationContext ------------------------------------------------------------------

KerMLParser::Type_declarationContext::Type_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::IdentificationContext* KerMLParser::Type_declarationContext::identification() {
  return getRuleContext<KerMLParser::IdentificationContext>(0);
}

tree::TerminalNode* KerMLParser::Type_declarationContext::KEYWORD_ALL() {
  return getToken(KerMLParser::KEYWORD_ALL, 0);
}

KerMLParser::Multiplicity_boundsContext* KerMLParser::Type_declarationContext::multiplicity_bounds() {
  return getRuleContext<KerMLParser::Multiplicity_boundsContext>(0);
}

std::vector<KerMLParser::Specialization_partContext *> KerMLParser::Type_declarationContext::specialization_part() {
  return getRuleContexts<KerMLParser::Specialization_partContext>();
}

KerMLParser::Specialization_partContext* KerMLParser::Type_declarationContext::specialization_part(size_t i) {
  return getRuleContext<KerMLParser::Specialization_partContext>(i);
}

std::vector<KerMLParser::Conjugation_partContext *> KerMLParser::Type_declarationContext::conjugation_part() {
  return getRuleContexts<KerMLParser::Conjugation_partContext>();
}

KerMLParser::Conjugation_partContext* KerMLParser::Type_declarationContext::conjugation_part(size_t i) {
  return getRuleContext<KerMLParser::Conjugation_partContext>(i);
}

std::vector<KerMLParser::Type_relationship_partContext *> KerMLParser::Type_declarationContext::type_relationship_part() {
  return getRuleContexts<KerMLParser::Type_relationship_partContext>();
}

KerMLParser::Type_relationship_partContext* KerMLParser::Type_declarationContext::type_relationship_part(size_t i) {
  return getRuleContext<KerMLParser::Type_relationship_partContext>(i);
}


size_t KerMLParser::Type_declarationContext::getRuleIndex() const {
  return KerMLParser::RuleType_declaration;
}

void KerMLParser::Type_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_declaration(this);
}

void KerMLParser::Type_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_declaration(this);
}

KerMLParser::Type_declarationContext* KerMLParser::type_declaration() {
  Type_declarationContext *_localctx = _tracker.createInstance<Type_declarationContext>(_ctx, getState());
  enterRule(_localctx, 78, KerMLParser::RuleType_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(796);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::KEYWORD_ALL) {
      setState(795);
      match(KerMLParser::KEYWORD_ALL);
    }
    setState(798);
    identification();
    setState(800);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::SYMBOL_SQUARE_BRACKET_OPEN) {
      setState(799);
      multiplicity_bounds();
    }
    setState(804); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(804);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case KerMLParser::SPECIALIZES: {
          setState(802);
          specialization_part();
          break;
        }

        case KerMLParser::CONJUNGATES: {
          setState(803);
          conjugation_part();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(806); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == KerMLParser::SPECIALIZES

    || _la == KerMLParser::CONJUNGATES);
    setState(811);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 2251821288521728) != 0) || _la == KerMLParser::KEYWORD_UNIONS) {
      setState(808);
      type_relationship_part();
      setState(813);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Specialization_partContext ------------------------------------------------------------------

KerMLParser::Specialization_partContext::Specialization_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Specialization_partContext::SPECIALIZES() {
  return getToken(KerMLParser::SPECIALIZES, 0);
}

std::vector<KerMLParser::Owned_specializationContext *> KerMLParser::Specialization_partContext::owned_specialization() {
  return getRuleContexts<KerMLParser::Owned_specializationContext>();
}

KerMLParser::Owned_specializationContext* KerMLParser::Specialization_partContext::owned_specialization(size_t i) {
  return getRuleContext<KerMLParser::Owned_specializationContext>(i);
}

std::vector<tree::TerminalNode *> KerMLParser::Specialization_partContext::SYMBOL_COMMA() {
  return getTokens(KerMLParser::SYMBOL_COMMA);
}

tree::TerminalNode* KerMLParser::Specialization_partContext::SYMBOL_COMMA(size_t i) {
  return getToken(KerMLParser::SYMBOL_COMMA, i);
}


size_t KerMLParser::Specialization_partContext::getRuleIndex() const {
  return KerMLParser::RuleSpecialization_part;
}

void KerMLParser::Specialization_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSpecialization_part(this);
}

void KerMLParser::Specialization_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSpecialization_part(this);
}

KerMLParser::Specialization_partContext* KerMLParser::specialization_part() {
  Specialization_partContext *_localctx = _tracker.createInstance<Specialization_partContext>(_ctx, getState());
  enterRule(_localctx, 80, KerMLParser::RuleSpecialization_part);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(814);
    match(KerMLParser::SPECIALIZES);
    setState(815);
    owned_specialization();
    setState(820);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == KerMLParser::SYMBOL_COMMA) {
      setState(816);
      match(KerMLParser::SYMBOL_COMMA);
      setState(817);
      owned_specialization();
      setState(822);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Conjugation_partContext ------------------------------------------------------------------

KerMLParser::Conjugation_partContext::Conjugation_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Conjugation_partContext::CONJUNGATES() {
  return getToken(KerMLParser::CONJUNGATES, 0);
}

KerMLParser::Owned_conjugationContext* KerMLParser::Conjugation_partContext::owned_conjugation() {
  return getRuleContext<KerMLParser::Owned_conjugationContext>(0);
}


size_t KerMLParser::Conjugation_partContext::getRuleIndex() const {
  return KerMLParser::RuleConjugation_part;
}

void KerMLParser::Conjugation_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConjugation_part(this);
}

void KerMLParser::Conjugation_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConjugation_part(this);
}

KerMLParser::Conjugation_partContext* KerMLParser::conjugation_part() {
  Conjugation_partContext *_localctx = _tracker.createInstance<Conjugation_partContext>(_ctx, getState());
  enterRule(_localctx, 82, KerMLParser::RuleConjugation_part);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(823);
    match(KerMLParser::CONJUNGATES);
    setState(824);
    owned_conjugation();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_relationship_partContext ------------------------------------------------------------------

KerMLParser::Type_relationship_partContext::Type_relationship_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Disjoining_partContext* KerMLParser::Type_relationship_partContext::disjoining_part() {
  return getRuleContext<KerMLParser::Disjoining_partContext>(0);
}

KerMLParser::Unioning_partContext* KerMLParser::Type_relationship_partContext::unioning_part() {
  return getRuleContext<KerMLParser::Unioning_partContext>(0);
}

KerMLParser::Intersecting_partContext* KerMLParser::Type_relationship_partContext::intersecting_part() {
  return getRuleContext<KerMLParser::Intersecting_partContext>(0);
}

KerMLParser::Differencing_partContext* KerMLParser::Type_relationship_partContext::differencing_part() {
  return getRuleContext<KerMLParser::Differencing_partContext>(0);
}


size_t KerMLParser::Type_relationship_partContext::getRuleIndex() const {
  return KerMLParser::RuleType_relationship_part;
}

void KerMLParser::Type_relationship_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_relationship_part(this);
}

void KerMLParser::Type_relationship_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_relationship_part(this);
}

KerMLParser::Type_relationship_partContext* KerMLParser::type_relationship_part() {
  Type_relationship_partContext *_localctx = _tracker.createInstance<Type_relationship_partContext>(_ctx, getState());
  enterRule(_localctx, 84, KerMLParser::RuleType_relationship_part);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(830);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case KerMLParser::KEYWORD_DISJOINT: {
        enterOuterAlt(_localctx, 1);
        setState(826);
        disjoining_part();
        break;
      }

      case KerMLParser::KEYWORD_UNIONS: {
        enterOuterAlt(_localctx, 2);
        setState(827);
        unioning_part();
        break;
      }

      case KerMLParser::KEYWORD_INTERSECTS: {
        enterOuterAlt(_localctx, 3);
        setState(828);
        intersecting_part();
        break;
      }

      case KerMLParser::KEYWORD_DIFFERENCES: {
        enterOuterAlt(_localctx, 4);
        setState(829);
        differencing_part();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Disjoining_partContext ------------------------------------------------------------------

KerMLParser::Disjoining_partContext::Disjoining_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Disjoining_partContext::KEYWORD_DISJOINT() {
  return getToken(KerMLParser::KEYWORD_DISJOINT, 0);
}

tree::TerminalNode* KerMLParser::Disjoining_partContext::KEYWORD_FROM() {
  return getToken(KerMLParser::KEYWORD_FROM, 0);
}

std::vector<KerMLParser::Owned_disjoiningContext *> KerMLParser::Disjoining_partContext::owned_disjoining() {
  return getRuleContexts<KerMLParser::Owned_disjoiningContext>();
}

KerMLParser::Owned_disjoiningContext* KerMLParser::Disjoining_partContext::owned_disjoining(size_t i) {
  return getRuleContext<KerMLParser::Owned_disjoiningContext>(i);
}

std::vector<tree::TerminalNode *> KerMLParser::Disjoining_partContext::SYMBOL_COMMA() {
  return getTokens(KerMLParser::SYMBOL_COMMA);
}

tree::TerminalNode* KerMLParser::Disjoining_partContext::SYMBOL_COMMA(size_t i) {
  return getToken(KerMLParser::SYMBOL_COMMA, i);
}


size_t KerMLParser::Disjoining_partContext::getRuleIndex() const {
  return KerMLParser::RuleDisjoining_part;
}

void KerMLParser::Disjoining_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDisjoining_part(this);
}

void KerMLParser::Disjoining_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDisjoining_part(this);
}

KerMLParser::Disjoining_partContext* KerMLParser::disjoining_part() {
  Disjoining_partContext *_localctx = _tracker.createInstance<Disjoining_partContext>(_ctx, getState());
  enterRule(_localctx, 86, KerMLParser::RuleDisjoining_part);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(832);
    match(KerMLParser::KEYWORD_DISJOINT);
    setState(833);
    match(KerMLParser::KEYWORD_FROM);
    setState(834);
    owned_disjoining();
    setState(839);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == KerMLParser::SYMBOL_COMMA) {
      setState(835);
      match(KerMLParser::SYMBOL_COMMA);
      setState(836);
      owned_disjoining();
      setState(841);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Unioning_partContext ------------------------------------------------------------------

KerMLParser::Unioning_partContext::Unioning_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Unioning_partContext::KEYWORD_UNIONS() {
  return getToken(KerMLParser::KEYWORD_UNIONS, 0);
}

std::vector<KerMLParser::UnioningContext *> KerMLParser::Unioning_partContext::unioning() {
  return getRuleContexts<KerMLParser::UnioningContext>();
}

KerMLParser::UnioningContext* KerMLParser::Unioning_partContext::unioning(size_t i) {
  return getRuleContext<KerMLParser::UnioningContext>(i);
}

std::vector<tree::TerminalNode *> KerMLParser::Unioning_partContext::SYMBOL_COMMA() {
  return getTokens(KerMLParser::SYMBOL_COMMA);
}

tree::TerminalNode* KerMLParser::Unioning_partContext::SYMBOL_COMMA(size_t i) {
  return getToken(KerMLParser::SYMBOL_COMMA, i);
}


size_t KerMLParser::Unioning_partContext::getRuleIndex() const {
  return KerMLParser::RuleUnioning_part;
}

void KerMLParser::Unioning_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnioning_part(this);
}

void KerMLParser::Unioning_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnioning_part(this);
}

KerMLParser::Unioning_partContext* KerMLParser::unioning_part() {
  Unioning_partContext *_localctx = _tracker.createInstance<Unioning_partContext>(_ctx, getState());
  enterRule(_localctx, 88, KerMLParser::RuleUnioning_part);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(842);
    match(KerMLParser::KEYWORD_UNIONS);
    setState(843);
    unioning();
    setState(848);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == KerMLParser::SYMBOL_COMMA) {
      setState(844);
      match(KerMLParser::SYMBOL_COMMA);
      setState(845);
      unioning();
      setState(850);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Intersecting_partContext ------------------------------------------------------------------

KerMLParser::Intersecting_partContext::Intersecting_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Intersecting_partContext::KEYWORD_INTERSECTS() {
  return getToken(KerMLParser::KEYWORD_INTERSECTS, 0);
}

std::vector<KerMLParser::IntersectingContext *> KerMLParser::Intersecting_partContext::intersecting() {
  return getRuleContexts<KerMLParser::IntersectingContext>();
}

KerMLParser::IntersectingContext* KerMLParser::Intersecting_partContext::intersecting(size_t i) {
  return getRuleContext<KerMLParser::IntersectingContext>(i);
}

std::vector<tree::TerminalNode *> KerMLParser::Intersecting_partContext::SYMBOL_COMMA() {
  return getTokens(KerMLParser::SYMBOL_COMMA);
}

tree::TerminalNode* KerMLParser::Intersecting_partContext::SYMBOL_COMMA(size_t i) {
  return getToken(KerMLParser::SYMBOL_COMMA, i);
}


size_t KerMLParser::Intersecting_partContext::getRuleIndex() const {
  return KerMLParser::RuleIntersecting_part;
}

void KerMLParser::Intersecting_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIntersecting_part(this);
}

void KerMLParser::Intersecting_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIntersecting_part(this);
}

KerMLParser::Intersecting_partContext* KerMLParser::intersecting_part() {
  Intersecting_partContext *_localctx = _tracker.createInstance<Intersecting_partContext>(_ctx, getState());
  enterRule(_localctx, 90, KerMLParser::RuleIntersecting_part);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(851);
    match(KerMLParser::KEYWORD_INTERSECTS);
    setState(852);
    intersecting();
    setState(857);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == KerMLParser::SYMBOL_COMMA) {
      setState(853);
      match(KerMLParser::SYMBOL_COMMA);
      setState(854);
      intersecting();
      setState(859);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Differencing_partContext ------------------------------------------------------------------

KerMLParser::Differencing_partContext::Differencing_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Differencing_partContext::KEYWORD_DIFFERENCES() {
  return getToken(KerMLParser::KEYWORD_DIFFERENCES, 0);
}

std::vector<KerMLParser::DifferencingContext *> KerMLParser::Differencing_partContext::differencing() {
  return getRuleContexts<KerMLParser::DifferencingContext>();
}

KerMLParser::DifferencingContext* KerMLParser::Differencing_partContext::differencing(size_t i) {
  return getRuleContext<KerMLParser::DifferencingContext>(i);
}

std::vector<tree::TerminalNode *> KerMLParser::Differencing_partContext::SYMBOL_COMMA() {
  return getTokens(KerMLParser::SYMBOL_COMMA);
}

tree::TerminalNode* KerMLParser::Differencing_partContext::SYMBOL_COMMA(size_t i) {
  return getToken(KerMLParser::SYMBOL_COMMA, i);
}


size_t KerMLParser::Differencing_partContext::getRuleIndex() const {
  return KerMLParser::RuleDifferencing_part;
}

void KerMLParser::Differencing_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDifferencing_part(this);
}

void KerMLParser::Differencing_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDifferencing_part(this);
}

KerMLParser::Differencing_partContext* KerMLParser::differencing_part() {
  Differencing_partContext *_localctx = _tracker.createInstance<Differencing_partContext>(_ctx, getState());
  enterRule(_localctx, 92, KerMLParser::RuleDifferencing_part);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(860);
    match(KerMLParser::KEYWORD_DIFFERENCES);
    setState(861);
    differencing();
    setState(866);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == KerMLParser::SYMBOL_COMMA) {
      setState(862);
      match(KerMLParser::SYMBOL_COMMA);
      setState(863);
      differencing();
      setState(868);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_bodyContext ------------------------------------------------------------------

KerMLParser::Type_bodyContext::Type_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Type_bodyContext::SYMBOL_STATEMENT_DELIMITER() {
  return getToken(KerMLParser::SYMBOL_STATEMENT_DELIMITER, 0);
}

tree::TerminalNode* KerMLParser::Type_bodyContext::SYMBOL_CURLY_BRACKET_OPEN() {
  return getToken(KerMLParser::SYMBOL_CURLY_BRACKET_OPEN, 0);
}

KerMLParser::Type_body_elementsContext* KerMLParser::Type_bodyContext::type_body_elements() {
  return getRuleContext<KerMLParser::Type_body_elementsContext>(0);
}

tree::TerminalNode* KerMLParser::Type_bodyContext::SYMBOL_CURLY_BRACKET_CLOSE() {
  return getToken(KerMLParser::SYMBOL_CURLY_BRACKET_CLOSE, 0);
}


size_t KerMLParser::Type_bodyContext::getRuleIndex() const {
  return KerMLParser::RuleType_body;
}

void KerMLParser::Type_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_body(this);
}

void KerMLParser::Type_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_body(this);
}

KerMLParser::Type_bodyContext* KerMLParser::type_body() {
  Type_bodyContext *_localctx = _tracker.createInstance<Type_bodyContext>(_ctx, getState());
  enterRule(_localctx, 94, KerMLParser::RuleType_body);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(874);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case KerMLParser::SYMBOL_STATEMENT_DELIMITER: {
        enterOuterAlt(_localctx, 1);
        setState(869);
        match(KerMLParser::SYMBOL_STATEMENT_DELIMITER);
        break;
      }

      case KerMLParser::SYMBOL_CURLY_BRACKET_OPEN: {
        enterOuterAlt(_localctx, 2);
        setState(870);
        match(KerMLParser::SYMBOL_CURLY_BRACKET_OPEN);
        setState(871);
        type_body_elements();
        setState(872);
        match(KerMLParser::SYMBOL_CURLY_BRACKET_CLOSE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_body_elementsContext ------------------------------------------------------------------

KerMLParser::Type_body_elementsContext::Type_body_elementsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<KerMLParser::ElementContext *> KerMLParser::Type_body_elementsContext::element() {
  return getRuleContexts<KerMLParser::ElementContext>();
}

KerMLParser::ElementContext* KerMLParser::Type_body_elementsContext::element(size_t i) {
  return getRuleContext<KerMLParser::ElementContext>(i);
}


size_t KerMLParser::Type_body_elementsContext::getRuleIndex() const {
  return KerMLParser::RuleType_body_elements;
}

void KerMLParser::Type_body_elementsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_body_elements(this);
}

void KerMLParser::Type_body_elementsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_body_elements(this);
}

KerMLParser::Type_body_elementsContext* KerMLParser::type_body_elements() {
  Type_body_elementsContext *_localctx = _tracker.createInstance<Type_body_elementsContext>(_ctx, getState());
  enterRule(_localctx, 96, KerMLParser::RuleType_body_elements);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(879);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -5773292089211895232) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 78702848638471) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 129)) & 67108867) != 0)) {
      setState(876);
      element();
      setState(881);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_body_elementContext ------------------------------------------------------------------

KerMLParser::Type_body_elementContext::Type_body_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::ElementContext* KerMLParser::Type_body_elementContext::element() {
  return getRuleContext<KerMLParser::ElementContext>(0);
}


size_t KerMLParser::Type_body_elementContext::getRuleIndex() const {
  return KerMLParser::RuleType_body_element;
}

void KerMLParser::Type_body_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_body_element(this);
}

void KerMLParser::Type_body_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_body_element(this);
}

KerMLParser::Type_body_elementContext* KerMLParser::type_body_element() {
  Type_body_elementContext *_localctx = _tracker.createInstance<Type_body_elementContext>(_ctx, getState());
  enterRule(_localctx, 98, KerMLParser::RuleType_body_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(882);
    element();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SpecializationContext ------------------------------------------------------------------

KerMLParser::SpecializationContext::SpecializationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::SpecializationContext::KEYWORD_SUBTYPE() {
  return getToken(KerMLParser::KEYWORD_SUBTYPE, 0);
}

KerMLParser::Specific_typeContext* KerMLParser::SpecializationContext::specific_type() {
  return getRuleContext<KerMLParser::Specific_typeContext>(0);
}

tree::TerminalNode* KerMLParser::SpecializationContext::SPECIALIZES() {
  return getToken(KerMLParser::SPECIALIZES, 0);
}

KerMLParser::General_typeContext* KerMLParser::SpecializationContext::general_type() {
  return getRuleContext<KerMLParser::General_typeContext>(0);
}

KerMLParser::Relationship_bodyContext* KerMLParser::SpecializationContext::relationship_body() {
  return getRuleContext<KerMLParser::Relationship_bodyContext>(0);
}

tree::TerminalNode* KerMLParser::SpecializationContext::KEYWORD_SPECILIZATION() {
  return getToken(KerMLParser::KEYWORD_SPECILIZATION, 0);
}

KerMLParser::IdentificationContext* KerMLParser::SpecializationContext::identification() {
  return getRuleContext<KerMLParser::IdentificationContext>(0);
}


size_t KerMLParser::SpecializationContext::getRuleIndex() const {
  return KerMLParser::RuleSpecialization;
}

void KerMLParser::SpecializationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSpecialization(this);
}

void KerMLParser::SpecializationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSpecialization(this);
}

KerMLParser::SpecializationContext* KerMLParser::specialization() {
  SpecializationContext *_localctx = _tracker.createInstance<SpecializationContext>(_ctx, getState());
  enterRule(_localctx, 100, KerMLParser::RuleSpecialization);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(886);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::KEYWORD_SPECILIZATION) {
      setState(884);
      match(KerMLParser::KEYWORD_SPECILIZATION);
      setState(885);
      identification();
    }
    setState(888);
    match(KerMLParser::KEYWORD_SUBTYPE);
    setState(889);
    specific_type();
    setState(890);
    match(KerMLParser::SPECIALIZES);
    setState(891);
    general_type();
    setState(892);
    relationship_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Owned_specializationContext ------------------------------------------------------------------

KerMLParser::Owned_specializationContext::Owned_specializationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::General_typeContext* KerMLParser::Owned_specializationContext::general_type() {
  return getRuleContext<KerMLParser::General_typeContext>(0);
}


size_t KerMLParser::Owned_specializationContext::getRuleIndex() const {
  return KerMLParser::RuleOwned_specialization;
}

void KerMLParser::Owned_specializationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOwned_specialization(this);
}

void KerMLParser::Owned_specializationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOwned_specialization(this);
}

KerMLParser::Owned_specializationContext* KerMLParser::owned_specialization() {
  Owned_specializationContext *_localctx = _tracker.createInstance<Owned_specializationContext>(_ctx, getState());
  enterRule(_localctx, 102, KerMLParser::RuleOwned_specialization);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(894);
    general_type();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Specific_typeContext ------------------------------------------------------------------

KerMLParser::Specific_typeContext::Specific_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Qualified_nameContext* KerMLParser::Specific_typeContext::qualified_name() {
  return getRuleContext<KerMLParser::Qualified_nameContext>(0);
}

KerMLParser::Owned_feature_chainContext* KerMLParser::Specific_typeContext::owned_feature_chain() {
  return getRuleContext<KerMLParser::Owned_feature_chainContext>(0);
}


size_t KerMLParser::Specific_typeContext::getRuleIndex() const {
  return KerMLParser::RuleSpecific_type;
}

void KerMLParser::Specific_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSpecific_type(this);
}

void KerMLParser::Specific_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSpecific_type(this);
}

KerMLParser::Specific_typeContext* KerMLParser::specific_type() {
  Specific_typeContext *_localctx = _tracker.createInstance<Specific_typeContext>(_ctx, getState());
  enterRule(_localctx, 104, KerMLParser::RuleSpecific_type);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(898);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 53, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(896);
      qualified_name();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(897);
      owned_feature_chain();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- General_typeContext ------------------------------------------------------------------

KerMLParser::General_typeContext::General_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Qualified_nameContext* KerMLParser::General_typeContext::qualified_name() {
  return getRuleContext<KerMLParser::Qualified_nameContext>(0);
}

KerMLParser::Owned_feature_chainContext* KerMLParser::General_typeContext::owned_feature_chain() {
  return getRuleContext<KerMLParser::Owned_feature_chainContext>(0);
}


size_t KerMLParser::General_typeContext::getRuleIndex() const {
  return KerMLParser::RuleGeneral_type;
}

void KerMLParser::General_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGeneral_type(this);
}

void KerMLParser::General_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGeneral_type(this);
}

KerMLParser::General_typeContext* KerMLParser::general_type() {
  General_typeContext *_localctx = _tracker.createInstance<General_typeContext>(_ctx, getState());
  enterRule(_localctx, 106, KerMLParser::RuleGeneral_type);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(902);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 54, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(900);
      qualified_name();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(901);
      owned_feature_chain();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConjunctionContext ------------------------------------------------------------------

KerMLParser::ConjunctionContext::ConjunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::ConjunctionContext::KEYWORD_CONJUGATE() {
  return getToken(KerMLParser::KEYWORD_CONJUGATE, 0);
}

tree::TerminalNode* KerMLParser::ConjunctionContext::CONJUNGATES() {
  return getToken(KerMLParser::CONJUNGATES, 0);
}

KerMLParser::Relationship_bodyContext* KerMLParser::ConjunctionContext::relationship_body() {
  return getRuleContext<KerMLParser::Relationship_bodyContext>(0);
}

std::vector<KerMLParser::Qualified_nameContext *> KerMLParser::ConjunctionContext::qualified_name() {
  return getRuleContexts<KerMLParser::Qualified_nameContext>();
}

KerMLParser::Qualified_nameContext* KerMLParser::ConjunctionContext::qualified_name(size_t i) {
  return getRuleContext<KerMLParser::Qualified_nameContext>(i);
}

std::vector<KerMLParser::Feature_chainContext *> KerMLParser::ConjunctionContext::feature_chain() {
  return getRuleContexts<KerMLParser::Feature_chainContext>();
}

KerMLParser::Feature_chainContext* KerMLParser::ConjunctionContext::feature_chain(size_t i) {
  return getRuleContext<KerMLParser::Feature_chainContext>(i);
}

tree::TerminalNode* KerMLParser::ConjunctionContext::KEYWORD_CONJUGATION() {
  return getToken(KerMLParser::KEYWORD_CONJUGATION, 0);
}

KerMLParser::IdentificationContext* KerMLParser::ConjunctionContext::identification() {
  return getRuleContext<KerMLParser::IdentificationContext>(0);
}


size_t KerMLParser::ConjunctionContext::getRuleIndex() const {
  return KerMLParser::RuleConjunction;
}

void KerMLParser::ConjunctionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConjunction(this);
}

void KerMLParser::ConjunctionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConjunction(this);
}

KerMLParser::ConjunctionContext* KerMLParser::conjunction() {
  ConjunctionContext *_localctx = _tracker.createInstance<ConjunctionContext>(_ctx, getState());
  enterRule(_localctx, 108, KerMLParser::RuleConjunction);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(906);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::KEYWORD_CONJUGATION) {
      setState(904);
      match(KerMLParser::KEYWORD_CONJUGATION);
      setState(905);
      identification();
    }
    setState(908);
    match(KerMLParser::KEYWORD_CONJUGATE);
    setState(911);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 56, _ctx)) {
    case 1: {
      setState(909);
      qualified_name();
      break;
    }

    case 2: {
      setState(910);
      feature_chain();
      break;
    }

    default:
      break;
    }
    setState(913);
    match(KerMLParser::CONJUNGATES);
    setState(916);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 57, _ctx)) {
    case 1: {
      setState(914);
      qualified_name();
      break;
    }

    case 2: {
      setState(915);
      feature_chain();
      break;
    }

    default:
      break;
    }
    setState(918);
    relationship_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Owned_conjugationContext ------------------------------------------------------------------

KerMLParser::Owned_conjugationContext::Owned_conjugationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Qualified_nameContext* KerMLParser::Owned_conjugationContext::qualified_name() {
  return getRuleContext<KerMLParser::Qualified_nameContext>(0);
}

KerMLParser::Feature_chainContext* KerMLParser::Owned_conjugationContext::feature_chain() {
  return getRuleContext<KerMLParser::Feature_chainContext>(0);
}


size_t KerMLParser::Owned_conjugationContext::getRuleIndex() const {
  return KerMLParser::RuleOwned_conjugation;
}

void KerMLParser::Owned_conjugationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOwned_conjugation(this);
}

void KerMLParser::Owned_conjugationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOwned_conjugation(this);
}

KerMLParser::Owned_conjugationContext* KerMLParser::owned_conjugation() {
  Owned_conjugationContext *_localctx = _tracker.createInstance<Owned_conjugationContext>(_ctx, getState());
  enterRule(_localctx, 110, KerMLParser::RuleOwned_conjugation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(922);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 58, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(920);
      qualified_name();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(921);
      feature_chain();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DisjoiningContext ------------------------------------------------------------------

KerMLParser::DisjoiningContext::DisjoiningContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::DisjoiningContext::KEYWORD_DISJOINT() {
  return getToken(KerMLParser::KEYWORD_DISJOINT, 0);
}

tree::TerminalNode* KerMLParser::DisjoiningContext::KEYWORD_FROM() {
  return getToken(KerMLParser::KEYWORD_FROM, 0);
}

KerMLParser::Relationship_bodyContext* KerMLParser::DisjoiningContext::relationship_body() {
  return getRuleContext<KerMLParser::Relationship_bodyContext>(0);
}

std::vector<KerMLParser::Qualified_nameContext *> KerMLParser::DisjoiningContext::qualified_name() {
  return getRuleContexts<KerMLParser::Qualified_nameContext>();
}

KerMLParser::Qualified_nameContext* KerMLParser::DisjoiningContext::qualified_name(size_t i) {
  return getRuleContext<KerMLParser::Qualified_nameContext>(i);
}

std::vector<KerMLParser::Feature_chainContext *> KerMLParser::DisjoiningContext::feature_chain() {
  return getRuleContexts<KerMLParser::Feature_chainContext>();
}

KerMLParser::Feature_chainContext* KerMLParser::DisjoiningContext::feature_chain(size_t i) {
  return getRuleContext<KerMLParser::Feature_chainContext>(i);
}

tree::TerminalNode* KerMLParser::DisjoiningContext::KEYWORD_DISJOINING() {
  return getToken(KerMLParser::KEYWORD_DISJOINING, 0);
}

KerMLParser::IdentificationContext* KerMLParser::DisjoiningContext::identification() {
  return getRuleContext<KerMLParser::IdentificationContext>(0);
}


size_t KerMLParser::DisjoiningContext::getRuleIndex() const {
  return KerMLParser::RuleDisjoining;
}

void KerMLParser::DisjoiningContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDisjoining(this);
}

void KerMLParser::DisjoiningContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDisjoining(this);
}

KerMLParser::DisjoiningContext* KerMLParser::disjoining() {
  DisjoiningContext *_localctx = _tracker.createInstance<DisjoiningContext>(_ctx, getState());
  enterRule(_localctx, 112, KerMLParser::RuleDisjoining);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(926);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::KEYWORD_DISJOINING) {
      setState(924);
      match(KerMLParser::KEYWORD_DISJOINING);
      setState(925);
      identification();
    }
    setState(928);
    match(KerMLParser::KEYWORD_DISJOINT);
    setState(931);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 60, _ctx)) {
    case 1: {
      setState(929);
      qualified_name();
      break;
    }

    case 2: {
      setState(930);
      feature_chain();
      break;
    }

    default:
      break;
    }
    setState(933);
    match(KerMLParser::KEYWORD_FROM);
    setState(936);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 61, _ctx)) {
    case 1: {
      setState(934);
      qualified_name();
      break;
    }

    case 2: {
      setState(935);
      feature_chain();
      break;
    }

    default:
      break;
    }
    setState(938);
    relationship_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Owned_disjoiningContext ------------------------------------------------------------------

KerMLParser::Owned_disjoiningContext::Owned_disjoiningContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Qualified_nameContext* KerMLParser::Owned_disjoiningContext::qualified_name() {
  return getRuleContext<KerMLParser::Qualified_nameContext>(0);
}

KerMLParser::Feature_chainContext* KerMLParser::Owned_disjoiningContext::feature_chain() {
  return getRuleContext<KerMLParser::Feature_chainContext>(0);
}


size_t KerMLParser::Owned_disjoiningContext::getRuleIndex() const {
  return KerMLParser::RuleOwned_disjoining;
}

void KerMLParser::Owned_disjoiningContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOwned_disjoining(this);
}

void KerMLParser::Owned_disjoiningContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOwned_disjoining(this);
}

KerMLParser::Owned_disjoiningContext* KerMLParser::owned_disjoining() {
  Owned_disjoiningContext *_localctx = _tracker.createInstance<Owned_disjoiningContext>(_ctx, getState());
  enterRule(_localctx, 114, KerMLParser::RuleOwned_disjoining);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(942);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 62, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(940);
      qualified_name();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(941);
      feature_chain();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnioningContext ------------------------------------------------------------------

KerMLParser::UnioningContext::UnioningContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Qualified_nameContext* KerMLParser::UnioningContext::qualified_name() {
  return getRuleContext<KerMLParser::Qualified_nameContext>(0);
}

KerMLParser::Owned_feature_chainContext* KerMLParser::UnioningContext::owned_feature_chain() {
  return getRuleContext<KerMLParser::Owned_feature_chainContext>(0);
}


size_t KerMLParser::UnioningContext::getRuleIndex() const {
  return KerMLParser::RuleUnioning;
}

void KerMLParser::UnioningContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnioning(this);
}

void KerMLParser::UnioningContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnioning(this);
}

KerMLParser::UnioningContext* KerMLParser::unioning() {
  UnioningContext *_localctx = _tracker.createInstance<UnioningContext>(_ctx, getState());
  enterRule(_localctx, 116, KerMLParser::RuleUnioning);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(946);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 63, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(944);
      qualified_name();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(945);
      owned_feature_chain();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IntersectingContext ------------------------------------------------------------------

KerMLParser::IntersectingContext::IntersectingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Qualified_nameContext* KerMLParser::IntersectingContext::qualified_name() {
  return getRuleContext<KerMLParser::Qualified_nameContext>(0);
}

KerMLParser::Owned_feature_chainContext* KerMLParser::IntersectingContext::owned_feature_chain() {
  return getRuleContext<KerMLParser::Owned_feature_chainContext>(0);
}


size_t KerMLParser::IntersectingContext::getRuleIndex() const {
  return KerMLParser::RuleIntersecting;
}

void KerMLParser::IntersectingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIntersecting(this);
}

void KerMLParser::IntersectingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIntersecting(this);
}

KerMLParser::IntersectingContext* KerMLParser::intersecting() {
  IntersectingContext *_localctx = _tracker.createInstance<IntersectingContext>(_ctx, getState());
  enterRule(_localctx, 118, KerMLParser::RuleIntersecting);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(950);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 64, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(948);
      qualified_name();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(949);
      owned_feature_chain();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DifferencingContext ------------------------------------------------------------------

KerMLParser::DifferencingContext::DifferencingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Qualified_nameContext* KerMLParser::DifferencingContext::qualified_name() {
  return getRuleContext<KerMLParser::Qualified_nameContext>(0);
}

KerMLParser::Owned_feature_chainContext* KerMLParser::DifferencingContext::owned_feature_chain() {
  return getRuleContext<KerMLParser::Owned_feature_chainContext>(0);
}


size_t KerMLParser::DifferencingContext::getRuleIndex() const {
  return KerMLParser::RuleDifferencing;
}

void KerMLParser::DifferencingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDifferencing(this);
}

void KerMLParser::DifferencingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDifferencing(this);
}

KerMLParser::DifferencingContext* KerMLParser::differencing() {
  DifferencingContext *_localctx = _tracker.createInstance<DifferencingContext>(_ctx, getState());
  enterRule(_localctx, 120, KerMLParser::RuleDifferencing);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(954);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 65, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(952);
      qualified_name();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(953);
      owned_feature_chain();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Feature_memberContext ------------------------------------------------------------------

KerMLParser::Feature_memberContext::Feature_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Type_feature_memberContext* KerMLParser::Feature_memberContext::type_feature_member() {
  return getRuleContext<KerMLParser::Type_feature_memberContext>(0);
}

KerMLParser::Owned_feature_memberContext* KerMLParser::Feature_memberContext::owned_feature_member() {
  return getRuleContext<KerMLParser::Owned_feature_memberContext>(0);
}


size_t KerMLParser::Feature_memberContext::getRuleIndex() const {
  return KerMLParser::RuleFeature_member;
}

void KerMLParser::Feature_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFeature_member(this);
}

void KerMLParser::Feature_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFeature_member(this);
}

KerMLParser::Feature_memberContext* KerMLParser::feature_member() {
  Feature_memberContext *_localctx = _tracker.createInstance<Feature_memberContext>(_ctx, getState());
  enterRule(_localctx, 122, KerMLParser::RuleFeature_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(958);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 66, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(956);
      type_feature_member();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(957);
      owned_feature_member();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_feature_memberContext ------------------------------------------------------------------

KerMLParser::Type_feature_memberContext::Type_feature_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Member_prefixContext* KerMLParser::Type_feature_memberContext::member_prefix() {
  return getRuleContext<KerMLParser::Member_prefixContext>(0);
}

tree::TerminalNode* KerMLParser::Type_feature_memberContext::KEYWORD_MEMBER() {
  return getToken(KerMLParser::KEYWORD_MEMBER, 0);
}

KerMLParser::Feature_elementContext* KerMLParser::Type_feature_memberContext::feature_element() {
  return getRuleContext<KerMLParser::Feature_elementContext>(0);
}


size_t KerMLParser::Type_feature_memberContext::getRuleIndex() const {
  return KerMLParser::RuleType_feature_member;
}

void KerMLParser::Type_feature_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_feature_member(this);
}

void KerMLParser::Type_feature_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_feature_member(this);
}

KerMLParser::Type_feature_memberContext* KerMLParser::type_feature_member() {
  Type_feature_memberContext *_localctx = _tracker.createInstance<Type_feature_memberContext>(_ctx, getState());
  enterRule(_localctx, 124, KerMLParser::RuleType_feature_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(960);
    member_prefix();
    setState(961);
    match(KerMLParser::KEYWORD_MEMBER);
    setState(962);
    feature_element();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Owned_feature_memberContext ------------------------------------------------------------------

KerMLParser::Owned_feature_memberContext::Owned_feature_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Member_prefixContext* KerMLParser::Owned_feature_memberContext::member_prefix() {
  return getRuleContext<KerMLParser::Member_prefixContext>(0);
}

KerMLParser::Feature_elementContext* KerMLParser::Owned_feature_memberContext::feature_element() {
  return getRuleContext<KerMLParser::Feature_elementContext>(0);
}


size_t KerMLParser::Owned_feature_memberContext::getRuleIndex() const {
  return KerMLParser::RuleOwned_feature_member;
}

void KerMLParser::Owned_feature_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOwned_feature_member(this);
}

void KerMLParser::Owned_feature_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOwned_feature_member(this);
}

KerMLParser::Owned_feature_memberContext* KerMLParser::owned_feature_member() {
  Owned_feature_memberContext *_localctx = _tracker.createInstance<Owned_feature_memberContext>(_ctx, getState());
  enterRule(_localctx, 126, KerMLParser::RuleOwned_feature_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(964);
    member_prefix();
    setState(965);
    feature_element();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassifierContext ------------------------------------------------------------------

KerMLParser::ClassifierContext::ClassifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::ClassifierContext::KEYWORD_CLASSIFIER() {
  return getToken(KerMLParser::KEYWORD_CLASSIFIER, 0);
}

KerMLParser::Classifier_declarationContext* KerMLParser::ClassifierContext::classifier_declaration() {
  return getRuleContext<KerMLParser::Classifier_declarationContext>(0);
}

KerMLParser::Type_bodyContext* KerMLParser::ClassifierContext::type_body() {
  return getRuleContext<KerMLParser::Type_bodyContext>(0);
}

KerMLParser::Type_prefixContext* KerMLParser::ClassifierContext::type_prefix() {
  return getRuleContext<KerMLParser::Type_prefixContext>(0);
}


size_t KerMLParser::ClassifierContext::getRuleIndex() const {
  return KerMLParser::RuleClassifier;
}

void KerMLParser::ClassifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassifier(this);
}

void KerMLParser::ClassifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassifier(this);
}

KerMLParser::ClassifierContext* KerMLParser::classifier() {
  ClassifierContext *_localctx = _tracker.createInstance<ClassifierContext>(_ctx, getState());
  enterRule(_localctx, 128, KerMLParser::RuleClassifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(968);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 67, _ctx)) {
    case 1: {
      setState(967);
      type_prefix();
      break;
    }

    default:
      break;
    }
    setState(970);
    match(KerMLParser::KEYWORD_CLASSIFIER);
    setState(971);
    classifier_declaration();
    setState(972);
    type_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Classifier_declarationContext ------------------------------------------------------------------

KerMLParser::Classifier_declarationContext::Classifier_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::IdentificationContext* KerMLParser::Classifier_declarationContext::identification() {
  return getRuleContext<KerMLParser::IdentificationContext>(0);
}

tree::TerminalNode* KerMLParser::Classifier_declarationContext::KEYWORD_ALL() {
  return getToken(KerMLParser::KEYWORD_ALL, 0);
}

KerMLParser::Multiplicity_boundsContext* KerMLParser::Classifier_declarationContext::multiplicity_bounds() {
  return getRuleContext<KerMLParser::Multiplicity_boundsContext>(0);
}

KerMLParser::Superclassing_partContext* KerMLParser::Classifier_declarationContext::superclassing_part() {
  return getRuleContext<KerMLParser::Superclassing_partContext>(0);
}

KerMLParser::Conjugation_partContext* KerMLParser::Classifier_declarationContext::conjugation_part() {
  return getRuleContext<KerMLParser::Conjugation_partContext>(0);
}

std::vector<KerMLParser::Type_relationship_partContext *> KerMLParser::Classifier_declarationContext::type_relationship_part() {
  return getRuleContexts<KerMLParser::Type_relationship_partContext>();
}

KerMLParser::Type_relationship_partContext* KerMLParser::Classifier_declarationContext::type_relationship_part(size_t i) {
  return getRuleContext<KerMLParser::Type_relationship_partContext>(i);
}


size_t KerMLParser::Classifier_declarationContext::getRuleIndex() const {
  return KerMLParser::RuleClassifier_declaration;
}

void KerMLParser::Classifier_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassifier_declaration(this);
}

void KerMLParser::Classifier_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassifier_declaration(this);
}

KerMLParser::Classifier_declarationContext* KerMLParser::classifier_declaration() {
  Classifier_declarationContext *_localctx = _tracker.createInstance<Classifier_declarationContext>(_ctx, getState());
  enterRule(_localctx, 130, KerMLParser::RuleClassifier_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(975);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::KEYWORD_ALL) {
      setState(974);
      match(KerMLParser::KEYWORD_ALL);
    }
    setState(977);
    identification();
    setState(979);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::SYMBOL_SQUARE_BRACKET_OPEN) {
      setState(978);
      multiplicity_bounds();
    }
    setState(983);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 70, _ctx)) {
    case 1: {
      setState(981);
      superclassing_part();
      break;
    }

    case 2: {
      setState(982);
      conjugation_part();
      break;
    }

    default:
      break;
    }
    setState(988);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 2251821288521728) != 0) || _la == KerMLParser::KEYWORD_UNIONS) {
      setState(985);
      type_relationship_part();
      setState(990);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Superclassing_partContext ------------------------------------------------------------------

KerMLParser::Superclassing_partContext::Superclassing_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Superclassing_partContext::SPECIALIZES() {
  return getToken(KerMLParser::SPECIALIZES, 0);
}

std::vector<KerMLParser::Owned_subclassificationContext *> KerMLParser::Superclassing_partContext::owned_subclassification() {
  return getRuleContexts<KerMLParser::Owned_subclassificationContext>();
}

KerMLParser::Owned_subclassificationContext* KerMLParser::Superclassing_partContext::owned_subclassification(size_t i) {
  return getRuleContext<KerMLParser::Owned_subclassificationContext>(i);
}

std::vector<tree::TerminalNode *> KerMLParser::Superclassing_partContext::SYMBOL_COMMA() {
  return getTokens(KerMLParser::SYMBOL_COMMA);
}

tree::TerminalNode* KerMLParser::Superclassing_partContext::SYMBOL_COMMA(size_t i) {
  return getToken(KerMLParser::SYMBOL_COMMA, i);
}


size_t KerMLParser::Superclassing_partContext::getRuleIndex() const {
  return KerMLParser::RuleSuperclassing_part;
}

void KerMLParser::Superclassing_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSuperclassing_part(this);
}

void KerMLParser::Superclassing_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSuperclassing_part(this);
}

KerMLParser::Superclassing_partContext* KerMLParser::superclassing_part() {
  Superclassing_partContext *_localctx = _tracker.createInstance<Superclassing_partContext>(_ctx, getState());
  enterRule(_localctx, 132, KerMLParser::RuleSuperclassing_part);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(991);
    match(KerMLParser::SPECIALIZES);
    setState(992);
    owned_subclassification();
    setState(997);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == KerMLParser::SYMBOL_COMMA) {
      setState(993);
      match(KerMLParser::SYMBOL_COMMA);
      setState(994);
      owned_subclassification();
      setState(999);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubclassificationContext ------------------------------------------------------------------

KerMLParser::SubclassificationContext::SubclassificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::SubclassificationContext::KEYWORD_SUBCLASSIFIER() {
  return getToken(KerMLParser::KEYWORD_SUBCLASSIFIER, 0);
}

std::vector<KerMLParser::Qualified_nameContext *> KerMLParser::SubclassificationContext::qualified_name() {
  return getRuleContexts<KerMLParser::Qualified_nameContext>();
}

KerMLParser::Qualified_nameContext* KerMLParser::SubclassificationContext::qualified_name(size_t i) {
  return getRuleContext<KerMLParser::Qualified_nameContext>(i);
}

tree::TerminalNode* KerMLParser::SubclassificationContext::SPECIALIZES() {
  return getToken(KerMLParser::SPECIALIZES, 0);
}

KerMLParser::Relationship_bodyContext* KerMLParser::SubclassificationContext::relationship_body() {
  return getRuleContext<KerMLParser::Relationship_bodyContext>(0);
}

tree::TerminalNode* KerMLParser::SubclassificationContext::KEYWORD_SPECILIZATION() {
  return getToken(KerMLParser::KEYWORD_SPECILIZATION, 0);
}

KerMLParser::IdentificationContext* KerMLParser::SubclassificationContext::identification() {
  return getRuleContext<KerMLParser::IdentificationContext>(0);
}


size_t KerMLParser::SubclassificationContext::getRuleIndex() const {
  return KerMLParser::RuleSubclassification;
}

void KerMLParser::SubclassificationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubclassification(this);
}

void KerMLParser::SubclassificationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubclassification(this);
}

KerMLParser::SubclassificationContext* KerMLParser::subclassification() {
  SubclassificationContext *_localctx = _tracker.createInstance<SubclassificationContext>(_ctx, getState());
  enterRule(_localctx, 134, KerMLParser::RuleSubclassification);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1002);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::KEYWORD_SPECILIZATION) {
      setState(1000);
      match(KerMLParser::KEYWORD_SPECILIZATION);
      setState(1001);
      identification();
    }
    setState(1004);
    match(KerMLParser::KEYWORD_SUBCLASSIFIER);
    setState(1005);
    qualified_name();
    setState(1006);
    match(KerMLParser::SPECIALIZES);
    setState(1007);
    qualified_name();
    setState(1008);
    relationship_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Owned_subclassificationContext ------------------------------------------------------------------

KerMLParser::Owned_subclassificationContext::Owned_subclassificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Qualified_nameContext* KerMLParser::Owned_subclassificationContext::qualified_name() {
  return getRuleContext<KerMLParser::Qualified_nameContext>(0);
}


size_t KerMLParser::Owned_subclassificationContext::getRuleIndex() const {
  return KerMLParser::RuleOwned_subclassification;
}

void KerMLParser::Owned_subclassificationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOwned_subclassification(this);
}

void KerMLParser::Owned_subclassificationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOwned_subclassification(this);
}

KerMLParser::Owned_subclassificationContext* KerMLParser::owned_subclassification() {
  Owned_subclassificationContext *_localctx = _tracker.createInstance<Owned_subclassificationContext>(_ctx, getState());
  enterRule(_localctx, 136, KerMLParser::RuleOwned_subclassification);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1010);
    qualified_name();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FeatureContext ------------------------------------------------------------------

KerMLParser::FeatureContext::FeatureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Type_bodyContext* KerMLParser::FeatureContext::type_body() {
  return getRuleContext<KerMLParser::Type_bodyContext>(0);
}

tree::TerminalNode* KerMLParser::FeatureContext::KEYWORD_FEATURE() {
  return getToken(KerMLParser::KEYWORD_FEATURE, 0);
}

KerMLParser::Prefix_metadata_memberContext* KerMLParser::FeatureContext::prefix_metadata_member() {
  return getRuleContext<KerMLParser::Prefix_metadata_memberContext>(0);
}

KerMLParser::Feature_prefixContext* KerMLParser::FeatureContext::feature_prefix() {
  return getRuleContext<KerMLParser::Feature_prefixContext>(0);
}

KerMLParser::SubsettingsContext* KerMLParser::FeatureContext::subsettings() {
  return getRuleContext<KerMLParser::SubsettingsContext>(0);
}

KerMLParser::Feature_assignmentContext* KerMLParser::FeatureContext::feature_assignment() {
  return getRuleContext<KerMLParser::Feature_assignmentContext>(0);
}

KerMLParser::Feature_valueContext* KerMLParser::FeatureContext::feature_value() {
  return getRuleContext<KerMLParser::Feature_valueContext>(0);
}

KerMLParser::Feature_declarationContext* KerMLParser::FeatureContext::feature_declaration() {
  return getRuleContext<KerMLParser::Feature_declarationContext>(0);
}


size_t KerMLParser::FeatureContext::getRuleIndex() const {
  return KerMLParser::RuleFeature;
}

void KerMLParser::FeatureContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFeature(this);
}

void KerMLParser::FeatureContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFeature(this);
}

KerMLParser::FeatureContext* KerMLParser::feature() {
  FeatureContext *_localctx = _tracker.createInstance<FeatureContext>(_ctx, getState());
  enterRule(_localctx, 138, KerMLParser::RuleFeature);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1013);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 74, _ctx)) {
    case 1: {
      setState(1012);
      feature_prefix();
      break;
    }

    default:
      break;
    }
    setState(1019);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 75, _ctx)) {
    case 1: {
      setState(1015);
      match(KerMLParser::KEYWORD_FEATURE);
      setState(1016);
      feature_declaration();
      break;
    }

    case 2: {
      setState(1017);
      match(KerMLParser::KEYWORD_FEATURE);
      break;
    }

    case 3: {
      setState(1018);
      prefix_metadata_member();
      break;
    }

    default:
      break;
    }
    setState(1022);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::SUBSETS) {
      setState(1021);
      subsettings();
    }
    setState(1025);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::SYMBOL_ASSIGN) {
      setState(1024);
      feature_assignment();
    }
    setState(1028);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::KEYWORD_DEFAULT || _la == KerMLParser::SYMBOL_DEF_ASSIGN

    || _la == KerMLParser::SYMBOL_EQUALS) {
      setState(1027);
      feature_value();
    }
    setState(1030);
    type_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Feature_prefixContext ------------------------------------------------------------------

KerMLParser::Feature_prefixContext::Feature_prefixContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Feature_directionContext* KerMLParser::Feature_prefixContext::feature_direction() {
  return getRuleContext<KerMLParser::Feature_directionContext>(0);
}

tree::TerminalNode* KerMLParser::Feature_prefixContext::KEYWORD_ABSTRACT() {
  return getToken(KerMLParser::KEYWORD_ABSTRACT, 0);
}

tree::TerminalNode* KerMLParser::Feature_prefixContext::KEYWORD_READONLY() {
  return getToken(KerMLParser::KEYWORD_READONLY, 0);
}

tree::TerminalNode* KerMLParser::Feature_prefixContext::KEYWORD_DERIVED() {
  return getToken(KerMLParser::KEYWORD_DERIVED, 0);
}

tree::TerminalNode* KerMLParser::Feature_prefixContext::KEYWORD_END() {
  return getToken(KerMLParser::KEYWORD_END, 0);
}

std::vector<KerMLParser::Prefix_metadata_memberContext *> KerMLParser::Feature_prefixContext::prefix_metadata_member() {
  return getRuleContexts<KerMLParser::Prefix_metadata_memberContext>();
}

KerMLParser::Prefix_metadata_memberContext* KerMLParser::Feature_prefixContext::prefix_metadata_member(size_t i) {
  return getRuleContext<KerMLParser::Prefix_metadata_memberContext>(i);
}

tree::TerminalNode* KerMLParser::Feature_prefixContext::KEYWORD_VAR() {
  return getToken(KerMLParser::KEYWORD_VAR, 0);
}

tree::TerminalNode* KerMLParser::Feature_prefixContext::KEYWORD_COMPOSITE() {
  return getToken(KerMLParser::KEYWORD_COMPOSITE, 0);
}

tree::TerminalNode* KerMLParser::Feature_prefixContext::KEYWORD_PORTION() {
  return getToken(KerMLParser::KEYWORD_PORTION, 0);
}


size_t KerMLParser::Feature_prefixContext::getRuleIndex() const {
  return KerMLParser::RuleFeature_prefix;
}

void KerMLParser::Feature_prefixContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFeature_prefix(this);
}

void KerMLParser::Feature_prefixContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFeature_prefix(this);
}

KerMLParser::Feature_prefixContext* KerMLParser::feature_prefix() {
  Feature_prefixContext *_localctx = _tracker.createInstance<Feature_prefixContext>(_ctx, getState());
  enterRule(_localctx, 140, KerMLParser::RuleFeature_prefix);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1033);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 54) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 54)) & 524291) != 0)) {
      setState(1032);
      feature_direction();
    }
    setState(1036);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::KEYWORD_ABSTRACT) {
      setState(1035);
      match(KerMLParser::KEYWORD_ABSTRACT);
    }
    setState(1039);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::KEYWORD_COMPOSITE || _la == KerMLParser::KEYWORD_PORTION

    || _la == KerMLParser::KEYWORD_VAR) {
      setState(1038);
      _la = _input->LA(1);
      if (!(_la == KerMLParser::KEYWORD_COMPOSITE || _la == KerMLParser::KEYWORD_PORTION

      || _la == KerMLParser::KEYWORD_VAR)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(1042);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::KEYWORD_READONLY) {
      setState(1041);
      match(KerMLParser::KEYWORD_READONLY);
    }
    setState(1045);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::KEYWORD_DERIVED) {
      setState(1044);
      match(KerMLParser::KEYWORD_DERIVED);
    }
    setState(1048);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::KEYWORD_END) {
      setState(1047);
      match(KerMLParser::KEYWORD_END);
    }
    setState(1053);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 85, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1050);
        prefix_metadata_member(); 
      }
      setState(1055);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 85, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Feature_directionContext ------------------------------------------------------------------

KerMLParser::Feature_directionContext::Feature_directionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Feature_directionContext::KEYWORD_IN() {
  return getToken(KerMLParser::KEYWORD_IN, 0);
}

tree::TerminalNode* KerMLParser::Feature_directionContext::KEYWORD_OUT() {
  return getToken(KerMLParser::KEYWORD_OUT, 0);
}

tree::TerminalNode* KerMLParser::Feature_directionContext::KEYWORD_INOUT() {
  return getToken(KerMLParser::KEYWORD_INOUT, 0);
}


size_t KerMLParser::Feature_directionContext::getRuleIndex() const {
  return KerMLParser::RuleFeature_direction;
}

void KerMLParser::Feature_directionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFeature_direction(this);
}

void KerMLParser::Feature_directionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFeature_direction(this);
}

KerMLParser::Feature_directionContext* KerMLParser::feature_direction() {
  Feature_directionContext *_localctx = _tracker.createInstance<Feature_directionContext>(_ctx, getState());
  enterRule(_localctx, 142, KerMLParser::RuleFeature_direction);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1056);
    _la = _input->LA(1);
    if (!(((((_la - 54) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 54)) & 524291) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Feature_declarationContext ------------------------------------------------------------------

KerMLParser::Feature_declarationContext::Feature_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Feature_identificationContext* KerMLParser::Feature_declarationContext::feature_identification() {
  return getRuleContext<KerMLParser::Feature_identificationContext>(0);
}

KerMLParser::Feature_specialization_partContext* KerMLParser::Feature_declarationContext::feature_specialization_part() {
  return getRuleContext<KerMLParser::Feature_specialization_partContext>(0);
}

KerMLParser::Conjugation_partContext* KerMLParser::Feature_declarationContext::conjugation_part() {
  return getRuleContext<KerMLParser::Conjugation_partContext>(0);
}

tree::TerminalNode* KerMLParser::Feature_declarationContext::KEYWORD_ALL() {
  return getToken(KerMLParser::KEYWORD_ALL, 0);
}

std::vector<KerMLParser::Feature_relationship_partContext *> KerMLParser::Feature_declarationContext::feature_relationship_part() {
  return getRuleContexts<KerMLParser::Feature_relationship_partContext>();
}

KerMLParser::Feature_relationship_partContext* KerMLParser::Feature_declarationContext::feature_relationship_part(size_t i) {
  return getRuleContext<KerMLParser::Feature_relationship_partContext>(i);
}

KerMLParser::Type_bodyContext* KerMLParser::Feature_declarationContext::type_body() {
  return getRuleContext<KerMLParser::Type_bodyContext>(0);
}


size_t KerMLParser::Feature_declarationContext::getRuleIndex() const {
  return KerMLParser::RuleFeature_declaration;
}

void KerMLParser::Feature_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFeature_declaration(this);
}

void KerMLParser::Feature_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFeature_declaration(this);
}

KerMLParser::Feature_declarationContext* KerMLParser::feature_declaration() {
  Feature_declarationContext *_localctx = _tracker.createInstance<Feature_declarationContext>(_ctx, getState());
  enterRule(_localctx, 144, KerMLParser::RuleFeature_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1059);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::KEYWORD_ALL) {
      setState(1058);
      match(KerMLParser::KEYWORD_ALL);
    }
    setState(1068);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case KerMLParser::SYMBOL_SMALLER:
      case KerMLParser::NAME: {
        setState(1061);
        feature_identification();
        setState(1064);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 87, _ctx)) {
        case 1: {
          setState(1062);
          feature_specialization_part();
          break;
        }

        case 2: {
          setState(1063);
          conjugation_part();
          break;
        }

        default:
          break;
        }
        break;
      }

      case KerMLParser::TYPED_BY:
      case KerMLParser::SUBSETS:
      case KerMLParser::REFERENCES:
      case KerMLParser::REDEFINES:
      case KerMLParser::KEYWORD_IN:
      case KerMLParser::KEYWORD_INOUT:
      case KerMLParser::KEYWORD_OUT:
      case KerMLParser::SYMBOL_SQUARE_BRACKET_OPEN: {
        setState(1066);
        feature_specialization_part();
        break;
      }

      case KerMLParser::CONJUNGATES: {
        setState(1067);
        conjugation_part();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(1073);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 290484396464013312) != 0) || _la == KerMLParser::KEYWORD_UNIONS) {
      setState(1070);
      feature_relationship_part();
      setState(1075);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1077);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 90, _ctx)) {
    case 1: {
      setState(1076);
      type_body();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Feature_identificationContext ------------------------------------------------------------------

KerMLParser::Feature_identificationContext::Feature_identificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Feature_identificationContext::SYMBOL_SMALLER() {
  return getToken(KerMLParser::SYMBOL_SMALLER, 0);
}

std::vector<tree::TerminalNode *> KerMLParser::Feature_identificationContext::NAME() {
  return getTokens(KerMLParser::NAME);
}

tree::TerminalNode* KerMLParser::Feature_identificationContext::NAME(size_t i) {
  return getToken(KerMLParser::NAME, i);
}

tree::TerminalNode* KerMLParser::Feature_identificationContext::SYMBOL_GREATER() {
  return getToken(KerMLParser::SYMBOL_GREATER, 0);
}


size_t KerMLParser::Feature_identificationContext::getRuleIndex() const {
  return KerMLParser::RuleFeature_identification;
}

void KerMLParser::Feature_identificationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFeature_identification(this);
}

void KerMLParser::Feature_identificationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFeature_identification(this);
}

KerMLParser::Feature_identificationContext* KerMLParser::feature_identification() {
  Feature_identificationContext *_localctx = _tracker.createInstance<Feature_identificationContext>(_ctx, getState());
  enterRule(_localctx, 146, KerMLParser::RuleFeature_identification);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1086);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case KerMLParser::SYMBOL_SMALLER: {
        enterOuterAlt(_localctx, 1);
        setState(1079);
        match(KerMLParser::SYMBOL_SMALLER);
        setState(1080);
        match(KerMLParser::NAME);
        setState(1081);
        match(KerMLParser::SYMBOL_GREATER);
        setState(1083);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == KerMLParser::NAME) {
          setState(1082);
          match(KerMLParser::NAME);
        }
        break;
      }

      case KerMLParser::NAME: {
        enterOuterAlt(_localctx, 2);
        setState(1085);
        match(KerMLParser::NAME);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Feature_relationship_partContext ------------------------------------------------------------------

KerMLParser::Feature_relationship_partContext::Feature_relationship_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Type_relationship_partContext* KerMLParser::Feature_relationship_partContext::type_relationship_part() {
  return getRuleContext<KerMLParser::Type_relationship_partContext>(0);
}

KerMLParser::Chaining_partContext* KerMLParser::Feature_relationship_partContext::chaining_part() {
  return getRuleContext<KerMLParser::Chaining_partContext>(0);
}

KerMLParser::Inverting_partContext* KerMLParser::Feature_relationship_partContext::inverting_part() {
  return getRuleContext<KerMLParser::Inverting_partContext>(0);
}

KerMLParser::Type_featuring_partContext* KerMLParser::Feature_relationship_partContext::type_featuring_part() {
  return getRuleContext<KerMLParser::Type_featuring_partContext>(0);
}


size_t KerMLParser::Feature_relationship_partContext::getRuleIndex() const {
  return KerMLParser::RuleFeature_relationship_part;
}

void KerMLParser::Feature_relationship_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFeature_relationship_part(this);
}

void KerMLParser::Feature_relationship_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFeature_relationship_part(this);
}

KerMLParser::Feature_relationship_partContext* KerMLParser::feature_relationship_part() {
  Feature_relationship_partContext *_localctx = _tracker.createInstance<Feature_relationship_partContext>(_ctx, getState());
  enterRule(_localctx, 148, KerMLParser::RuleFeature_relationship_part);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1092);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case KerMLParser::KEYWORD_DIFFERENCES:
      case KerMLParser::KEYWORD_DISJOINT:
      case KerMLParser::KEYWORD_INTERSECTS:
      case KerMLParser::KEYWORD_UNIONS: {
        enterOuterAlt(_localctx, 1);
        setState(1088);
        type_relationship_part();
        break;
      }

      case KerMLParser::KEYWORD_CHAINS: {
        enterOuterAlt(_localctx, 2);
        setState(1089);
        chaining_part();
        break;
      }

      case KerMLParser::KEYWORD_INVERSE: {
        enterOuterAlt(_localctx, 3);
        setState(1090);
        inverting_part();
        break;
      }

      case KerMLParser::KEYWORD_FEATURED: {
        enterOuterAlt(_localctx, 4);
        setState(1091);
        type_featuring_part();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Chaining_partContext ------------------------------------------------------------------

KerMLParser::Chaining_partContext::Chaining_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Chaining_partContext::KEYWORD_CHAINS() {
  return getToken(KerMLParser::KEYWORD_CHAINS, 0);
}

KerMLParser::Owned_feature_chainingContext* KerMLParser::Chaining_partContext::owned_feature_chaining() {
  return getRuleContext<KerMLParser::Owned_feature_chainingContext>(0);
}

KerMLParser::Feature_chainContext* KerMLParser::Chaining_partContext::feature_chain() {
  return getRuleContext<KerMLParser::Feature_chainContext>(0);
}


size_t KerMLParser::Chaining_partContext::getRuleIndex() const {
  return KerMLParser::RuleChaining_part;
}

void KerMLParser::Chaining_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterChaining_part(this);
}

void KerMLParser::Chaining_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitChaining_part(this);
}

KerMLParser::Chaining_partContext* KerMLParser::chaining_part() {
  Chaining_partContext *_localctx = _tracker.createInstance<Chaining_partContext>(_ctx, getState());
  enterRule(_localctx, 150, KerMLParser::RuleChaining_part);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1094);
    match(KerMLParser::KEYWORD_CHAINS);
    setState(1097);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 94, _ctx)) {
    case 1: {
      setState(1095);
      owned_feature_chaining();
      break;
    }

    case 2: {
      setState(1096);
      feature_chain();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Inverting_partContext ------------------------------------------------------------------

KerMLParser::Inverting_partContext::Inverting_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Inverting_partContext::KEYWORD_INVERSE() {
  return getToken(KerMLParser::KEYWORD_INVERSE, 0);
}

tree::TerminalNode* KerMLParser::Inverting_partContext::KEYWORD_OF() {
  return getToken(KerMLParser::KEYWORD_OF, 0);
}

KerMLParser::Owned_feature_invertingContext* KerMLParser::Inverting_partContext::owned_feature_inverting() {
  return getRuleContext<KerMLParser::Owned_feature_invertingContext>(0);
}


size_t KerMLParser::Inverting_partContext::getRuleIndex() const {
  return KerMLParser::RuleInverting_part;
}

void KerMLParser::Inverting_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInverting_part(this);
}

void KerMLParser::Inverting_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInverting_part(this);
}

KerMLParser::Inverting_partContext* KerMLParser::inverting_part() {
  Inverting_partContext *_localctx = _tracker.createInstance<Inverting_partContext>(_ctx, getState());
  enterRule(_localctx, 152, KerMLParser::RuleInverting_part);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1099);
    match(KerMLParser::KEYWORD_INVERSE);
    setState(1100);
    match(KerMLParser::KEYWORD_OF);
    setState(1101);
    owned_feature_inverting();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_featuring_partContext ------------------------------------------------------------------

KerMLParser::Type_featuring_partContext::Type_featuring_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Type_featuring_partContext::KEYWORD_FEATURED() {
  return getToken(KerMLParser::KEYWORD_FEATURED, 0);
}

tree::TerminalNode* KerMLParser::Type_featuring_partContext::KEYWORD_BY() {
  return getToken(KerMLParser::KEYWORD_BY, 0);
}

std::vector<KerMLParser::Owned_type_featuringContext *> KerMLParser::Type_featuring_partContext::owned_type_featuring() {
  return getRuleContexts<KerMLParser::Owned_type_featuringContext>();
}

KerMLParser::Owned_type_featuringContext* KerMLParser::Type_featuring_partContext::owned_type_featuring(size_t i) {
  return getRuleContext<KerMLParser::Owned_type_featuringContext>(i);
}

std::vector<tree::TerminalNode *> KerMLParser::Type_featuring_partContext::SYMBOL_COMMA() {
  return getTokens(KerMLParser::SYMBOL_COMMA);
}

tree::TerminalNode* KerMLParser::Type_featuring_partContext::SYMBOL_COMMA(size_t i) {
  return getToken(KerMLParser::SYMBOL_COMMA, i);
}


size_t KerMLParser::Type_featuring_partContext::getRuleIndex() const {
  return KerMLParser::RuleType_featuring_part;
}

void KerMLParser::Type_featuring_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_featuring_part(this);
}

void KerMLParser::Type_featuring_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_featuring_part(this);
}

KerMLParser::Type_featuring_partContext* KerMLParser::type_featuring_part() {
  Type_featuring_partContext *_localctx = _tracker.createInstance<Type_featuring_partContext>(_ctx, getState());
  enterRule(_localctx, 154, KerMLParser::RuleType_featuring_part);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1103);
    match(KerMLParser::KEYWORD_FEATURED);
    setState(1104);
    match(KerMLParser::KEYWORD_BY);
    setState(1105);
    owned_type_featuring();
    setState(1110);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == KerMLParser::SYMBOL_COMMA) {
      setState(1106);
      match(KerMLParser::SYMBOL_COMMA);
      setState(1107);
      owned_type_featuring();
      setState(1112);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Feature_specialization_partContext ------------------------------------------------------------------

KerMLParser::Feature_specialization_partContext::Feature_specialization_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<KerMLParser::Feature_specilizationContext *> KerMLParser::Feature_specialization_partContext::feature_specilization() {
  return getRuleContexts<KerMLParser::Feature_specilizationContext>();
}

KerMLParser::Feature_specilizationContext* KerMLParser::Feature_specialization_partContext::feature_specilization(size_t i) {
  return getRuleContext<KerMLParser::Feature_specilizationContext>(i);
}

KerMLParser::Multiplicity_partContext* KerMLParser::Feature_specialization_partContext::multiplicity_part() {
  return getRuleContext<KerMLParser::Multiplicity_partContext>(0);
}


size_t KerMLParser::Feature_specialization_partContext::getRuleIndex() const {
  return KerMLParser::RuleFeature_specialization_part;
}

void KerMLParser::Feature_specialization_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFeature_specialization_part(this);
}

void KerMLParser::Feature_specialization_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFeature_specialization_part(this);
}

KerMLParser::Feature_specialization_partContext* KerMLParser::feature_specialization_part() {
  Feature_specialization_partContext *_localctx = _tracker.createInstance<Feature_specialization_partContext>(_ctx, getState());
  enterRule(_localctx, 156, KerMLParser::RuleFeature_specialization_part);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1133);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case KerMLParser::TYPED_BY:
      case KerMLParser::SUBSETS:
      case KerMLParser::REFERENCES:
      case KerMLParser::REDEFINES:
      case KerMLParser::KEYWORD_IN:
      case KerMLParser::KEYWORD_INOUT:
      case KerMLParser::KEYWORD_OUT: {
        enterOuterAlt(_localctx, 1);
        setState(1114); 
        _errHandler->sync(this);
        alt = 1;
        do {
          switch (alt) {
            case 1: {
                  setState(1113);
                  feature_specilization();
                  break;
                }

          default:
            throw NoViableAltException(this);
          }
          setState(1116); 
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 96, _ctx);
        } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
        setState(1119);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == KerMLParser::SYMBOL_SQUARE_BRACKET_OPEN) {
          setState(1118);
          multiplicity_part();
        }
        setState(1124);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 98, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(1121);
            feature_specilization(); 
          }
          setState(1126);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 98, _ctx);
        }
        break;
      }

      case KerMLParser::SYMBOL_SQUARE_BRACKET_OPEN: {
        enterOuterAlt(_localctx, 2);
        setState(1127);
        multiplicity_part();
        setState(1129); 
        _errHandler->sync(this);
        alt = 1;
        do {
          switch (alt) {
            case 1: {
                  setState(1128);
                  feature_specilization();
                  break;
                }

          default:
            throw NoViableAltException(this);
          }
          setState(1131); 
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 99, _ctx);
        } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Multiplicity_partContext ------------------------------------------------------------------

KerMLParser::Multiplicity_partContext::Multiplicity_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Multiplicity_boundsContext* KerMLParser::Multiplicity_partContext::multiplicity_bounds() {
  return getRuleContext<KerMLParser::Multiplicity_boundsContext>(0);
}

tree::TerminalNode* KerMLParser::Multiplicity_partContext::KEYWORD_ORDERED() {
  return getToken(KerMLParser::KEYWORD_ORDERED, 0);
}

tree::TerminalNode* KerMLParser::Multiplicity_partContext::KEYWORD_NONUNIQUE() {
  return getToken(KerMLParser::KEYWORD_NONUNIQUE, 0);
}


size_t KerMLParser::Multiplicity_partContext::getRuleIndex() const {
  return KerMLParser::RuleMultiplicity_part;
}

void KerMLParser::Multiplicity_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMultiplicity_part(this);
}

void KerMLParser::Multiplicity_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMultiplicity_part(this);
}

KerMLParser::Multiplicity_partContext* KerMLParser::multiplicity_part() {
  Multiplicity_partContext *_localctx = _tracker.createInstance<Multiplicity_partContext>(_ctx, getState());
  enterRule(_localctx, 158, KerMLParser::RuleMultiplicity_part);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1135);
    multiplicity_bounds();
    setState(1148);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 105, _ctx)) {
    case 1: {
      setState(1140);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == KerMLParser::KEYWORD_ORDERED) {
        setState(1136);
        match(KerMLParser::KEYWORD_ORDERED);
        setState(1138);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == KerMLParser::KEYWORD_NONUNIQUE) {
          setState(1137);
          match(KerMLParser::KEYWORD_NONUNIQUE);
        }
      }
      break;
    }

    case 2: {
      setState(1146);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == KerMLParser::KEYWORD_NONUNIQUE

      || _la == KerMLParser::KEYWORD_ORDERED) {
        setState(1143);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == KerMLParser::KEYWORD_NONUNIQUE) {
          setState(1142);
          match(KerMLParser::KEYWORD_NONUNIQUE);
        }
        setState(1145);
        match(KerMLParser::KEYWORD_ORDERED);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Feature_specilizationContext ------------------------------------------------------------------

KerMLParser::Feature_specilizationContext::Feature_specilizationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::TypingsContext* KerMLParser::Feature_specilizationContext::typings() {
  return getRuleContext<KerMLParser::TypingsContext>(0);
}

KerMLParser::SubsettingsContext* KerMLParser::Feature_specilizationContext::subsettings() {
  return getRuleContext<KerMLParser::SubsettingsContext>(0);
}

KerMLParser::ReferencesContext* KerMLParser::Feature_specilizationContext::references() {
  return getRuleContext<KerMLParser::ReferencesContext>(0);
}

KerMLParser::RedefinitionsContext* KerMLParser::Feature_specilizationContext::redefinitions() {
  return getRuleContext<KerMLParser::RedefinitionsContext>(0);
}


size_t KerMLParser::Feature_specilizationContext::getRuleIndex() const {
  return KerMLParser::RuleFeature_specilization;
}

void KerMLParser::Feature_specilizationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFeature_specilization(this);
}

void KerMLParser::Feature_specilizationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFeature_specilization(this);
}

KerMLParser::Feature_specilizationContext* KerMLParser::feature_specilization() {
  Feature_specilizationContext *_localctx = _tracker.createInstance<Feature_specilizationContext>(_ctx, getState());
  enterRule(_localctx, 160, KerMLParser::RuleFeature_specilization);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1154);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case KerMLParser::TYPED_BY: {
        enterOuterAlt(_localctx, 1);
        setState(1150);
        typings();
        break;
      }

      case KerMLParser::SUBSETS: {
        enterOuterAlt(_localctx, 2);
        setState(1151);
        subsettings();
        break;
      }

      case KerMLParser::REFERENCES: {
        enterOuterAlt(_localctx, 3);
        setState(1152);
        references();
        break;
      }

      case KerMLParser::REDEFINES:
      case KerMLParser::KEYWORD_IN:
      case KerMLParser::KEYWORD_INOUT:
      case KerMLParser::KEYWORD_OUT: {
        enterOuterAlt(_localctx, 4);
        setState(1153);
        redefinitions();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypingsContext ------------------------------------------------------------------

KerMLParser::TypingsContext::TypingsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Typed_byContext* KerMLParser::TypingsContext::typed_by() {
  return getRuleContext<KerMLParser::Typed_byContext>(0);
}

std::vector<tree::TerminalNode *> KerMLParser::TypingsContext::SYMBOL_COMMA() {
  return getTokens(KerMLParser::SYMBOL_COMMA);
}

tree::TerminalNode* KerMLParser::TypingsContext::SYMBOL_COMMA(size_t i) {
  return getToken(KerMLParser::SYMBOL_COMMA, i);
}

std::vector<KerMLParser::Owned_feature_typingContext *> KerMLParser::TypingsContext::owned_feature_typing() {
  return getRuleContexts<KerMLParser::Owned_feature_typingContext>();
}

KerMLParser::Owned_feature_typingContext* KerMLParser::TypingsContext::owned_feature_typing(size_t i) {
  return getRuleContext<KerMLParser::Owned_feature_typingContext>(i);
}


size_t KerMLParser::TypingsContext::getRuleIndex() const {
  return KerMLParser::RuleTypings;
}

void KerMLParser::TypingsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypings(this);
}

void KerMLParser::TypingsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypings(this);
}

KerMLParser::TypingsContext* KerMLParser::typings() {
  TypingsContext *_localctx = _tracker.createInstance<TypingsContext>(_ctx, getState());
  enterRule(_localctx, 162, KerMLParser::RuleTypings);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1156);
    typed_by();
    setState(1161);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == KerMLParser::SYMBOL_COMMA) {
      setState(1157);
      match(KerMLParser::SYMBOL_COMMA);
      setState(1158);
      owned_feature_typing();
      setState(1163);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Typed_byContext ------------------------------------------------------------------

KerMLParser::Typed_byContext::Typed_byContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Typed_byContext::TYPED_BY() {
  return getToken(KerMLParser::TYPED_BY, 0);
}

KerMLParser::Owned_feature_typingContext* KerMLParser::Typed_byContext::owned_feature_typing() {
  return getRuleContext<KerMLParser::Owned_feature_typingContext>(0);
}


size_t KerMLParser::Typed_byContext::getRuleIndex() const {
  return KerMLParser::RuleTyped_by;
}

void KerMLParser::Typed_byContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTyped_by(this);
}

void KerMLParser::Typed_byContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTyped_by(this);
}

KerMLParser::Typed_byContext* KerMLParser::typed_by() {
  Typed_byContext *_localctx = _tracker.createInstance<Typed_byContext>(_ctx, getState());
  enterRule(_localctx, 164, KerMLParser::RuleTyped_by);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1164);
    match(KerMLParser::TYPED_BY);
    setState(1165);
    owned_feature_typing();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubsettingsContext ------------------------------------------------------------------

KerMLParser::SubsettingsContext::SubsettingsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::SubsetsContext* KerMLParser::SubsettingsContext::subsets() {
  return getRuleContext<KerMLParser::SubsetsContext>(0);
}

std::vector<KerMLParser::Owned_subsettingContext *> KerMLParser::SubsettingsContext::owned_subsetting() {
  return getRuleContexts<KerMLParser::Owned_subsettingContext>();
}

KerMLParser::Owned_subsettingContext* KerMLParser::SubsettingsContext::owned_subsetting(size_t i) {
  return getRuleContext<KerMLParser::Owned_subsettingContext>(i);
}

std::vector<tree::TerminalNode *> KerMLParser::SubsettingsContext::SYMBOL_COMMA() {
  return getTokens(KerMLParser::SYMBOL_COMMA);
}

tree::TerminalNode* KerMLParser::SubsettingsContext::SYMBOL_COMMA(size_t i) {
  return getToken(KerMLParser::SYMBOL_COMMA, i);
}


size_t KerMLParser::SubsettingsContext::getRuleIndex() const {
  return KerMLParser::RuleSubsettings;
}

void KerMLParser::SubsettingsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubsettings(this);
}

void KerMLParser::SubsettingsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubsettings(this);
}

KerMLParser::SubsettingsContext* KerMLParser::subsettings() {
  SubsettingsContext *_localctx = _tracker.createInstance<SubsettingsContext>(_ctx, getState());
  enterRule(_localctx, 166, KerMLParser::RuleSubsettings);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1167);
    subsets();
    setState(1169);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::NAME) {
      setState(1168);
      owned_subsetting();
    }
    setState(1175);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == KerMLParser::SYMBOL_COMMA) {
      setState(1171);
      match(KerMLParser::SYMBOL_COMMA);
      setState(1172);
      owned_subsetting();
      setState(1177);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubsetsContext ------------------------------------------------------------------

KerMLParser::SubsetsContext::SubsetsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::SubsetsContext::SUBSETS() {
  return getToken(KerMLParser::SUBSETS, 0);
}

KerMLParser::Owned_subsettingContext* KerMLParser::SubsetsContext::owned_subsetting() {
  return getRuleContext<KerMLParser::Owned_subsettingContext>(0);
}


size_t KerMLParser::SubsetsContext::getRuleIndex() const {
  return KerMLParser::RuleSubsets;
}

void KerMLParser::SubsetsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubsets(this);
}

void KerMLParser::SubsetsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubsets(this);
}

KerMLParser::SubsetsContext* KerMLParser::subsets() {
  SubsetsContext *_localctx = _tracker.createInstance<SubsetsContext>(_ctx, getState());
  enterRule(_localctx, 168, KerMLParser::RuleSubsets);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1178);
    match(KerMLParser::SUBSETS);
    setState(1179);
    owned_subsetting();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReferencesContext ------------------------------------------------------------------

KerMLParser::ReferencesContext::ReferencesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::ReferencesContext::REFERENCES() {
  return getToken(KerMLParser::REFERENCES, 0);
}

KerMLParser::Owned_reference_subsettingContext* KerMLParser::ReferencesContext::owned_reference_subsetting() {
  return getRuleContext<KerMLParser::Owned_reference_subsettingContext>(0);
}


size_t KerMLParser::ReferencesContext::getRuleIndex() const {
  return KerMLParser::RuleReferences;
}

void KerMLParser::ReferencesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReferences(this);
}

void KerMLParser::ReferencesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReferences(this);
}

KerMLParser::ReferencesContext* KerMLParser::references() {
  ReferencesContext *_localctx = _tracker.createInstance<ReferencesContext>(_ctx, getState());
  enterRule(_localctx, 170, KerMLParser::RuleReferences);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1181);
    match(KerMLParser::REFERENCES);
    setState(1182);
    owned_reference_subsetting();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RedefinitionsContext ------------------------------------------------------------------

KerMLParser::RedefinitionsContext::RedefinitionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::RedefinesContext* KerMLParser::RedefinitionsContext::redefines() {
  return getRuleContext<KerMLParser::RedefinesContext>(0);
}

tree::TerminalNode* KerMLParser::RedefinitionsContext::SYMBOL_COMMA() {
  return getToken(KerMLParser::SYMBOL_COMMA, 0);
}

KerMLParser::Owned_redefinitionContext* KerMLParser::RedefinitionsContext::owned_redefinition() {
  return getRuleContext<KerMLParser::Owned_redefinitionContext>(0);
}


size_t KerMLParser::RedefinitionsContext::getRuleIndex() const {
  return KerMLParser::RuleRedefinitions;
}

void KerMLParser::RedefinitionsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRedefinitions(this);
}

void KerMLParser::RedefinitionsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRedefinitions(this);
}

KerMLParser::RedefinitionsContext* KerMLParser::redefinitions() {
  RedefinitionsContext *_localctx = _tracker.createInstance<RedefinitionsContext>(_ctx, getState());
  enterRule(_localctx, 172, KerMLParser::RuleRedefinitions);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1184);
    redefines();
    setState(1187);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::SYMBOL_COMMA) {
      setState(1185);
      match(KerMLParser::SYMBOL_COMMA);
      setState(1186);
      owned_redefinition();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RedefinesContext ------------------------------------------------------------------

KerMLParser::RedefinesContext::RedefinesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::RedefinesContext::REDEFINES() {
  return getToken(KerMLParser::REDEFINES, 0);
}

KerMLParser::Owned_redefinitionContext* KerMLParser::RedefinesContext::owned_redefinition() {
  return getRuleContext<KerMLParser::Owned_redefinitionContext>(0);
}

KerMLParser::Feature_directionContext* KerMLParser::RedefinesContext::feature_direction() {
  return getRuleContext<KerMLParser::Feature_directionContext>(0);
}


size_t KerMLParser::RedefinesContext::getRuleIndex() const {
  return KerMLParser::RuleRedefines;
}

void KerMLParser::RedefinesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRedefines(this);
}

void KerMLParser::RedefinesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRedefines(this);
}

KerMLParser::RedefinesContext* KerMLParser::redefines() {
  RedefinesContext *_localctx = _tracker.createInstance<RedefinesContext>(_ctx, getState());
  enterRule(_localctx, 174, KerMLParser::RuleRedefines);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1190);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 54) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 54)) & 524291) != 0)) {
      setState(1189);
      feature_direction();
    }
    setState(1192);
    match(KerMLParser::REDEFINES);
    setState(1193);
    owned_redefinition();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Feature_typingContext ------------------------------------------------------------------

KerMLParser::Feature_typingContext::Feature_typingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Qualified_nameContext* KerMLParser::Feature_typingContext::qualified_name() {
  return getRuleContext<KerMLParser::Qualified_nameContext>(0);
}

tree::TerminalNode* KerMLParser::Feature_typingContext::TYPED_BY() {
  return getToken(KerMLParser::TYPED_BY, 0);
}

KerMLParser::General_typeContext* KerMLParser::Feature_typingContext::general_type() {
  return getRuleContext<KerMLParser::General_typeContext>(0);
}

KerMLParser::Relationship_bodyContext* KerMLParser::Feature_typingContext::relationship_body() {
  return getRuleContext<KerMLParser::Relationship_bodyContext>(0);
}

tree::TerminalNode* KerMLParser::Feature_typingContext::KEYWORD_SPECILIZATION() {
  return getToken(KerMLParser::KEYWORD_SPECILIZATION, 0);
}

KerMLParser::IdentificationContext* KerMLParser::Feature_typingContext::identification() {
  return getRuleContext<KerMLParser::IdentificationContext>(0);
}

tree::TerminalNode* KerMLParser::Feature_typingContext::KEYWORD_TYPING() {
  return getToken(KerMLParser::KEYWORD_TYPING, 0);
}

KerMLParser::Multiplicity_partContext* KerMLParser::Feature_typingContext::multiplicity_part() {
  return getRuleContext<KerMLParser::Multiplicity_partContext>(0);
}


size_t KerMLParser::Feature_typingContext::getRuleIndex() const {
  return KerMLParser::RuleFeature_typing;
}

void KerMLParser::Feature_typingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFeature_typing(this);
}

void KerMLParser::Feature_typingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFeature_typing(this);
}

KerMLParser::Feature_typingContext* KerMLParser::feature_typing() {
  Feature_typingContext *_localctx = _tracker.createInstance<Feature_typingContext>(_ctx, getState());
  enterRule(_localctx, 176, KerMLParser::RuleFeature_typing);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1197);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::KEYWORD_SPECILIZATION) {
      setState(1195);
      match(KerMLParser::KEYWORD_SPECILIZATION);
      setState(1196);
      identification();
    }
    setState(1200);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::KEYWORD_TYPING) {
      setState(1199);
      match(KerMLParser::KEYWORD_TYPING);
    }
    setState(1202);
    qualified_name();
    setState(1203);
    match(KerMLParser::TYPED_BY);
    setState(1204);
    general_type();
    setState(1206);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::SYMBOL_SQUARE_BRACKET_OPEN) {
      setState(1205);
      multiplicity_part();
    }
    setState(1208);
    relationship_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Owned_feature_typingContext ------------------------------------------------------------------

KerMLParser::Owned_feature_typingContext::Owned_feature_typingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::General_typeContext* KerMLParser::Owned_feature_typingContext::general_type() {
  return getRuleContext<KerMLParser::General_typeContext>(0);
}


size_t KerMLParser::Owned_feature_typingContext::getRuleIndex() const {
  return KerMLParser::RuleOwned_feature_typing;
}

void KerMLParser::Owned_feature_typingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOwned_feature_typing(this);
}

void KerMLParser::Owned_feature_typingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOwned_feature_typing(this);
}

KerMLParser::Owned_feature_typingContext* KerMLParser::owned_feature_typing() {
  Owned_feature_typingContext *_localctx = _tracker.createInstance<Owned_feature_typingContext>(_ctx, getState());
  enterRule(_localctx, 178, KerMLParser::RuleOwned_feature_typing);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1210);
    general_type();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubsettingContext ------------------------------------------------------------------

KerMLParser::SubsettingContext::SubsettingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Specific_typeContext* KerMLParser::SubsettingContext::specific_type() {
  return getRuleContext<KerMLParser::Specific_typeContext>(0);
}

tree::TerminalNode* KerMLParser::SubsettingContext::SUBSETS() {
  return getToken(KerMLParser::SUBSETS, 0);
}

KerMLParser::General_typeContext* KerMLParser::SubsettingContext::general_type() {
  return getRuleContext<KerMLParser::General_typeContext>(0);
}

KerMLParser::Relationship_bodyContext* KerMLParser::SubsettingContext::relationship_body() {
  return getRuleContext<KerMLParser::Relationship_bodyContext>(0);
}

tree::TerminalNode* KerMLParser::SubsettingContext::KEYWORD_SPECILIZATION() {
  return getToken(KerMLParser::KEYWORD_SPECILIZATION, 0);
}

KerMLParser::IdentificationContext* KerMLParser::SubsettingContext::identification() {
  return getRuleContext<KerMLParser::IdentificationContext>(0);
}

tree::TerminalNode* KerMLParser::SubsettingContext::KEYWORD_SUBSET() {
  return getToken(KerMLParser::KEYWORD_SUBSET, 0);
}

KerMLParser::Multiplicity_partContext* KerMLParser::SubsettingContext::multiplicity_part() {
  return getRuleContext<KerMLParser::Multiplicity_partContext>(0);
}


size_t KerMLParser::SubsettingContext::getRuleIndex() const {
  return KerMLParser::RuleSubsetting;
}

void KerMLParser::SubsettingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubsetting(this);
}

void KerMLParser::SubsettingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubsetting(this);
}

KerMLParser::SubsettingContext* KerMLParser::subsetting() {
  SubsettingContext *_localctx = _tracker.createInstance<SubsettingContext>(_ctx, getState());
  enterRule(_localctx, 180, KerMLParser::RuleSubsetting);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1214);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::KEYWORD_SPECILIZATION) {
      setState(1212);
      match(KerMLParser::KEYWORD_SPECILIZATION);
      setState(1213);
      identification();
    }
    setState(1217);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::KEYWORD_SUBSET) {
      setState(1216);
      match(KerMLParser::KEYWORD_SUBSET);
    }
    setState(1219);
    specific_type();
    setState(1220);
    match(KerMLParser::SUBSETS);
    setState(1221);
    general_type();
    setState(1223);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::SYMBOL_SQUARE_BRACKET_OPEN) {
      setState(1222);
      multiplicity_part();
    }
    setState(1225);
    relationship_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Owned_subsettingContext ------------------------------------------------------------------

KerMLParser::Owned_subsettingContext::Owned_subsettingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::General_typeContext* KerMLParser::Owned_subsettingContext::general_type() {
  return getRuleContext<KerMLParser::General_typeContext>(0);
}


size_t KerMLParser::Owned_subsettingContext::getRuleIndex() const {
  return KerMLParser::RuleOwned_subsetting;
}

void KerMLParser::Owned_subsettingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOwned_subsetting(this);
}

void KerMLParser::Owned_subsettingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOwned_subsetting(this);
}

KerMLParser::Owned_subsettingContext* KerMLParser::owned_subsetting() {
  Owned_subsettingContext *_localctx = _tracker.createInstance<Owned_subsettingContext>(_ctx, getState());
  enterRule(_localctx, 182, KerMLParser::RuleOwned_subsetting);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1227);
    general_type();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Owned_reference_subsettingContext ------------------------------------------------------------------

KerMLParser::Owned_reference_subsettingContext::Owned_reference_subsettingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::General_typeContext* KerMLParser::Owned_reference_subsettingContext::general_type() {
  return getRuleContext<KerMLParser::General_typeContext>(0);
}


size_t KerMLParser::Owned_reference_subsettingContext::getRuleIndex() const {
  return KerMLParser::RuleOwned_reference_subsetting;
}

void KerMLParser::Owned_reference_subsettingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOwned_reference_subsetting(this);
}

void KerMLParser::Owned_reference_subsettingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOwned_reference_subsetting(this);
}

KerMLParser::Owned_reference_subsettingContext* KerMLParser::owned_reference_subsetting() {
  Owned_reference_subsettingContext *_localctx = _tracker.createInstance<Owned_reference_subsettingContext>(_ctx, getState());
  enterRule(_localctx, 184, KerMLParser::RuleOwned_reference_subsetting);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1229);
    general_type();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RedefinitionContext ------------------------------------------------------------------

KerMLParser::RedefinitionContext::RedefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::RedefinitionContext::REDEFINES() {
  return getToken(KerMLParser::REDEFINES, 0);
}

KerMLParser::Qualified_nameContext* KerMLParser::RedefinitionContext::qualified_name() {
  return getRuleContext<KerMLParser::Qualified_nameContext>(0);
}

KerMLParser::Relationship_bodyContext* KerMLParser::RedefinitionContext::relationship_body() {
  return getRuleContext<KerMLParser::Relationship_bodyContext>(0);
}

KerMLParser::Feature_directionContext* KerMLParser::RedefinitionContext::feature_direction() {
  return getRuleContext<KerMLParser::Feature_directionContext>(0);
}

tree::TerminalNode* KerMLParser::RedefinitionContext::KEYWORD_SPECILIZATION() {
  return getToken(KerMLParser::KEYWORD_SPECILIZATION, 0);
}

KerMLParser::IdentificationContext* KerMLParser::RedefinitionContext::identification() {
  return getRuleContext<KerMLParser::IdentificationContext>(0);
}

tree::TerminalNode* KerMLParser::RedefinitionContext::KEYWORD_REDEFINITION() {
  return getToken(KerMLParser::KEYWORD_REDEFINITION, 0);
}

KerMLParser::Specific_typeContext* KerMLParser::RedefinitionContext::specific_type() {
  return getRuleContext<KerMLParser::Specific_typeContext>(0);
}

KerMLParser::Typed_byContext* KerMLParser::RedefinitionContext::typed_by() {
  return getRuleContext<KerMLParser::Typed_byContext>(0);
}

KerMLParser::Multiplicity_partContext* KerMLParser::RedefinitionContext::multiplicity_part() {
  return getRuleContext<KerMLParser::Multiplicity_partContext>(0);
}

KerMLParser::SubsetsContext* KerMLParser::RedefinitionContext::subsets() {
  return getRuleContext<KerMLParser::SubsetsContext>(0);
}

KerMLParser::Feature_assignmentContext* KerMLParser::RedefinitionContext::feature_assignment() {
  return getRuleContext<KerMLParser::Feature_assignmentContext>(0);
}


size_t KerMLParser::RedefinitionContext::getRuleIndex() const {
  return KerMLParser::RuleRedefinition;
}

void KerMLParser::RedefinitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRedefinition(this);
}

void KerMLParser::RedefinitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRedefinition(this);
}

KerMLParser::RedefinitionContext* KerMLParser::redefinition() {
  RedefinitionContext *_localctx = _tracker.createInstance<RedefinitionContext>(_ctx, getState());
  enterRule(_localctx, 186, KerMLParser::RuleRedefinition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1232);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 54) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 54)) & 524291) != 0)) {
      setState(1231);
      feature_direction();
    }
    setState(1236);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::KEYWORD_SPECILIZATION) {
      setState(1234);
      match(KerMLParser::KEYWORD_SPECILIZATION);
      setState(1235);
      identification();
    }
    setState(1240);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::KEYWORD_REDEFINITION) {
      setState(1238);
      match(KerMLParser::KEYWORD_REDEFINITION);
      setState(1239);
      specific_type();
    }
    setState(1242);
    match(KerMLParser::REDEFINES);
    setState(1243);
    qualified_name();
    setState(1245);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::TYPED_BY) {
      setState(1244);
      typed_by();
    }
    setState(1248);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::SYMBOL_SQUARE_BRACKET_OPEN) {
      setState(1247);
      multiplicity_part();
    }
    setState(1251);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::SUBSETS) {
      setState(1250);
      subsets();
    }
    setState(1254);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::SYMBOL_ASSIGN) {
      setState(1253);
      feature_assignment();
    }
    setState(1256);
    relationship_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Owned_redefinitionContext ------------------------------------------------------------------

KerMLParser::Owned_redefinitionContext::Owned_redefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::General_typeContext* KerMLParser::Owned_redefinitionContext::general_type() {
  return getRuleContext<KerMLParser::General_typeContext>(0);
}


size_t KerMLParser::Owned_redefinitionContext::getRuleIndex() const {
  return KerMLParser::RuleOwned_redefinition;
}

void KerMLParser::Owned_redefinitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOwned_redefinition(this);
}

void KerMLParser::Owned_redefinitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOwned_redefinition(this);
}

KerMLParser::Owned_redefinitionContext* KerMLParser::owned_redefinition() {
  Owned_redefinitionContext *_localctx = _tracker.createInstance<Owned_redefinitionContext>(_ctx, getState());
  enterRule(_localctx, 188, KerMLParser::RuleOwned_redefinition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1258);
    general_type();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Owned_feature_chainContext ------------------------------------------------------------------

KerMLParser::Owned_feature_chainContext::Owned_feature_chainContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Feature_chainContext* KerMLParser::Owned_feature_chainContext::feature_chain() {
  return getRuleContext<KerMLParser::Feature_chainContext>(0);
}


size_t KerMLParser::Owned_feature_chainContext::getRuleIndex() const {
  return KerMLParser::RuleOwned_feature_chain;
}

void KerMLParser::Owned_feature_chainContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOwned_feature_chain(this);
}

void KerMLParser::Owned_feature_chainContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOwned_feature_chain(this);
}

KerMLParser::Owned_feature_chainContext* KerMLParser::owned_feature_chain() {
  Owned_feature_chainContext *_localctx = _tracker.createInstance<Owned_feature_chainContext>(_ctx, getState());
  enterRule(_localctx, 190, KerMLParser::RuleOwned_feature_chain);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1260);
    feature_chain();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Feature_chainContext ------------------------------------------------------------------

KerMLParser::Feature_chainContext::Feature_chainContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<KerMLParser::Owned_feature_chainingContext *> KerMLParser::Feature_chainContext::owned_feature_chaining() {
  return getRuleContexts<KerMLParser::Owned_feature_chainingContext>();
}

KerMLParser::Owned_feature_chainingContext* KerMLParser::Feature_chainContext::owned_feature_chaining(size_t i) {
  return getRuleContext<KerMLParser::Owned_feature_chainingContext>(i);
}

std::vector<tree::TerminalNode *> KerMLParser::Feature_chainContext::SYMBOL_DOT() {
  return getTokens(KerMLParser::SYMBOL_DOT);
}

tree::TerminalNode* KerMLParser::Feature_chainContext::SYMBOL_DOT(size_t i) {
  return getToken(KerMLParser::SYMBOL_DOT, i);
}


size_t KerMLParser::Feature_chainContext::getRuleIndex() const {
  return KerMLParser::RuleFeature_chain;
}

void KerMLParser::Feature_chainContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFeature_chain(this);
}

void KerMLParser::Feature_chainContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFeature_chain(this);
}

KerMLParser::Feature_chainContext* KerMLParser::feature_chain() {
  Feature_chainContext *_localctx = _tracker.createInstance<Feature_chainContext>(_ctx, getState());
  enterRule(_localctx, 192, KerMLParser::RuleFeature_chain);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1262);
    owned_feature_chaining();
    setState(1267);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 125, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1263);
        match(KerMLParser::SYMBOL_DOT);
        setState(1264);
        owned_feature_chaining(); 
      }
      setState(1269);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 125, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Owned_feature_chainingContext ------------------------------------------------------------------

KerMLParser::Owned_feature_chainingContext::Owned_feature_chainingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Qualified_nameContext* KerMLParser::Owned_feature_chainingContext::qualified_name() {
  return getRuleContext<KerMLParser::Qualified_nameContext>(0);
}


size_t KerMLParser::Owned_feature_chainingContext::getRuleIndex() const {
  return KerMLParser::RuleOwned_feature_chaining;
}

void KerMLParser::Owned_feature_chainingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOwned_feature_chaining(this);
}

void KerMLParser::Owned_feature_chainingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOwned_feature_chaining(this);
}

KerMLParser::Owned_feature_chainingContext* KerMLParser::owned_feature_chaining() {
  Owned_feature_chainingContext *_localctx = _tracker.createInstance<Owned_feature_chainingContext>(_ctx, getState());
  enterRule(_localctx, 194, KerMLParser::RuleOwned_feature_chaining);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1270);
    qualified_name();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Feature_invertingContext ------------------------------------------------------------------

KerMLParser::Feature_invertingContext::Feature_invertingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Feature_invertingContext::KEYWORD_INVERSE() {
  return getToken(KerMLParser::KEYWORD_INVERSE, 0);
}

tree::TerminalNode* KerMLParser::Feature_invertingContext::KEYWORD_OF() {
  return getToken(KerMLParser::KEYWORD_OF, 0);
}

KerMLParser::Relationship_bodyContext* KerMLParser::Feature_invertingContext::relationship_body() {
  return getRuleContext<KerMLParser::Relationship_bodyContext>(0);
}

std::vector<KerMLParser::Qualified_nameContext *> KerMLParser::Feature_invertingContext::qualified_name() {
  return getRuleContexts<KerMLParser::Qualified_nameContext>();
}

KerMLParser::Qualified_nameContext* KerMLParser::Feature_invertingContext::qualified_name(size_t i) {
  return getRuleContext<KerMLParser::Qualified_nameContext>(i);
}

std::vector<KerMLParser::Owned_feature_chainContext *> KerMLParser::Feature_invertingContext::owned_feature_chain() {
  return getRuleContexts<KerMLParser::Owned_feature_chainContext>();
}

KerMLParser::Owned_feature_chainContext* KerMLParser::Feature_invertingContext::owned_feature_chain(size_t i) {
  return getRuleContext<KerMLParser::Owned_feature_chainContext>(i);
}

tree::TerminalNode* KerMLParser::Feature_invertingContext::KEYWORD_INVERTING() {
  return getToken(KerMLParser::KEYWORD_INVERTING, 0);
}

KerMLParser::IdentificationContext* KerMLParser::Feature_invertingContext::identification() {
  return getRuleContext<KerMLParser::IdentificationContext>(0);
}


size_t KerMLParser::Feature_invertingContext::getRuleIndex() const {
  return KerMLParser::RuleFeature_inverting;
}

void KerMLParser::Feature_invertingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFeature_inverting(this);
}

void KerMLParser::Feature_invertingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFeature_inverting(this);
}

KerMLParser::Feature_invertingContext* KerMLParser::feature_inverting() {
  Feature_invertingContext *_localctx = _tracker.createInstance<Feature_invertingContext>(_ctx, getState());
  enterRule(_localctx, 196, KerMLParser::RuleFeature_inverting);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1274);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::KEYWORD_INVERTING) {
      setState(1272);
      match(KerMLParser::KEYWORD_INVERTING);
      setState(1273);
      identification();
    }
    setState(1276);
    match(KerMLParser::KEYWORD_INVERSE);
    setState(1279);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 127, _ctx)) {
    case 1: {
      setState(1277);
      qualified_name();
      break;
    }

    case 2: {
      setState(1278);
      owned_feature_chain();
      break;
    }

    default:
      break;
    }
    setState(1281);
    match(KerMLParser::KEYWORD_OF);
    setState(1284);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 128, _ctx)) {
    case 1: {
      setState(1282);
      qualified_name();
      break;
    }

    case 2: {
      setState(1283);
      owned_feature_chain();
      break;
    }

    default:
      break;
    }
    setState(1286);
    relationship_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Owned_feature_invertingContext ------------------------------------------------------------------

KerMLParser::Owned_feature_invertingContext::Owned_feature_invertingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Qualified_nameContext* KerMLParser::Owned_feature_invertingContext::qualified_name() {
  return getRuleContext<KerMLParser::Qualified_nameContext>(0);
}

KerMLParser::Owned_feature_chainContext* KerMLParser::Owned_feature_invertingContext::owned_feature_chain() {
  return getRuleContext<KerMLParser::Owned_feature_chainContext>(0);
}


size_t KerMLParser::Owned_feature_invertingContext::getRuleIndex() const {
  return KerMLParser::RuleOwned_feature_inverting;
}

void KerMLParser::Owned_feature_invertingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOwned_feature_inverting(this);
}

void KerMLParser::Owned_feature_invertingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOwned_feature_inverting(this);
}

KerMLParser::Owned_feature_invertingContext* KerMLParser::owned_feature_inverting() {
  Owned_feature_invertingContext *_localctx = _tracker.createInstance<Owned_feature_invertingContext>(_ctx, getState());
  enterRule(_localctx, 198, KerMLParser::RuleOwned_feature_inverting);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1290);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 129, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1288);
      qualified_name();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1289);
      owned_feature_chain();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_featuringContext ------------------------------------------------------------------

KerMLParser::Type_featuringContext::Type_featuringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Type_featuringContext::KEYWORD_FEATURING() {
  return getToken(KerMLParser::KEYWORD_FEATURING, 0);
}

std::vector<KerMLParser::Qualified_nameContext *> KerMLParser::Type_featuringContext::qualified_name() {
  return getRuleContexts<KerMLParser::Qualified_nameContext>();
}

KerMLParser::Qualified_nameContext* KerMLParser::Type_featuringContext::qualified_name(size_t i) {
  return getRuleContext<KerMLParser::Qualified_nameContext>(i);
}

tree::TerminalNode* KerMLParser::Type_featuringContext::KEYWORD_BY() {
  return getToken(KerMLParser::KEYWORD_BY, 0);
}

KerMLParser::Relationship_bodyContext* KerMLParser::Type_featuringContext::relationship_body() {
  return getRuleContext<KerMLParser::Relationship_bodyContext>(0);
}

KerMLParser::IdentificationContext* KerMLParser::Type_featuringContext::identification() {
  return getRuleContext<KerMLParser::IdentificationContext>(0);
}

tree::TerminalNode* KerMLParser::Type_featuringContext::KEYWORD_OF() {
  return getToken(KerMLParser::KEYWORD_OF, 0);
}


size_t KerMLParser::Type_featuringContext::getRuleIndex() const {
  return KerMLParser::RuleType_featuring;
}

void KerMLParser::Type_featuringContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_featuring(this);
}

void KerMLParser::Type_featuringContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_featuring(this);
}

KerMLParser::Type_featuringContext* KerMLParser::type_featuring() {
  Type_featuringContext *_localctx = _tracker.createInstance<Type_featuringContext>(_ctx, getState());
  enterRule(_localctx, 200, KerMLParser::RuleType_featuring);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1292);
    match(KerMLParser::KEYWORD_FEATURING);
    setState(1296);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 130, _ctx)) {
    case 1: {
      setState(1293);
      identification();
      setState(1294);
      match(KerMLParser::KEYWORD_OF);
      break;
    }

    default:
      break;
    }
    setState(1298);
    qualified_name();
    setState(1299);
    match(KerMLParser::KEYWORD_BY);
    setState(1300);
    qualified_name();
    setState(1301);
    relationship_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Owned_type_featuringContext ------------------------------------------------------------------

KerMLParser::Owned_type_featuringContext::Owned_type_featuringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Qualified_nameContext* KerMLParser::Owned_type_featuringContext::qualified_name() {
  return getRuleContext<KerMLParser::Qualified_nameContext>(0);
}


size_t KerMLParser::Owned_type_featuringContext::getRuleIndex() const {
  return KerMLParser::RuleOwned_type_featuring;
}

void KerMLParser::Owned_type_featuringContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOwned_type_featuring(this);
}

void KerMLParser::Owned_type_featuringContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOwned_type_featuring(this);
}

KerMLParser::Owned_type_featuringContext* KerMLParser::owned_type_featuring() {
  Owned_type_featuringContext *_localctx = _tracker.createInstance<Owned_type_featuringContext>(_ctx, getState());
  enterRule(_localctx, 202, KerMLParser::RuleOwned_type_featuring);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1303);
    qualified_name();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Data_typeContext ------------------------------------------------------------------

KerMLParser::Data_typeContext::Data_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Type_prefixContext* KerMLParser::Data_typeContext::type_prefix() {
  return getRuleContext<KerMLParser::Type_prefixContext>(0);
}

tree::TerminalNode* KerMLParser::Data_typeContext::KEYWORD_DATATYPE() {
  return getToken(KerMLParser::KEYWORD_DATATYPE, 0);
}

KerMLParser::Classifier_declarationContext* KerMLParser::Data_typeContext::classifier_declaration() {
  return getRuleContext<KerMLParser::Classifier_declarationContext>(0);
}

KerMLParser::Type_bodyContext* KerMLParser::Data_typeContext::type_body() {
  return getRuleContext<KerMLParser::Type_bodyContext>(0);
}


size_t KerMLParser::Data_typeContext::getRuleIndex() const {
  return KerMLParser::RuleData_type;
}

void KerMLParser::Data_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterData_type(this);
}

void KerMLParser::Data_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitData_type(this);
}

KerMLParser::Data_typeContext* KerMLParser::data_type() {
  Data_typeContext *_localctx = _tracker.createInstance<Data_typeContext>(_ctx, getState());
  enterRule(_localctx, 204, KerMLParser::RuleData_type);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1305);
    type_prefix();
    setState(1306);
    match(KerMLParser::KEYWORD_DATATYPE);
    setState(1307);
    classifier_declaration();
    setState(1308);
    type_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassContext ------------------------------------------------------------------

KerMLParser::ClassContext::ClassContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Type_prefixContext* KerMLParser::ClassContext::type_prefix() {
  return getRuleContext<KerMLParser::Type_prefixContext>(0);
}

tree::TerminalNode* KerMLParser::ClassContext::KEYWORD_CLASS() {
  return getToken(KerMLParser::KEYWORD_CLASS, 0);
}

KerMLParser::Classifier_declarationContext* KerMLParser::ClassContext::classifier_declaration() {
  return getRuleContext<KerMLParser::Classifier_declarationContext>(0);
}

KerMLParser::Type_bodyContext* KerMLParser::ClassContext::type_body() {
  return getRuleContext<KerMLParser::Type_bodyContext>(0);
}


size_t KerMLParser::ClassContext::getRuleIndex() const {
  return KerMLParser::RuleClass;
}

void KerMLParser::ClassContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClass(this);
}

void KerMLParser::ClassContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClass(this);
}

KerMLParser::ClassContext* KerMLParser::class_() {
  ClassContext *_localctx = _tracker.createInstance<ClassContext>(_ctx, getState());
  enterRule(_localctx, 206, KerMLParser::RuleClass);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1310);
    type_prefix();
    setState(1311);
    match(KerMLParser::KEYWORD_CLASS);
    setState(1312);
    classifier_declaration();
    setState(1313);
    type_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StructureContext ------------------------------------------------------------------

KerMLParser::StructureContext::StructureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::StructureContext::KEYWORD_STRUCT() {
  return getToken(KerMLParser::KEYWORD_STRUCT, 0);
}

KerMLParser::Classifier_declarationContext* KerMLParser::StructureContext::classifier_declaration() {
  return getRuleContext<KerMLParser::Classifier_declarationContext>(0);
}

KerMLParser::Type_bodyContext* KerMLParser::StructureContext::type_body() {
  return getRuleContext<KerMLParser::Type_bodyContext>(0);
}

KerMLParser::Type_prefixContext* KerMLParser::StructureContext::type_prefix() {
  return getRuleContext<KerMLParser::Type_prefixContext>(0);
}


size_t KerMLParser::StructureContext::getRuleIndex() const {
  return KerMLParser::RuleStructure;
}

void KerMLParser::StructureContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStructure(this);
}

void KerMLParser::StructureContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStructure(this);
}

KerMLParser::StructureContext* KerMLParser::structure() {
  StructureContext *_localctx = _tracker.createInstance<StructureContext>(_ctx, getState());
  enterRule(_localctx, 208, KerMLParser::RuleStructure);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1316);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 131, _ctx)) {
    case 1: {
      setState(1315);
      type_prefix();
      break;
    }

    default:
      break;
    }
    setState(1318);
    match(KerMLParser::KEYWORD_STRUCT);
    setState(1319);
    classifier_declaration();
    setState(1320);
    type_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssociationContext ------------------------------------------------------------------

KerMLParser::AssociationContext::AssociationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Type_prefixContext* KerMLParser::AssociationContext::type_prefix() {
  return getRuleContext<KerMLParser::Type_prefixContext>(0);
}

tree::TerminalNode* KerMLParser::AssociationContext::KEYWORD_ASSOC() {
  return getToken(KerMLParser::KEYWORD_ASSOC, 0);
}

KerMLParser::Classifier_declarationContext* KerMLParser::AssociationContext::classifier_declaration() {
  return getRuleContext<KerMLParser::Classifier_declarationContext>(0);
}

KerMLParser::Type_bodyContext* KerMLParser::AssociationContext::type_body() {
  return getRuleContext<KerMLParser::Type_bodyContext>(0);
}


size_t KerMLParser::AssociationContext::getRuleIndex() const {
  return KerMLParser::RuleAssociation;
}

void KerMLParser::AssociationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssociation(this);
}

void KerMLParser::AssociationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssociation(this);
}

KerMLParser::AssociationContext* KerMLParser::association() {
  AssociationContext *_localctx = _tracker.createInstance<AssociationContext>(_ctx, getState());
  enterRule(_localctx, 210, KerMLParser::RuleAssociation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1322);
    type_prefix();
    setState(1323);
    match(KerMLParser::KEYWORD_ASSOC);
    setState(1324);
    classifier_declaration();
    setState(1325);
    type_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Association_structureContext ------------------------------------------------------------------

KerMLParser::Association_structureContext::Association_structureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Type_prefixContext* KerMLParser::Association_structureContext::type_prefix() {
  return getRuleContext<KerMLParser::Type_prefixContext>(0);
}

tree::TerminalNode* KerMLParser::Association_structureContext::KEYWORD_ASSOC() {
  return getToken(KerMLParser::KEYWORD_ASSOC, 0);
}

tree::TerminalNode* KerMLParser::Association_structureContext::KEYWORD_STRUCT() {
  return getToken(KerMLParser::KEYWORD_STRUCT, 0);
}

KerMLParser::Classifier_declarationContext* KerMLParser::Association_structureContext::classifier_declaration() {
  return getRuleContext<KerMLParser::Classifier_declarationContext>(0);
}

KerMLParser::Type_bodyContext* KerMLParser::Association_structureContext::type_body() {
  return getRuleContext<KerMLParser::Type_bodyContext>(0);
}


size_t KerMLParser::Association_structureContext::getRuleIndex() const {
  return KerMLParser::RuleAssociation_structure;
}

void KerMLParser::Association_structureContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssociation_structure(this);
}

void KerMLParser::Association_structureContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssociation_structure(this);
}

KerMLParser::Association_structureContext* KerMLParser::association_structure() {
  Association_structureContext *_localctx = _tracker.createInstance<Association_structureContext>(_ctx, getState());
  enterRule(_localctx, 212, KerMLParser::RuleAssociation_structure);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1327);
    type_prefix();
    setState(1328);
    match(KerMLParser::KEYWORD_ASSOC);
    setState(1329);
    match(KerMLParser::KEYWORD_STRUCT);
    setState(1330);
    classifier_declaration();
    setState(1331);
    type_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConnectorContext ------------------------------------------------------------------

KerMLParser::ConnectorContext::ConnectorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::ConnectorContext::KEYWORD_CONNECTOR() {
  return getToken(KerMLParser::KEYWORD_CONNECTOR, 0);
}

KerMLParser::Connector_declarationContext* KerMLParser::ConnectorContext::connector_declaration() {
  return getRuleContext<KerMLParser::Connector_declarationContext>(0);
}

KerMLParser::Type_bodyContext* KerMLParser::ConnectorContext::type_body() {
  return getRuleContext<KerMLParser::Type_bodyContext>(0);
}

KerMLParser::Type_prefixContext* KerMLParser::ConnectorContext::type_prefix() {
  return getRuleContext<KerMLParser::Type_prefixContext>(0);
}


size_t KerMLParser::ConnectorContext::getRuleIndex() const {
  return KerMLParser::RuleConnector;
}

void KerMLParser::ConnectorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConnector(this);
}

void KerMLParser::ConnectorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConnector(this);
}

KerMLParser::ConnectorContext* KerMLParser::connector() {
  ConnectorContext *_localctx = _tracker.createInstance<ConnectorContext>(_ctx, getState());
  enterRule(_localctx, 214, KerMLParser::RuleConnector);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1334);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 132, _ctx)) {
    case 1: {
      setState(1333);
      type_prefix();
      break;
    }

    default:
      break;
    }
    setState(1336);
    match(KerMLParser::KEYWORD_CONNECTOR);
    setState(1337);
    connector_declaration();
    setState(1338);
    type_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Connector_declarationContext ------------------------------------------------------------------

KerMLParser::Connector_declarationContext::Connector_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Feature_declarationContext* KerMLParser::Connector_declarationContext::feature_declaration() {
  return getRuleContext<KerMLParser::Feature_declarationContext>(0);
}

KerMLParser::Binary_connector_declarationContext* KerMLParser::Connector_declarationContext::binary_connector_declaration() {
  return getRuleContext<KerMLParser::Binary_connector_declarationContext>(0);
}

KerMLParser::Nary_connector_declarationContext* KerMLParser::Connector_declarationContext::nary_connector_declaration() {
  return getRuleContext<KerMLParser::Nary_connector_declarationContext>(0);
}


size_t KerMLParser::Connector_declarationContext::getRuleIndex() const {
  return KerMLParser::RuleConnector_declaration;
}

void KerMLParser::Connector_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConnector_declaration(this);
}

void KerMLParser::Connector_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConnector_declaration(this);
}

KerMLParser::Connector_declarationContext* KerMLParser::connector_declaration() {
  Connector_declarationContext *_localctx = _tracker.createInstance<Connector_declarationContext>(_ctx, getState());
  enterRule(_localctx, 216, KerMLParser::RuleConnector_declaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1340);
    feature_declaration();
    setState(1343);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case KerMLParser::KEYWORD_ALL:
      case KerMLParser::KEYWORD_FROM: {
        setState(1341);
        binary_connector_declaration();
        break;
      }

      case KerMLParser::SYMBOL_ROUND_BRACKET_OPEN: {
        setState(1342);
        nary_connector_declaration();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Binary_connector_declarationContext ------------------------------------------------------------------

KerMLParser::Binary_connector_declarationContext::Binary_connector_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Binary_connector_declarationContext::KEYWORD_FROM() {
  return getToken(KerMLParser::KEYWORD_FROM, 0);
}

std::vector<KerMLParser::Connector_end_memberContext *> KerMLParser::Binary_connector_declarationContext::connector_end_member() {
  return getRuleContexts<KerMLParser::Connector_end_memberContext>();
}

KerMLParser::Connector_end_memberContext* KerMLParser::Binary_connector_declarationContext::connector_end_member(size_t i) {
  return getRuleContext<KerMLParser::Connector_end_memberContext>(i);
}

tree::TerminalNode* KerMLParser::Binary_connector_declarationContext::KEYWORD_TO() {
  return getToken(KerMLParser::KEYWORD_TO, 0);
}

tree::TerminalNode* KerMLParser::Binary_connector_declarationContext::KEYWORD_ALL() {
  return getToken(KerMLParser::KEYWORD_ALL, 0);
}


size_t KerMLParser::Binary_connector_declarationContext::getRuleIndex() const {
  return KerMLParser::RuleBinary_connector_declaration;
}

void KerMLParser::Binary_connector_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBinary_connector_declaration(this);
}

void KerMLParser::Binary_connector_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBinary_connector_declaration(this);
}

KerMLParser::Binary_connector_declarationContext* KerMLParser::binary_connector_declaration() {
  Binary_connector_declarationContext *_localctx = _tracker.createInstance<Binary_connector_declarationContext>(_ctx, getState());
  enterRule(_localctx, 218, KerMLParser::RuleBinary_connector_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1346);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::KEYWORD_ALL) {
      setState(1345);
      match(KerMLParser::KEYWORD_ALL);
    }
    setState(1348);
    match(KerMLParser::KEYWORD_FROM);
    setState(1349);
    connector_end_member();
    setState(1350);
    match(KerMLParser::KEYWORD_TO);
    setState(1351);
    connector_end_member();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Nary_connector_declarationContext ------------------------------------------------------------------

KerMLParser::Nary_connector_declarationContext::Nary_connector_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Nary_connector_declarationContext::SYMBOL_ROUND_BRACKET_OPEN() {
  return getToken(KerMLParser::SYMBOL_ROUND_BRACKET_OPEN, 0);
}

std::vector<KerMLParser::Connector_end_memberContext *> KerMLParser::Nary_connector_declarationContext::connector_end_member() {
  return getRuleContexts<KerMLParser::Connector_end_memberContext>();
}

KerMLParser::Connector_end_memberContext* KerMLParser::Nary_connector_declarationContext::connector_end_member(size_t i) {
  return getRuleContext<KerMLParser::Connector_end_memberContext>(i);
}

std::vector<tree::TerminalNode *> KerMLParser::Nary_connector_declarationContext::SYMBOL_COMMA() {
  return getTokens(KerMLParser::SYMBOL_COMMA);
}

tree::TerminalNode* KerMLParser::Nary_connector_declarationContext::SYMBOL_COMMA(size_t i) {
  return getToken(KerMLParser::SYMBOL_COMMA, i);
}

tree::TerminalNode* KerMLParser::Nary_connector_declarationContext::SYMBOL_ROUND_BRACKET_CLOSE() {
  return getToken(KerMLParser::SYMBOL_ROUND_BRACKET_CLOSE, 0);
}


size_t KerMLParser::Nary_connector_declarationContext::getRuleIndex() const {
  return KerMLParser::RuleNary_connector_declaration;
}

void KerMLParser::Nary_connector_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNary_connector_declaration(this);
}

void KerMLParser::Nary_connector_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNary_connector_declaration(this);
}

KerMLParser::Nary_connector_declarationContext* KerMLParser::nary_connector_declaration() {
  Nary_connector_declarationContext *_localctx = _tracker.createInstance<Nary_connector_declarationContext>(_ctx, getState());
  enterRule(_localctx, 220, KerMLParser::RuleNary_connector_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1353);
    match(KerMLParser::SYMBOL_ROUND_BRACKET_OPEN);
    setState(1354);
    connector_end_member();
    setState(1355);
    match(KerMLParser::SYMBOL_COMMA);
    setState(1356);
    connector_end_member();
    setState(1361);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == KerMLParser::SYMBOL_COMMA) {
      setState(1357);
      match(KerMLParser::SYMBOL_COMMA);
      setState(1358);
      connector_end_member();
      setState(1363);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1364);
    match(KerMLParser::SYMBOL_ROUND_BRACKET_CLOSE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Connector_end_memberContext ------------------------------------------------------------------

KerMLParser::Connector_end_memberContext::Connector_end_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Connector_endContext* KerMLParser::Connector_end_memberContext::connector_end() {
  return getRuleContext<KerMLParser::Connector_endContext>(0);
}


size_t KerMLParser::Connector_end_memberContext::getRuleIndex() const {
  return KerMLParser::RuleConnector_end_member;
}

void KerMLParser::Connector_end_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConnector_end_member(this);
}

void KerMLParser::Connector_end_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConnector_end_member(this);
}

KerMLParser::Connector_end_memberContext* KerMLParser::connector_end_member() {
  Connector_end_memberContext *_localctx = _tracker.createInstance<Connector_end_memberContext>(_ctx, getState());
  enterRule(_localctx, 222, KerMLParser::RuleConnector_end_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1366);
    connector_end();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Connector_endContext ------------------------------------------------------------------

KerMLParser::Connector_endContext::Connector_endContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Owned_reference_subsettingContext* KerMLParser::Connector_endContext::owned_reference_subsetting() {
  return getRuleContext<KerMLParser::Owned_reference_subsettingContext>(0);
}

tree::TerminalNode* KerMLParser::Connector_endContext::NAME() {
  return getToken(KerMLParser::NAME, 0);
}

tree::TerminalNode* KerMLParser::Connector_endContext::REFERENCES() {
  return getToken(KerMLParser::REFERENCES, 0);
}

KerMLParser::Multiplicity_boundsContext* KerMLParser::Connector_endContext::multiplicity_bounds() {
  return getRuleContext<KerMLParser::Multiplicity_boundsContext>(0);
}


size_t KerMLParser::Connector_endContext::getRuleIndex() const {
  return KerMLParser::RuleConnector_end;
}

void KerMLParser::Connector_endContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConnector_end(this);
}

void KerMLParser::Connector_endContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConnector_end(this);
}

KerMLParser::Connector_endContext* KerMLParser::connector_end() {
  Connector_endContext *_localctx = _tracker.createInstance<Connector_endContext>(_ctx, getState());
  enterRule(_localctx, 224, KerMLParser::RuleConnector_end);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1370);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 136, _ctx)) {
    case 1: {
      setState(1368);
      match(KerMLParser::NAME);
      setState(1369);
      match(KerMLParser::REFERENCES);
      break;
    }

    default:
      break;
    }
    setState(1373);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::SYMBOL_SQUARE_BRACKET_OPEN) {
      setState(1372);
      multiplicity_bounds();
    }
    setState(1375);
    owned_reference_subsetting();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Binding_connectorContext ------------------------------------------------------------------

KerMLParser::Binding_connectorContext::Binding_connectorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Feature_prefixContext* KerMLParser::Binding_connectorContext::feature_prefix() {
  return getRuleContext<KerMLParser::Feature_prefixContext>(0);
}

tree::TerminalNode* KerMLParser::Binding_connectorContext::KEYWORD_BINDING() {
  return getToken(KerMLParser::KEYWORD_BINDING, 0);
}

KerMLParser::Binding_connector_declarationContext* KerMLParser::Binding_connectorContext::binding_connector_declaration() {
  return getRuleContext<KerMLParser::Binding_connector_declarationContext>(0);
}

KerMLParser::Type_bodyContext* KerMLParser::Binding_connectorContext::type_body() {
  return getRuleContext<KerMLParser::Type_bodyContext>(0);
}


size_t KerMLParser::Binding_connectorContext::getRuleIndex() const {
  return KerMLParser::RuleBinding_connector;
}

void KerMLParser::Binding_connectorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBinding_connector(this);
}

void KerMLParser::Binding_connectorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBinding_connector(this);
}

KerMLParser::Binding_connectorContext* KerMLParser::binding_connector() {
  Binding_connectorContext *_localctx = _tracker.createInstance<Binding_connectorContext>(_ctx, getState());
  enterRule(_localctx, 226, KerMLParser::RuleBinding_connector);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1377);
    feature_prefix();
    setState(1378);
    match(KerMLParser::KEYWORD_BINDING);
    setState(1379);
    binding_connector_declaration();
    setState(1380);
    type_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Binding_connector_declarationContext ------------------------------------------------------------------

KerMLParser::Binding_connector_declarationContext::Binding_connector_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Feature_declarationContext* KerMLParser::Binding_connector_declarationContext::feature_declaration() {
  return getRuleContext<KerMLParser::Feature_declarationContext>(0);
}

tree::TerminalNode* KerMLParser::Binding_connector_declarationContext::KEYWORD_OF() {
  return getToken(KerMLParser::KEYWORD_OF, 0);
}

std::vector<KerMLParser::Connector_end_memberContext *> KerMLParser::Binding_connector_declarationContext::connector_end_member() {
  return getRuleContexts<KerMLParser::Connector_end_memberContext>();
}

KerMLParser::Connector_end_memberContext* KerMLParser::Binding_connector_declarationContext::connector_end_member(size_t i) {
  return getRuleContext<KerMLParser::Connector_end_memberContext>(i);
}

tree::TerminalNode* KerMLParser::Binding_connector_declarationContext::SYMBOL_EQUALS() {
  return getToken(KerMLParser::SYMBOL_EQUALS, 0);
}

tree::TerminalNode* KerMLParser::Binding_connector_declarationContext::KEYWORD_ALL() {
  return getToken(KerMLParser::KEYWORD_ALL, 0);
}


size_t KerMLParser::Binding_connector_declarationContext::getRuleIndex() const {
  return KerMLParser::RuleBinding_connector_declaration;
}

void KerMLParser::Binding_connector_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBinding_connector_declaration(this);
}

void KerMLParser::Binding_connector_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBinding_connector_declaration(this);
}

KerMLParser::Binding_connector_declarationContext* KerMLParser::binding_connector_declaration() {
  Binding_connector_declarationContext *_localctx = _tracker.createInstance<Binding_connector_declarationContext>(_ctx, getState());
  enterRule(_localctx, 228, KerMLParser::RuleBinding_connector_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1402);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 142, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1382);
      feature_declaration();
      setState(1388);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == KerMLParser::KEYWORD_OF) {
        setState(1383);
        match(KerMLParser::KEYWORD_OF);
        setState(1384);
        connector_end_member();
        setState(1385);
        match(KerMLParser::SYMBOL_EQUALS);
        setState(1386);
        connector_end_member();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1391);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == KerMLParser::KEYWORD_ALL) {
        setState(1390);
        match(KerMLParser::KEYWORD_ALL);
      }
      setState(1400);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == KerMLParser::KEYWORD_OF

      || _la == KerMLParser::SYMBOL_SQUARE_BRACKET_OPEN || _la == KerMLParser::NAME) {
        setState(1394);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == KerMLParser::KEYWORD_OF) {
          setState(1393);
          match(KerMLParser::KEYWORD_OF);
        }
        setState(1396);
        connector_end_member();
        setState(1397);
        match(KerMLParser::SYMBOL_EQUALS);
        setState(1398);
        connector_end_member();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SuccessionContext ------------------------------------------------------------------

KerMLParser::SuccessionContext::SuccessionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Feature_prefixContext* KerMLParser::SuccessionContext::feature_prefix() {
  return getRuleContext<KerMLParser::Feature_prefixContext>(0);
}

tree::TerminalNode* KerMLParser::SuccessionContext::KEYWORD_SUCCSESSION() {
  return getToken(KerMLParser::KEYWORD_SUCCSESSION, 0);
}

KerMLParser::Succession_declarationContext* KerMLParser::SuccessionContext::succession_declaration() {
  return getRuleContext<KerMLParser::Succession_declarationContext>(0);
}

KerMLParser::Type_bodyContext* KerMLParser::SuccessionContext::type_body() {
  return getRuleContext<KerMLParser::Type_bodyContext>(0);
}


size_t KerMLParser::SuccessionContext::getRuleIndex() const {
  return KerMLParser::RuleSuccession;
}

void KerMLParser::SuccessionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSuccession(this);
}

void KerMLParser::SuccessionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSuccession(this);
}

KerMLParser::SuccessionContext* KerMLParser::succession() {
  SuccessionContext *_localctx = _tracker.createInstance<SuccessionContext>(_ctx, getState());
  enterRule(_localctx, 230, KerMLParser::RuleSuccession);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1404);
    feature_prefix();
    setState(1405);
    match(KerMLParser::KEYWORD_SUCCSESSION);
    setState(1406);
    succession_declaration();
    setState(1407);
    type_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Succession_declarationContext ------------------------------------------------------------------

KerMLParser::Succession_declarationContext::Succession_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Feature_declarationContext* KerMLParser::Succession_declarationContext::feature_declaration() {
  return getRuleContext<KerMLParser::Feature_declarationContext>(0);
}

tree::TerminalNode* KerMLParser::Succession_declarationContext::KEYWORD_FIRST() {
  return getToken(KerMLParser::KEYWORD_FIRST, 0);
}

std::vector<KerMLParser::Connector_end_memberContext *> KerMLParser::Succession_declarationContext::connector_end_member() {
  return getRuleContexts<KerMLParser::Connector_end_memberContext>();
}

KerMLParser::Connector_end_memberContext* KerMLParser::Succession_declarationContext::connector_end_member(size_t i) {
  return getRuleContext<KerMLParser::Connector_end_memberContext>(i);
}

tree::TerminalNode* KerMLParser::Succession_declarationContext::KEYWORD_THEN() {
  return getToken(KerMLParser::KEYWORD_THEN, 0);
}

tree::TerminalNode* KerMLParser::Succession_declarationContext::KEYWORD_ALL() {
  return getToken(KerMLParser::KEYWORD_ALL, 0);
}


size_t KerMLParser::Succession_declarationContext::getRuleIndex() const {
  return KerMLParser::RuleSuccession_declaration;
}

void KerMLParser::Succession_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSuccession_declaration(this);
}

void KerMLParser::Succession_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSuccession_declaration(this);
}

KerMLParser::Succession_declarationContext* KerMLParser::succession_declaration() {
  Succession_declarationContext *_localctx = _tracker.createInstance<Succession_declarationContext>(_ctx, getState());
  enterRule(_localctx, 232, KerMLParser::RuleSuccession_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1429);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 147, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1409);
      feature_declaration();
      setState(1415);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == KerMLParser::KEYWORD_FIRST) {
        setState(1410);
        match(KerMLParser::KEYWORD_FIRST);
        setState(1411);
        connector_end_member();
        setState(1412);
        match(KerMLParser::KEYWORD_THEN);
        setState(1413);
        connector_end_member();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1418);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == KerMLParser::KEYWORD_ALL) {
        setState(1417);
        match(KerMLParser::KEYWORD_ALL);
      }
      setState(1427);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == KerMLParser::KEYWORD_FIRST || _la == KerMLParser::SYMBOL_SQUARE_BRACKET_OPEN

      || _la == KerMLParser::NAME) {
        setState(1421);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == KerMLParser::KEYWORD_FIRST) {
          setState(1420);
          match(KerMLParser::KEYWORD_FIRST);
        }
        setState(1423);
        connector_end_member();
        setState(1424);
        match(KerMLParser::KEYWORD_THEN);
        setState(1425);
        connector_end_member();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BehaviorContext ------------------------------------------------------------------

KerMLParser::BehaviorContext::BehaviorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Type_prefixContext* KerMLParser::BehaviorContext::type_prefix() {
  return getRuleContext<KerMLParser::Type_prefixContext>(0);
}

tree::TerminalNode* KerMLParser::BehaviorContext::KEYWORD_BEHAVIOR() {
  return getToken(KerMLParser::KEYWORD_BEHAVIOR, 0);
}

KerMLParser::Classifier_declarationContext* KerMLParser::BehaviorContext::classifier_declaration() {
  return getRuleContext<KerMLParser::Classifier_declarationContext>(0);
}

KerMLParser::Type_bodyContext* KerMLParser::BehaviorContext::type_body() {
  return getRuleContext<KerMLParser::Type_bodyContext>(0);
}


size_t KerMLParser::BehaviorContext::getRuleIndex() const {
  return KerMLParser::RuleBehavior;
}

void KerMLParser::BehaviorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBehavior(this);
}

void KerMLParser::BehaviorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBehavior(this);
}

KerMLParser::BehaviorContext* KerMLParser::behavior() {
  BehaviorContext *_localctx = _tracker.createInstance<BehaviorContext>(_ctx, getState());
  enterRule(_localctx, 234, KerMLParser::RuleBehavior);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1431);
    type_prefix();
    setState(1432);
    match(KerMLParser::KEYWORD_BEHAVIOR);
    setState(1433);
    classifier_declaration();
    setState(1434);
    type_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StepContext ------------------------------------------------------------------

KerMLParser::StepContext::StepContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Feature_prefixContext* KerMLParser::StepContext::feature_prefix() {
  return getRuleContext<KerMLParser::Feature_prefixContext>(0);
}

tree::TerminalNode* KerMLParser::StepContext::KEYWORD_STEP() {
  return getToken(KerMLParser::KEYWORD_STEP, 0);
}

KerMLParser::Feature_declarationContext* KerMLParser::StepContext::feature_declaration() {
  return getRuleContext<KerMLParser::Feature_declarationContext>(0);
}

KerMLParser::Type_bodyContext* KerMLParser::StepContext::type_body() {
  return getRuleContext<KerMLParser::Type_bodyContext>(0);
}

KerMLParser::Value_partContext* KerMLParser::StepContext::value_part() {
  return getRuleContext<KerMLParser::Value_partContext>(0);
}


size_t KerMLParser::StepContext::getRuleIndex() const {
  return KerMLParser::RuleStep;
}

void KerMLParser::StepContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStep(this);
}

void KerMLParser::StepContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStep(this);
}

KerMLParser::StepContext* KerMLParser::step() {
  StepContext *_localctx = _tracker.createInstance<StepContext>(_ctx, getState());
  enterRule(_localctx, 236, KerMLParser::RuleStep);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1436);
    feature_prefix();
    setState(1437);
    match(KerMLParser::KEYWORD_STEP);
    setState(1438);
    feature_declaration();
    setState(1440);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::KEYWORD_DEFAULT || _la == KerMLParser::SYMBOL_DEF_ASSIGN

    || _la == KerMLParser::SYMBOL_EQUALS) {
      setState(1439);
      value_part();
    }
    setState(1442);
    type_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionContext ------------------------------------------------------------------

KerMLParser::FunctionContext::FunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Type_prefixContext* KerMLParser::FunctionContext::type_prefix() {
  return getRuleContext<KerMLParser::Type_prefixContext>(0);
}

tree::TerminalNode* KerMLParser::FunctionContext::KEYWORD_FUNCTION() {
  return getToken(KerMLParser::KEYWORD_FUNCTION, 0);
}

KerMLParser::Classifier_declarationContext* KerMLParser::FunctionContext::classifier_declaration() {
  return getRuleContext<KerMLParser::Classifier_declarationContext>(0);
}

KerMLParser::Function_bodyContext* KerMLParser::FunctionContext::function_body() {
  return getRuleContext<KerMLParser::Function_bodyContext>(0);
}


size_t KerMLParser::FunctionContext::getRuleIndex() const {
  return KerMLParser::RuleFunction;
}

void KerMLParser::FunctionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunction(this);
}

void KerMLParser::FunctionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunction(this);
}

KerMLParser::FunctionContext* KerMLParser::function() {
  FunctionContext *_localctx = _tracker.createInstance<FunctionContext>(_ctx, getState());
  enterRule(_localctx, 238, KerMLParser::RuleFunction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1444);
    type_prefix();
    setState(1445);
    match(KerMLParser::KEYWORD_FUNCTION);
    setState(1446);
    classifier_declaration();
    setState(1447);
    function_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Function_bodyContext ------------------------------------------------------------------

KerMLParser::Function_bodyContext::Function_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Function_bodyContext::SYMBOL_STATEMENT_DELIMITER() {
  return getToken(KerMLParser::SYMBOL_STATEMENT_DELIMITER, 0);
}

tree::TerminalNode* KerMLParser::Function_bodyContext::SYMBOL_CURLY_BRACKET_OPEN() {
  return getToken(KerMLParser::SYMBOL_CURLY_BRACKET_OPEN, 0);
}

KerMLParser::Function_body_partContext* KerMLParser::Function_bodyContext::function_body_part() {
  return getRuleContext<KerMLParser::Function_body_partContext>(0);
}

tree::TerminalNode* KerMLParser::Function_bodyContext::SYMBOL_CURLY_BRACKET_CLOSE() {
  return getToken(KerMLParser::SYMBOL_CURLY_BRACKET_CLOSE, 0);
}


size_t KerMLParser::Function_bodyContext::getRuleIndex() const {
  return KerMLParser::RuleFunction_body;
}

void KerMLParser::Function_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunction_body(this);
}

void KerMLParser::Function_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunction_body(this);
}

KerMLParser::Function_bodyContext* KerMLParser::function_body() {
  Function_bodyContext *_localctx = _tracker.createInstance<Function_bodyContext>(_ctx, getState());
  enterRule(_localctx, 240, KerMLParser::RuleFunction_body);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1454);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case KerMLParser::SYMBOL_STATEMENT_DELIMITER: {
        enterOuterAlt(_localctx, 1);
        setState(1449);
        match(KerMLParser::SYMBOL_STATEMENT_DELIMITER);
        break;
      }

      case KerMLParser::SYMBOL_CURLY_BRACKET_OPEN: {
        enterOuterAlt(_localctx, 2);
        setState(1450);
        match(KerMLParser::SYMBOL_CURLY_BRACKET_OPEN);
        setState(1451);
        function_body_part();
        setState(1452);
        match(KerMLParser::SYMBOL_CURLY_BRACKET_CLOSE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Function_body_partContext ------------------------------------------------------------------

KerMLParser::Function_body_partContext::Function_body_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<KerMLParser::Type_body_elementContext *> KerMLParser::Function_body_partContext::type_body_element() {
  return getRuleContexts<KerMLParser::Type_body_elementContext>();
}

KerMLParser::Type_body_elementContext* KerMLParser::Function_body_partContext::type_body_element(size_t i) {
  return getRuleContext<KerMLParser::Type_body_elementContext>(i);
}

std::vector<KerMLParser::Return_feature_memberContext *> KerMLParser::Function_body_partContext::return_feature_member() {
  return getRuleContexts<KerMLParser::Return_feature_memberContext>();
}

KerMLParser::Return_feature_memberContext* KerMLParser::Function_body_partContext::return_feature_member(size_t i) {
  return getRuleContext<KerMLParser::Return_feature_memberContext>(i);
}

KerMLParser::Result_expression_memberContext* KerMLParser::Function_body_partContext::result_expression_member() {
  return getRuleContext<KerMLParser::Result_expression_memberContext>(0);
}


size_t KerMLParser::Function_body_partContext::getRuleIndex() const {
  return KerMLParser::RuleFunction_body_part;
}

void KerMLParser::Function_body_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunction_body_part(this);
}

void KerMLParser::Function_body_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunction_body_part(this);
}

KerMLParser::Function_body_partContext* KerMLParser::function_body_part() {
  Function_body_partContext *_localctx = _tracker.createInstance<Function_body_partContext>(_ctx, getState());
  enterRule(_localctx, 242, KerMLParser::RuleFunction_body_part);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1458); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(1458);
              _errHandler->sync(this);
              switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 150, _ctx)) {
              case 1: {
                setState(1456);
                type_body_element();
                break;
              }

              case 2: {
                setState(1457);
                return_feature_member();
                break;
              }

              default:
                break;
              }
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(1460); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 151, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
    setState(1463);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 1154610904222935042) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 7232921739582246403) != 0) || ((((_la - 136) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 136)) & 30146587) != 0)) {
      setState(1462);
      result_expression_member();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Return_feature_memberContext ------------------------------------------------------------------

KerMLParser::Return_feature_memberContext::Return_feature_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Member_prefixContext* KerMLParser::Return_feature_memberContext::member_prefix() {
  return getRuleContext<KerMLParser::Member_prefixContext>(0);
}

tree::TerminalNode* KerMLParser::Return_feature_memberContext::KEYWORD_RETURN() {
  return getToken(KerMLParser::KEYWORD_RETURN, 0);
}

KerMLParser::Feature_elementContext* KerMLParser::Return_feature_memberContext::feature_element() {
  return getRuleContext<KerMLParser::Feature_elementContext>(0);
}


size_t KerMLParser::Return_feature_memberContext::getRuleIndex() const {
  return KerMLParser::RuleReturn_feature_member;
}

void KerMLParser::Return_feature_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReturn_feature_member(this);
}

void KerMLParser::Return_feature_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReturn_feature_member(this);
}

KerMLParser::Return_feature_memberContext* KerMLParser::return_feature_member() {
  Return_feature_memberContext *_localctx = _tracker.createInstance<Return_feature_memberContext>(_ctx, getState());
  enterRule(_localctx, 244, KerMLParser::RuleReturn_feature_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1465);
    member_prefix();
    setState(1466);
    match(KerMLParser::KEYWORD_RETURN);
    setState(1467);
    feature_element();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Result_expression_memberContext ------------------------------------------------------------------

KerMLParser::Result_expression_memberContext::Result_expression_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Member_prefixContext* KerMLParser::Result_expression_memberContext::member_prefix() {
  return getRuleContext<KerMLParser::Member_prefixContext>(0);
}

KerMLParser::Owned_expressionContext* KerMLParser::Result_expression_memberContext::owned_expression() {
  return getRuleContext<KerMLParser::Owned_expressionContext>(0);
}


size_t KerMLParser::Result_expression_memberContext::getRuleIndex() const {
  return KerMLParser::RuleResult_expression_member;
}

void KerMLParser::Result_expression_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterResult_expression_member(this);
}

void KerMLParser::Result_expression_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitResult_expression_member(this);
}

KerMLParser::Result_expression_memberContext* KerMLParser::result_expression_member() {
  Result_expression_memberContext *_localctx = _tracker.createInstance<Result_expression_memberContext>(_ctx, getState());
  enterRule(_localctx, 246, KerMLParser::RuleResult_expression_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1469);
    member_prefix();
    setState(1470);
    owned_expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionContext ------------------------------------------------------------------

KerMLParser::ExpressionContext::ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Feature_prefixContext* KerMLParser::ExpressionContext::feature_prefix() {
  return getRuleContext<KerMLParser::Feature_prefixContext>(0);
}

tree::TerminalNode* KerMLParser::ExpressionContext::KEYWORD_EXPR() {
  return getToken(KerMLParser::KEYWORD_EXPR, 0);
}

KerMLParser::Feature_declarationContext* KerMLParser::ExpressionContext::feature_declaration() {
  return getRuleContext<KerMLParser::Feature_declarationContext>(0);
}

KerMLParser::Function_bodyContext* KerMLParser::ExpressionContext::function_body() {
  return getRuleContext<KerMLParser::Function_bodyContext>(0);
}

KerMLParser::Value_partContext* KerMLParser::ExpressionContext::value_part() {
  return getRuleContext<KerMLParser::Value_partContext>(0);
}


size_t KerMLParser::ExpressionContext::getRuleIndex() const {
  return KerMLParser::RuleExpression;
}

void KerMLParser::ExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpression(this);
}

void KerMLParser::ExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpression(this);
}

KerMLParser::ExpressionContext* KerMLParser::expression() {
  ExpressionContext *_localctx = _tracker.createInstance<ExpressionContext>(_ctx, getState());
  enterRule(_localctx, 248, KerMLParser::RuleExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1472);
    feature_prefix();
    setState(1473);
    match(KerMLParser::KEYWORD_EXPR);
    setState(1474);
    feature_declaration();
    setState(1476);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::KEYWORD_DEFAULT || _la == KerMLParser::SYMBOL_DEF_ASSIGN

    || _la == KerMLParser::SYMBOL_EQUALS) {
      setState(1475);
      value_part();
    }
    setState(1478);
    function_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PredicateContext ------------------------------------------------------------------

KerMLParser::PredicateContext::PredicateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Type_prefixContext* KerMLParser::PredicateContext::type_prefix() {
  return getRuleContext<KerMLParser::Type_prefixContext>(0);
}

tree::TerminalNode* KerMLParser::PredicateContext::KEYWORD_PREDICATE() {
  return getToken(KerMLParser::KEYWORD_PREDICATE, 0);
}

KerMLParser::Classifier_declarationContext* KerMLParser::PredicateContext::classifier_declaration() {
  return getRuleContext<KerMLParser::Classifier_declarationContext>(0);
}

KerMLParser::Function_bodyContext* KerMLParser::PredicateContext::function_body() {
  return getRuleContext<KerMLParser::Function_bodyContext>(0);
}


size_t KerMLParser::PredicateContext::getRuleIndex() const {
  return KerMLParser::RulePredicate;
}

void KerMLParser::PredicateContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPredicate(this);
}

void KerMLParser::PredicateContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPredicate(this);
}

KerMLParser::PredicateContext* KerMLParser::predicate() {
  PredicateContext *_localctx = _tracker.createInstance<PredicateContext>(_ctx, getState());
  enterRule(_localctx, 250, KerMLParser::RulePredicate);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1480);
    type_prefix();
    setState(1481);
    match(KerMLParser::KEYWORD_PREDICATE);
    setState(1482);
    classifier_declaration();
    setState(1483);
    function_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Boolean_expressionContext ------------------------------------------------------------------

KerMLParser::Boolean_expressionContext::Boolean_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Feature_prefixContext* KerMLParser::Boolean_expressionContext::feature_prefix() {
  return getRuleContext<KerMLParser::Feature_prefixContext>(0);
}

tree::TerminalNode* KerMLParser::Boolean_expressionContext::KEYWORD_BOOL() {
  return getToken(KerMLParser::KEYWORD_BOOL, 0);
}

KerMLParser::Feature_declarationContext* KerMLParser::Boolean_expressionContext::feature_declaration() {
  return getRuleContext<KerMLParser::Feature_declarationContext>(0);
}

KerMLParser::Function_bodyContext* KerMLParser::Boolean_expressionContext::function_body() {
  return getRuleContext<KerMLParser::Function_bodyContext>(0);
}

KerMLParser::Value_partContext* KerMLParser::Boolean_expressionContext::value_part() {
  return getRuleContext<KerMLParser::Value_partContext>(0);
}


size_t KerMLParser::Boolean_expressionContext::getRuleIndex() const {
  return KerMLParser::RuleBoolean_expression;
}

void KerMLParser::Boolean_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBoolean_expression(this);
}

void KerMLParser::Boolean_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBoolean_expression(this);
}

KerMLParser::Boolean_expressionContext* KerMLParser::boolean_expression() {
  Boolean_expressionContext *_localctx = _tracker.createInstance<Boolean_expressionContext>(_ctx, getState());
  enterRule(_localctx, 252, KerMLParser::RuleBoolean_expression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1485);
    feature_prefix();
    setState(1486);
    match(KerMLParser::KEYWORD_BOOL);
    setState(1487);
    feature_declaration();
    setState(1489);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::KEYWORD_DEFAULT || _la == KerMLParser::SYMBOL_DEF_ASSIGN

    || _la == KerMLParser::SYMBOL_EQUALS) {
      setState(1488);
      value_part();
    }
    setState(1491);
    function_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InvariantContext ------------------------------------------------------------------

KerMLParser::InvariantContext::InvariantContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Feature_prefixContext* KerMLParser::InvariantContext::feature_prefix() {
  return getRuleContext<KerMLParser::Feature_prefixContext>(0);
}

tree::TerminalNode* KerMLParser::InvariantContext::KEYWORD_INV() {
  return getToken(KerMLParser::KEYWORD_INV, 0);
}

KerMLParser::Feature_declarationContext* KerMLParser::InvariantContext::feature_declaration() {
  return getRuleContext<KerMLParser::Feature_declarationContext>(0);
}

KerMLParser::Function_bodyContext* KerMLParser::InvariantContext::function_body() {
  return getRuleContext<KerMLParser::Function_bodyContext>(0);
}

KerMLParser::Value_partContext* KerMLParser::InvariantContext::value_part() {
  return getRuleContext<KerMLParser::Value_partContext>(0);
}

tree::TerminalNode* KerMLParser::InvariantContext::KEYWORD_TRUE() {
  return getToken(KerMLParser::KEYWORD_TRUE, 0);
}

tree::TerminalNode* KerMLParser::InvariantContext::KEYWORD_FALSE() {
  return getToken(KerMLParser::KEYWORD_FALSE, 0);
}


size_t KerMLParser::InvariantContext::getRuleIndex() const {
  return KerMLParser::RuleInvariant;
}

void KerMLParser::InvariantContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInvariant(this);
}

void KerMLParser::InvariantContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInvariant(this);
}

KerMLParser::InvariantContext* KerMLParser::invariant() {
  InvariantContext *_localctx = _tracker.createInstance<InvariantContext>(_ctx, getState());
  enterRule(_localctx, 254, KerMLParser::RuleInvariant);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1493);
    feature_prefix();
    setState(1494);
    match(KerMLParser::KEYWORD_INV);
    setState(1496);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::KEYWORD_FALSE

    || _la == KerMLParser::KEYWORD_TRUE) {
      setState(1495);
      _la = _input->LA(1);
      if (!(_la == KerMLParser::KEYWORD_FALSE

      || _la == KerMLParser::KEYWORD_TRUE)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(1498);
    feature_declaration();
    setState(1500);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::KEYWORD_DEFAULT || _la == KerMLParser::SYMBOL_DEF_ASSIGN

    || _la == KerMLParser::SYMBOL_EQUALS) {
      setState(1499);
      value_part();
    }
    setState(1502);
    function_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Owned_expression_reference_memberContext ------------------------------------------------------------------

KerMLParser::Owned_expression_reference_memberContext::Owned_expression_reference_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Owned_expression_referenceContext* KerMLParser::Owned_expression_reference_memberContext::owned_expression_reference() {
  return getRuleContext<KerMLParser::Owned_expression_referenceContext>(0);
}


size_t KerMLParser::Owned_expression_reference_memberContext::getRuleIndex() const {
  return KerMLParser::RuleOwned_expression_reference_member;
}

void KerMLParser::Owned_expression_reference_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOwned_expression_reference_member(this);
}

void KerMLParser::Owned_expression_reference_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOwned_expression_reference_member(this);
}

KerMLParser::Owned_expression_reference_memberContext* KerMLParser::owned_expression_reference_member() {
  Owned_expression_reference_memberContext *_localctx = _tracker.createInstance<Owned_expression_reference_memberContext>(_ctx, getState());
  enterRule(_localctx, 256, KerMLParser::RuleOwned_expression_reference_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1504);
    owned_expression_reference();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Owned_expression_referenceContext ------------------------------------------------------------------

KerMLParser::Owned_expression_referenceContext::Owned_expression_referenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Owned_expression_memberContext* KerMLParser::Owned_expression_referenceContext::owned_expression_member() {
  return getRuleContext<KerMLParser::Owned_expression_memberContext>(0);
}


size_t KerMLParser::Owned_expression_referenceContext::getRuleIndex() const {
  return KerMLParser::RuleOwned_expression_reference;
}

void KerMLParser::Owned_expression_referenceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOwned_expression_reference(this);
}

void KerMLParser::Owned_expression_referenceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOwned_expression_reference(this);
}

KerMLParser::Owned_expression_referenceContext* KerMLParser::owned_expression_reference() {
  Owned_expression_referenceContext *_localctx = _tracker.createInstance<Owned_expression_referenceContext>(_ctx, getState());
  enterRule(_localctx, 258, KerMLParser::RuleOwned_expression_reference);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1506);
    owned_expression_member();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Owned_expression_memberContext ------------------------------------------------------------------

KerMLParser::Owned_expression_memberContext::Owned_expression_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Owned_expressionsContext* KerMLParser::Owned_expression_memberContext::owned_expressions() {
  return getRuleContext<KerMLParser::Owned_expressionsContext>(0);
}


size_t KerMLParser::Owned_expression_memberContext::getRuleIndex() const {
  return KerMLParser::RuleOwned_expression_member;
}

void KerMLParser::Owned_expression_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOwned_expression_member(this);
}

void KerMLParser::Owned_expression_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOwned_expression_member(this);
}

KerMLParser::Owned_expression_memberContext* KerMLParser::owned_expression_member() {
  Owned_expression_memberContext *_localctx = _tracker.createInstance<Owned_expression_memberContext>(_ctx, getState());
  enterRule(_localctx, 260, KerMLParser::RuleOwned_expression_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1508);
    owned_expressions();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Owned_expressionsContext ------------------------------------------------------------------

KerMLParser::Owned_expressionsContext::Owned_expressionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<KerMLParser::Owned_expressionContext *> KerMLParser::Owned_expressionsContext::owned_expression() {
  return getRuleContexts<KerMLParser::Owned_expressionContext>();
}

KerMLParser::Owned_expressionContext* KerMLParser::Owned_expressionsContext::owned_expression(size_t i) {
  return getRuleContext<KerMLParser::Owned_expressionContext>(i);
}


size_t KerMLParser::Owned_expressionsContext::getRuleIndex() const {
  return KerMLParser::RuleOwned_expressions;
}

void KerMLParser::Owned_expressionsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOwned_expressions(this);
}

void KerMLParser::Owned_expressionsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOwned_expressions(this);
}

KerMLParser::Owned_expressionsContext* KerMLParser::owned_expressions() {
  Owned_expressionsContext *_localctx = _tracker.createInstance<Owned_expressionsContext>(_ctx, getState());
  enterRule(_localctx, 262, KerMLParser::RuleOwned_expressions);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1511); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(1510);
              owned_expression();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(1513); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 157, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Owned_expressionContext ------------------------------------------------------------------

KerMLParser::Owned_expressionContext::Owned_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Conditional_expressionContext* KerMLParser::Owned_expressionContext::conditional_expression() {
  return getRuleContext<KerMLParser::Conditional_expressionContext>(0);
}

KerMLParser::Conditional_binary_operator_expressionContext* KerMLParser::Owned_expressionContext::conditional_binary_operator_expression() {
  return getRuleContext<KerMLParser::Conditional_binary_operator_expressionContext>(0);
}

KerMLParser::Binary_operator_expressionContext* KerMLParser::Owned_expressionContext::binary_operator_expression() {
  return getRuleContext<KerMLParser::Binary_operator_expressionContext>(0);
}

KerMLParser::Unary_operator_expressionContext* KerMLParser::Owned_expressionContext::unary_operator_expression() {
  return getRuleContext<KerMLParser::Unary_operator_expressionContext>(0);
}

KerMLParser::Classification_expressionContext* KerMLParser::Owned_expressionContext::classification_expression() {
  return getRuleContext<KerMLParser::Classification_expressionContext>(0);
}

KerMLParser::Metaclassification_expressionContext* KerMLParser::Owned_expressionContext::metaclassification_expression() {
  return getRuleContext<KerMLParser::Metaclassification_expressionContext>(0);
}

KerMLParser::Extend_expressionContext* KerMLParser::Owned_expressionContext::extend_expression() {
  return getRuleContext<KerMLParser::Extend_expressionContext>(0);
}

KerMLParser::Primary_expressionContext* KerMLParser::Owned_expressionContext::primary_expression() {
  return getRuleContext<KerMLParser::Primary_expressionContext>(0);
}


size_t KerMLParser::Owned_expressionContext::getRuleIndex() const {
  return KerMLParser::RuleOwned_expression;
}

void KerMLParser::Owned_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOwned_expression(this);
}

void KerMLParser::Owned_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOwned_expression(this);
}

KerMLParser::Owned_expressionContext* KerMLParser::owned_expression() {
  Owned_expressionContext *_localctx = _tracker.createInstance<Owned_expressionContext>(_ctx, getState());
  enterRule(_localctx, 264, KerMLParser::RuleOwned_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1523);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 158, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1515);
      conditional_expression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1516);
      conditional_binary_operator_expression();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1517);
      binary_operator_expression();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1518);
      unary_operator_expression();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1519);
      classification_expression();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1520);
      metaclassification_expression();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1521);
      extend_expression();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1522);
      primary_expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Eased_owned_expressionContext ------------------------------------------------------------------

KerMLParser::Eased_owned_expressionContext::Eased_owned_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Primary_expressionContext* KerMLParser::Eased_owned_expressionContext::primary_expression() {
  return getRuleContext<KerMLParser::Primary_expressionContext>(0);
}

KerMLParser::Extend_expressionContext* KerMLParser::Eased_owned_expressionContext::extend_expression() {
  return getRuleContext<KerMLParser::Extend_expressionContext>(0);
}

KerMLParser::Metaclassification_expressionContext* KerMLParser::Eased_owned_expressionContext::metaclassification_expression() {
  return getRuleContext<KerMLParser::Metaclassification_expressionContext>(0);
}

KerMLParser::Unary_operator_expressionContext* KerMLParser::Eased_owned_expressionContext::unary_operator_expression() {
  return getRuleContext<KerMLParser::Unary_operator_expressionContext>(0);
}


size_t KerMLParser::Eased_owned_expressionContext::getRuleIndex() const {
  return KerMLParser::RuleEased_owned_expression;
}

void KerMLParser::Eased_owned_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEased_owned_expression(this);
}

void KerMLParser::Eased_owned_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEased_owned_expression(this);
}

KerMLParser::Eased_owned_expressionContext* KerMLParser::eased_owned_expression() {
  Eased_owned_expressionContext *_localctx = _tracker.createInstance<Eased_owned_expressionContext>(_ctx, getState());
  enterRule(_localctx, 266, KerMLParser::RuleEased_owned_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1529);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 159, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1525);
      primary_expression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1526);
      extend_expression();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1527);
      metaclassification_expression();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1528);
      unary_operator_expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Conditional_expressionContext ------------------------------------------------------------------

KerMLParser::Conditional_expressionContext::Conditional_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Conditional_expressionContext::KEYWORD_IF() {
  return getToken(KerMLParser::KEYWORD_IF, 0);
}

KerMLParser::Argument_memberContext* KerMLParser::Conditional_expressionContext::argument_member() {
  return getRuleContext<KerMLParser::Argument_memberContext>(0);
}

tree::TerminalNode* KerMLParser::Conditional_expressionContext::SYMBOL_QUESTION() {
  return getToken(KerMLParser::SYMBOL_QUESTION, 0);
}

std::vector<KerMLParser::Argument_expression_memberContext *> KerMLParser::Conditional_expressionContext::argument_expression_member() {
  return getRuleContexts<KerMLParser::Argument_expression_memberContext>();
}

KerMLParser::Argument_expression_memberContext* KerMLParser::Conditional_expressionContext::argument_expression_member(size_t i) {
  return getRuleContext<KerMLParser::Argument_expression_memberContext>(i);
}

tree::TerminalNode* KerMLParser::Conditional_expressionContext::KEYWORD_ELSE() {
  return getToken(KerMLParser::KEYWORD_ELSE, 0);
}


size_t KerMLParser::Conditional_expressionContext::getRuleIndex() const {
  return KerMLParser::RuleConditional_expression;
}

void KerMLParser::Conditional_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConditional_expression(this);
}

void KerMLParser::Conditional_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConditional_expression(this);
}

KerMLParser::Conditional_expressionContext* KerMLParser::conditional_expression() {
  Conditional_expressionContext *_localctx = _tracker.createInstance<Conditional_expressionContext>(_ctx, getState());
  enterRule(_localctx, 268, KerMLParser::RuleConditional_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1531);
    match(KerMLParser::KEYWORD_IF);
    setState(1532);
    argument_member();
    setState(1533);
    match(KerMLParser::SYMBOL_QUESTION);
    setState(1534);
    argument_expression_member();
    setState(1535);
    match(KerMLParser::KEYWORD_ELSE);
    setState(1536);
    argument_expression_member();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Conditional_binary_operator_expressionContext ------------------------------------------------------------------

KerMLParser::Conditional_binary_operator_expressionContext::Conditional_binary_operator_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Argument_memberContext* KerMLParser::Conditional_binary_operator_expressionContext::argument_member() {
  return getRuleContext<KerMLParser::Argument_memberContext>(0);
}

KerMLParser::Conditional_binary_operatorContext* KerMLParser::Conditional_binary_operator_expressionContext::conditional_binary_operator() {
  return getRuleContext<KerMLParser::Conditional_binary_operatorContext>(0);
}

KerMLParser::Argument_expression_memberContext* KerMLParser::Conditional_binary_operator_expressionContext::argument_expression_member() {
  return getRuleContext<KerMLParser::Argument_expression_memberContext>(0);
}


size_t KerMLParser::Conditional_binary_operator_expressionContext::getRuleIndex() const {
  return KerMLParser::RuleConditional_binary_operator_expression;
}

void KerMLParser::Conditional_binary_operator_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConditional_binary_operator_expression(this);
}

void KerMLParser::Conditional_binary_operator_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConditional_binary_operator_expression(this);
}

KerMLParser::Conditional_binary_operator_expressionContext* KerMLParser::conditional_binary_operator_expression() {
  Conditional_binary_operator_expressionContext *_localctx = _tracker.createInstance<Conditional_binary_operator_expressionContext>(_ctx, getState());
  enterRule(_localctx, 270, KerMLParser::RuleConditional_binary_operator_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1538);
    argument_member();
    setState(1539);
    conditional_binary_operator();
    setState(1540);
    argument_expression_member();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Conditional_binary_operatorContext ------------------------------------------------------------------

KerMLParser::Conditional_binary_operatorContext::Conditional_binary_operatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Conditional_binary_operatorContext::SYMBOL_DQUESTION() {
  return getToken(KerMLParser::SYMBOL_DQUESTION, 0);
}

tree::TerminalNode* KerMLParser::Conditional_binary_operatorContext::KEYWORD_OR() {
  return getToken(KerMLParser::KEYWORD_OR, 0);
}

tree::TerminalNode* KerMLParser::Conditional_binary_operatorContext::KEYWORD_AND() {
  return getToken(KerMLParser::KEYWORD_AND, 0);
}

tree::TerminalNode* KerMLParser::Conditional_binary_operatorContext::KEYWORD_IMPLIES() {
  return getToken(KerMLParser::KEYWORD_IMPLIES, 0);
}


size_t KerMLParser::Conditional_binary_operatorContext::getRuleIndex() const {
  return KerMLParser::RuleConditional_binary_operator;
}

void KerMLParser::Conditional_binary_operatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConditional_binary_operator(this);
}

void KerMLParser::Conditional_binary_operatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConditional_binary_operator(this);
}

KerMLParser::Conditional_binary_operatorContext* KerMLParser::conditional_binary_operator() {
  Conditional_binary_operatorContext *_localctx = _tracker.createInstance<Conditional_binary_operatorContext>(_ctx, getState());
  enterRule(_localctx, 272, KerMLParser::RuleConditional_binary_operator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1542);
    _la = _input->LA(1);
    if (!(((((_la - 12) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 12)) & 576461851815051265) != 0) || _la == KerMLParser::SYMBOL_DQUESTION)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Binary_operator_expressionContext ------------------------------------------------------------------

KerMLParser::Binary_operator_expressionContext::Binary_operator_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Argument_memberContext* KerMLParser::Binary_operator_expressionContext::argument_member() {
  return getRuleContext<KerMLParser::Argument_memberContext>(0);
}

KerMLParser::Binary_operatorContext* KerMLParser::Binary_operator_expressionContext::binary_operator() {
  return getRuleContext<KerMLParser::Binary_operatorContext>(0);
}

KerMLParser::Owned_expressionsContext* KerMLParser::Binary_operator_expressionContext::owned_expressions() {
  return getRuleContext<KerMLParser::Owned_expressionsContext>(0);
}


size_t KerMLParser::Binary_operator_expressionContext::getRuleIndex() const {
  return KerMLParser::RuleBinary_operator_expression;
}

void KerMLParser::Binary_operator_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBinary_operator_expression(this);
}

void KerMLParser::Binary_operator_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBinary_operator_expression(this);
}

KerMLParser::Binary_operator_expressionContext* KerMLParser::binary_operator_expression() {
  Binary_operator_expressionContext *_localctx = _tracker.createInstance<Binary_operator_expressionContext>(_ctx, getState());
  enterRule(_localctx, 274, KerMLParser::RuleBinary_operator_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1544);
    argument_member();
    setState(1545);
    binary_operator();
    setState(1546);
    owned_expressions();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Binary_operatorContext ------------------------------------------------------------------

KerMLParser::Binary_operatorContext::Binary_operatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Binary_operatorContext::SYMBOL_VERTICAL_LINE() {
  return getToken(KerMLParser::SYMBOL_VERTICAL_LINE, 0);
}

tree::TerminalNode* KerMLParser::Binary_operatorContext::SYMBOL_AND() {
  return getToken(KerMLParser::SYMBOL_AND, 0);
}

tree::TerminalNode* KerMLParser::Binary_operatorContext::KEYWORD_XOR() {
  return getToken(KerMLParser::KEYWORD_XOR, 0);
}

tree::TerminalNode* KerMLParser::Binary_operatorContext::SYMBOL_DDOT() {
  return getToken(KerMLParser::SYMBOL_DDOT, 0);
}

tree::TerminalNode* KerMLParser::Binary_operatorContext::SYMBOL_EQUALS() {
  return getToken(KerMLParser::SYMBOL_EQUALS, 0);
}

tree::TerminalNode* KerMLParser::Binary_operatorContext::SYMBOL_NOT_EQUALS() {
  return getToken(KerMLParser::SYMBOL_NOT_EQUALS, 0);
}

tree::TerminalNode* KerMLParser::Binary_operatorContext::SYMBOL_IFF_EQUALS() {
  return getToken(KerMLParser::SYMBOL_IFF_EQUALS, 0);
}

tree::TerminalNode* KerMLParser::Binary_operatorContext::SYMBOL_IFF_NOT_EQUALS() {
  return getToken(KerMLParser::SYMBOL_IFF_NOT_EQUALS, 0);
}

tree::TerminalNode* KerMLParser::Binary_operatorContext::SYMBOL_GREATER() {
  return getToken(KerMLParser::SYMBOL_GREATER, 0);
}

tree::TerminalNode* KerMLParser::Binary_operatorContext::SYMBOL_SMALLER() {
  return getToken(KerMLParser::SYMBOL_SMALLER, 0);
}

tree::TerminalNode* KerMLParser::Binary_operatorContext::SYMBOL_GREATER_EQUALS() {
  return getToken(KerMLParser::SYMBOL_GREATER_EQUALS, 0);
}

tree::TerminalNode* KerMLParser::Binary_operatorContext::SYMBOL_SMALLER_EQUAL() {
  return getToken(KerMLParser::SYMBOL_SMALLER_EQUAL, 0);
}

tree::TerminalNode* KerMLParser::Binary_operatorContext::SYMBOL_PLUS() {
  return getToken(KerMLParser::SYMBOL_PLUS, 0);
}

tree::TerminalNode* KerMLParser::Binary_operatorContext::SYMBOL_MINUS() {
  return getToken(KerMLParser::SYMBOL_MINUS, 0);
}

tree::TerminalNode* KerMLParser::Binary_operatorContext::SYMBOL_STAR() {
  return getToken(KerMLParser::SYMBOL_STAR, 0);
}

tree::TerminalNode* KerMLParser::Binary_operatorContext::SYMBOL_SLASH() {
  return getToken(KerMLParser::SYMBOL_SLASH, 0);
}

tree::TerminalNode* KerMLParser::Binary_operatorContext::SYMBOL_MOD() {
  return getToken(KerMLParser::SYMBOL_MOD, 0);
}

tree::TerminalNode* KerMLParser::Binary_operatorContext::SYMBOL_UPPER() {
  return getToken(KerMLParser::SYMBOL_UPPER, 0);
}

tree::TerminalNode* KerMLParser::Binary_operatorContext::SYMBOL_DOUBLE_STAR() {
  return getToken(KerMLParser::SYMBOL_DOUBLE_STAR, 0);
}


size_t KerMLParser::Binary_operatorContext::getRuleIndex() const {
  return KerMLParser::RuleBinary_operator;
}

void KerMLParser::Binary_operatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBinary_operator(this);
}

void KerMLParser::Binary_operatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBinary_operator(this);
}

KerMLParser::Binary_operatorContext* KerMLParser::binary_operator() {
  Binary_operatorContext *_localctx = _tracker.createInstance<Binary_operatorContext>(_ctx, getState());
  enterRule(_localctx, 276, KerMLParser::RuleBinary_operator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1548);
    _la = _input->LA(1);
    if (!(((((_la - 102) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 102)) & 1112292913586177) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Unary_operator_expressionContext ------------------------------------------------------------------

KerMLParser::Unary_operator_expressionContext::Unary_operator_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Unary_operatorContext* KerMLParser::Unary_operator_expressionContext::unary_operator() {
  return getRuleContext<KerMLParser::Unary_operatorContext>(0);
}

KerMLParser::Owned_expressionsContext* KerMLParser::Unary_operator_expressionContext::owned_expressions() {
  return getRuleContext<KerMLParser::Owned_expressionsContext>(0);
}


size_t KerMLParser::Unary_operator_expressionContext::getRuleIndex() const {
  return KerMLParser::RuleUnary_operator_expression;
}

void KerMLParser::Unary_operator_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnary_operator_expression(this);
}

void KerMLParser::Unary_operator_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnary_operator_expression(this);
}

KerMLParser::Unary_operator_expressionContext* KerMLParser::unary_operator_expression() {
  Unary_operator_expressionContext *_localctx = _tracker.createInstance<Unary_operator_expressionContext>(_ctx, getState());
  enterRule(_localctx, 278, KerMLParser::RuleUnary_operator_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1550);
    unary_operator();
    setState(1551);
    owned_expressions();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Unary_operatorContext ------------------------------------------------------------------

KerMLParser::Unary_operatorContext::Unary_operatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Unary_operatorContext::SYMBOL_PLUS() {
  return getToken(KerMLParser::SYMBOL_PLUS, 0);
}

tree::TerminalNode* KerMLParser::Unary_operatorContext::SYMBOL_MINUS() {
  return getToken(KerMLParser::SYMBOL_MINUS, 0);
}

tree::TerminalNode* KerMLParser::Unary_operatorContext::SYMBOL_CONJUNGATES() {
  return getToken(KerMLParser::SYMBOL_CONJUNGATES, 0);
}

tree::TerminalNode* KerMLParser::Unary_operatorContext::KEYWORD_NOT() {
  return getToken(KerMLParser::KEYWORD_NOT, 0);
}


size_t KerMLParser::Unary_operatorContext::getRuleIndex() const {
  return KerMLParser::RuleUnary_operator;
}

void KerMLParser::Unary_operatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnary_operator(this);
}

void KerMLParser::Unary_operatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnary_operator(this);
}

KerMLParser::Unary_operatorContext* KerMLParser::unary_operator() {
  Unary_operatorContext *_localctx = _tracker.createInstance<Unary_operatorContext>(_ctx, getState());
  enterRule(_localctx, 280, KerMLParser::RuleUnary_operator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1553);
    _la = _input->LA(1);
    if (!(_la == KerMLParser::KEYWORD_NOT

    || _la == KerMLParser::SYMBOL_CONJUNGATES || _la == KerMLParser::SYMBOL_PLUS

    || _la == KerMLParser::SYMBOL_MINUS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Classification_expressionContext ------------------------------------------------------------------

KerMLParser::Classification_expressionContext::Classification_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Argument_memberContext* KerMLParser::Classification_expressionContext::argument_member() {
  return getRuleContext<KerMLParser::Argument_memberContext>(0);
}

KerMLParser::Classification_test_operatorContext* KerMLParser::Classification_expressionContext::classification_test_operator() {
  return getRuleContext<KerMLParser::Classification_test_operatorContext>(0);
}

KerMLParser::Type_reference_memberContext* KerMLParser::Classification_expressionContext::type_reference_member() {
  return getRuleContext<KerMLParser::Type_reference_memberContext>(0);
}

KerMLParser::Cast_operatorContext* KerMLParser::Classification_expressionContext::cast_operator() {
  return getRuleContext<KerMLParser::Cast_operatorContext>(0);
}

KerMLParser::Type_result_memberContext* KerMLParser::Classification_expressionContext::type_result_member() {
  return getRuleContext<KerMLParser::Type_result_memberContext>(0);
}


size_t KerMLParser::Classification_expressionContext::getRuleIndex() const {
  return KerMLParser::RuleClassification_expression;
}

void KerMLParser::Classification_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassification_expression(this);
}

void KerMLParser::Classification_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassification_expression(this);
}

KerMLParser::Classification_expressionContext* KerMLParser::classification_expression() {
  Classification_expressionContext *_localctx = _tracker.createInstance<Classification_expressionContext>(_ctx, getState());
  enterRule(_localctx, 282, KerMLParser::RuleClassification_expression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1556);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 549755815938) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 4927078730368548867) != 0) || ((((_la - 136) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 136)) & 30146587) != 0)) {
      setState(1555);
      argument_member();
    }
    setState(1564);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case KerMLParser::KEYWORD_HASTYPE:
      case KerMLParser::KEYWORD_ISTYPE:
      case KerMLParser::SYMBOL_AT: {
        setState(1558);
        classification_test_operator();
        setState(1559);
        type_reference_member();
        break;
      }

      case KerMLParser::KEYWORD_AS: {
        setState(1561);
        cast_operator();
        setState(1562);
        type_result_member();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassificationContext ------------------------------------------------------------------

KerMLParser::ClassificationContext::ClassificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Classification_test_operatorContext* KerMLParser::ClassificationContext::classification_test_operator() {
  return getRuleContext<KerMLParser::Classification_test_operatorContext>(0);
}

KerMLParser::Type_reference_memberContext* KerMLParser::ClassificationContext::type_reference_member() {
  return getRuleContext<KerMLParser::Type_reference_memberContext>(0);
}

KerMLParser::Argument_memberContext* KerMLParser::ClassificationContext::argument_member() {
  return getRuleContext<KerMLParser::Argument_memberContext>(0);
}

KerMLParser::Cast_operatorContext* KerMLParser::ClassificationContext::cast_operator() {
  return getRuleContext<KerMLParser::Cast_operatorContext>(0);
}

KerMLParser::Type_result_memberContext* KerMLParser::ClassificationContext::type_result_member() {
  return getRuleContext<KerMLParser::Type_result_memberContext>(0);
}


size_t KerMLParser::ClassificationContext::getRuleIndex() const {
  return KerMLParser::RuleClassification;
}

void KerMLParser::ClassificationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassification(this);
}

void KerMLParser::ClassificationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassification(this);
}

KerMLParser::ClassificationContext* KerMLParser::classification() {
  ClassificationContext *_localctx = _tracker.createInstance<ClassificationContext>(_ctx, getState());
  enterRule(_localctx, 284, KerMLParser::RuleClassification);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1575);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case KerMLParser::T__0:
      case KerMLParser::KEYWORD_ALL:
      case KerMLParser::KEYWORD_FALSE:
      case KerMLParser::KEYWORD_HASTYPE:
      case KerMLParser::KEYWORD_ISTYPE:
      case KerMLParser::KEYWORD_NOT:
      case KerMLParser::KEYWORD_NULL:
      case KerMLParser::KEYWORD_TRUE:
      case KerMLParser::SYMBOL_STAR:
      case KerMLParser::SYMBOL_CONJUNGATES:
      case KerMLParser::SYMBOL_ROUND_BRACKET_OPEN:
      case KerMLParser::SYMBOL_SQUARE_BRACKET_OPEN:
      case KerMLParser::SYMBOL_AT:
      case KerMLParser::SYMBOL_HASHTAG:
      case KerMLParser::SYMBOL_PLUS:
      case KerMLParser::SYMBOL_MINUS:
      case KerMLParser::SYMBOL_ARROOW:
      case KerMLParser::SYMBOL_DOT:
      case KerMLParser::SYMBOL_DOT_QUESTION:
      case KerMLParser::NAME:
      case KerMLParser::DECIMAL_VALUE:
      case KerMLParser::EXPONENTIAL_VALUE:
      case KerMLParser::STRING_VALUE: {
        enterOuterAlt(_localctx, 1);
        setState(1567);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 549755815938) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 68)) & 4927078730368548867) != 0) || ((((_la - 136) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 136)) & 30146587) != 0)) {
          setState(1566);
          argument_member();
        }

        setState(1569);
        classification_test_operator();
        setState(1570);
        type_reference_member();
        break;
      }

      case KerMLParser::KEYWORD_AS: {
        enterOuterAlt(_localctx, 2);
        setState(1572);
        cast_operator();
        setState(1573);
        type_result_member();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Classification_test_operatorContext ------------------------------------------------------------------

KerMLParser::Classification_test_operatorContext::Classification_test_operatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Classification_test_operatorContext::KEYWORD_ISTYPE() {
  return getToken(KerMLParser::KEYWORD_ISTYPE, 0);
}

tree::TerminalNode* KerMLParser::Classification_test_operatorContext::KEYWORD_HASTYPE() {
  return getToken(KerMLParser::KEYWORD_HASTYPE, 0);
}

tree::TerminalNode* KerMLParser::Classification_test_operatorContext::SYMBOL_AT() {
  return getToken(KerMLParser::SYMBOL_AT, 0);
}


size_t KerMLParser::Classification_test_operatorContext::getRuleIndex() const {
  return KerMLParser::RuleClassification_test_operator;
}

void KerMLParser::Classification_test_operatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassification_test_operator(this);
}

void KerMLParser::Classification_test_operatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassification_test_operator(this);
}

KerMLParser::Classification_test_operatorContext* KerMLParser::classification_test_operator() {
  Classification_test_operatorContext *_localctx = _tracker.createInstance<Classification_test_operatorContext>(_ctx, getState());
  enterRule(_localctx, 286, KerMLParser::RuleClassification_test_operator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1577);
    _la = _input->LA(1);
    if (!(_la == KerMLParser::KEYWORD_HASTYPE

    || _la == KerMLParser::KEYWORD_ISTYPE || _la == KerMLParser::SYMBOL_AT)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Cast_operatorContext ------------------------------------------------------------------

KerMLParser::Cast_operatorContext::Cast_operatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Cast_operatorContext::KEYWORD_AS() {
  return getToken(KerMLParser::KEYWORD_AS, 0);
}


size_t KerMLParser::Cast_operatorContext::getRuleIndex() const {
  return KerMLParser::RuleCast_operator;
}

void KerMLParser::Cast_operatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCast_operator(this);
}

void KerMLParser::Cast_operatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCast_operator(this);
}

KerMLParser::Cast_operatorContext* KerMLParser::cast_operator() {
  Cast_operatorContext *_localctx = _tracker.createInstance<Cast_operatorContext>(_ctx, getState());
  enterRule(_localctx, 288, KerMLParser::RuleCast_operator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1579);
    match(KerMLParser::KEYWORD_AS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Metaclassification_expressionContext ------------------------------------------------------------------

KerMLParser::Metaclassification_expressionContext::Metaclassification_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Metadata_argument_memberContext* KerMLParser::Metaclassification_expressionContext::metadata_argument_member() {
  return getRuleContext<KerMLParser::Metadata_argument_memberContext>(0);
}

KerMLParser::Metadataclassification_test_operatorContext* KerMLParser::Metaclassification_expressionContext::metadataclassification_test_operator() {
  return getRuleContext<KerMLParser::Metadataclassification_test_operatorContext>(0);
}

KerMLParser::Type_reference_memberContext* KerMLParser::Metaclassification_expressionContext::type_reference_member() {
  return getRuleContext<KerMLParser::Type_reference_memberContext>(0);
}

KerMLParser::Meta_cast_operatorContext* KerMLParser::Metaclassification_expressionContext::meta_cast_operator() {
  return getRuleContext<KerMLParser::Meta_cast_operatorContext>(0);
}

KerMLParser::Type_result_memberContext* KerMLParser::Metaclassification_expressionContext::type_result_member() {
  return getRuleContext<KerMLParser::Type_result_memberContext>(0);
}


size_t KerMLParser::Metaclassification_expressionContext::getRuleIndex() const {
  return KerMLParser::RuleMetaclassification_expression;
}

void KerMLParser::Metaclassification_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMetaclassification_expression(this);
}

void KerMLParser::Metaclassification_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMetaclassification_expression(this);
}

KerMLParser::Metaclassification_expressionContext* KerMLParser::metaclassification_expression() {
  Metaclassification_expressionContext *_localctx = _tracker.createInstance<Metaclassification_expressionContext>(_ctx, getState());
  enterRule(_localctx, 290, KerMLParser::RuleMetaclassification_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1588);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case KerMLParser::NAME: {
        enterOuterAlt(_localctx, 1);
        setState(1581);
        metadata_argument_member();

        setState(1582);
        metadataclassification_test_operator();
        setState(1583);
        type_reference_member();
        break;
      }

      case KerMLParser::T__0: {
        enterOuterAlt(_localctx, 2);
        setState(1585);
        meta_cast_operator();
        setState(1586);
        type_result_member();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Argument_memberContext ------------------------------------------------------------------

KerMLParser::Argument_memberContext::Argument_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::ArgumentContext* KerMLParser::Argument_memberContext::argument() {
  return getRuleContext<KerMLParser::ArgumentContext>(0);
}


size_t KerMLParser::Argument_memberContext::getRuleIndex() const {
  return KerMLParser::RuleArgument_member;
}

void KerMLParser::Argument_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArgument_member(this);
}

void KerMLParser::Argument_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArgument_member(this);
}

KerMLParser::Argument_memberContext* KerMLParser::argument_member() {
  Argument_memberContext *_localctx = _tracker.createInstance<Argument_memberContext>(_ctx, getState());
  enterRule(_localctx, 292, KerMLParser::RuleArgument_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1590);
    argument();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArgumentContext ------------------------------------------------------------------

KerMLParser::ArgumentContext::ArgumentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Argument_valueContext* KerMLParser::ArgumentContext::argument_value() {
  return getRuleContext<KerMLParser::Argument_valueContext>(0);
}


size_t KerMLParser::ArgumentContext::getRuleIndex() const {
  return KerMLParser::RuleArgument;
}

void KerMLParser::ArgumentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArgument(this);
}

void KerMLParser::ArgumentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArgument(this);
}

KerMLParser::ArgumentContext* KerMLParser::argument() {
  ArgumentContext *_localctx = _tracker.createInstance<ArgumentContext>(_ctx, getState());
  enterRule(_localctx, 294, KerMLParser::RuleArgument);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1592);
    argument_value();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Argument_valueContext ------------------------------------------------------------------

KerMLParser::Argument_valueContext::Argument_valueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Eased_owned_expressionContext* KerMLParser::Argument_valueContext::eased_owned_expression() {
  return getRuleContext<KerMLParser::Eased_owned_expressionContext>(0);
}


size_t KerMLParser::Argument_valueContext::getRuleIndex() const {
  return KerMLParser::RuleArgument_value;
}

void KerMLParser::Argument_valueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArgument_value(this);
}

void KerMLParser::Argument_valueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArgument_value(this);
}

KerMLParser::Argument_valueContext* KerMLParser::argument_value() {
  Argument_valueContext *_localctx = _tracker.createInstance<Argument_valueContext>(_ctx, getState());
  enterRule(_localctx, 296, KerMLParser::RuleArgument_value);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1594);
    eased_owned_expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Argument_expression_memberContext ------------------------------------------------------------------

KerMLParser::Argument_expression_memberContext::Argument_expression_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Argument_expressionContext* KerMLParser::Argument_expression_memberContext::argument_expression() {
  return getRuleContext<KerMLParser::Argument_expressionContext>(0);
}


size_t KerMLParser::Argument_expression_memberContext::getRuleIndex() const {
  return KerMLParser::RuleArgument_expression_member;
}

void KerMLParser::Argument_expression_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArgument_expression_member(this);
}

void KerMLParser::Argument_expression_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArgument_expression_member(this);
}

KerMLParser::Argument_expression_memberContext* KerMLParser::argument_expression_member() {
  Argument_expression_memberContext *_localctx = _tracker.createInstance<Argument_expression_memberContext>(_ctx, getState());
  enterRule(_localctx, 298, KerMLParser::RuleArgument_expression_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1596);
    argument_expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Argument_expressionContext ------------------------------------------------------------------

KerMLParser::Argument_expressionContext::Argument_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Argument_expression_valueContext* KerMLParser::Argument_expressionContext::argument_expression_value() {
  return getRuleContext<KerMLParser::Argument_expression_valueContext>(0);
}


size_t KerMLParser::Argument_expressionContext::getRuleIndex() const {
  return KerMLParser::RuleArgument_expression;
}

void KerMLParser::Argument_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArgument_expression(this);
}

void KerMLParser::Argument_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArgument_expression(this);
}

KerMLParser::Argument_expressionContext* KerMLParser::argument_expression() {
  Argument_expressionContext *_localctx = _tracker.createInstance<Argument_expressionContext>(_ctx, getState());
  enterRule(_localctx, 300, KerMLParser::RuleArgument_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1598);
    argument_expression_value();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Argument_expression_valueContext ------------------------------------------------------------------

KerMLParser::Argument_expression_valueContext::Argument_expression_valueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Owned_expression_referenceContext* KerMLParser::Argument_expression_valueContext::owned_expression_reference() {
  return getRuleContext<KerMLParser::Owned_expression_referenceContext>(0);
}


size_t KerMLParser::Argument_expression_valueContext::getRuleIndex() const {
  return KerMLParser::RuleArgument_expression_value;
}

void KerMLParser::Argument_expression_valueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArgument_expression_value(this);
}

void KerMLParser::Argument_expression_valueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArgument_expression_value(this);
}

KerMLParser::Argument_expression_valueContext* KerMLParser::argument_expression_value() {
  Argument_expression_valueContext *_localctx = _tracker.createInstance<Argument_expression_valueContext>(_ctx, getState());
  enterRule(_localctx, 302, KerMLParser::RuleArgument_expression_value);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1600);
    owned_expression_reference();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Metadata_argument_memberContext ------------------------------------------------------------------

KerMLParser::Metadata_argument_memberContext::Metadata_argument_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Metadata_argumentContext* KerMLParser::Metadata_argument_memberContext::metadata_argument() {
  return getRuleContext<KerMLParser::Metadata_argumentContext>(0);
}


size_t KerMLParser::Metadata_argument_memberContext::getRuleIndex() const {
  return KerMLParser::RuleMetadata_argument_member;
}

void KerMLParser::Metadata_argument_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMetadata_argument_member(this);
}

void KerMLParser::Metadata_argument_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMetadata_argument_member(this);
}

KerMLParser::Metadata_argument_memberContext* KerMLParser::metadata_argument_member() {
  Metadata_argument_memberContext *_localctx = _tracker.createInstance<Metadata_argument_memberContext>(_ctx, getState());
  enterRule(_localctx, 304, KerMLParser::RuleMetadata_argument_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1602);
    metadata_argument();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Metadata_argumentContext ------------------------------------------------------------------

KerMLParser::Metadata_argumentContext::Metadata_argumentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Metadata_valueContext* KerMLParser::Metadata_argumentContext::metadata_value() {
  return getRuleContext<KerMLParser::Metadata_valueContext>(0);
}


size_t KerMLParser::Metadata_argumentContext::getRuleIndex() const {
  return KerMLParser::RuleMetadata_argument;
}

void KerMLParser::Metadata_argumentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMetadata_argument(this);
}

void KerMLParser::Metadata_argumentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMetadata_argument(this);
}

KerMLParser::Metadata_argumentContext* KerMLParser::metadata_argument() {
  Metadata_argumentContext *_localctx = _tracker.createInstance<Metadata_argumentContext>(_ctx, getState());
  enterRule(_localctx, 306, KerMLParser::RuleMetadata_argument);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1604);
    metadata_value();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Metadata_valueContext ------------------------------------------------------------------

KerMLParser::Metadata_valueContext::Metadata_valueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Metadata_referenceContext* KerMLParser::Metadata_valueContext::metadata_reference() {
  return getRuleContext<KerMLParser::Metadata_referenceContext>(0);
}


size_t KerMLParser::Metadata_valueContext::getRuleIndex() const {
  return KerMLParser::RuleMetadata_value;
}

void KerMLParser::Metadata_valueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMetadata_value(this);
}

void KerMLParser::Metadata_valueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMetadata_value(this);
}

KerMLParser::Metadata_valueContext* KerMLParser::metadata_value() {
  Metadata_valueContext *_localctx = _tracker.createInstance<Metadata_valueContext>(_ctx, getState());
  enterRule(_localctx, 308, KerMLParser::RuleMetadata_value);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1606);
    metadata_reference();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Metadata_referenceContext ------------------------------------------------------------------

KerMLParser::Metadata_referenceContext::Metadata_referenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Qualified_nameContext* KerMLParser::Metadata_referenceContext::qualified_name() {
  return getRuleContext<KerMLParser::Qualified_nameContext>(0);
}


size_t KerMLParser::Metadata_referenceContext::getRuleIndex() const {
  return KerMLParser::RuleMetadata_reference;
}

void KerMLParser::Metadata_referenceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMetadata_reference(this);
}

void KerMLParser::Metadata_referenceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMetadata_reference(this);
}

KerMLParser::Metadata_referenceContext* KerMLParser::metadata_reference() {
  Metadata_referenceContext *_localctx = _tracker.createInstance<Metadata_referenceContext>(_ctx, getState());
  enterRule(_localctx, 310, KerMLParser::RuleMetadata_reference);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1608);
    qualified_name();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Metadataclassification_test_operatorContext ------------------------------------------------------------------

KerMLParser::Metadataclassification_test_operatorContext::Metadataclassification_test_operatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Metadataclassification_test_operatorContext::SYMBOL_DOT() {
  return getToken(KerMLParser::SYMBOL_DOT, 0);
}


size_t KerMLParser::Metadataclassification_test_operatorContext::getRuleIndex() const {
  return KerMLParser::RuleMetadataclassification_test_operator;
}

void KerMLParser::Metadataclassification_test_operatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMetadataclassification_test_operator(this);
}

void KerMLParser::Metadataclassification_test_operatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMetadataclassification_test_operator(this);
}

KerMLParser::Metadataclassification_test_operatorContext* KerMLParser::metadataclassification_test_operator() {
  Metadataclassification_test_operatorContext *_localctx = _tracker.createInstance<Metadataclassification_test_operatorContext>(_ctx, getState());
  enterRule(_localctx, 312, KerMLParser::RuleMetadataclassification_test_operator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1610);
    match(KerMLParser::SYMBOL_DOT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Meta_cast_operatorContext ------------------------------------------------------------------

KerMLParser::Meta_cast_operatorContext::Meta_cast_operatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t KerMLParser::Meta_cast_operatorContext::getRuleIndex() const {
  return KerMLParser::RuleMeta_cast_operator;
}

void KerMLParser::Meta_cast_operatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMeta_cast_operator(this);
}

void KerMLParser::Meta_cast_operatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMeta_cast_operator(this);
}

KerMLParser::Meta_cast_operatorContext* KerMLParser::meta_cast_operator() {
  Meta_cast_operatorContext *_localctx = _tracker.createInstance<Meta_cast_operatorContext>(_ctx, getState());
  enterRule(_localctx, 314, KerMLParser::RuleMeta_cast_operator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1612);
    match(KerMLParser::T__0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Extend_expressionContext ------------------------------------------------------------------

KerMLParser::Extend_expressionContext::Extend_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Extend_expressionContext::KEYWORD_ALL() {
  return getToken(KerMLParser::KEYWORD_ALL, 0);
}

KerMLParser::Type_reference_memberContext* KerMLParser::Extend_expressionContext::type_reference_member() {
  return getRuleContext<KerMLParser::Type_reference_memberContext>(0);
}


size_t KerMLParser::Extend_expressionContext::getRuleIndex() const {
  return KerMLParser::RuleExtend_expression;
}

void KerMLParser::Extend_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExtend_expression(this);
}

void KerMLParser::Extend_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExtend_expression(this);
}

KerMLParser::Extend_expressionContext* KerMLParser::extend_expression() {
  Extend_expressionContext *_localctx = _tracker.createInstance<Extend_expressionContext>(_ctx, getState());
  enterRule(_localctx, 316, KerMLParser::RuleExtend_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1614);
    match(KerMLParser::KEYWORD_ALL);
    setState(1615);
    type_reference_member();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_reference_memberContext ------------------------------------------------------------------

KerMLParser::Type_reference_memberContext::Type_reference_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Type_referenceContext* KerMLParser::Type_reference_memberContext::type_reference() {
  return getRuleContext<KerMLParser::Type_referenceContext>(0);
}


size_t KerMLParser::Type_reference_memberContext::getRuleIndex() const {
  return KerMLParser::RuleType_reference_member;
}

void KerMLParser::Type_reference_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_reference_member(this);
}

void KerMLParser::Type_reference_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_reference_member(this);
}

KerMLParser::Type_reference_memberContext* KerMLParser::type_reference_member() {
  Type_reference_memberContext *_localctx = _tracker.createInstance<Type_reference_memberContext>(_ctx, getState());
  enterRule(_localctx, 318, KerMLParser::RuleType_reference_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1617);
    type_reference();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_result_memberContext ------------------------------------------------------------------

KerMLParser::Type_result_memberContext::Type_result_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Type_referenceContext* KerMLParser::Type_result_memberContext::type_reference() {
  return getRuleContext<KerMLParser::Type_referenceContext>(0);
}


size_t KerMLParser::Type_result_memberContext::getRuleIndex() const {
  return KerMLParser::RuleType_result_member;
}

void KerMLParser::Type_result_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_result_member(this);
}

void KerMLParser::Type_result_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_result_member(this);
}

KerMLParser::Type_result_memberContext* KerMLParser::type_result_member() {
  Type_result_memberContext *_localctx = _tracker.createInstance<Type_result_memberContext>(_ctx, getState());
  enterRule(_localctx, 320, KerMLParser::RuleType_result_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1619);
    type_reference();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_referenceContext ------------------------------------------------------------------

KerMLParser::Type_referenceContext::Type_referenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Reference_typingContext* KerMLParser::Type_referenceContext::reference_typing() {
  return getRuleContext<KerMLParser::Reference_typingContext>(0);
}


size_t KerMLParser::Type_referenceContext::getRuleIndex() const {
  return KerMLParser::RuleType_reference;
}

void KerMLParser::Type_referenceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_reference(this);
}

void KerMLParser::Type_referenceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_reference(this);
}

KerMLParser::Type_referenceContext* KerMLParser::type_reference() {
  Type_referenceContext *_localctx = _tracker.createInstance<Type_referenceContext>(_ctx, getState());
  enterRule(_localctx, 322, KerMLParser::RuleType_reference);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1621);
    reference_typing();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Reference_typingContext ------------------------------------------------------------------

KerMLParser::Reference_typingContext::Reference_typingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Qualified_nameContext* KerMLParser::Reference_typingContext::qualified_name() {
  return getRuleContext<KerMLParser::Qualified_nameContext>(0);
}


size_t KerMLParser::Reference_typingContext::getRuleIndex() const {
  return KerMLParser::RuleReference_typing;
}

void KerMLParser::Reference_typingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReference_typing(this);
}

void KerMLParser::Reference_typingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReference_typing(this);
}

KerMLParser::Reference_typingContext* KerMLParser::reference_typing() {
  Reference_typingContext *_localctx = _tracker.createInstance<Reference_typingContext>(_ctx, getState());
  enterRule(_localctx, 324, KerMLParser::RuleReference_typing);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1623);
    qualified_name();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Primary_expressionsContext ------------------------------------------------------------------

KerMLParser::Primary_expressionsContext::Primary_expressionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<KerMLParser::Primary_expressionContext *> KerMLParser::Primary_expressionsContext::primary_expression() {
  return getRuleContexts<KerMLParser::Primary_expressionContext>();
}

KerMLParser::Primary_expressionContext* KerMLParser::Primary_expressionsContext::primary_expression(size_t i) {
  return getRuleContext<KerMLParser::Primary_expressionContext>(i);
}


size_t KerMLParser::Primary_expressionsContext::getRuleIndex() const {
  return KerMLParser::RulePrimary_expressions;
}

void KerMLParser::Primary_expressionsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimary_expressions(this);
}

void KerMLParser::Primary_expressionsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimary_expressions(this);
}

KerMLParser::Primary_expressionsContext* KerMLParser::primary_expressions() {
  Primary_expressionsContext *_localctx = _tracker.createInstance<Primary_expressionsContext>(_ctx, getState());
  enterRule(_localctx, 326, KerMLParser::RulePrimary_expressions);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1626); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1625);
      primary_expression();
      setState(1628); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (((((_la - 39) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 39)) & 288230377225453569) != 0) || ((((_la - 115) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 115)) & 63221968963713) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Primary_expressionContext ------------------------------------------------------------------

KerMLParser::Primary_expressionContext::Primary_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Feature_chain_expressionContext* KerMLParser::Primary_expressionContext::feature_chain_expression() {
  return getRuleContext<KerMLParser::Feature_chain_expressionContext>(0);
}

KerMLParser::Non_feature_chain_primary_expressionContext* KerMLParser::Primary_expressionContext::non_feature_chain_primary_expression() {
  return getRuleContext<KerMLParser::Non_feature_chain_primary_expressionContext>(0);
}


size_t KerMLParser::Primary_expressionContext::getRuleIndex() const {
  return KerMLParser::RulePrimary_expression;
}

void KerMLParser::Primary_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimary_expression(this);
}

void KerMLParser::Primary_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimary_expression(this);
}

KerMLParser::Primary_expressionContext* KerMLParser::primary_expression() {
  Primary_expressionContext *_localctx = _tracker.createInstance<Primary_expressionContext>(_ctx, getState());
  enterRule(_localctx, 328, KerMLParser::RulePrimary_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1632);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 166, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1630);
      feature_chain_expression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1631);
      non_feature_chain_primary_expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Primary_argument_valueContext ------------------------------------------------------------------

KerMLParser::Primary_argument_valueContext::Primary_argument_valueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Primary_expressionContext* KerMLParser::Primary_argument_valueContext::primary_expression() {
  return getRuleContext<KerMLParser::Primary_expressionContext>(0);
}


size_t KerMLParser::Primary_argument_valueContext::getRuleIndex() const {
  return KerMLParser::RulePrimary_argument_value;
}

void KerMLParser::Primary_argument_valueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimary_argument_value(this);
}

void KerMLParser::Primary_argument_valueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimary_argument_value(this);
}

KerMLParser::Primary_argument_valueContext* KerMLParser::primary_argument_value() {
  Primary_argument_valueContext *_localctx = _tracker.createInstance<Primary_argument_valueContext>(_ctx, getState());
  enterRule(_localctx, 330, KerMLParser::RulePrimary_argument_value);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1634);
    primary_expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Primary_argumentContext ------------------------------------------------------------------

KerMLParser::Primary_argumentContext::Primary_argumentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Primary_argument_valueContext* KerMLParser::Primary_argumentContext::primary_argument_value() {
  return getRuleContext<KerMLParser::Primary_argument_valueContext>(0);
}


size_t KerMLParser::Primary_argumentContext::getRuleIndex() const {
  return KerMLParser::RulePrimary_argument;
}

void KerMLParser::Primary_argumentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimary_argument(this);
}

void KerMLParser::Primary_argumentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimary_argument(this);
}

KerMLParser::Primary_argumentContext* KerMLParser::primary_argument() {
  Primary_argumentContext *_localctx = _tracker.createInstance<Primary_argumentContext>(_ctx, getState());
  enterRule(_localctx, 332, KerMLParser::RulePrimary_argument);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1636);
    primary_argument_value();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Primary_argument_memberContext ------------------------------------------------------------------

KerMLParser::Primary_argument_memberContext::Primary_argument_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Primary_argumentContext* KerMLParser::Primary_argument_memberContext::primary_argument() {
  return getRuleContext<KerMLParser::Primary_argumentContext>(0);
}


size_t KerMLParser::Primary_argument_memberContext::getRuleIndex() const {
  return KerMLParser::RulePrimary_argument_member;
}

void KerMLParser::Primary_argument_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimary_argument_member(this);
}

void KerMLParser::Primary_argument_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimary_argument_member(this);
}

KerMLParser::Primary_argument_memberContext* KerMLParser::primary_argument_member() {
  Primary_argument_memberContext *_localctx = _tracker.createInstance<Primary_argument_memberContext>(_ctx, getState());
  enterRule(_localctx, 334, KerMLParser::RulePrimary_argument_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1638);
    primary_argument();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Non_feature_chain_primary_expressionContext ------------------------------------------------------------------

KerMLParser::Non_feature_chain_primary_expressionContext::Non_feature_chain_primary_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Bracket_expressionContext* KerMLParser::Non_feature_chain_primary_expressionContext::bracket_expression() {
  return getRuleContext<KerMLParser::Bracket_expressionContext>(0);
}

KerMLParser::Index_expressionContext* KerMLParser::Non_feature_chain_primary_expressionContext::index_expression() {
  return getRuleContext<KerMLParser::Index_expressionContext>(0);
}

KerMLParser::Sequence_expressionContext* KerMLParser::Non_feature_chain_primary_expressionContext::sequence_expression() {
  return getRuleContext<KerMLParser::Sequence_expressionContext>(0);
}

KerMLParser::Select_expressionContext* KerMLParser::Non_feature_chain_primary_expressionContext::select_expression() {
  return getRuleContext<KerMLParser::Select_expressionContext>(0);
}

KerMLParser::Collect_expressionContext* KerMLParser::Non_feature_chain_primary_expressionContext::collect_expression() {
  return getRuleContext<KerMLParser::Collect_expressionContext>(0);
}

KerMLParser::Function_operation_expressionContext* KerMLParser::Non_feature_chain_primary_expressionContext::function_operation_expression() {
  return getRuleContext<KerMLParser::Function_operation_expressionContext>(0);
}

KerMLParser::Base_expressionContext* KerMLParser::Non_feature_chain_primary_expressionContext::base_expression() {
  return getRuleContext<KerMLParser::Base_expressionContext>(0);
}


size_t KerMLParser::Non_feature_chain_primary_expressionContext::getRuleIndex() const {
  return KerMLParser::RuleNon_feature_chain_primary_expression;
}

void KerMLParser::Non_feature_chain_primary_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNon_feature_chain_primary_expression(this);
}

void KerMLParser::Non_feature_chain_primary_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNon_feature_chain_primary_expression(this);
}

KerMLParser::Non_feature_chain_primary_expressionContext* KerMLParser::non_feature_chain_primary_expression() {
  Non_feature_chain_primary_expressionContext *_localctx = _tracker.createInstance<Non_feature_chain_primary_expressionContext>(_ctx, getState());
  enterRule(_localctx, 336, KerMLParser::RuleNon_feature_chain_primary_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1647);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 167, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1640);
      bracket_expression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1641);
      index_expression();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1642);
      sequence_expression();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1643);
      select_expression();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1644);
      collect_expression();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1645);
      function_operation_expression();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1646);
      base_expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Non_feature_chain_primary_argument_valueContext ------------------------------------------------------------------

KerMLParser::Non_feature_chain_primary_argument_valueContext::Non_feature_chain_primary_argument_valueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Non_feature_chain_primary_expressionContext* KerMLParser::Non_feature_chain_primary_argument_valueContext::non_feature_chain_primary_expression() {
  return getRuleContext<KerMLParser::Non_feature_chain_primary_expressionContext>(0);
}


size_t KerMLParser::Non_feature_chain_primary_argument_valueContext::getRuleIndex() const {
  return KerMLParser::RuleNon_feature_chain_primary_argument_value;
}

void KerMLParser::Non_feature_chain_primary_argument_valueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNon_feature_chain_primary_argument_value(this);
}

void KerMLParser::Non_feature_chain_primary_argument_valueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNon_feature_chain_primary_argument_value(this);
}

KerMLParser::Non_feature_chain_primary_argument_valueContext* KerMLParser::non_feature_chain_primary_argument_value() {
  Non_feature_chain_primary_argument_valueContext *_localctx = _tracker.createInstance<Non_feature_chain_primary_argument_valueContext>(_ctx, getState());
  enterRule(_localctx, 338, KerMLParser::RuleNon_feature_chain_primary_argument_value);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1649);
    non_feature_chain_primary_expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Non_feature_chain_primary_argumentContext ------------------------------------------------------------------

KerMLParser::Non_feature_chain_primary_argumentContext::Non_feature_chain_primary_argumentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Primary_argumentContext* KerMLParser::Non_feature_chain_primary_argumentContext::primary_argument() {
  return getRuleContext<KerMLParser::Primary_argumentContext>(0);
}


size_t KerMLParser::Non_feature_chain_primary_argumentContext::getRuleIndex() const {
  return KerMLParser::RuleNon_feature_chain_primary_argument;
}

void KerMLParser::Non_feature_chain_primary_argumentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNon_feature_chain_primary_argument(this);
}

void KerMLParser::Non_feature_chain_primary_argumentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNon_feature_chain_primary_argument(this);
}

KerMLParser::Non_feature_chain_primary_argumentContext* KerMLParser::non_feature_chain_primary_argument() {
  Non_feature_chain_primary_argumentContext *_localctx = _tracker.createInstance<Non_feature_chain_primary_argumentContext>(_ctx, getState());
  enterRule(_localctx, 340, KerMLParser::RuleNon_feature_chain_primary_argument);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1651);
    primary_argument();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Non_feature_chain_primary_argument_memberContext ------------------------------------------------------------------

KerMLParser::Non_feature_chain_primary_argument_memberContext::Non_feature_chain_primary_argument_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Primary_argumentContext* KerMLParser::Non_feature_chain_primary_argument_memberContext::primary_argument() {
  return getRuleContext<KerMLParser::Primary_argumentContext>(0);
}


size_t KerMLParser::Non_feature_chain_primary_argument_memberContext::getRuleIndex() const {
  return KerMLParser::RuleNon_feature_chain_primary_argument_member;
}

void KerMLParser::Non_feature_chain_primary_argument_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNon_feature_chain_primary_argument_member(this);
}

void KerMLParser::Non_feature_chain_primary_argument_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNon_feature_chain_primary_argument_member(this);
}

KerMLParser::Non_feature_chain_primary_argument_memberContext* KerMLParser::non_feature_chain_primary_argument_member() {
  Non_feature_chain_primary_argument_memberContext *_localctx = _tracker.createInstance<Non_feature_chain_primary_argument_memberContext>(_ctx, getState());
  enterRule(_localctx, 342, KerMLParser::RuleNon_feature_chain_primary_argument_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1653);
    primary_argument();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Bracket_expressionContext ------------------------------------------------------------------

KerMLParser::Bracket_expressionContext::Bracket_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Bracket_expressionContext::SYMBOL_SQUARE_BRACKET_OPEN() {
  return getToken(KerMLParser::SYMBOL_SQUARE_BRACKET_OPEN, 0);
}

KerMLParser::Sequence_expression_list_memberContext* KerMLParser::Bracket_expressionContext::sequence_expression_list_member() {
  return getRuleContext<KerMLParser::Sequence_expression_list_memberContext>(0);
}

tree::TerminalNode* KerMLParser::Bracket_expressionContext::SYMBOL_SQUARE_BRACKET_CLOSE() {
  return getToken(KerMLParser::SYMBOL_SQUARE_BRACKET_CLOSE, 0);
}


size_t KerMLParser::Bracket_expressionContext::getRuleIndex() const {
  return KerMLParser::RuleBracket_expression;
}

void KerMLParser::Bracket_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBracket_expression(this);
}

void KerMLParser::Bracket_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBracket_expression(this);
}

KerMLParser::Bracket_expressionContext* KerMLParser::bracket_expression() {
  Bracket_expressionContext *_localctx = _tracker.createInstance<Bracket_expressionContext>(_ctx, getState());
  enterRule(_localctx, 344, KerMLParser::RuleBracket_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1655);
    match(KerMLParser::SYMBOL_SQUARE_BRACKET_OPEN);
    setState(1656);
    sequence_expression_list_member();
    setState(1657);
    match(KerMLParser::SYMBOL_SQUARE_BRACKET_CLOSE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Index_expressionContext ------------------------------------------------------------------

KerMLParser::Index_expressionContext::Index_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Index_expressionContext::SYMBOL_HASHTAG() {
  return getToken(KerMLParser::SYMBOL_HASHTAG, 0);
}

tree::TerminalNode* KerMLParser::Index_expressionContext::SYMBOL_ROUND_BRACKET_OPEN() {
  return getToken(KerMLParser::SYMBOL_ROUND_BRACKET_OPEN, 0);
}

KerMLParser::Sequence_expression_list_memberContext* KerMLParser::Index_expressionContext::sequence_expression_list_member() {
  return getRuleContext<KerMLParser::Sequence_expression_list_memberContext>(0);
}

tree::TerminalNode* KerMLParser::Index_expressionContext::SYMBOL_ROUND_BRACKET_CLOSE() {
  return getToken(KerMLParser::SYMBOL_ROUND_BRACKET_CLOSE, 0);
}


size_t KerMLParser::Index_expressionContext::getRuleIndex() const {
  return KerMLParser::RuleIndex_expression;
}

void KerMLParser::Index_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIndex_expression(this);
}

void KerMLParser::Index_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIndex_expression(this);
}

KerMLParser::Index_expressionContext* KerMLParser::index_expression() {
  Index_expressionContext *_localctx = _tracker.createInstance<Index_expressionContext>(_ctx, getState());
  enterRule(_localctx, 346, KerMLParser::RuleIndex_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1659);
    match(KerMLParser::SYMBOL_HASHTAG);
    setState(1660);
    match(KerMLParser::SYMBOL_ROUND_BRACKET_OPEN);
    setState(1661);
    sequence_expression_list_member();
    setState(1662);
    match(KerMLParser::SYMBOL_ROUND_BRACKET_CLOSE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Sequence_expressionContext ------------------------------------------------------------------

KerMLParser::Sequence_expressionContext::Sequence_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Sequence_expressionContext::SYMBOL_ROUND_BRACKET_OPEN() {
  return getToken(KerMLParser::SYMBOL_ROUND_BRACKET_OPEN, 0);
}

KerMLParser::Sequence_expression_listContext* KerMLParser::Sequence_expressionContext::sequence_expression_list() {
  return getRuleContext<KerMLParser::Sequence_expression_listContext>(0);
}

tree::TerminalNode* KerMLParser::Sequence_expressionContext::SYMBOL_ROUND_BRACKET_CLOSE() {
  return getToken(KerMLParser::SYMBOL_ROUND_BRACKET_CLOSE, 0);
}


size_t KerMLParser::Sequence_expressionContext::getRuleIndex() const {
  return KerMLParser::RuleSequence_expression;
}

void KerMLParser::Sequence_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSequence_expression(this);
}

void KerMLParser::Sequence_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSequence_expression(this);
}

KerMLParser::Sequence_expressionContext* KerMLParser::sequence_expression() {
  Sequence_expressionContext *_localctx = _tracker.createInstance<Sequence_expressionContext>(_ctx, getState());
  enterRule(_localctx, 348, KerMLParser::RuleSequence_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1664);
    match(KerMLParser::SYMBOL_ROUND_BRACKET_OPEN);
    setState(1665);
    sequence_expression_list();
    setState(1666);
    match(KerMLParser::SYMBOL_ROUND_BRACKET_CLOSE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Sequence_expression_listContext ------------------------------------------------------------------

KerMLParser::Sequence_expression_listContext::Sequence_expression_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Owned_expressionsContext* KerMLParser::Sequence_expression_listContext::owned_expressions() {
  return getRuleContext<KerMLParser::Owned_expressionsContext>(0);
}

tree::TerminalNode* KerMLParser::Sequence_expression_listContext::SYMBOL_COMMA() {
  return getToken(KerMLParser::SYMBOL_COMMA, 0);
}

KerMLParser::Sequence_operator_expressionContext* KerMLParser::Sequence_expression_listContext::sequence_operator_expression() {
  return getRuleContext<KerMLParser::Sequence_operator_expressionContext>(0);
}


size_t KerMLParser::Sequence_expression_listContext::getRuleIndex() const {
  return KerMLParser::RuleSequence_expression_list;
}

void KerMLParser::Sequence_expression_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSequence_expression_list(this);
}

void KerMLParser::Sequence_expression_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSequence_expression_list(this);
}

KerMLParser::Sequence_expression_listContext* KerMLParser::sequence_expression_list() {
  Sequence_expression_listContext *_localctx = _tracker.createInstance<Sequence_expression_listContext>(_ctx, getState());
  enterRule(_localctx, 350, KerMLParser::RuleSequence_expression_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1673);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 169, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1668);
      owned_expressions();
      setState(1670);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == KerMLParser::SYMBOL_COMMA) {
        setState(1669);
        match(KerMLParser::SYMBOL_COMMA);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1672);
      sequence_operator_expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Sequence_operator_expressionContext ------------------------------------------------------------------

KerMLParser::Sequence_operator_expressionContext::Sequence_operator_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Owned_expression_memberContext* KerMLParser::Sequence_operator_expressionContext::owned_expression_member() {
  return getRuleContext<KerMLParser::Owned_expression_memberContext>(0);
}

tree::TerminalNode* KerMLParser::Sequence_operator_expressionContext::SYMBOL_COMMA() {
  return getToken(KerMLParser::SYMBOL_COMMA, 0);
}

KerMLParser::Sequence_expression_list_memberContext* KerMLParser::Sequence_operator_expressionContext::sequence_expression_list_member() {
  return getRuleContext<KerMLParser::Sequence_expression_list_memberContext>(0);
}


size_t KerMLParser::Sequence_operator_expressionContext::getRuleIndex() const {
  return KerMLParser::RuleSequence_operator_expression;
}

void KerMLParser::Sequence_operator_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSequence_operator_expression(this);
}

void KerMLParser::Sequence_operator_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSequence_operator_expression(this);
}

KerMLParser::Sequence_operator_expressionContext* KerMLParser::sequence_operator_expression() {
  Sequence_operator_expressionContext *_localctx = _tracker.createInstance<Sequence_operator_expressionContext>(_ctx, getState());
  enterRule(_localctx, 352, KerMLParser::RuleSequence_operator_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1675);
    owned_expression_member();
    setState(1676);
    match(KerMLParser::SYMBOL_COMMA);
    setState(1677);
    sequence_expression_list_member();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Sequence_expression_list_memberContext ------------------------------------------------------------------

KerMLParser::Sequence_expression_list_memberContext::Sequence_expression_list_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Sequence_expression_listContext* KerMLParser::Sequence_expression_list_memberContext::sequence_expression_list() {
  return getRuleContext<KerMLParser::Sequence_expression_listContext>(0);
}


size_t KerMLParser::Sequence_expression_list_memberContext::getRuleIndex() const {
  return KerMLParser::RuleSequence_expression_list_member;
}

void KerMLParser::Sequence_expression_list_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSequence_expression_list_member(this);
}

void KerMLParser::Sequence_expression_list_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSequence_expression_list_member(this);
}

KerMLParser::Sequence_expression_list_memberContext* KerMLParser::sequence_expression_list_member() {
  Sequence_expression_list_memberContext *_localctx = _tracker.createInstance<Sequence_expression_list_memberContext>(_ctx, getState());
  enterRule(_localctx, 354, KerMLParser::RuleSequence_expression_list_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1679);
    sequence_expression_list();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Feature_chain_expressionContext ------------------------------------------------------------------

KerMLParser::Feature_chain_expressionContext::Feature_chain_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Feature_chain_expressionContext::SYMBOL_DOT() {
  return getToken(KerMLParser::SYMBOL_DOT, 0);
}

KerMLParser::Feature_chain_memberContext* KerMLParser::Feature_chain_expressionContext::feature_chain_member() {
  return getRuleContext<KerMLParser::Feature_chain_memberContext>(0);
}


size_t KerMLParser::Feature_chain_expressionContext::getRuleIndex() const {
  return KerMLParser::RuleFeature_chain_expression;
}

void KerMLParser::Feature_chain_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFeature_chain_expression(this);
}

void KerMLParser::Feature_chain_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFeature_chain_expression(this);
}

KerMLParser::Feature_chain_expressionContext* KerMLParser::feature_chain_expression() {
  Feature_chain_expressionContext *_localctx = _tracker.createInstance<Feature_chain_expressionContext>(_ctx, getState());
  enterRule(_localctx, 356, KerMLParser::RuleFeature_chain_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1681);
    match(KerMLParser::SYMBOL_DOT);
    setState(1682);
    feature_chain_member();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Collect_expressionContext ------------------------------------------------------------------

KerMLParser::Collect_expressionContext::Collect_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Collect_expressionContext::SYMBOL_DOT() {
  return getToken(KerMLParser::SYMBOL_DOT, 0);
}

KerMLParser::Body_expression_memberContext* KerMLParser::Collect_expressionContext::body_expression_member() {
  return getRuleContext<KerMLParser::Body_expression_memberContext>(0);
}


size_t KerMLParser::Collect_expressionContext::getRuleIndex() const {
  return KerMLParser::RuleCollect_expression;
}

void KerMLParser::Collect_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCollect_expression(this);
}

void KerMLParser::Collect_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCollect_expression(this);
}

KerMLParser::Collect_expressionContext* KerMLParser::collect_expression() {
  Collect_expressionContext *_localctx = _tracker.createInstance<Collect_expressionContext>(_ctx, getState());
  enterRule(_localctx, 358, KerMLParser::RuleCollect_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1684);
    match(KerMLParser::SYMBOL_DOT);
    setState(1685);
    body_expression_member();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Select_expressionContext ------------------------------------------------------------------

KerMLParser::Select_expressionContext::Select_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Select_expressionContext::SYMBOL_DOT_QUESTION() {
  return getToken(KerMLParser::SYMBOL_DOT_QUESTION, 0);
}

KerMLParser::Body_expression_memberContext* KerMLParser::Select_expressionContext::body_expression_member() {
  return getRuleContext<KerMLParser::Body_expression_memberContext>(0);
}


size_t KerMLParser::Select_expressionContext::getRuleIndex() const {
  return KerMLParser::RuleSelect_expression;
}

void KerMLParser::Select_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelect_expression(this);
}

void KerMLParser::Select_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelect_expression(this);
}

KerMLParser::Select_expressionContext* KerMLParser::select_expression() {
  Select_expressionContext *_localctx = _tracker.createInstance<Select_expressionContext>(_ctx, getState());
  enterRule(_localctx, 360, KerMLParser::RuleSelect_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1687);
    match(KerMLParser::SYMBOL_DOT_QUESTION);
    setState(1688);
    body_expression_member();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Function_operation_expressionContext ------------------------------------------------------------------

KerMLParser::Function_operation_expressionContext::Function_operation_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Function_operation_expressionContext::SYMBOL_ARROOW() {
  return getToken(KerMLParser::SYMBOL_ARROOW, 0);
}

KerMLParser::Reference_typingContext* KerMLParser::Function_operation_expressionContext::reference_typing() {
  return getRuleContext<KerMLParser::Reference_typingContext>(0);
}

KerMLParser::Body_argument_memberContext* KerMLParser::Function_operation_expressionContext::body_argument_member() {
  return getRuleContext<KerMLParser::Body_argument_memberContext>(0);
}

KerMLParser::Function_reference_argument_memberContext* KerMLParser::Function_operation_expressionContext::function_reference_argument_member() {
  return getRuleContext<KerMLParser::Function_reference_argument_memberContext>(0);
}

KerMLParser::Argument_expressionContext* KerMLParser::Function_operation_expressionContext::argument_expression() {
  return getRuleContext<KerMLParser::Argument_expressionContext>(0);
}


size_t KerMLParser::Function_operation_expressionContext::getRuleIndex() const {
  return KerMLParser::RuleFunction_operation_expression;
}

void KerMLParser::Function_operation_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunction_operation_expression(this);
}

void KerMLParser::Function_operation_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunction_operation_expression(this);
}

KerMLParser::Function_operation_expressionContext* KerMLParser::function_operation_expression() {
  Function_operation_expressionContext *_localctx = _tracker.createInstance<Function_operation_expressionContext>(_ctx, getState());
  enterRule(_localctx, 362, KerMLParser::RuleFunction_operation_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1690);
    match(KerMLParser::SYMBOL_ARROOW);
    setState(1691);
    reference_typing();
    setState(1695);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 170, _ctx)) {
    case 1: {
      setState(1692);
      body_argument_member();
      break;
    }

    case 2: {
      setState(1693);
      function_reference_argument_member();
      break;
    }

    case 3: {
      setState(1694);
      argument_expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Body_argument_memberContext ------------------------------------------------------------------

KerMLParser::Body_argument_memberContext::Body_argument_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Body_argumentContext* KerMLParser::Body_argument_memberContext::body_argument() {
  return getRuleContext<KerMLParser::Body_argumentContext>(0);
}


size_t KerMLParser::Body_argument_memberContext::getRuleIndex() const {
  return KerMLParser::RuleBody_argument_member;
}

void KerMLParser::Body_argument_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBody_argument_member(this);
}

void KerMLParser::Body_argument_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBody_argument_member(this);
}

KerMLParser::Body_argument_memberContext* KerMLParser::body_argument_member() {
  Body_argument_memberContext *_localctx = _tracker.createInstance<Body_argument_memberContext>(_ctx, getState());
  enterRule(_localctx, 364, KerMLParser::RuleBody_argument_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1697);
    body_argument();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Body_argumentContext ------------------------------------------------------------------

KerMLParser::Body_argumentContext::Body_argumentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Body_argument_valueContext* KerMLParser::Body_argumentContext::body_argument_value() {
  return getRuleContext<KerMLParser::Body_argument_valueContext>(0);
}


size_t KerMLParser::Body_argumentContext::getRuleIndex() const {
  return KerMLParser::RuleBody_argument;
}

void KerMLParser::Body_argumentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBody_argument(this);
}

void KerMLParser::Body_argumentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBody_argument(this);
}

KerMLParser::Body_argumentContext* KerMLParser::body_argument() {
  Body_argumentContext *_localctx = _tracker.createInstance<Body_argumentContext>(_ctx, getState());
  enterRule(_localctx, 366, KerMLParser::RuleBody_argument);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1699);
    body_argument_value();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Body_argument_valueContext ------------------------------------------------------------------

KerMLParser::Body_argument_valueContext::Body_argument_valueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Body_expressionContext* KerMLParser::Body_argument_valueContext::body_expression() {
  return getRuleContext<KerMLParser::Body_expressionContext>(0);
}


size_t KerMLParser::Body_argument_valueContext::getRuleIndex() const {
  return KerMLParser::RuleBody_argument_value;
}

void KerMLParser::Body_argument_valueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBody_argument_value(this);
}

void KerMLParser::Body_argument_valueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBody_argument_value(this);
}

KerMLParser::Body_argument_valueContext* KerMLParser::body_argument_value() {
  Body_argument_valueContext *_localctx = _tracker.createInstance<Body_argument_valueContext>(_ctx, getState());
  enterRule(_localctx, 368, KerMLParser::RuleBody_argument_value);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1701);
    body_expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Body_expression_memberContext ------------------------------------------------------------------

KerMLParser::Body_expression_memberContext::Body_expression_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Body_expressionContext* KerMLParser::Body_expression_memberContext::body_expression() {
  return getRuleContext<KerMLParser::Body_expressionContext>(0);
}


size_t KerMLParser::Body_expression_memberContext::getRuleIndex() const {
  return KerMLParser::RuleBody_expression_member;
}

void KerMLParser::Body_expression_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBody_expression_member(this);
}

void KerMLParser::Body_expression_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBody_expression_member(this);
}

KerMLParser::Body_expression_memberContext* KerMLParser::body_expression_member() {
  Body_expression_memberContext *_localctx = _tracker.createInstance<Body_expression_memberContext>(_ctx, getState());
  enterRule(_localctx, 370, KerMLParser::RuleBody_expression_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1703);
    body_expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Function_reference_argument_memberContext ------------------------------------------------------------------

KerMLParser::Function_reference_argument_memberContext::Function_reference_argument_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Function_reference_argumentContext* KerMLParser::Function_reference_argument_memberContext::function_reference_argument() {
  return getRuleContext<KerMLParser::Function_reference_argumentContext>(0);
}


size_t KerMLParser::Function_reference_argument_memberContext::getRuleIndex() const {
  return KerMLParser::RuleFunction_reference_argument_member;
}

void KerMLParser::Function_reference_argument_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunction_reference_argument_member(this);
}

void KerMLParser::Function_reference_argument_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunction_reference_argument_member(this);
}

KerMLParser::Function_reference_argument_memberContext* KerMLParser::function_reference_argument_member() {
  Function_reference_argument_memberContext *_localctx = _tracker.createInstance<Function_reference_argument_memberContext>(_ctx, getState());
  enterRule(_localctx, 372, KerMLParser::RuleFunction_reference_argument_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1705);
    function_reference_argument();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Function_reference_argumentContext ------------------------------------------------------------------

KerMLParser::Function_reference_argumentContext::Function_reference_argumentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Function_reference_memberContext* KerMLParser::Function_reference_argumentContext::function_reference_member() {
  return getRuleContext<KerMLParser::Function_reference_memberContext>(0);
}


size_t KerMLParser::Function_reference_argumentContext::getRuleIndex() const {
  return KerMLParser::RuleFunction_reference_argument;
}

void KerMLParser::Function_reference_argumentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunction_reference_argument(this);
}

void KerMLParser::Function_reference_argumentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunction_reference_argument(this);
}

KerMLParser::Function_reference_argumentContext* KerMLParser::function_reference_argument() {
  Function_reference_argumentContext *_localctx = _tracker.createInstance<Function_reference_argumentContext>(_ctx, getState());
  enterRule(_localctx, 374, KerMLParser::RuleFunction_reference_argument);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1707);
    function_reference_member();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Function_reference_arugment_valueContext ------------------------------------------------------------------

KerMLParser::Function_reference_arugment_valueContext::Function_reference_arugment_valueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Function_reference_expressionContext* KerMLParser::Function_reference_arugment_valueContext::function_reference_expression() {
  return getRuleContext<KerMLParser::Function_reference_expressionContext>(0);
}


size_t KerMLParser::Function_reference_arugment_valueContext::getRuleIndex() const {
  return KerMLParser::RuleFunction_reference_arugment_value;
}

void KerMLParser::Function_reference_arugment_valueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunction_reference_arugment_value(this);
}

void KerMLParser::Function_reference_arugment_valueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunction_reference_arugment_value(this);
}

KerMLParser::Function_reference_arugment_valueContext* KerMLParser::function_reference_arugment_value() {
  Function_reference_arugment_valueContext *_localctx = _tracker.createInstance<Function_reference_arugment_valueContext>(_ctx, getState());
  enterRule(_localctx, 376, KerMLParser::RuleFunction_reference_arugment_value);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1709);
    function_reference_expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Function_reference_expressionContext ------------------------------------------------------------------

KerMLParser::Function_reference_expressionContext::Function_reference_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Reference_typingContext* KerMLParser::Function_reference_expressionContext::reference_typing() {
  return getRuleContext<KerMLParser::Reference_typingContext>(0);
}


size_t KerMLParser::Function_reference_expressionContext::getRuleIndex() const {
  return KerMLParser::RuleFunction_reference_expression;
}

void KerMLParser::Function_reference_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunction_reference_expression(this);
}

void KerMLParser::Function_reference_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunction_reference_expression(this);
}

KerMLParser::Function_reference_expressionContext* KerMLParser::function_reference_expression() {
  Function_reference_expressionContext *_localctx = _tracker.createInstance<Function_reference_expressionContext>(_ctx, getState());
  enterRule(_localctx, 378, KerMLParser::RuleFunction_reference_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1711);
    reference_typing();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Function_reference_memberContext ------------------------------------------------------------------

KerMLParser::Function_reference_memberContext::Function_reference_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Function_referenceContext* KerMLParser::Function_reference_memberContext::function_reference() {
  return getRuleContext<KerMLParser::Function_referenceContext>(0);
}


size_t KerMLParser::Function_reference_memberContext::getRuleIndex() const {
  return KerMLParser::RuleFunction_reference_member;
}

void KerMLParser::Function_reference_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunction_reference_member(this);
}

void KerMLParser::Function_reference_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunction_reference_member(this);
}

KerMLParser::Function_reference_memberContext* KerMLParser::function_reference_member() {
  Function_reference_memberContext *_localctx = _tracker.createInstance<Function_reference_memberContext>(_ctx, getState());
  enterRule(_localctx, 380, KerMLParser::RuleFunction_reference_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1713);
    function_reference();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Function_referenceContext ------------------------------------------------------------------

KerMLParser::Function_referenceContext::Function_referenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Reference_typingContext* KerMLParser::Function_referenceContext::reference_typing() {
  return getRuleContext<KerMLParser::Reference_typingContext>(0);
}


size_t KerMLParser::Function_referenceContext::getRuleIndex() const {
  return KerMLParser::RuleFunction_reference;
}

void KerMLParser::Function_referenceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunction_reference(this);
}

void KerMLParser::Function_referenceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunction_reference(this);
}

KerMLParser::Function_referenceContext* KerMLParser::function_reference() {
  Function_referenceContext *_localctx = _tracker.createInstance<Function_referenceContext>(_ctx, getState());
  enterRule(_localctx, 382, KerMLParser::RuleFunction_reference);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1715);
    reference_typing();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Feature_chain_memberContext ------------------------------------------------------------------

KerMLParser::Feature_chain_memberContext::Feature_chain_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Feature_reference_memberContext* KerMLParser::Feature_chain_memberContext::feature_reference_member() {
  return getRuleContext<KerMLParser::Feature_reference_memberContext>(0);
}

KerMLParser::Owned_feature_chain_memberContext* KerMLParser::Feature_chain_memberContext::owned_feature_chain_member() {
  return getRuleContext<KerMLParser::Owned_feature_chain_memberContext>(0);
}


size_t KerMLParser::Feature_chain_memberContext::getRuleIndex() const {
  return KerMLParser::RuleFeature_chain_member;
}

void KerMLParser::Feature_chain_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFeature_chain_member(this);
}

void KerMLParser::Feature_chain_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFeature_chain_member(this);
}

KerMLParser::Feature_chain_memberContext* KerMLParser::feature_chain_member() {
  Feature_chain_memberContext *_localctx = _tracker.createInstance<Feature_chain_memberContext>(_ctx, getState());
  enterRule(_localctx, 384, KerMLParser::RuleFeature_chain_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1719);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 171, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1717);
      feature_reference_member();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1718);
      owned_feature_chain_member();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Owned_feature_chain_memberContext ------------------------------------------------------------------

KerMLParser::Owned_feature_chain_memberContext::Owned_feature_chain_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Feature_chainContext* KerMLParser::Owned_feature_chain_memberContext::feature_chain() {
  return getRuleContext<KerMLParser::Feature_chainContext>(0);
}


size_t KerMLParser::Owned_feature_chain_memberContext::getRuleIndex() const {
  return KerMLParser::RuleOwned_feature_chain_member;
}

void KerMLParser::Owned_feature_chain_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOwned_feature_chain_member(this);
}

void KerMLParser::Owned_feature_chain_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOwned_feature_chain_member(this);
}

KerMLParser::Owned_feature_chain_memberContext* KerMLParser::owned_feature_chain_member() {
  Owned_feature_chain_memberContext *_localctx = _tracker.createInstance<Owned_feature_chain_memberContext>(_ctx, getState());
  enterRule(_localctx, 386, KerMLParser::RuleOwned_feature_chain_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1721);
    feature_chain();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Base_expressionContext ------------------------------------------------------------------

KerMLParser::Base_expressionContext::Base_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Null_expressionContext* KerMLParser::Base_expressionContext::null_expression() {
  return getRuleContext<KerMLParser::Null_expressionContext>(0);
}

KerMLParser::Literal_expressionContext* KerMLParser::Base_expressionContext::literal_expression() {
  return getRuleContext<KerMLParser::Literal_expressionContext>(0);
}

KerMLParser::Feature_reference_expressionContext* KerMLParser::Base_expressionContext::feature_reference_expression() {
  return getRuleContext<KerMLParser::Feature_reference_expressionContext>(0);
}

KerMLParser::Metadata_access_expressionContext* KerMLParser::Base_expressionContext::metadata_access_expression() {
  return getRuleContext<KerMLParser::Metadata_access_expressionContext>(0);
}

KerMLParser::Invocation_expressionContext* KerMLParser::Base_expressionContext::invocation_expression() {
  return getRuleContext<KerMLParser::Invocation_expressionContext>(0);
}

KerMLParser::Body_expressionContext* KerMLParser::Base_expressionContext::body_expression() {
  return getRuleContext<KerMLParser::Body_expressionContext>(0);
}


size_t KerMLParser::Base_expressionContext::getRuleIndex() const {
  return KerMLParser::RuleBase_expression;
}

void KerMLParser::Base_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBase_expression(this);
}

void KerMLParser::Base_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBase_expression(this);
}

KerMLParser::Base_expressionContext* KerMLParser::base_expression() {
  Base_expressionContext *_localctx = _tracker.createInstance<Base_expressionContext>(_ctx, getState());
  enterRule(_localctx, 388, KerMLParser::RuleBase_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1729);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 172, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1723);
      null_expression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1724);
      literal_expression();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1725);
      feature_reference_expression();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1726);
      metadata_access_expression();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1727);
      invocation_expression();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1728);
      body_expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Null_expressionContext ------------------------------------------------------------------

KerMLParser::Null_expressionContext::Null_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Null_expressionContext::KEYWORD_NULL() {
  return getToken(KerMLParser::KEYWORD_NULL, 0);
}

tree::TerminalNode* KerMLParser::Null_expressionContext::SYMBOL_ROUND_BRACKET_OPEN() {
  return getToken(KerMLParser::SYMBOL_ROUND_BRACKET_OPEN, 0);
}

tree::TerminalNode* KerMLParser::Null_expressionContext::SYMBOL_ROUND_BRACKET_CLOSE() {
  return getToken(KerMLParser::SYMBOL_ROUND_BRACKET_CLOSE, 0);
}


size_t KerMLParser::Null_expressionContext::getRuleIndex() const {
  return KerMLParser::RuleNull_expression;
}

void KerMLParser::Null_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNull_expression(this);
}

void KerMLParser::Null_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNull_expression(this);
}

KerMLParser::Null_expressionContext* KerMLParser::null_expression() {
  Null_expressionContext *_localctx = _tracker.createInstance<Null_expressionContext>(_ctx, getState());
  enterRule(_localctx, 390, KerMLParser::RuleNull_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1734);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case KerMLParser::KEYWORD_NULL: {
        enterOuterAlt(_localctx, 1);
        setState(1731);
        match(KerMLParser::KEYWORD_NULL);
        break;
      }

      case KerMLParser::SYMBOL_ROUND_BRACKET_OPEN: {
        enterOuterAlt(_localctx, 2);
        setState(1732);
        match(KerMLParser::SYMBOL_ROUND_BRACKET_OPEN);
        setState(1733);
        match(KerMLParser::SYMBOL_ROUND_BRACKET_CLOSE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Feature_reference_expressionContext ------------------------------------------------------------------

KerMLParser::Feature_reference_expressionContext::Feature_reference_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Feature_reference_memberContext* KerMLParser::Feature_reference_expressionContext::feature_reference_member() {
  return getRuleContext<KerMLParser::Feature_reference_memberContext>(0);
}


size_t KerMLParser::Feature_reference_expressionContext::getRuleIndex() const {
  return KerMLParser::RuleFeature_reference_expression;
}

void KerMLParser::Feature_reference_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFeature_reference_expression(this);
}

void KerMLParser::Feature_reference_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFeature_reference_expression(this);
}

KerMLParser::Feature_reference_expressionContext* KerMLParser::feature_reference_expression() {
  Feature_reference_expressionContext *_localctx = _tracker.createInstance<Feature_reference_expressionContext>(_ctx, getState());
  enterRule(_localctx, 392, KerMLParser::RuleFeature_reference_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1736);
    feature_reference_member();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Feature_reference_memberContext ------------------------------------------------------------------

KerMLParser::Feature_reference_memberContext::Feature_reference_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Feature_referenceContext* KerMLParser::Feature_reference_memberContext::feature_reference() {
  return getRuleContext<KerMLParser::Feature_referenceContext>(0);
}


size_t KerMLParser::Feature_reference_memberContext::getRuleIndex() const {
  return KerMLParser::RuleFeature_reference_member;
}

void KerMLParser::Feature_reference_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFeature_reference_member(this);
}

void KerMLParser::Feature_reference_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFeature_reference_member(this);
}

KerMLParser::Feature_reference_memberContext* KerMLParser::feature_reference_member() {
  Feature_reference_memberContext *_localctx = _tracker.createInstance<Feature_reference_memberContext>(_ctx, getState());
  enterRule(_localctx, 394, KerMLParser::RuleFeature_reference_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1738);
    feature_reference();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Feature_referenceContext ------------------------------------------------------------------

KerMLParser::Feature_referenceContext::Feature_referenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Qualified_nameContext* KerMLParser::Feature_referenceContext::qualified_name() {
  return getRuleContext<KerMLParser::Qualified_nameContext>(0);
}


size_t KerMLParser::Feature_referenceContext::getRuleIndex() const {
  return KerMLParser::RuleFeature_reference;
}

void KerMLParser::Feature_referenceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFeature_reference(this);
}

void KerMLParser::Feature_referenceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFeature_reference(this);
}

KerMLParser::Feature_referenceContext* KerMLParser::feature_reference() {
  Feature_referenceContext *_localctx = _tracker.createInstance<Feature_referenceContext>(_ctx, getState());
  enterRule(_localctx, 396, KerMLParser::RuleFeature_reference);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1740);
    qualified_name();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Metadata_access_expressionContext ------------------------------------------------------------------

KerMLParser::Metadata_access_expressionContext::Metadata_access_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Qualified_nameContext* KerMLParser::Metadata_access_expressionContext::qualified_name() {
  return getRuleContext<KerMLParser::Qualified_nameContext>(0);
}

tree::TerminalNode* KerMLParser::Metadata_access_expressionContext::SYMBOL_DOT() {
  return getToken(KerMLParser::SYMBOL_DOT, 0);
}

tree::TerminalNode* KerMLParser::Metadata_access_expressionContext::KEYWORD_METADATA() {
  return getToken(KerMLParser::KEYWORD_METADATA, 0);
}


size_t KerMLParser::Metadata_access_expressionContext::getRuleIndex() const {
  return KerMLParser::RuleMetadata_access_expression;
}

void KerMLParser::Metadata_access_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMetadata_access_expression(this);
}

void KerMLParser::Metadata_access_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMetadata_access_expression(this);
}

KerMLParser::Metadata_access_expressionContext* KerMLParser::metadata_access_expression() {
  Metadata_access_expressionContext *_localctx = _tracker.createInstance<Metadata_access_expressionContext>(_ctx, getState());
  enterRule(_localctx, 398, KerMLParser::RuleMetadata_access_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1742);
    qualified_name();
    setState(1743);
    match(KerMLParser::SYMBOL_DOT);
    setState(1744);
    match(KerMLParser::KEYWORD_METADATA);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Invocation_expressionContext ------------------------------------------------------------------

KerMLParser::Invocation_expressionContext::Invocation_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Internal_invocation_expressionContext* KerMLParser::Invocation_expressionContext::internal_invocation_expression() {
  return getRuleContext<KerMLParser::Internal_invocation_expressionContext>(0);
}


size_t KerMLParser::Invocation_expressionContext::getRuleIndex() const {
  return KerMLParser::RuleInvocation_expression;
}

void KerMLParser::Invocation_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInvocation_expression(this);
}

void KerMLParser::Invocation_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInvocation_expression(this);
}

KerMLParser::Invocation_expressionContext* KerMLParser::invocation_expression() {
  Invocation_expressionContext *_localctx = _tracker.createInstance<Invocation_expressionContext>(_ctx, getState());
  enterRule(_localctx, 400, KerMLParser::RuleInvocation_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1746);
    internal_invocation_expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Internal_invocation_expressionContext ------------------------------------------------------------------

KerMLParser::Internal_invocation_expressionContext::Internal_invocation_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Argument_listContext* KerMLParser::Internal_invocation_expressionContext::argument_list() {
  return getRuleContext<KerMLParser::Argument_listContext>(0);
}

KerMLParser::Owned_feature_typingContext* KerMLParser::Internal_invocation_expressionContext::owned_feature_typing() {
  return getRuleContext<KerMLParser::Owned_feature_typingContext>(0);
}

KerMLParser::Named_argument_listContext* KerMLParser::Internal_invocation_expressionContext::named_argument_list() {
  return getRuleContext<KerMLParser::Named_argument_listContext>(0);
}


size_t KerMLParser::Internal_invocation_expressionContext::getRuleIndex() const {
  return KerMLParser::RuleInternal_invocation_expression;
}

void KerMLParser::Internal_invocation_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInternal_invocation_expression(this);
}

void KerMLParser::Internal_invocation_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInternal_invocation_expression(this);
}

KerMLParser::Internal_invocation_expressionContext* KerMLParser::internal_invocation_expression() {
  Internal_invocation_expressionContext *_localctx = _tracker.createInstance<Internal_invocation_expressionContext>(_ctx, getState());
  enterRule(_localctx, 402, KerMLParser::RuleInternal_invocation_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1750);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 174, _ctx)) {
    case 1: {
      setState(1748);
      owned_feature_typing();
      break;
    }

    case 2: {
      setState(1749);
      named_argument_list();
      break;
    }

    default:
      break;
    }
    setState(1752);
    argument_list();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Argument_listContext ------------------------------------------------------------------

KerMLParser::Argument_listContext::Argument_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Argument_listContext::SYMBOL_ROUND_BRACKET_OPEN() {
  return getToken(KerMLParser::SYMBOL_ROUND_BRACKET_OPEN, 0);
}

tree::TerminalNode* KerMLParser::Argument_listContext::SYMBOL_ROUND_BRACKET_CLOSE() {
  return getToken(KerMLParser::SYMBOL_ROUND_BRACKET_CLOSE, 0);
}

KerMLParser::Owned_expressionsContext* KerMLParser::Argument_listContext::owned_expressions() {
  return getRuleContext<KerMLParser::Owned_expressionsContext>(0);
}

KerMLParser::Positional_argument_listContext* KerMLParser::Argument_listContext::positional_argument_list() {
  return getRuleContext<KerMLParser::Positional_argument_listContext>(0);
}

KerMLParser::Named_argument_listContext* KerMLParser::Argument_listContext::named_argument_list() {
  return getRuleContext<KerMLParser::Named_argument_listContext>(0);
}


size_t KerMLParser::Argument_listContext::getRuleIndex() const {
  return KerMLParser::RuleArgument_list;
}

void KerMLParser::Argument_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArgument_list(this);
}

void KerMLParser::Argument_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArgument_list(this);
}

KerMLParser::Argument_listContext* KerMLParser::argument_list() {
  Argument_listContext *_localctx = _tracker.createInstance<Argument_listContext>(_ctx, getState());
  enterRule(_localctx, 404, KerMLParser::RuleArgument_list);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1754);
    match(KerMLParser::SYMBOL_ROUND_BRACKET_OPEN);
    setState(1759);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 175, _ctx)) {
    case 1: {
      setState(1755);
      owned_expressions();
      setState(1756);
      positional_argument_list();
      break;
    }

    case 2: {
      setState(1758);
      named_argument_list();
      break;
    }

    default:
      break;
    }
    setState(1761);
    match(KerMLParser::SYMBOL_ROUND_BRACKET_CLOSE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Positional_argument_listContext ------------------------------------------------------------------

KerMLParser::Positional_argument_listContext::Positional_argument_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Argument_memberContext* KerMLParser::Positional_argument_listContext::argument_member() {
  return getRuleContext<KerMLParser::Argument_memberContext>(0);
}

std::vector<tree::TerminalNode *> KerMLParser::Positional_argument_listContext::SYMBOL_COMMA() {
  return getTokens(KerMLParser::SYMBOL_COMMA);
}

tree::TerminalNode* KerMLParser::Positional_argument_listContext::SYMBOL_COMMA(size_t i) {
  return getToken(KerMLParser::SYMBOL_COMMA, i);
}

std::vector<KerMLParser::Owned_expressionsContext *> KerMLParser::Positional_argument_listContext::owned_expressions() {
  return getRuleContexts<KerMLParser::Owned_expressionsContext>();
}

KerMLParser::Owned_expressionsContext* KerMLParser::Positional_argument_listContext::owned_expressions(size_t i) {
  return getRuleContext<KerMLParser::Owned_expressionsContext>(i);
}


size_t KerMLParser::Positional_argument_listContext::getRuleIndex() const {
  return KerMLParser::RulePositional_argument_list;
}

void KerMLParser::Positional_argument_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPositional_argument_list(this);
}

void KerMLParser::Positional_argument_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPositional_argument_list(this);
}

KerMLParser::Positional_argument_listContext* KerMLParser::positional_argument_list() {
  Positional_argument_listContext *_localctx = _tracker.createInstance<Positional_argument_listContext>(_ctx, getState());
  enterRule(_localctx, 406, KerMLParser::RulePositional_argument_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1763);
    argument_member();
    setState(1768);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == KerMLParser::SYMBOL_COMMA) {
      setState(1764);
      match(KerMLParser::SYMBOL_COMMA);
      setState(1765);
      owned_expressions();
      setState(1770);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Named_argument_listContext ------------------------------------------------------------------

KerMLParser::Named_argument_listContext::Named_argument_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<KerMLParser::Named_argument_memberContext *> KerMLParser::Named_argument_listContext::named_argument_member() {
  return getRuleContexts<KerMLParser::Named_argument_memberContext>();
}

KerMLParser::Named_argument_memberContext* KerMLParser::Named_argument_listContext::named_argument_member(size_t i) {
  return getRuleContext<KerMLParser::Named_argument_memberContext>(i);
}

std::vector<tree::TerminalNode *> KerMLParser::Named_argument_listContext::SYMBOL_COMMA() {
  return getTokens(KerMLParser::SYMBOL_COMMA);
}

tree::TerminalNode* KerMLParser::Named_argument_listContext::SYMBOL_COMMA(size_t i) {
  return getToken(KerMLParser::SYMBOL_COMMA, i);
}


size_t KerMLParser::Named_argument_listContext::getRuleIndex() const {
  return KerMLParser::RuleNamed_argument_list;
}

void KerMLParser::Named_argument_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamed_argument_list(this);
}

void KerMLParser::Named_argument_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamed_argument_list(this);
}

KerMLParser::Named_argument_listContext* KerMLParser::named_argument_list() {
  Named_argument_listContext *_localctx = _tracker.createInstance<Named_argument_listContext>(_ctx, getState());
  enterRule(_localctx, 408, KerMLParser::RuleNamed_argument_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1771);
    named_argument_member();
    setState(1776);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == KerMLParser::SYMBOL_COMMA) {
      setState(1772);
      match(KerMLParser::SYMBOL_COMMA);
      setState(1773);
      named_argument_member();
      setState(1778);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Named_argument_memberContext ------------------------------------------------------------------

KerMLParser::Named_argument_memberContext::Named_argument_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Named_argumentContext* KerMLParser::Named_argument_memberContext::named_argument() {
  return getRuleContext<KerMLParser::Named_argumentContext>(0);
}


size_t KerMLParser::Named_argument_memberContext::getRuleIndex() const {
  return KerMLParser::RuleNamed_argument_member;
}

void KerMLParser::Named_argument_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamed_argument_member(this);
}

void KerMLParser::Named_argument_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamed_argument_member(this);
}

KerMLParser::Named_argument_memberContext* KerMLParser::named_argument_member() {
  Named_argument_memberContext *_localctx = _tracker.createInstance<Named_argument_memberContext>(_ctx, getState());
  enterRule(_localctx, 410, KerMLParser::RuleNamed_argument_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1779);
    named_argument();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Named_argumentContext ------------------------------------------------------------------

KerMLParser::Named_argumentContext::Named_argumentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Paramenter_redefinitionContext* KerMLParser::Named_argumentContext::paramenter_redefinition() {
  return getRuleContext<KerMLParser::Paramenter_redefinitionContext>(0);
}

tree::TerminalNode* KerMLParser::Named_argumentContext::SYMBOL_EQUALS() {
  return getToken(KerMLParser::SYMBOL_EQUALS, 0);
}

KerMLParser::Owned_expressionsContext* KerMLParser::Named_argumentContext::owned_expressions() {
  return getRuleContext<KerMLParser::Owned_expressionsContext>(0);
}


size_t KerMLParser::Named_argumentContext::getRuleIndex() const {
  return KerMLParser::RuleNamed_argument;
}

void KerMLParser::Named_argumentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamed_argument(this);
}

void KerMLParser::Named_argumentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamed_argument(this);
}

KerMLParser::Named_argumentContext* KerMLParser::named_argument() {
  Named_argumentContext *_localctx = _tracker.createInstance<Named_argumentContext>(_ctx, getState());
  enterRule(_localctx, 412, KerMLParser::RuleNamed_argument);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1781);
    paramenter_redefinition();
    setState(1782);
    match(KerMLParser::SYMBOL_EQUALS);
    setState(1783);
    owned_expressions();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Paramenter_redefinitionContext ------------------------------------------------------------------

KerMLParser::Paramenter_redefinitionContext::Paramenter_redefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Qualified_nameContext* KerMLParser::Paramenter_redefinitionContext::qualified_name() {
  return getRuleContext<KerMLParser::Qualified_nameContext>(0);
}


size_t KerMLParser::Paramenter_redefinitionContext::getRuleIndex() const {
  return KerMLParser::RuleParamenter_redefinition;
}

void KerMLParser::Paramenter_redefinitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParamenter_redefinition(this);
}

void KerMLParser::Paramenter_redefinitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParamenter_redefinition(this);
}

KerMLParser::Paramenter_redefinitionContext* KerMLParser::paramenter_redefinition() {
  Paramenter_redefinitionContext *_localctx = _tracker.createInstance<Paramenter_redefinitionContext>(_ctx, getState());
  enterRule(_localctx, 414, KerMLParser::RuleParamenter_redefinition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1785);
    qualified_name();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Body_expressionContext ------------------------------------------------------------------

KerMLParser::Body_expressionContext::Body_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Expression_body_memberContext* KerMLParser::Body_expressionContext::expression_body_member() {
  return getRuleContext<KerMLParser::Expression_body_memberContext>(0);
}


size_t KerMLParser::Body_expressionContext::getRuleIndex() const {
  return KerMLParser::RuleBody_expression;
}

void KerMLParser::Body_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBody_expression(this);
}

void KerMLParser::Body_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBody_expression(this);
}

KerMLParser::Body_expressionContext* KerMLParser::body_expression() {
  Body_expressionContext *_localctx = _tracker.createInstance<Body_expressionContext>(_ctx, getState());
  enterRule(_localctx, 416, KerMLParser::RuleBody_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1787);
    expression_body_member();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expression_body_memberContext ------------------------------------------------------------------

KerMLParser::Expression_body_memberContext::Expression_body_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Expression_bodyContext* KerMLParser::Expression_body_memberContext::expression_body() {
  return getRuleContext<KerMLParser::Expression_bodyContext>(0);
}


size_t KerMLParser::Expression_body_memberContext::getRuleIndex() const {
  return KerMLParser::RuleExpression_body_member;
}

void KerMLParser::Expression_body_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpression_body_member(this);
}

void KerMLParser::Expression_body_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpression_body_member(this);
}

KerMLParser::Expression_body_memberContext* KerMLParser::expression_body_member() {
  Expression_body_memberContext *_localctx = _tracker.createInstance<Expression_body_memberContext>(_ctx, getState());
  enterRule(_localctx, 418, KerMLParser::RuleExpression_body_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1789);
    expression_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expression_bodyContext ------------------------------------------------------------------

KerMLParser::Expression_bodyContext::Expression_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Expression_bodyContext::SYMBOL_ROUND_BRACKET_OPEN() {
  return getToken(KerMLParser::SYMBOL_ROUND_BRACKET_OPEN, 0);
}

KerMLParser::Function_body_partContext* KerMLParser::Expression_bodyContext::function_body_part() {
  return getRuleContext<KerMLParser::Function_body_partContext>(0);
}

tree::TerminalNode* KerMLParser::Expression_bodyContext::SYMBOL_ROUND_BRACKET_CLOSE() {
  return getToken(KerMLParser::SYMBOL_ROUND_BRACKET_CLOSE, 0);
}


size_t KerMLParser::Expression_bodyContext::getRuleIndex() const {
  return KerMLParser::RuleExpression_body;
}

void KerMLParser::Expression_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpression_body(this);
}

void KerMLParser::Expression_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpression_body(this);
}

KerMLParser::Expression_bodyContext* KerMLParser::expression_body() {
  Expression_bodyContext *_localctx = _tracker.createInstance<Expression_bodyContext>(_ctx, getState());
  enterRule(_localctx, 420, KerMLParser::RuleExpression_body);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1791);
    match(KerMLParser::SYMBOL_ROUND_BRACKET_OPEN);
    setState(1792);
    function_body_part();
    setState(1793);
    match(KerMLParser::SYMBOL_ROUND_BRACKET_CLOSE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Literal_expressionContext ------------------------------------------------------------------

KerMLParser::Literal_expressionContext::Literal_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Literal_expressionContext::KEYWORD_TRUE() {
  return getToken(KerMLParser::KEYWORD_TRUE, 0);
}

tree::TerminalNode* KerMLParser::Literal_expressionContext::KEYWORD_FALSE() {
  return getToken(KerMLParser::KEYWORD_FALSE, 0);
}

KerMLParser::Literal_stringContext* KerMLParser::Literal_expressionContext::literal_string() {
  return getRuleContext<KerMLParser::Literal_stringContext>(0);
}

KerMLParser::Literal_integerContext* KerMLParser::Literal_expressionContext::literal_integer() {
  return getRuleContext<KerMLParser::Literal_integerContext>(0);
}

KerMLParser::Literal_realContext* KerMLParser::Literal_expressionContext::literal_real() {
  return getRuleContext<KerMLParser::Literal_realContext>(0);
}

KerMLParser::Literal_infinityContext* KerMLParser::Literal_expressionContext::literal_infinity() {
  return getRuleContext<KerMLParser::Literal_infinityContext>(0);
}


size_t KerMLParser::Literal_expressionContext::getRuleIndex() const {
  return KerMLParser::RuleLiteral_expression;
}

void KerMLParser::Literal_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLiteral_expression(this);
}

void KerMLParser::Literal_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLiteral_expression(this);
}

KerMLParser::Literal_expressionContext* KerMLParser::literal_expression() {
  Literal_expressionContext *_localctx = _tracker.createInstance<Literal_expressionContext>(_ctx, getState());
  enterRule(_localctx, 422, KerMLParser::RuleLiteral_expression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1801);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 178, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1795);
      _la = _input->LA(1);
      if (!(_la == KerMLParser::KEYWORD_FALSE

      || _la == KerMLParser::KEYWORD_TRUE)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1796);
      literal_string();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1797);
      literal_integer();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1798);
      literal_real();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1799);
      literal_integer();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1800);
      literal_infinity();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Literal_booleanContext ------------------------------------------------------------------

KerMLParser::Literal_booleanContext::Literal_booleanContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Boolean_valueContext* KerMLParser::Literal_booleanContext::boolean_value() {
  return getRuleContext<KerMLParser::Boolean_valueContext>(0);
}


size_t KerMLParser::Literal_booleanContext::getRuleIndex() const {
  return KerMLParser::RuleLiteral_boolean;
}

void KerMLParser::Literal_booleanContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLiteral_boolean(this);
}

void KerMLParser::Literal_booleanContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLiteral_boolean(this);
}

KerMLParser::Literal_booleanContext* KerMLParser::literal_boolean() {
  Literal_booleanContext *_localctx = _tracker.createInstance<Literal_booleanContext>(_ctx, getState());
  enterRule(_localctx, 424, KerMLParser::RuleLiteral_boolean);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1803);
    boolean_value();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Boolean_valueContext ------------------------------------------------------------------

KerMLParser::Boolean_valueContext::Boolean_valueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Boolean_valueContext::KEYWORD_TRUE() {
  return getToken(KerMLParser::KEYWORD_TRUE, 0);
}

tree::TerminalNode* KerMLParser::Boolean_valueContext::KEYWORD_FALSE() {
  return getToken(KerMLParser::KEYWORD_FALSE, 0);
}


size_t KerMLParser::Boolean_valueContext::getRuleIndex() const {
  return KerMLParser::RuleBoolean_value;
}

void KerMLParser::Boolean_valueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBoolean_value(this);
}

void KerMLParser::Boolean_valueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBoolean_value(this);
}

KerMLParser::Boolean_valueContext* KerMLParser::boolean_value() {
  Boolean_valueContext *_localctx = _tracker.createInstance<Boolean_valueContext>(_ctx, getState());
  enterRule(_localctx, 426, KerMLParser::RuleBoolean_value);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1805);
    _la = _input->LA(1);
    if (!(_la == KerMLParser::KEYWORD_FALSE

    || _la == KerMLParser::KEYWORD_TRUE)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Literal_stringContext ------------------------------------------------------------------

KerMLParser::Literal_stringContext::Literal_stringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Literal_stringContext::STRING_VALUE() {
  return getToken(KerMLParser::STRING_VALUE, 0);
}


size_t KerMLParser::Literal_stringContext::getRuleIndex() const {
  return KerMLParser::RuleLiteral_string;
}

void KerMLParser::Literal_stringContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLiteral_string(this);
}

void KerMLParser::Literal_stringContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLiteral_string(this);
}

KerMLParser::Literal_stringContext* KerMLParser::literal_string() {
  Literal_stringContext *_localctx = _tracker.createInstance<Literal_stringContext>(_ctx, getState());
  enterRule(_localctx, 428, KerMLParser::RuleLiteral_string);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1807);
    match(KerMLParser::STRING_VALUE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Literal_integerContext ------------------------------------------------------------------

KerMLParser::Literal_integerContext::Literal_integerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Literal_integerContext::DECIMAL_VALUE() {
  return getToken(KerMLParser::DECIMAL_VALUE, 0);
}


size_t KerMLParser::Literal_integerContext::getRuleIndex() const {
  return KerMLParser::RuleLiteral_integer;
}

void KerMLParser::Literal_integerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLiteral_integer(this);
}

void KerMLParser::Literal_integerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLiteral_integer(this);
}

KerMLParser::Literal_integerContext* KerMLParser::literal_integer() {
  Literal_integerContext *_localctx = _tracker.createInstance<Literal_integerContext>(_ctx, getState());
  enterRule(_localctx, 430, KerMLParser::RuleLiteral_integer);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1809);
    match(KerMLParser::DECIMAL_VALUE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Literal_realContext ------------------------------------------------------------------

KerMLParser::Literal_realContext::Literal_realContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Real_valueContext* KerMLParser::Literal_realContext::real_value() {
  return getRuleContext<KerMLParser::Real_valueContext>(0);
}


size_t KerMLParser::Literal_realContext::getRuleIndex() const {
  return KerMLParser::RuleLiteral_real;
}

void KerMLParser::Literal_realContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLiteral_real(this);
}

void KerMLParser::Literal_realContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLiteral_real(this);
}

KerMLParser::Literal_realContext* KerMLParser::literal_real() {
  Literal_realContext *_localctx = _tracker.createInstance<Literal_realContext>(_ctx, getState());
  enterRule(_localctx, 432, KerMLParser::RuleLiteral_real);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1811);
    real_value();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Real_valueContext ------------------------------------------------------------------

KerMLParser::Real_valueContext::Real_valueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Real_valueContext::SYMBOL_DOT() {
  return getToken(KerMLParser::SYMBOL_DOT, 0);
}

std::vector<tree::TerminalNode *> KerMLParser::Real_valueContext::DECIMAL_VALUE() {
  return getTokens(KerMLParser::DECIMAL_VALUE);
}

tree::TerminalNode* KerMLParser::Real_valueContext::DECIMAL_VALUE(size_t i) {
  return getToken(KerMLParser::DECIMAL_VALUE, i);
}

tree::TerminalNode* KerMLParser::Real_valueContext::EXPONENTIAL_VALUE() {
  return getToken(KerMLParser::EXPONENTIAL_VALUE, 0);
}


size_t KerMLParser::Real_valueContext::getRuleIndex() const {
  return KerMLParser::RuleReal_value;
}

void KerMLParser::Real_valueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReal_value(this);
}

void KerMLParser::Real_valueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReal_value(this);
}

KerMLParser::Real_valueContext* KerMLParser::real_value() {
  Real_valueContext *_localctx = _tracker.createInstance<Real_valueContext>(_ctx, getState());
  enterRule(_localctx, 434, KerMLParser::RuleReal_value);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1819);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case KerMLParser::SYMBOL_DOT:
      case KerMLParser::DECIMAL_VALUE: {
        enterOuterAlt(_localctx, 1);
        setState(1814);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == KerMLParser::DECIMAL_VALUE) {
          setState(1813);
          match(KerMLParser::DECIMAL_VALUE);
        }
        setState(1816);
        match(KerMLParser::SYMBOL_DOT);
        setState(1817);
        _la = _input->LA(1);
        if (!(_la == KerMLParser::DECIMAL_VALUE

        || _la == KerMLParser::EXPONENTIAL_VALUE)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case KerMLParser::EXPONENTIAL_VALUE: {
        enterOuterAlt(_localctx, 2);
        setState(1818);
        match(KerMLParser::EXPONENTIAL_VALUE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Literal_infinityContext ------------------------------------------------------------------

KerMLParser::Literal_infinityContext::Literal_infinityContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Literal_infinityContext::SYMBOL_STAR() {
  return getToken(KerMLParser::SYMBOL_STAR, 0);
}


size_t KerMLParser::Literal_infinityContext::getRuleIndex() const {
  return KerMLParser::RuleLiteral_infinity;
}

void KerMLParser::Literal_infinityContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLiteral_infinity(this);
}

void KerMLParser::Literal_infinityContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLiteral_infinity(this);
}

KerMLParser::Literal_infinityContext* KerMLParser::literal_infinity() {
  Literal_infinityContext *_localctx = _tracker.createInstance<Literal_infinityContext>(_ctx, getState());
  enterRule(_localctx, 436, KerMLParser::RuleLiteral_infinity);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1821);
    match(KerMLParser::SYMBOL_STAR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InteractionContext ------------------------------------------------------------------

KerMLParser::InteractionContext::InteractionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Type_prefixContext* KerMLParser::InteractionContext::type_prefix() {
  return getRuleContext<KerMLParser::Type_prefixContext>(0);
}

tree::TerminalNode* KerMLParser::InteractionContext::KEYWORD_INTERACTION() {
  return getToken(KerMLParser::KEYWORD_INTERACTION, 0);
}

KerMLParser::Classifier_declarationContext* KerMLParser::InteractionContext::classifier_declaration() {
  return getRuleContext<KerMLParser::Classifier_declarationContext>(0);
}

KerMLParser::Type_bodyContext* KerMLParser::InteractionContext::type_body() {
  return getRuleContext<KerMLParser::Type_bodyContext>(0);
}


size_t KerMLParser::InteractionContext::getRuleIndex() const {
  return KerMLParser::RuleInteraction;
}

void KerMLParser::InteractionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInteraction(this);
}

void KerMLParser::InteractionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInteraction(this);
}

KerMLParser::InteractionContext* KerMLParser::interaction() {
  InteractionContext *_localctx = _tracker.createInstance<InteractionContext>(_ctx, getState());
  enterRule(_localctx, 438, KerMLParser::RuleInteraction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1823);
    type_prefix();
    setState(1824);
    match(KerMLParser::KEYWORD_INTERACTION);
    setState(1825);
    classifier_declaration();
    setState(1826);
    type_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Item_flowContext ------------------------------------------------------------------

KerMLParser::Item_flowContext::Item_flowContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Feature_prefixContext* KerMLParser::Item_flowContext::feature_prefix() {
  return getRuleContext<KerMLParser::Feature_prefixContext>(0);
}

tree::TerminalNode* KerMLParser::Item_flowContext::KEYWORD_FLOW() {
  return getToken(KerMLParser::KEYWORD_FLOW, 0);
}

KerMLParser::Item_flow_declarationContext* KerMLParser::Item_flowContext::item_flow_declaration() {
  return getRuleContext<KerMLParser::Item_flow_declarationContext>(0);
}

KerMLParser::Type_bodyContext* KerMLParser::Item_flowContext::type_body() {
  return getRuleContext<KerMLParser::Type_bodyContext>(0);
}


size_t KerMLParser::Item_flowContext::getRuleIndex() const {
  return KerMLParser::RuleItem_flow;
}

void KerMLParser::Item_flowContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterItem_flow(this);
}

void KerMLParser::Item_flowContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitItem_flow(this);
}

KerMLParser::Item_flowContext* KerMLParser::item_flow() {
  Item_flowContext *_localctx = _tracker.createInstance<Item_flowContext>(_ctx, getState());
  enterRule(_localctx, 440, KerMLParser::RuleItem_flow);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1828);
    feature_prefix();
    setState(1829);
    match(KerMLParser::KEYWORD_FLOW);
    setState(1830);
    item_flow_declaration();
    setState(1831);
    type_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Succession_item_flowContext ------------------------------------------------------------------

KerMLParser::Succession_item_flowContext::Succession_item_flowContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Feature_prefixContext* KerMLParser::Succession_item_flowContext::feature_prefix() {
  return getRuleContext<KerMLParser::Feature_prefixContext>(0);
}

tree::TerminalNode* KerMLParser::Succession_item_flowContext::KEYWORD_SUCCSESSION() {
  return getToken(KerMLParser::KEYWORD_SUCCSESSION, 0);
}

tree::TerminalNode* KerMLParser::Succession_item_flowContext::KEYWORD_FLOW() {
  return getToken(KerMLParser::KEYWORD_FLOW, 0);
}

KerMLParser::Item_flow_declarationContext* KerMLParser::Succession_item_flowContext::item_flow_declaration() {
  return getRuleContext<KerMLParser::Item_flow_declarationContext>(0);
}

KerMLParser::Type_bodyContext* KerMLParser::Succession_item_flowContext::type_body() {
  return getRuleContext<KerMLParser::Type_bodyContext>(0);
}


size_t KerMLParser::Succession_item_flowContext::getRuleIndex() const {
  return KerMLParser::RuleSuccession_item_flow;
}

void KerMLParser::Succession_item_flowContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSuccession_item_flow(this);
}

void KerMLParser::Succession_item_flowContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSuccession_item_flow(this);
}

KerMLParser::Succession_item_flowContext* KerMLParser::succession_item_flow() {
  Succession_item_flowContext *_localctx = _tracker.createInstance<Succession_item_flowContext>(_ctx, getState());
  enterRule(_localctx, 442, KerMLParser::RuleSuccession_item_flow);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1833);
    feature_prefix();
    setState(1834);
    match(KerMLParser::KEYWORD_SUCCSESSION);
    setState(1835);
    match(KerMLParser::KEYWORD_FLOW);
    setState(1836);
    item_flow_declaration();
    setState(1837);
    type_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Item_flow_declarationContext ------------------------------------------------------------------

KerMLParser::Item_flow_declarationContext::Item_flow_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Feature_declarationContext* KerMLParser::Item_flow_declarationContext::feature_declaration() {
  return getRuleContext<KerMLParser::Feature_declarationContext>(0);
}

std::vector<KerMLParser::Item_flow_end_memberContext *> KerMLParser::Item_flow_declarationContext::item_flow_end_member() {
  return getRuleContexts<KerMLParser::Item_flow_end_memberContext>();
}

KerMLParser::Item_flow_end_memberContext* KerMLParser::Item_flow_declarationContext::item_flow_end_member(size_t i) {
  return getRuleContext<KerMLParser::Item_flow_end_memberContext>(i);
}

tree::TerminalNode* KerMLParser::Item_flow_declarationContext::KEYWORD_TO() {
  return getToken(KerMLParser::KEYWORD_TO, 0);
}

KerMLParser::Value_partContext* KerMLParser::Item_flow_declarationContext::value_part() {
  return getRuleContext<KerMLParser::Value_partContext>(0);
}

tree::TerminalNode* KerMLParser::Item_flow_declarationContext::KEYWORD_OF() {
  return getToken(KerMLParser::KEYWORD_OF, 0);
}

KerMLParser::Item_feature_memberContext* KerMLParser::Item_flow_declarationContext::item_feature_member() {
  return getRuleContext<KerMLParser::Item_feature_memberContext>(0);
}

tree::TerminalNode* KerMLParser::Item_flow_declarationContext::KEYWORD_FROM() {
  return getToken(KerMLParser::KEYWORD_FROM, 0);
}

tree::TerminalNode* KerMLParser::Item_flow_declarationContext::KEYWORD_ALL() {
  return getToken(KerMLParser::KEYWORD_ALL, 0);
}


size_t KerMLParser::Item_flow_declarationContext::getRuleIndex() const {
  return KerMLParser::RuleItem_flow_declaration;
}

void KerMLParser::Item_flow_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterItem_flow_declaration(this);
}

void KerMLParser::Item_flow_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitItem_flow_declaration(this);
}

KerMLParser::Item_flow_declarationContext* KerMLParser::item_flow_declaration() {
  Item_flow_declarationContext *_localctx = _tracker.createInstance<Item_flow_declarationContext>(_ctx, getState());
  enterRule(_localctx, 444, KerMLParser::RuleItem_flow_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1861);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 185, _ctx)) {
    case 1: {
      setState(1839);
      feature_declaration();
      setState(1841);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == KerMLParser::KEYWORD_DEFAULT || _la == KerMLParser::SYMBOL_DEF_ASSIGN

      || _la == KerMLParser::SYMBOL_EQUALS) {
        setState(1840);
        value_part();
      }
      setState(1845);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == KerMLParser::KEYWORD_OF) {
        setState(1843);
        match(KerMLParser::KEYWORD_OF);
        setState(1844);
        item_feature_member();
      }
      setState(1852);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == KerMLParser::KEYWORD_FROM) {
        setState(1847);
        match(KerMLParser::KEYWORD_FROM);
        setState(1848);
        item_flow_end_member();
        setState(1849);
        match(KerMLParser::KEYWORD_TO);
        setState(1850);
        item_flow_end_member();
      }
      break;
    }

    case 2: {
      setState(1855);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == KerMLParser::KEYWORD_ALL) {
        setState(1854);
        match(KerMLParser::KEYWORD_ALL);
      }
      setState(1857);
      item_flow_end_member();
      setState(1858);
      match(KerMLParser::KEYWORD_TO);
      setState(1859);
      item_flow_end_member();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Item_feature_memberContext ------------------------------------------------------------------

KerMLParser::Item_feature_memberContext::Item_feature_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Item_featureContext* KerMLParser::Item_feature_memberContext::item_feature() {
  return getRuleContext<KerMLParser::Item_featureContext>(0);
}


size_t KerMLParser::Item_feature_memberContext::getRuleIndex() const {
  return KerMLParser::RuleItem_feature_member;
}

void KerMLParser::Item_feature_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterItem_feature_member(this);
}

void KerMLParser::Item_feature_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitItem_feature_member(this);
}

KerMLParser::Item_feature_memberContext* KerMLParser::item_feature_member() {
  Item_feature_memberContext *_localctx = _tracker.createInstance<Item_feature_memberContext>(_ctx, getState());
  enterRule(_localctx, 446, KerMLParser::RuleItem_feature_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1863);
    item_feature();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Item_featureContext ------------------------------------------------------------------

KerMLParser::Item_featureContext::Item_featureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::IdentificationContext* KerMLParser::Item_featureContext::identification() {
  return getRuleContext<KerMLParser::IdentificationContext>(0);
}

KerMLParser::Item_feature_specilization_partContext* KerMLParser::Item_featureContext::item_feature_specilization_part() {
  return getRuleContext<KerMLParser::Item_feature_specilization_partContext>(0);
}

KerMLParser::Value_partContext* KerMLParser::Item_featureContext::value_part() {
  return getRuleContext<KerMLParser::Value_partContext>(0);
}

KerMLParser::Owned_feature_typingContext* KerMLParser::Item_featureContext::owned_feature_typing() {
  return getRuleContext<KerMLParser::Owned_feature_typingContext>(0);
}

KerMLParser::Multiplicity_boundsContext* KerMLParser::Item_featureContext::multiplicity_bounds() {
  return getRuleContext<KerMLParser::Multiplicity_boundsContext>(0);
}


size_t KerMLParser::Item_featureContext::getRuleIndex() const {
  return KerMLParser::RuleItem_feature;
}

void KerMLParser::Item_featureContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterItem_feature(this);
}

void KerMLParser::Item_featureContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitItem_feature(this);
}

KerMLParser::Item_featureContext* KerMLParser::item_feature() {
  Item_featureContext *_localctx = _tracker.createInstance<Item_featureContext>(_ctx, getState());
  enterRule(_localctx, 448, KerMLParser::RuleItem_feature);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1878);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 189, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1865);
      identification();
      setState(1866);
      item_feature_specilization_part();
      setState(1868);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == KerMLParser::KEYWORD_DEFAULT || _la == KerMLParser::SYMBOL_DEF_ASSIGN

      || _la == KerMLParser::SYMBOL_EQUALS) {
        setState(1867);
        value_part();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1870);
      owned_feature_typing();
      setState(1872);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == KerMLParser::SYMBOL_SQUARE_BRACKET_OPEN) {
        setState(1871);
        multiplicity_bounds();
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1874);
      multiplicity_bounds();
      setState(1876);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == KerMLParser::NAME) {
        setState(1875);
        owned_feature_typing();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Item_feature_specilization_partContext ------------------------------------------------------------------

KerMLParser::Item_feature_specilization_partContext::Item_feature_specilization_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Multiplicity_partContext* KerMLParser::Item_feature_specilization_partContext::multiplicity_part() {
  return getRuleContext<KerMLParser::Multiplicity_partContext>(0);
}

std::vector<KerMLParser::Feature_specilizationContext *> KerMLParser::Item_feature_specilization_partContext::feature_specilization() {
  return getRuleContexts<KerMLParser::Feature_specilizationContext>();
}

KerMLParser::Feature_specilizationContext* KerMLParser::Item_feature_specilization_partContext::feature_specilization(size_t i) {
  return getRuleContext<KerMLParser::Feature_specilizationContext>(i);
}


size_t KerMLParser::Item_feature_specilization_partContext::getRuleIndex() const {
  return KerMLParser::RuleItem_feature_specilization_part;
}

void KerMLParser::Item_feature_specilization_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterItem_feature_specilization_part(this);
}

void KerMLParser::Item_feature_specilization_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitItem_feature_specilization_part(this);
}

KerMLParser::Item_feature_specilization_partContext* KerMLParser::item_feature_specilization_part() {
  Item_feature_specilization_partContext *_localctx = _tracker.createInstance<Item_feature_specilization_partContext>(_ctx, getState());
  enterRule(_localctx, 450, KerMLParser::RuleItem_feature_specilization_part);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1883);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 54043195528446068) != 0) || _la == KerMLParser::KEYWORD_OUT) {
      setState(1880);
      feature_specilization();
      setState(1885);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }

    setState(1886);
    multiplicity_part();
    setState(1888);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 54043195528446068) != 0) || _la == KerMLParser::KEYWORD_OUT) {
      setState(1887);
      feature_specilization();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Item_flow_end_memberContext ------------------------------------------------------------------

KerMLParser::Item_flow_end_memberContext::Item_flow_end_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Item_flow_endContext* KerMLParser::Item_flow_end_memberContext::item_flow_end() {
  return getRuleContext<KerMLParser::Item_flow_endContext>(0);
}


size_t KerMLParser::Item_flow_end_memberContext::getRuleIndex() const {
  return KerMLParser::RuleItem_flow_end_member;
}

void KerMLParser::Item_flow_end_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterItem_flow_end_member(this);
}

void KerMLParser::Item_flow_end_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitItem_flow_end_member(this);
}

KerMLParser::Item_flow_end_memberContext* KerMLParser::item_flow_end_member() {
  Item_flow_end_memberContext *_localctx = _tracker.createInstance<Item_flow_end_memberContext>(_ctx, getState());
  enterRule(_localctx, 452, KerMLParser::RuleItem_flow_end_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1890);
    item_flow_end();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Item_flow_endContext ------------------------------------------------------------------

KerMLParser::Item_flow_endContext::Item_flow_endContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Item_flow_feature_memberContext* KerMLParser::Item_flow_endContext::item_flow_feature_member() {
  return getRuleContext<KerMLParser::Item_flow_feature_memberContext>(0);
}

KerMLParser::Owned_reference_subsettingContext* KerMLParser::Item_flow_endContext::owned_reference_subsetting() {
  return getRuleContext<KerMLParser::Owned_reference_subsettingContext>(0);
}

tree::TerminalNode* KerMLParser::Item_flow_endContext::SYMBOL_DOT() {
  return getToken(KerMLParser::SYMBOL_DOT, 0);
}


size_t KerMLParser::Item_flow_endContext::getRuleIndex() const {
  return KerMLParser::RuleItem_flow_end;
}

void KerMLParser::Item_flow_endContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterItem_flow_end(this);
}

void KerMLParser::Item_flow_endContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitItem_flow_end(this);
}

KerMLParser::Item_flow_endContext* KerMLParser::item_flow_end() {
  Item_flow_endContext *_localctx = _tracker.createInstance<Item_flow_endContext>(_ctx, getState());
  enterRule(_localctx, 454, KerMLParser::RuleItem_flow_end);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1895);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 192, _ctx)) {
    case 1: {
      setState(1892);
      owned_reference_subsetting();
      setState(1893);
      match(KerMLParser::SYMBOL_DOT);
      break;
    }

    default:
      break;
    }
    setState(1897);
    item_flow_feature_member();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Item_flow_feature_memberContext ------------------------------------------------------------------

KerMLParser::Item_flow_feature_memberContext::Item_flow_feature_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Item_flow_featureContext* KerMLParser::Item_flow_feature_memberContext::item_flow_feature() {
  return getRuleContext<KerMLParser::Item_flow_featureContext>(0);
}


size_t KerMLParser::Item_flow_feature_memberContext::getRuleIndex() const {
  return KerMLParser::RuleItem_flow_feature_member;
}

void KerMLParser::Item_flow_feature_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterItem_flow_feature_member(this);
}

void KerMLParser::Item_flow_feature_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitItem_flow_feature_member(this);
}

KerMLParser::Item_flow_feature_memberContext* KerMLParser::item_flow_feature_member() {
  Item_flow_feature_memberContext *_localctx = _tracker.createInstance<Item_flow_feature_memberContext>(_ctx, getState());
  enterRule(_localctx, 456, KerMLParser::RuleItem_flow_feature_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1899);
    item_flow_feature();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Item_flow_featureContext ------------------------------------------------------------------

KerMLParser::Item_flow_featureContext::Item_flow_featureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Item_flow_redefinitionContext* KerMLParser::Item_flow_featureContext::item_flow_redefinition() {
  return getRuleContext<KerMLParser::Item_flow_redefinitionContext>(0);
}


size_t KerMLParser::Item_flow_featureContext::getRuleIndex() const {
  return KerMLParser::RuleItem_flow_feature;
}

void KerMLParser::Item_flow_featureContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterItem_flow_feature(this);
}

void KerMLParser::Item_flow_featureContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitItem_flow_feature(this);
}

KerMLParser::Item_flow_featureContext* KerMLParser::item_flow_feature() {
  Item_flow_featureContext *_localctx = _tracker.createInstance<Item_flow_featureContext>(_ctx, getState());
  enterRule(_localctx, 458, KerMLParser::RuleItem_flow_feature);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1901);
    item_flow_redefinition();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Item_flow_redefinitionContext ------------------------------------------------------------------

KerMLParser::Item_flow_redefinitionContext::Item_flow_redefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Qualified_nameContext* KerMLParser::Item_flow_redefinitionContext::qualified_name() {
  return getRuleContext<KerMLParser::Qualified_nameContext>(0);
}


size_t KerMLParser::Item_flow_redefinitionContext::getRuleIndex() const {
  return KerMLParser::RuleItem_flow_redefinition;
}

void KerMLParser::Item_flow_redefinitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterItem_flow_redefinition(this);
}

void KerMLParser::Item_flow_redefinitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitItem_flow_redefinition(this);
}

KerMLParser::Item_flow_redefinitionContext* KerMLParser::item_flow_redefinition() {
  Item_flow_redefinitionContext *_localctx = _tracker.createInstance<Item_flow_redefinitionContext>(_ctx, getState());
  enterRule(_localctx, 460, KerMLParser::RuleItem_flow_redefinition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1903);
    qualified_name();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Value_partContext ------------------------------------------------------------------

KerMLParser::Value_partContext::Value_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Feature_valueContext* KerMLParser::Value_partContext::feature_value() {
  return getRuleContext<KerMLParser::Feature_valueContext>(0);
}


size_t KerMLParser::Value_partContext::getRuleIndex() const {
  return KerMLParser::RuleValue_part;
}

void KerMLParser::Value_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterValue_part(this);
}

void KerMLParser::Value_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitValue_part(this);
}

KerMLParser::Value_partContext* KerMLParser::value_part() {
  Value_partContext *_localctx = _tracker.createInstance<Value_partContext>(_ctx, getState());
  enterRule(_localctx, 462, KerMLParser::RuleValue_part);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1905);
    feature_value();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Feature_valueContext ------------------------------------------------------------------

KerMLParser::Feature_valueContext::Feature_valueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Owned_expressionContext* KerMLParser::Feature_valueContext::owned_expression() {
  return getRuleContext<KerMLParser::Owned_expressionContext>(0);
}

tree::TerminalNode* KerMLParser::Feature_valueContext::SYMBOL_EQUALS() {
  return getToken(KerMLParser::SYMBOL_EQUALS, 0);
}

tree::TerminalNode* KerMLParser::Feature_valueContext::SYMBOL_DEF_ASSIGN() {
  return getToken(KerMLParser::SYMBOL_DEF_ASSIGN, 0);
}

tree::TerminalNode* KerMLParser::Feature_valueContext::KEYWORD_DEFAULT() {
  return getToken(KerMLParser::KEYWORD_DEFAULT, 0);
}


size_t KerMLParser::Feature_valueContext::getRuleIndex() const {
  return KerMLParser::RuleFeature_value;
}

void KerMLParser::Feature_valueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFeature_value(this);
}

void KerMLParser::Feature_valueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFeature_value(this);
}

KerMLParser::Feature_valueContext* KerMLParser::feature_value() {
  Feature_valueContext *_localctx = _tracker.createInstance<Feature_valueContext>(_ctx, getState());
  enterRule(_localctx, 464, KerMLParser::RuleFeature_value);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1913);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case KerMLParser::SYMBOL_EQUALS: {
        setState(1907);
        match(KerMLParser::SYMBOL_EQUALS);
        break;
      }

      case KerMLParser::SYMBOL_DEF_ASSIGN: {
        setState(1908);
        match(KerMLParser::SYMBOL_DEF_ASSIGN);
        break;
      }

      case KerMLParser::KEYWORD_DEFAULT: {
        setState(1909);
        match(KerMLParser::KEYWORD_DEFAULT);
        setState(1911);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == KerMLParser::SYMBOL_DEF_ASSIGN

        || _la == KerMLParser::SYMBOL_EQUALS) {
          setState(1910);
          _la = _input->LA(1);
          if (!(_la == KerMLParser::SYMBOL_DEF_ASSIGN

          || _la == KerMLParser::SYMBOL_EQUALS)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(1915);
    owned_expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Feature_assignmentContext ------------------------------------------------------------------

KerMLParser::Feature_assignmentContext::Feature_assignmentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Feature_assignmentContext::SYMBOL_ASSIGN() {
  return getToken(KerMLParser::SYMBOL_ASSIGN, 0);
}

KerMLParser::Owned_expressionContext* KerMLParser::Feature_assignmentContext::owned_expression() {
  return getRuleContext<KerMLParser::Owned_expressionContext>(0);
}


size_t KerMLParser::Feature_assignmentContext::getRuleIndex() const {
  return KerMLParser::RuleFeature_assignment;
}

void KerMLParser::Feature_assignmentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFeature_assignment(this);
}

void KerMLParser::Feature_assignmentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFeature_assignment(this);
}

KerMLParser::Feature_assignmentContext* KerMLParser::feature_assignment() {
  Feature_assignmentContext *_localctx = _tracker.createInstance<Feature_assignmentContext>(_ctx, getState());
  enterRule(_localctx, 466, KerMLParser::RuleFeature_assignment);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1917);
    match(KerMLParser::SYMBOL_ASSIGN);
    setState(1918);
    owned_expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MultiplicityContext ------------------------------------------------------------------

KerMLParser::MultiplicityContext::MultiplicityContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Multiplicity_subsetContext* KerMLParser::MultiplicityContext::multiplicity_subset() {
  return getRuleContext<KerMLParser::Multiplicity_subsetContext>(0);
}

KerMLParser::Multiplicity_rangeContext* KerMLParser::MultiplicityContext::multiplicity_range() {
  return getRuleContext<KerMLParser::Multiplicity_rangeContext>(0);
}


size_t KerMLParser::MultiplicityContext::getRuleIndex() const {
  return KerMLParser::RuleMultiplicity;
}

void KerMLParser::MultiplicityContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMultiplicity(this);
}

void KerMLParser::MultiplicityContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMultiplicity(this);
}

KerMLParser::MultiplicityContext* KerMLParser::multiplicity() {
  MultiplicityContext *_localctx = _tracker.createInstance<MultiplicityContext>(_ctx, getState());
  enterRule(_localctx, 468, KerMLParser::RuleMultiplicity);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1922);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 195, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1920);
      multiplicity_subset();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1921);
      multiplicity_range();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Multiplicity_subsetContext ------------------------------------------------------------------

KerMLParser::Multiplicity_subsetContext::Multiplicity_subsetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Multiplicity_subsetContext::KEYWORD_MULTIPLICITY() {
  return getToken(KerMLParser::KEYWORD_MULTIPLICITY, 0);
}

KerMLParser::IdentificationContext* KerMLParser::Multiplicity_subsetContext::identification() {
  return getRuleContext<KerMLParser::IdentificationContext>(0);
}

KerMLParser::SubsetsContext* KerMLParser::Multiplicity_subsetContext::subsets() {
  return getRuleContext<KerMLParser::SubsetsContext>(0);
}

KerMLParser::Type_bodyContext* KerMLParser::Multiplicity_subsetContext::type_body() {
  return getRuleContext<KerMLParser::Type_bodyContext>(0);
}


size_t KerMLParser::Multiplicity_subsetContext::getRuleIndex() const {
  return KerMLParser::RuleMultiplicity_subset;
}

void KerMLParser::Multiplicity_subsetContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMultiplicity_subset(this);
}

void KerMLParser::Multiplicity_subsetContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMultiplicity_subset(this);
}

KerMLParser::Multiplicity_subsetContext* KerMLParser::multiplicity_subset() {
  Multiplicity_subsetContext *_localctx = _tracker.createInstance<Multiplicity_subsetContext>(_ctx, getState());
  enterRule(_localctx, 470, KerMLParser::RuleMultiplicity_subset);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1924);
    match(KerMLParser::KEYWORD_MULTIPLICITY);
    setState(1925);
    identification();
    setState(1926);
    subsets();
    setState(1927);
    type_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Multiplicity_rangeContext ------------------------------------------------------------------

KerMLParser::Multiplicity_rangeContext::Multiplicity_rangeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Multiplicity_rangeContext::KEYWORD_MULTIPLICITY() {
  return getToken(KerMLParser::KEYWORD_MULTIPLICITY, 0);
}

KerMLParser::IdentificationContext* KerMLParser::Multiplicity_rangeContext::identification() {
  return getRuleContext<KerMLParser::IdentificationContext>(0);
}

KerMLParser::Multiplicity_boundsContext* KerMLParser::Multiplicity_rangeContext::multiplicity_bounds() {
  return getRuleContext<KerMLParser::Multiplicity_boundsContext>(0);
}

KerMLParser::Type_bodyContext* KerMLParser::Multiplicity_rangeContext::type_body() {
  return getRuleContext<KerMLParser::Type_bodyContext>(0);
}


size_t KerMLParser::Multiplicity_rangeContext::getRuleIndex() const {
  return KerMLParser::RuleMultiplicity_range;
}

void KerMLParser::Multiplicity_rangeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMultiplicity_range(this);
}

void KerMLParser::Multiplicity_rangeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMultiplicity_range(this);
}

KerMLParser::Multiplicity_rangeContext* KerMLParser::multiplicity_range() {
  Multiplicity_rangeContext *_localctx = _tracker.createInstance<Multiplicity_rangeContext>(_ctx, getState());
  enterRule(_localctx, 472, KerMLParser::RuleMultiplicity_range);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1929);
    match(KerMLParser::KEYWORD_MULTIPLICITY);
    setState(1930);
    identification();
    setState(1931);
    multiplicity_bounds();
    setState(1932);
    type_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Owned_multiplicityContext ------------------------------------------------------------------

KerMLParser::Owned_multiplicityContext::Owned_multiplicityContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Multiplicity_boundsContext* KerMLParser::Owned_multiplicityContext::multiplicity_bounds() {
  return getRuleContext<KerMLParser::Multiplicity_boundsContext>(0);
}


size_t KerMLParser::Owned_multiplicityContext::getRuleIndex() const {
  return KerMLParser::RuleOwned_multiplicity;
}

void KerMLParser::Owned_multiplicityContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOwned_multiplicity(this);
}

void KerMLParser::Owned_multiplicityContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOwned_multiplicity(this);
}

KerMLParser::Owned_multiplicityContext* KerMLParser::owned_multiplicity() {
  Owned_multiplicityContext *_localctx = _tracker.createInstance<Owned_multiplicityContext>(_ctx, getState());
  enterRule(_localctx, 474, KerMLParser::RuleOwned_multiplicity);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1934);
    multiplicity_bounds();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Owned_multiplicity_rangeContext ------------------------------------------------------------------

KerMLParser::Owned_multiplicity_rangeContext::Owned_multiplicity_rangeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Multiplicity_boundsContext* KerMLParser::Owned_multiplicity_rangeContext::multiplicity_bounds() {
  return getRuleContext<KerMLParser::Multiplicity_boundsContext>(0);
}


size_t KerMLParser::Owned_multiplicity_rangeContext::getRuleIndex() const {
  return KerMLParser::RuleOwned_multiplicity_range;
}

void KerMLParser::Owned_multiplicity_rangeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOwned_multiplicity_range(this);
}

void KerMLParser::Owned_multiplicity_rangeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOwned_multiplicity_range(this);
}

KerMLParser::Owned_multiplicity_rangeContext* KerMLParser::owned_multiplicity_range() {
  Owned_multiplicity_rangeContext *_localctx = _tracker.createInstance<Owned_multiplicity_rangeContext>(_ctx, getState());
  enterRule(_localctx, 476, KerMLParser::RuleOwned_multiplicity_range);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1936);
    multiplicity_bounds();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Multiplicity_boundsContext ------------------------------------------------------------------

KerMLParser::Multiplicity_boundsContext::Multiplicity_boundsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Multiplicity_boundsContext::SYMBOL_SQUARE_BRACKET_OPEN() {
  return getToken(KerMLParser::SYMBOL_SQUARE_BRACKET_OPEN, 0);
}

std::vector<KerMLParser::Multiplicity_expression_memberContext *> KerMLParser::Multiplicity_boundsContext::multiplicity_expression_member() {
  return getRuleContexts<KerMLParser::Multiplicity_expression_memberContext>();
}

KerMLParser::Multiplicity_expression_memberContext* KerMLParser::Multiplicity_boundsContext::multiplicity_expression_member(size_t i) {
  return getRuleContext<KerMLParser::Multiplicity_expression_memberContext>(i);
}

tree::TerminalNode* KerMLParser::Multiplicity_boundsContext::SYMBOL_SQUARE_BRACKET_CLOSE() {
  return getToken(KerMLParser::SYMBOL_SQUARE_BRACKET_CLOSE, 0);
}

tree::TerminalNode* KerMLParser::Multiplicity_boundsContext::SYMBOL_DDOT() {
  return getToken(KerMLParser::SYMBOL_DDOT, 0);
}


size_t KerMLParser::Multiplicity_boundsContext::getRuleIndex() const {
  return KerMLParser::RuleMultiplicity_bounds;
}

void KerMLParser::Multiplicity_boundsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMultiplicity_bounds(this);
}

void KerMLParser::Multiplicity_boundsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMultiplicity_bounds(this);
}

KerMLParser::Multiplicity_boundsContext* KerMLParser::multiplicity_bounds() {
  Multiplicity_boundsContext *_localctx = _tracker.createInstance<Multiplicity_boundsContext>(_ctx, getState());
  enterRule(_localctx, 478, KerMLParser::RuleMultiplicity_bounds);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1938);
    match(KerMLParser::SYMBOL_SQUARE_BRACKET_OPEN);
    setState(1942);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 196, _ctx)) {
    case 1: {
      setState(1939);
      multiplicity_expression_member();
      setState(1940);
      match(KerMLParser::SYMBOL_DDOT);
      break;
    }

    default:
      break;
    }
    setState(1944);
    multiplicity_expression_member();
    setState(1945);
    match(KerMLParser::SYMBOL_SQUARE_BRACKET_CLOSE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Multiplicity_expression_memberContext ------------------------------------------------------------------

KerMLParser::Multiplicity_expression_memberContext::Multiplicity_expression_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Internal_multiplicity_expression_memberContext* KerMLParser::Multiplicity_expression_memberContext::internal_multiplicity_expression_member() {
  return getRuleContext<KerMLParser::Internal_multiplicity_expression_memberContext>(0);
}


size_t KerMLParser::Multiplicity_expression_memberContext::getRuleIndex() const {
  return KerMLParser::RuleMultiplicity_expression_member;
}

void KerMLParser::Multiplicity_expression_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMultiplicity_expression_member(this);
}

void KerMLParser::Multiplicity_expression_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMultiplicity_expression_member(this);
}

KerMLParser::Multiplicity_expression_memberContext* KerMLParser::multiplicity_expression_member() {
  Multiplicity_expression_memberContext *_localctx = _tracker.createInstance<Multiplicity_expression_memberContext>(_ctx, getState());
  enterRule(_localctx, 480, KerMLParser::RuleMultiplicity_expression_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1947);
    internal_multiplicity_expression_member();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Internal_multiplicity_expression_memberContext ------------------------------------------------------------------

KerMLParser::Internal_multiplicity_expression_memberContext::Internal_multiplicity_expression_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Literal_expressionContext* KerMLParser::Internal_multiplicity_expression_memberContext::literal_expression() {
  return getRuleContext<KerMLParser::Literal_expressionContext>(0);
}

KerMLParser::Feature_reference_expressionContext* KerMLParser::Internal_multiplicity_expression_memberContext::feature_reference_expression() {
  return getRuleContext<KerMLParser::Feature_reference_expressionContext>(0);
}


size_t KerMLParser::Internal_multiplicity_expression_memberContext::getRuleIndex() const {
  return KerMLParser::RuleInternal_multiplicity_expression_member;
}

void KerMLParser::Internal_multiplicity_expression_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInternal_multiplicity_expression_member(this);
}

void KerMLParser::Internal_multiplicity_expression_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInternal_multiplicity_expression_member(this);
}

KerMLParser::Internal_multiplicity_expression_memberContext* KerMLParser::internal_multiplicity_expression_member() {
  Internal_multiplicity_expression_memberContext *_localctx = _tracker.createInstance<Internal_multiplicity_expression_memberContext>(_ctx, getState());
  enterRule(_localctx, 482, KerMLParser::RuleInternal_multiplicity_expression_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1951);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case KerMLParser::KEYWORD_FALSE:
      case KerMLParser::KEYWORD_TRUE:
      case KerMLParser::SYMBOL_STAR:
      case KerMLParser::SYMBOL_DOT:
      case KerMLParser::DECIMAL_VALUE:
      case KerMLParser::EXPONENTIAL_VALUE:
      case KerMLParser::STRING_VALUE: {
        setState(1949);
        literal_expression();
        break;
      }

      case KerMLParser::NAME: {
        setState(1950);
        feature_reference_expression();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MetaclassContext ------------------------------------------------------------------

KerMLParser::MetaclassContext::MetaclassContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::MetaclassContext::KEYWORD_METACLASS() {
  return getToken(KerMLParser::KEYWORD_METACLASS, 0);
}

KerMLParser::Type_bodyContext* KerMLParser::MetaclassContext::type_body() {
  return getRuleContext<KerMLParser::Type_bodyContext>(0);
}

KerMLParser::IdentificationContext* KerMLParser::MetaclassContext::identification() {
  return getRuleContext<KerMLParser::IdentificationContext>(0);
}

KerMLParser::Classifier_declarationContext* KerMLParser::MetaclassContext::classifier_declaration() {
  return getRuleContext<KerMLParser::Classifier_declarationContext>(0);
}

KerMLParser::Type_prefixContext* KerMLParser::MetaclassContext::type_prefix() {
  return getRuleContext<KerMLParser::Type_prefixContext>(0);
}

std::vector<tree::TerminalNode *> KerMLParser::MetaclassContext::NAME() {
  return getTokens(KerMLParser::NAME);
}

tree::TerminalNode* KerMLParser::MetaclassContext::NAME(size_t i) {
  return getToken(KerMLParser::NAME, i);
}

tree::TerminalNode* KerMLParser::MetaclassContext::SPECIALIZES() {
  return getToken(KerMLParser::SPECIALIZES, 0);
}


size_t KerMLParser::MetaclassContext::getRuleIndex() const {
  return KerMLParser::RuleMetaclass;
}

void KerMLParser::MetaclassContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMetaclass(this);
}

void KerMLParser::MetaclassContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMetaclass(this);
}

KerMLParser::MetaclassContext* KerMLParser::metaclass() {
  MetaclassContext *_localctx = _tracker.createInstance<MetaclassContext>(_ctx, getState());
  enterRule(_localctx, 484, KerMLParser::RuleMetaclass);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1954);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 198, _ctx)) {
    case 1: {
      setState(1953);
      type_prefix();
      break;
    }

    default:
      break;
    }
    setState(1956);
    match(KerMLParser::KEYWORD_METACLASS);
    setState(1959);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 199, _ctx)) {
    case 1: {
      setState(1957);
      identification();
      break;
    }

    case 2: {
      setState(1958);
      classifier_declaration();
      break;
    }

    default:
      break;
    }
    setState(1962);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::NAME) {
      setState(1961);
      match(KerMLParser::NAME);
    }
    setState(1966);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::SPECIALIZES) {
      setState(1964);
      match(KerMLParser::SPECIALIZES);
      setState(1965);
      match(KerMLParser::NAME);
    }
    setState(1968);
    type_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Prefix_metadata_annotationContext ------------------------------------------------------------------

KerMLParser::Prefix_metadata_annotationContext::Prefix_metadata_annotationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Prefix_metadata_annotationContext::SYMBOL_HASHTAG() {
  return getToken(KerMLParser::SYMBOL_HASHTAG, 0);
}

KerMLParser::Prefix_metadata_featureContext* KerMLParser::Prefix_metadata_annotationContext::prefix_metadata_feature() {
  return getRuleContext<KerMLParser::Prefix_metadata_featureContext>(0);
}


size_t KerMLParser::Prefix_metadata_annotationContext::getRuleIndex() const {
  return KerMLParser::RulePrefix_metadata_annotation;
}

void KerMLParser::Prefix_metadata_annotationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrefix_metadata_annotation(this);
}

void KerMLParser::Prefix_metadata_annotationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrefix_metadata_annotation(this);
}

KerMLParser::Prefix_metadata_annotationContext* KerMLParser::prefix_metadata_annotation() {
  Prefix_metadata_annotationContext *_localctx = _tracker.createInstance<Prefix_metadata_annotationContext>(_ctx, getState());
  enterRule(_localctx, 486, KerMLParser::RulePrefix_metadata_annotation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1970);
    match(KerMLParser::SYMBOL_HASHTAG);
    setState(1971);
    prefix_metadata_feature();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Prefix_metadata_memberContext ------------------------------------------------------------------

KerMLParser::Prefix_metadata_memberContext::Prefix_metadata_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Prefix_metadata_memberContext::SYMBOL_HASHTAG() {
  return getToken(KerMLParser::SYMBOL_HASHTAG, 0);
}

KerMLParser::Prefix_metadata_featureContext* KerMLParser::Prefix_metadata_memberContext::prefix_metadata_feature() {
  return getRuleContext<KerMLParser::Prefix_metadata_featureContext>(0);
}


size_t KerMLParser::Prefix_metadata_memberContext::getRuleIndex() const {
  return KerMLParser::RulePrefix_metadata_member;
}

void KerMLParser::Prefix_metadata_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrefix_metadata_member(this);
}

void KerMLParser::Prefix_metadata_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrefix_metadata_member(this);
}

KerMLParser::Prefix_metadata_memberContext* KerMLParser::prefix_metadata_member() {
  Prefix_metadata_memberContext *_localctx = _tracker.createInstance<Prefix_metadata_memberContext>(_ctx, getState());
  enterRule(_localctx, 488, KerMLParser::RulePrefix_metadata_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1973);
    match(KerMLParser::SYMBOL_HASHTAG);
    setState(1974);
    prefix_metadata_feature();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Prefix_metadata_featureContext ------------------------------------------------------------------

KerMLParser::Prefix_metadata_featureContext::Prefix_metadata_featureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Owned_feature_typingContext* KerMLParser::Prefix_metadata_featureContext::owned_feature_typing() {
  return getRuleContext<KerMLParser::Owned_feature_typingContext>(0);
}


size_t KerMLParser::Prefix_metadata_featureContext::getRuleIndex() const {
  return KerMLParser::RulePrefix_metadata_feature;
}

void KerMLParser::Prefix_metadata_featureContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrefix_metadata_feature(this);
}

void KerMLParser::Prefix_metadata_featureContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrefix_metadata_feature(this);
}

KerMLParser::Prefix_metadata_featureContext* KerMLParser::prefix_metadata_feature() {
  Prefix_metadata_featureContext *_localctx = _tracker.createInstance<Prefix_metadata_featureContext>(_ctx, getState());
  enterRule(_localctx, 490, KerMLParser::RulePrefix_metadata_feature);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1976);
    owned_feature_typing();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Metadata_featureContext ------------------------------------------------------------------

KerMLParser::Metadata_featureContext::Metadata_featureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Metadata_feature_declarationContext* KerMLParser::Metadata_featureContext::metadata_feature_declaration() {
  return getRuleContext<KerMLParser::Metadata_feature_declarationContext>(0);
}

tree::TerminalNode* KerMLParser::Metadata_featureContext::SYMBOL_AT() {
  return getToken(KerMLParser::SYMBOL_AT, 0);
}

tree::TerminalNode* KerMLParser::Metadata_featureContext::KEYWORD_METADATA() {
  return getToken(KerMLParser::KEYWORD_METADATA, 0);
}

tree::TerminalNode* KerMLParser::Metadata_featureContext::KEYWORD_ABOUT() {
  return getToken(KerMLParser::KEYWORD_ABOUT, 0);
}

std::vector<KerMLParser::AnnotationContext *> KerMLParser::Metadata_featureContext::annotation() {
  return getRuleContexts<KerMLParser::AnnotationContext>();
}

KerMLParser::AnnotationContext* KerMLParser::Metadata_featureContext::annotation(size_t i) {
  return getRuleContext<KerMLParser::AnnotationContext>(i);
}

std::vector<KerMLParser::Prefix_metadata_memberContext *> KerMLParser::Metadata_featureContext::prefix_metadata_member() {
  return getRuleContexts<KerMLParser::Prefix_metadata_memberContext>();
}

KerMLParser::Prefix_metadata_memberContext* KerMLParser::Metadata_featureContext::prefix_metadata_member(size_t i) {
  return getRuleContext<KerMLParser::Prefix_metadata_memberContext>(i);
}

tree::TerminalNode* KerMLParser::Metadata_featureContext::SYMBOL_COMMA() {
  return getToken(KerMLParser::SYMBOL_COMMA, 0);
}


size_t KerMLParser::Metadata_featureContext::getRuleIndex() const {
  return KerMLParser::RuleMetadata_feature;
}

void KerMLParser::Metadata_featureContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMetadata_feature(this);
}

void KerMLParser::Metadata_featureContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMetadata_feature(this);
}

KerMLParser::Metadata_featureContext* KerMLParser::metadata_feature() {
  Metadata_featureContext *_localctx = _tracker.createInstance<Metadata_featureContext>(_ctx, getState());
  enterRule(_localctx, 492, KerMLParser::RuleMetadata_feature);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1981);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == KerMLParser::SYMBOL_HASHTAG) {
      setState(1978);
      prefix_metadata_member();
      setState(1983);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1984);
    _la = _input->LA(1);
    if (!(_la == KerMLParser::KEYWORD_METADATA || _la == KerMLParser::SYMBOL_AT)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(1985);
    metadata_feature_declaration();

    setState(1986);
    match(KerMLParser::KEYWORD_ABOUT);
    setState(1987);
    annotation();

    setState(1988);
    match(KerMLParser::SYMBOL_COMMA);
    setState(1989);
    annotation();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Metadata_feature_declarationContext ------------------------------------------------------------------

KerMLParser::Metadata_feature_declarationContext::Metadata_feature_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Owned_feature_typingContext* KerMLParser::Metadata_feature_declarationContext::owned_feature_typing() {
  return getRuleContext<KerMLParser::Owned_feature_typingContext>(0);
}

KerMLParser::IdentificationContext* KerMLParser::Metadata_feature_declarationContext::identification() {
  return getRuleContext<KerMLParser::IdentificationContext>(0);
}

tree::TerminalNode* KerMLParser::Metadata_feature_declarationContext::SYMBOL_TYPED_BY() {
  return getToken(KerMLParser::SYMBOL_TYPED_BY, 0);
}

tree::TerminalNode* KerMLParser::Metadata_feature_declarationContext::KEYWORD_TYPED() {
  return getToken(KerMLParser::KEYWORD_TYPED, 0);
}

tree::TerminalNode* KerMLParser::Metadata_feature_declarationContext::KEYWORD_BY() {
  return getToken(KerMLParser::KEYWORD_BY, 0);
}


size_t KerMLParser::Metadata_feature_declarationContext::getRuleIndex() const {
  return KerMLParser::RuleMetadata_feature_declaration;
}

void KerMLParser::Metadata_feature_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMetadata_feature_declaration(this);
}

void KerMLParser::Metadata_feature_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMetadata_feature_declaration(this);
}

KerMLParser::Metadata_feature_declarationContext* KerMLParser::metadata_feature_declaration() {
  Metadata_feature_declarationContext *_localctx = _tracker.createInstance<Metadata_feature_declarationContext>(_ctx, getState());
  enterRule(_localctx, 494, KerMLParser::RuleMetadata_feature_declaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1997);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 204, _ctx)) {
    case 1: {
      setState(1991);
      identification();
      setState(1995);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case KerMLParser::SYMBOL_TYPED_BY: {
          setState(1992);
          match(KerMLParser::SYMBOL_TYPED_BY);
          break;
        }

        case KerMLParser::KEYWORD_TYPED: {
          setState(1993);
          match(KerMLParser::KEYWORD_TYPED);
          setState(1994);
          match(KerMLParser::KEYWORD_BY);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    default:
      break;
    }
    setState(1999);
    owned_feature_typing();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Metadata_bodyContext ------------------------------------------------------------------

KerMLParser::Metadata_bodyContext::Metadata_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Metadata_bodyContext::SYMBOL_STATEMENT_DELIMITER() {
  return getToken(KerMLParser::SYMBOL_STATEMENT_DELIMITER, 0);
}

tree::TerminalNode* KerMLParser::Metadata_bodyContext::SYMBOL_CURLY_BRACKET_OPEN() {
  return getToken(KerMLParser::SYMBOL_CURLY_BRACKET_OPEN, 0);
}

tree::TerminalNode* KerMLParser::Metadata_bodyContext::SYMBOL_CURLY_BRACKET_CLOSE() {
  return getToken(KerMLParser::SYMBOL_CURLY_BRACKET_CLOSE, 0);
}

std::vector<KerMLParser::Metadata_body_elementContext *> KerMLParser::Metadata_bodyContext::metadata_body_element() {
  return getRuleContexts<KerMLParser::Metadata_body_elementContext>();
}

KerMLParser::Metadata_body_elementContext* KerMLParser::Metadata_bodyContext::metadata_body_element(size_t i) {
  return getRuleContext<KerMLParser::Metadata_body_elementContext>(i);
}


size_t KerMLParser::Metadata_bodyContext::getRuleIndex() const {
  return KerMLParser::RuleMetadata_body;
}

void KerMLParser::Metadata_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMetadata_body(this);
}

void KerMLParser::Metadata_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMetadata_body(this);
}

KerMLParser::Metadata_bodyContext* KerMLParser::metadata_body() {
  Metadata_bodyContext *_localctx = _tracker.createInstance<Metadata_bodyContext>(_ctx, getState());
  enterRule(_localctx, 496, KerMLParser::RuleMetadata_body);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2010);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case KerMLParser::SYMBOL_STATEMENT_DELIMITER: {
        enterOuterAlt(_localctx, 1);
        setState(2001);
        match(KerMLParser::SYMBOL_STATEMENT_DELIMITER);
        break;
      }

      case KerMLParser::SYMBOL_CURLY_BRACKET_OPEN: {
        enterOuterAlt(_localctx, 2);
        setState(2002);
        match(KerMLParser::SYMBOL_CURLY_BRACKET_OPEN);
        setState(2006);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & -8223285919844612544) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 65)) & 36032138891721475) != 0) || _la == KerMLParser::SYMBOL_HASHTAG

        || _la == KerMLParser::NAME) {
          setState(2003);
          metadata_body_element();
          setState(2008);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(2009);
        match(KerMLParser::SYMBOL_CURLY_BRACKET_CLOSE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Metadata_body_elementContext ------------------------------------------------------------------

KerMLParser::Metadata_body_elementContext::Metadata_body_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Non_feature_memberContext* KerMLParser::Metadata_body_elementContext::non_feature_member() {
  return getRuleContext<KerMLParser::Non_feature_memberContext>(0);
}

KerMLParser::Metadata_body_feature_memberContext* KerMLParser::Metadata_body_elementContext::metadata_body_feature_member() {
  return getRuleContext<KerMLParser::Metadata_body_feature_memberContext>(0);
}

KerMLParser::Alias_memberContext* KerMLParser::Metadata_body_elementContext::alias_member() {
  return getRuleContext<KerMLParser::Alias_memberContext>(0);
}

KerMLParser::Import_declarationContext* KerMLParser::Metadata_body_elementContext::import_declaration() {
  return getRuleContext<KerMLParser::Import_declarationContext>(0);
}


size_t KerMLParser::Metadata_body_elementContext::getRuleIndex() const {
  return KerMLParser::RuleMetadata_body_element;
}

void KerMLParser::Metadata_body_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMetadata_body_element(this);
}

void KerMLParser::Metadata_body_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMetadata_body_element(this);
}

KerMLParser::Metadata_body_elementContext* KerMLParser::metadata_body_element() {
  Metadata_body_elementContext *_localctx = _tracker.createInstance<Metadata_body_elementContext>(_ctx, getState());
  enterRule(_localctx, 498, KerMLParser::RuleMetadata_body_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2016);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 207, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2012);
      non_feature_member();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2013);
      metadata_body_feature_member();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2014);
      alias_member();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2015);
      import_declaration();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Metadata_body_feature_memberContext ------------------------------------------------------------------

KerMLParser::Metadata_body_feature_memberContext::Metadata_body_feature_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Metadata_body_featureContext* KerMLParser::Metadata_body_feature_memberContext::metadata_body_feature() {
  return getRuleContext<KerMLParser::Metadata_body_featureContext>(0);
}


size_t KerMLParser::Metadata_body_feature_memberContext::getRuleIndex() const {
  return KerMLParser::RuleMetadata_body_feature_member;
}

void KerMLParser::Metadata_body_feature_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMetadata_body_feature_member(this);
}

void KerMLParser::Metadata_body_feature_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMetadata_body_feature_member(this);
}

KerMLParser::Metadata_body_feature_memberContext* KerMLParser::metadata_body_feature_member() {
  Metadata_body_feature_memberContext *_localctx = _tracker.createInstance<Metadata_body_feature_memberContext>(_ctx, getState());
  enterRule(_localctx, 500, KerMLParser::RuleMetadata_body_feature_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2018);
    metadata_body_feature();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Metadata_body_featureContext ------------------------------------------------------------------

KerMLParser::Metadata_body_featureContext::Metadata_body_featureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Owned_redefinitionContext* KerMLParser::Metadata_body_featureContext::owned_redefinition() {
  return getRuleContext<KerMLParser::Owned_redefinitionContext>(0);
}

KerMLParser::Metadata_bodyContext* KerMLParser::Metadata_body_featureContext::metadata_body() {
  return getRuleContext<KerMLParser::Metadata_bodyContext>(0);
}

tree::TerminalNode* KerMLParser::Metadata_body_featureContext::KEYWORD_FEATURE() {
  return getToken(KerMLParser::KEYWORD_FEATURE, 0);
}

KerMLParser::Feature_specialization_partContext* KerMLParser::Metadata_body_featureContext::feature_specialization_part() {
  return getRuleContext<KerMLParser::Feature_specialization_partContext>(0);
}

KerMLParser::Value_partContext* KerMLParser::Metadata_body_featureContext::value_part() {
  return getRuleContext<KerMLParser::Value_partContext>(0);
}

tree::TerminalNode* KerMLParser::Metadata_body_featureContext::SYMBOL_REDEFINES() {
  return getToken(KerMLParser::SYMBOL_REDEFINES, 0);
}

tree::TerminalNode* KerMLParser::Metadata_body_featureContext::KEYWORD_REDEFINES() {
  return getToken(KerMLParser::KEYWORD_REDEFINES, 0);
}


size_t KerMLParser::Metadata_body_featureContext::getRuleIndex() const {
  return KerMLParser::RuleMetadata_body_feature;
}

void KerMLParser::Metadata_body_featureContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMetadata_body_feature(this);
}

void KerMLParser::Metadata_body_featureContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMetadata_body_feature(this);
}

KerMLParser::Metadata_body_featureContext* KerMLParser::metadata_body_feature() {
  Metadata_body_featureContext *_localctx = _tracker.createInstance<Metadata_body_featureContext>(_ctx, getState());
  enterRule(_localctx, 502, KerMLParser::RuleMetadata_body_feature);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2021);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::KEYWORD_FEATURE) {
      setState(2020);
      match(KerMLParser::KEYWORD_FEATURE);
    }
    setState(2024);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::KEYWORD_REDEFINES

    || _la == KerMLParser::SYMBOL_REDEFINES) {
      setState(2023);
      _la = _input->LA(1);
      if (!(_la == KerMLParser::KEYWORD_REDEFINES

      || _la == KerMLParser::SYMBOL_REDEFINES)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(2026);
    owned_redefinition();
    setState(2028);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 54043195528446068) != 0) || _la == KerMLParser::KEYWORD_OUT

    || _la == KerMLParser::SYMBOL_SQUARE_BRACKET_OPEN) {
      setState(2027);
      feature_specialization_part();
    }
    setState(2031);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::KEYWORD_DEFAULT || _la == KerMLParser::SYMBOL_DEF_ASSIGN

    || _la == KerMLParser::SYMBOL_EQUALS) {
      setState(2030);
      value_part();
    }
    setState(2033);
    metadata_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PackageContext ------------------------------------------------------------------

KerMLParser::PackageContext::PackageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Package_declarationContext* KerMLParser::PackageContext::package_declaration() {
  return getRuleContext<KerMLParser::Package_declarationContext>(0);
}

KerMLParser::Package_bodyContext* KerMLParser::PackageContext::package_body() {
  return getRuleContext<KerMLParser::Package_bodyContext>(0);
}

std::vector<KerMLParser::Prefix_metadata_memberContext *> KerMLParser::PackageContext::prefix_metadata_member() {
  return getRuleContexts<KerMLParser::Prefix_metadata_memberContext>();
}

KerMLParser::Prefix_metadata_memberContext* KerMLParser::PackageContext::prefix_metadata_member(size_t i) {
  return getRuleContext<KerMLParser::Prefix_metadata_memberContext>(i);
}


size_t KerMLParser::PackageContext::getRuleIndex() const {
  return KerMLParser::RulePackage;
}

void KerMLParser::PackageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPackage(this);
}

void KerMLParser::PackageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPackage(this);
}

KerMLParser::PackageContext* KerMLParser::package() {
  PackageContext *_localctx = _tracker.createInstance<PackageContext>(_ctx, getState());
  enterRule(_localctx, 504, KerMLParser::RulePackage);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2038);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == KerMLParser::SYMBOL_HASHTAG) {
      setState(2035);
      prefix_metadata_member();
      setState(2040);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2041);
    package_declaration();
    setState(2042);
    package_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Library_packageContext ------------------------------------------------------------------

KerMLParser::Library_packageContext::Library_packageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Library_packageContext::KEYWORD_LIBRARY() {
  return getToken(KerMLParser::KEYWORD_LIBRARY, 0);
}

KerMLParser::Package_declarationContext* KerMLParser::Library_packageContext::package_declaration() {
  return getRuleContext<KerMLParser::Package_declarationContext>(0);
}

KerMLParser::Package_bodyContext* KerMLParser::Library_packageContext::package_body() {
  return getRuleContext<KerMLParser::Package_bodyContext>(0);
}

tree::TerminalNode* KerMLParser::Library_packageContext::KEYWORD_STANDARD() {
  return getToken(KerMLParser::KEYWORD_STANDARD, 0);
}

std::vector<KerMLParser::Prefix_metadata_memberContext *> KerMLParser::Library_packageContext::prefix_metadata_member() {
  return getRuleContexts<KerMLParser::Prefix_metadata_memberContext>();
}

KerMLParser::Prefix_metadata_memberContext* KerMLParser::Library_packageContext::prefix_metadata_member(size_t i) {
  return getRuleContext<KerMLParser::Prefix_metadata_memberContext>(i);
}


size_t KerMLParser::Library_packageContext::getRuleIndex() const {
  return KerMLParser::RuleLibrary_package;
}

void KerMLParser::Library_packageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLibrary_package(this);
}

void KerMLParser::Library_packageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLibrary_package(this);
}

KerMLParser::Library_packageContext* KerMLParser::library_package() {
  Library_packageContext *_localctx = _tracker.createInstance<Library_packageContext>(_ctx, getState());
  enterRule(_localctx, 506, KerMLParser::RuleLibrary_package);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2045);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == KerMLParser::KEYWORD_STANDARD) {
      setState(2044);
      match(KerMLParser::KEYWORD_STANDARD);
    }
    setState(2047);
    match(KerMLParser::KEYWORD_LIBRARY);
    setState(2051);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == KerMLParser::SYMBOL_HASHTAG) {
      setState(2048);
      prefix_metadata_member();
      setState(2053);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2054);
    package_declaration();
    setState(2055);
    package_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Package_declarationContext ------------------------------------------------------------------

KerMLParser::Package_declarationContext::Package_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Package_declarationContext::KEYWORD_PACKAGE() {
  return getToken(KerMLParser::KEYWORD_PACKAGE, 0);
}

KerMLParser::IdentificationContext* KerMLParser::Package_declarationContext::identification() {
  return getRuleContext<KerMLParser::IdentificationContext>(0);
}


size_t KerMLParser::Package_declarationContext::getRuleIndex() const {
  return KerMLParser::RulePackage_declaration;
}

void KerMLParser::Package_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPackage_declaration(this);
}

void KerMLParser::Package_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPackage_declaration(this);
}

KerMLParser::Package_declarationContext* KerMLParser::package_declaration() {
  Package_declarationContext *_localctx = _tracker.createInstance<Package_declarationContext>(_ctx, getState());
  enterRule(_localctx, 508, KerMLParser::RulePackage_declaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2057);
    match(KerMLParser::KEYWORD_PACKAGE);
    setState(2058);
    identification();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Package_bodyContext ------------------------------------------------------------------

KerMLParser::Package_bodyContext::Package_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* KerMLParser::Package_bodyContext::SYMBOL_STATEMENT_DELIMITER() {
  return getToken(KerMLParser::SYMBOL_STATEMENT_DELIMITER, 0);
}

tree::TerminalNode* KerMLParser::Package_bodyContext::SYMBOL_CURLY_BRACKET_OPEN() {
  return getToken(KerMLParser::SYMBOL_CURLY_BRACKET_OPEN, 0);
}

tree::TerminalNode* KerMLParser::Package_bodyContext::SYMBOL_CURLY_BRACKET_CLOSE() {
  return getToken(KerMLParser::SYMBOL_CURLY_BRACKET_CLOSE, 0);
}

std::vector<KerMLParser::Namespace_body_elementContext *> KerMLParser::Package_bodyContext::namespace_body_element() {
  return getRuleContexts<KerMLParser::Namespace_body_elementContext>();
}

KerMLParser::Namespace_body_elementContext* KerMLParser::Package_bodyContext::namespace_body_element(size_t i) {
  return getRuleContext<KerMLParser::Namespace_body_elementContext>(i);
}

std::vector<KerMLParser::Element_filter_memberContext *> KerMLParser::Package_bodyContext::element_filter_member() {
  return getRuleContexts<KerMLParser::Element_filter_memberContext>();
}

KerMLParser::Element_filter_memberContext* KerMLParser::Package_bodyContext::element_filter_member(size_t i) {
  return getRuleContext<KerMLParser::Element_filter_memberContext>(i);
}

std::vector<KerMLParser::ElementContext *> KerMLParser::Package_bodyContext::element() {
  return getRuleContexts<KerMLParser::ElementContext>();
}

KerMLParser::ElementContext* KerMLParser::Package_bodyContext::element(size_t i) {
  return getRuleContext<KerMLParser::ElementContext>(i);
}


size_t KerMLParser::Package_bodyContext::getRuleIndex() const {
  return KerMLParser::RulePackage_body;
}

void KerMLParser::Package_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPackage_body(this);
}

void KerMLParser::Package_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPackage_body(this);
}

KerMLParser::Package_bodyContext* KerMLParser::package_body() {
  Package_bodyContext *_localctx = _tracker.createInstance<Package_bodyContext>(_ctx, getState());
  enterRule(_localctx, 510, KerMLParser::RulePackage_body);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2071);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case KerMLParser::SYMBOL_STATEMENT_DELIMITER: {
        enterOuterAlt(_localctx, 1);
        setState(2060);
        match(KerMLParser::SYMBOL_STATEMENT_DELIMITER);
        break;
      }

      case KerMLParser::SYMBOL_CURLY_BRACKET_OPEN: {
        enterOuterAlt(_localctx, 2);
        setState(2061);
        match(KerMLParser::SYMBOL_CURLY_BRACKET_OPEN);
        setState(2065); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(2065);
          _errHandler->sync(this);
          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 215, _ctx)) {
          case 1: {
            setState(2062);
            namespace_body_element();
            break;
          }

          case 2: {
            setState(2063);
            element_filter_member();
            break;
          }

          case 3: {
            setState(2064);
            element();
            break;
          }

          default:
            break;
          }
          setState(2067); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & -5773283293118872000) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 64)) & 78702848638471) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 129)) & 67108867) != 0));
        setState(2069);
        match(KerMLParser::SYMBOL_CURLY_BRACKET_CLOSE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Element_filter_memberContext ------------------------------------------------------------------

KerMLParser::Element_filter_memberContext::Element_filter_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

KerMLParser::Member_prefixContext* KerMLParser::Element_filter_memberContext::member_prefix() {
  return getRuleContext<KerMLParser::Member_prefixContext>(0);
}

tree::TerminalNode* KerMLParser::Element_filter_memberContext::KEYWORD_FILTER() {
  return getToken(KerMLParser::KEYWORD_FILTER, 0);
}

KerMLParser::Owned_expressionContext* KerMLParser::Element_filter_memberContext::owned_expression() {
  return getRuleContext<KerMLParser::Owned_expressionContext>(0);
}

tree::TerminalNode* KerMLParser::Element_filter_memberContext::SYMBOL_STATEMENT_DELIMITER() {
  return getToken(KerMLParser::SYMBOL_STATEMENT_DELIMITER, 0);
}


size_t KerMLParser::Element_filter_memberContext::getRuleIndex() const {
  return KerMLParser::RuleElement_filter_member;
}

void KerMLParser::Element_filter_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElement_filter_member(this);
}

void KerMLParser::Element_filter_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElement_filter_member(this);
}

KerMLParser::Element_filter_memberContext* KerMLParser::element_filter_member() {
  Element_filter_memberContext *_localctx = _tracker.createInstance<Element_filter_memberContext>(_ctx, getState());
  enterRule(_localctx, 512, KerMLParser::RuleElement_filter_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2073);
    member_prefix();
    setState(2074);
    match(KerMLParser::KEYWORD_FILTER);
    setState(2075);
    owned_expression();
    setState(2076);
    match(KerMLParser::SYMBOL_STATEMENT_DELIMITER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Meta_assignmentContext ------------------------------------------------------------------

KerMLParser::Meta_assignmentContext::Meta_assignmentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<KerMLParser::Qualified_nameContext *> KerMLParser::Meta_assignmentContext::qualified_name() {
  return getRuleContexts<KerMLParser::Qualified_nameContext>();
}

KerMLParser::Qualified_nameContext* KerMLParser::Meta_assignmentContext::qualified_name(size_t i) {
  return getRuleContext<KerMLParser::Qualified_nameContext>(i);
}

tree::TerminalNode* KerMLParser::Meta_assignmentContext::SYMBOL_ASSIGN() {
  return getToken(KerMLParser::SYMBOL_ASSIGN, 0);
}

KerMLParser::IdentificationContext* KerMLParser::Meta_assignmentContext::identification() {
  return getRuleContext<KerMLParser::IdentificationContext>(0);
}

tree::TerminalNode* KerMLParser::Meta_assignmentContext::SYMBOL_STATEMENT_DELIMITER() {
  return getToken(KerMLParser::SYMBOL_STATEMENT_DELIMITER, 0);
}


size_t KerMLParser::Meta_assignmentContext::getRuleIndex() const {
  return KerMLParser::RuleMeta_assignment;
}

void KerMLParser::Meta_assignmentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMeta_assignment(this);
}

void KerMLParser::Meta_assignmentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<KerMLListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMeta_assignment(this);
}

KerMLParser::Meta_assignmentContext* KerMLParser::meta_assignment() {
  Meta_assignmentContext *_localctx = _tracker.createInstance<Meta_assignmentContext>(_ctx, getState());
  enterRule(_localctx, 514, KerMLParser::RuleMeta_assignment);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2078);
    qualified_name();
    setState(2079);
    match(KerMLParser::SYMBOL_ASSIGN);
    setState(2080);
    identification();
    setState(2081);
    match(KerMLParser::T__0);
    setState(2082);
    qualified_name();
    setState(2083);
    match(KerMLParser::SYMBOL_STATEMENT_DELIMITER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

void KerMLParser::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  kermlParserInitialize();
#else
  ::antlr4::internal::call_once(kermlParserOnceFlag, kermlParserInitialize);
#endif
}
