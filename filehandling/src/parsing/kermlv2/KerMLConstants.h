//
// Created by Moritz Herzog on 30.04.25.
//

#ifndef SYSML_KERMLCONSTANTS_H
#define SYSML_KERMLCONSTANTS_H

#include <vector>
#include <string>

namespace KerML::Parser {
    enum Keywords {
        KEYWORD_ABOUT,
        KEYWORD_ABSTRACT,
        KEYWORD_ALIAS,
        KEYWORD_ALL,
        KEYWORD_AND,
        KEYWORD_AS,
        KEYWORD_ASSOC,
        KEYWORD_BEHAVIOR,
        KEYWORD_BINDING,
        KEYWORD_BOOL,
        KEYWORD_BY,
        KEYWORD_CHAINS,
        KEYWORD_CLASS,
        KEYWORD_CLASSIFIER,
        KEYWORD_COMMENT,
        KEYWORD_COMPOSITE,
        KEYWORD_CONJUGATE,
        KEYWORD_CONJUGATES,
        KEYWORD_CONJUGATION,
        KEYWORD_CONNECTOR,
        KEYWORD_DATATYPE,
        KEYWORD_DEFAULT,
        KEYWORD_DEPENDENCY,
        KEYWORD_DERIVED,
        KEYWORD_DIFFERENCES,
        KEYWORD_DISJOINING,
        KEYWORD_DISJOINT,
        KEYWORD_DOC,
        KEYWORD_ELSE,
        KEYWORD_END,
        KEYWORD_EXPR,
        KEYWORD_FALSE,
        KEYWORD_FEATURE,
        KEYWORD_FEATURED,
        KEYWORD_FEATURING,
        KEYWORD_FILTER,
        KEYWORD_FIRST,
        KEYWORD_FLOW,
        KEYWORD_FOR,
        KEYWORD_FROM,
        KEYWORD_FUNCTION,
        KEYWORD_HASTYPE,
        KEYWORD_IF,
        KEYWORD_INTERSECTS,
        KEYWORD_IMPLIES,
        KEYWORD_IMPORT,
        KEYWORD_IN,
        KEYWORD_INOUT,
        KEYWORD_INTERACTION,
        KEYWORD_INV,
        KEYWORD_INVERSE,
        KEYWORD_INVERTING,
        KEYWORD_ISTYPE,
        KEYWORD_LANGUAGE,
        KEYWORD_MEMBER,
        KEYWORD_METACLASS,
        KEYWORD_METADATA,
        KEYWORD_MULTIPLICITY,
        KEYWORD_NAMESPACE,
        KEYWORD_NONUNIQUE,
        KEYWORD_NOT,
        KEYWORD_NULL,
        KEYWORD_OF,
        KEYWORD_OR,
        KEYWORD_ORDERED,
        KEYWORD_OUT,
        KEYWORD_PACKAGE,
        KEYWORD_PORTION,
        KEYWORD_PREDICATE,
        KEYWORD_PRIVATE,
        KEYWORD_PROTECTED,
        KEYWORD_PUBLIC,
        KEYWORD_READONLY,
        KEYWORD_REDEFINES,
        KEYWORD_REDEFINITION,
        KEYWORD_REFERENCES,
        KEYWORD_REP,
        KEYWORD_RETURN,
        KEYWORD_SPECILIZATION,
        KEYWORD_SPECIALIZES,
        KEYWORD_STEP,
        KEYWORD_STRUCT,
        KEYWORD_SUBCLASSIFIER,
        KEYWORD_SUBSET,
        KEYWORD_SUBSETS,
        KEYWORD_SUBTYPE,
        KEYWORD_SUCCSESSION,
        KEYWORD_THEN,
        KEYWORD_TO,
        KEYWORD_TRUE,
        KEYWORD_TYPE,
        KEYWORD_TYPED,
        KEYWORD_TYPING,
        KEYWORD_UNIONS,
        KEYWORD_XOR,
        KEYWORD_COUNT
    };

    enum Symbols {
        SYMBOL_COMMENT_BLOCK_START,
        SYMBOL_NOTE_BLOCK_START,
        SYMBOL_COMMENT_BLOCK_END,
        SYMBOL_STATEMENT_DELIMITER,
        SYMBOL_STAR,
        SYMBOL_NAMESPACE_SUBSET,
        SYMBOL_TYPED_BY,
        SYMBOL_SPECIALIZES,
        SYMBOL_REFERENCES,
        SYMBOL_REDEFINES,
        SYMBOL_CONJUNGATES,
        SYMBOL_ROUND_BRACKET_OPEN,
        SYMBOL_ROUND_BRACKET_CLOSE,
        SYMBOL_CURLY_BRACKET_OPEN,
        SYMBOL_CURLY_BRACKET_CLOSE,
        SYMBOL_SQUARE_BRACKET_OPEN,
        SYMBOL_SQUARE_BRACKET_CLOSE,
        SYMBOL_COMMA,
        SYMBOL_AT,
        SYMBOL_HASHTAG,
        SYMBOL_MOD,
        SYMBOL_AND,
        SYMBOL_UPPER,
        SYMBOL_VERTICAL_LINE,
        SYMBOL_DOUBLE_STAR,
        SYMBOL_PLUS,
        SYMBOL_MINUS,
        SYMBOL_SLASH,
        SYMBOL_ARROOW,
        SYMBOL_DOT,
        SYMBOL_DDOT,
        SYMBOL_SMALLER,
        SYMBOL_SMALLER_EQUAL,
        SYMBOL_ASSIGN,
        SYMBOL_DEF_ASSIGN,
        SYMBOL_EQUALS,
        SYMBOL_IFF_EQUALS,
        SYMBOL_NOT_EQUALS,
        SYMBOL_IFF_NOT_EQUALS,
        SYMBOL_GREATER,
        SYMBOL_GREATER_EQUALS,
        SYMBOL_QUESTION,
        SYMBOL_DQUESTION,
        SYMBOL_DOT_QUESTION,
        SYMBOL_COUNT
    };

    class Constants {
    public:
    private:
        std::vector<std::string> KeywordVector = {
            "about",
                "abstract",
                "alias",
                "all",
                "and",
                "as",
                "assoc",
                "behavior",
                "binding",
                "bool",
                "by",
                "chains",
                "class",
                "classifier",
                "comment",
                "composite",
                "conjugate",
                "conjugates",
                "conjugation",
                "connector",
                "datatype",
                "default",
                "dependency",
                "derived",
                "differences",
                "disjoining",
                "disjoint",
                "doc",
                "else",
                "end",
                "expr",
                "false",
                "feature",
                "featured",
                "featuring",
                "filter",
                "first",
                "flow",
                "for",
                "from",
                "function",
                "hastype",
                "if",
                "intersects",
                "implies",
                "import",
                "in",
                "inout",
                "interaction",
                "inv",
                "inverse",
                "inverting",
                "istype",
                "language",
                "member",
                "metaclass",
                "metadata",
                "multiplicity",
                "namespace",
                "nonunique",
                "not",
                "null",
                "of",
                "or",
                "ordered",
                "out",
                "package",
                "potion",
                "predicate",
                "private",
                "protected",
                "public",
                "readonly",
                "redefines",
                "redefinition",
                "references",
                "rep",
                "return",
                "specialization",
                "specializes",
                "step",
                "struct",
                "subsclassifier",
                "subset",
                "subsets",
                "subtype",
                "succession",
                "then",
                "to",
                "true",
                "type",
                "typed",
                "typing",
                "unions",
                "xor"
        };
        std::vector<std::string> SymbolVector = {
                "/*",
        "//*",
        "*/",
        ",",
        "*",
        "::",
        ":",
        ":>",
        "::>",
        ":>>",
        "~",
        "(",
        ")",
        "{",
        "}",
        "[",
        "]",
        ",",
        "@",
        "#",
        "%",
        "&",
        "^",
        "|",
        "**",
        "+",
        "-",
        "/",
        "->",
        ".",
        "..",
        "<",
        "<=",
        "=",
        ":=",
        "==",
        "===",
        "!=",
        "!==",
        ">",
        ">=",
        "?",
        "??",
        ".?"
        };
    };
}

#endif //SYSML_KERMLCONSTANTS_H
